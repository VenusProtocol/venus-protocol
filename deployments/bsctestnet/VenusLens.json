{
  "address": "0xc10c9f020cb3091c28d16d5ad62C4A73C043785b",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidOperationForCorePool",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "poolId",
          "type": "uint96"
        }
      ],
      "name": "PoolDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BLOCKS_PER_DAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VTOKEN_ACTIONS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ComptrollerInterface",
          "name": "comptroller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAccountLimits",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract VToken[]",
              "name": "markets",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "shortfall",
              "type": "uint256"
            }
          ],
          "internalType": "struct VenusLens.AccountLimits",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ComptrollerInterface",
          "name": "comptroller",
          "type": "address"
        }
      ],
      "name": "getAllPoolsData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint96",
              "name": "poolId",
              "type": "uint96"
            },
            {
              "internalType": "string",
              "name": "label",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "uint96",
                  "name": "poolId",
                  "type": "uint96"
                },
                {
                  "internalType": "string",
                  "name": "poolLabel",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "vToken",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "isListed",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "collateralFactor",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "isVenus",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "liquidationThreshold",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "liquidationIncentive",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "isBorrowAllowed",
                  "type": "bool"
                }
              ],
              "internalType": "struct VenusLens.MarketData[]",
              "name": "markets",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct VenusLens.PoolWithMarkets[]",
          "name": "poolsData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "comptrollerAddress",
          "type": "address"
        }
      ],
      "name": "getDailyXVS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "poolId",
          "type": "uint96"
        },
        {
          "internalType": "contract ComptrollerInterface",
          "name": "comptroller",
          "type": "address"
        }
      ],
      "name": "getMarketsDataByPool",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint96",
              "name": "poolId",
              "type": "uint96"
            },
            {
              "internalType": "string",
              "name": "poolLabel",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "vToken",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isListed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "collateralFactor",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isVenus",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "liquidationThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationIncentive",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isBorrowAllowed",
              "type": "bool"
            }
          ],
          "internalType": "struct VenusLens.MarketData[]",
          "name": "result",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IXVS",
          "name": "xvs",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint32[]",
          "name": "blockNumbers",
          "type": "uint32[]"
        }
      ],
      "name": "getVenusVotes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "blockNumber",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votes",
              "type": "uint256"
            }
          ],
          "internalType": "struct VenusLens.VenusVotes[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IXVS",
          "name": "xvs",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getXVSBalanceMetadata",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votes",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            }
          ],
          "internalType": "struct VenusLens.XVSBalanceMetadata",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IXVS",
          "name": "xvs",
          "type": "address"
        },
        {
          "internalType": "contract ComptrollerInterface",
          "name": "comptroller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getXVSBalanceMetadataExt",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votes",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "allocated",
              "type": "uint256"
            }
          ],
          "internalType": "struct VenusLens.XVSBalanceMetadataExt",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "contract ComptrollerInterface",
          "name": "comptroller",
          "type": "address"
        }
      ],
      "name": "pendingRewards",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "distributorAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "rewardTokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalRewards",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "vTokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct VenusLens.PendingReward[]",
              "name": "pendingRewards",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct VenusLens.RewardSummary",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract VToken",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "vTokenBalances",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "vToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowBalanceCurrent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceOfUnderlying",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenAllowance",
              "type": "uint256"
            }
          ],
          "internalType": "struct VenusLens.VTokenBalances",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract VToken[]",
          "name": "vTokens",
          "type": "address[]"
        },
        {
          "internalType": "address payable",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "vTokenBalancesAll",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "vToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowBalanceCurrent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceOfUnderlying",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenAllowance",
              "type": "uint256"
            }
          ],
          "internalType": "struct VenusLens.VTokenBalances[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract VToken",
          "name": "vToken",
          "type": "address"
        }
      ],
      "name": "vTokenMetadata",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "vToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "exchangeRateCurrent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyRatePerBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowRatePerBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserveFactorMantissa",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBorrows",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalReserves",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalCash",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isListed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "collateralFactorMantissa",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "underlyingAssetAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "vTokenDecimals",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "underlyingDecimals",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "venusSupplySpeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "venusBorrowSpeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dailySupplyXvs",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dailyBorrowXvs",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pausedActions",
              "type": "uint256"
            }
          ],
          "internalType": "struct VenusLens.VTokenMetadata",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract VToken[]",
          "name": "vTokens",
          "type": "address[]"
        }
      ],
      "name": "vTokenMetadataAll",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "vToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "exchangeRateCurrent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyRatePerBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowRatePerBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserveFactorMantissa",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBorrows",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalReserves",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalCash",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isListed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "collateralFactorMantissa",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "underlyingAssetAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "vTokenDecimals",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "underlyingDecimals",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "venusSupplySpeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "venusBorrowSpeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dailySupplyXvs",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dailyBorrowXvs",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pausedActions",
              "type": "uint256"
            }
          ],
          "internalType": "struct VenusLens.VTokenMetadata[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract VToken",
          "name": "vToken",
          "type": "address"
        }
      ],
      "name": "vTokenUnderlyingPrice",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "vToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "underlyingPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct VenusLens.VTokenUnderlyingPrice",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract VToken[]",
          "name": "vTokens",
          "type": "address[]"
        }
      ],
      "name": "vTokenUnderlyingPriceAll",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "vToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "underlyingPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct VenusLens.VTokenUnderlyingPrice[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa4a0a8b33a957c565ae306dae1dee363661eaa95852acfd701046a93bdb20147",
  "receipt": {
    "to": null,
    "from": "0xe2a089cA69a90f1E27E723EFD339Cff4c4701AcC",
    "contractAddress": "0xc10c9f020cb3091c28d16d5ad62C4A73C043785b",
    "transactionIndex": 0,
    "gasUsed": "3664555",
    "logsBloom": "0x
    "blockHash": "0x24e551cf03a367a1a79403f1a71f7dca10332c0dc1f90f0c7c54673827af9202",
    "transactionHash": "0xa4a0a8b33a957c565ae306dae1dee363661eaa95852acfd701046a93bdb20147",
    "logs": [],
    "blockNumber": 65430563,
    "cumulativeGasUsed": "3664555",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "044dc7a340dfc156c37565adf2cf641a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidOperationForCorePool\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"poolId\",\"type\":\"uint96\"}],\"name\":\"PoolDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BLOCKS_PER_DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VTOKEN_ACTIONS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountLimits\",\"outputs\":[{\"components\":[{\"internalType\":\"contract VToken[]\",\"name\":\"markets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shortfall\",\"type\":\"uint256\"}],\"internalType\":\"struct VenusLens.AccountLimits\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"comptroller\",\"type\":\"address\"}],\"name\":\"getAllPoolsData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint96\",\"name\":\"poolId\",\"type\":\"uint96\"},{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint96\",\"name\":\"poolId\",\"type\":\"uint96\"},{\"internalType\":\"string\",\"name\":\"poolLabel\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isVenus\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationIncentive\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isBorrowAllowed\",\"type\":\"bool\"}],\"internalType\":\"struct VenusLens.MarketData[]\",\"name\":\"markets\",\"type\":\"tuple[]\"}],\"internalType\":\"struct VenusLens.PoolWithMarkets[]\",\"name\":\"poolsData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"comptrollerAddress\",\"type\":\"address\"}],\"name\":\"getDailyXVS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"poolId\",\"type\":\"uint96\"},{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"comptroller\",\"type\":\"address\"}],\"name\":\"getMarketsDataByPool\",\"outputs\":[{\"components\":[{\"internalType\":\"uint96\",\"name\":\"poolId\",\"type\":\"uint96\"},{\"internalType\":\"string\",\"name\":\"poolLabel\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isVenus\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationIncentive\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isBorrowAllowed\",\"type\":\"bool\"}],\"internalType\":\"struct VenusLens.MarketData[]\",\"name\":\"result\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IXVS\",\"name\":\"xvs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"blockNumbers\",\"type\":\"uint32[]\"}],\"name\":\"getVenusVotes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"internalType\":\"struct VenusLens.VenusVotes[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IXVS\",\"name\":\"xvs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getXVSBalanceMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"internalType\":\"struct VenusLens.XVSBalanceMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IXVS\",\"name\":\"xvs\",\"type\":\"address\"},{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getXVSBalanceMetadataExt\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocated\",\"type\":\"uint256\"}],\"internalType\":\"struct VenusLens.XVSBalanceMetadataExt\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"comptroller\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"distributorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"vTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct VenusLens.PendingReward[]\",\"name\":\"pendingRewards\",\"type\":\"tuple[]\"}],\"internalType\":\"struct VenusLens.RewardSummary\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract VToken\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"vTokenBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowBalanceCurrent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOfUnderlying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAllowance\",\"type\":\"uint256\"}],\"internalType\":\"struct VenusLens.VTokenBalances\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract VToken[]\",\"name\":\"vTokens\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"vTokenBalancesAll\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowBalanceCurrent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOfUnderlying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAllowance\",\"type\":\"uint256\"}],\"internalType\":\"struct VenusLens.VTokenBalances[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract VToken\",\"name\":\"vToken\",\"type\":\"address\"}],\"name\":\"vTokenMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRateCurrent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyRatePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowRatePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCash\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"underlyingAssetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vTokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"venusSupplySpeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"venusBorrowSpeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailySupplyXvs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyBorrowXvs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pausedActions\",\"type\":\"uint256\"}],\"internalType\":\"struct VenusLens.VTokenMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract VToken[]\",\"name\":\"vTokens\",\"type\":\"address[]\"}],\"name\":\"vTokenMetadataAll\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRateCurrent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyRatePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowRatePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCash\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"underlyingAssetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vTokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"venusSupplySpeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"venusBorrowSpeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailySupplyXvs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyBorrowXvs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pausedActions\",\"type\":\"uint256\"}],\"internalType\":\"struct VenusLens.VTokenMetadata[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract VToken\",\"name\":\"vToken\",\"type\":\"address\"}],\"name\":\"vTokenUnderlyingPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct VenusLens.VTokenUnderlyingPrice\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract VToken[]\",\"name\":\"vTokens\",\"type\":\"address[]\"}],\"name\":\"vTokenUnderlyingPriceAll\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct VenusLens.VTokenUnderlyingPrice[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getAccountLimits(address,address)\":{\"params\":{\"account\":\"Address of the account to query\",\"comptroller\":\"Address of comptroller proxy\"},\"returns\":{\"_0\":\"Struct with markets user has entered, liquidity, and shortfall of the account\"}},\"getAllPoolsData(address)\":{\"params\":{\"comptroller\":\"The Comptroller contract to query\"},\"returns\":{\"poolsData\":\"An array of PoolWithMarkets structs, each containing pool info and its markets\"}},\"getDailyXVS(address,address)\":{\"params\":{\"account\":\"Address of account to fetch the daily XVS distribution\",\"comptrollerAddress\":\"Address of the comptroller proxy\"},\"returns\":{\"_0\":\"Amount of XVS distributed daily to an account\"}},\"getMarketsDataByPool(uint96,address)\":{\"custom:error\":\"PoolDoesNotExist Reverts if the given pool ID does not existInvalidOperationForCorePool Reverts if called on the Core Pool (`poolId = 0`)\",\"params\":{\"comptroller\":\"The address of the Comptroller contract\",\"poolId\":\"The pool ID to fetch data for\"},\"returns\":{\"result\":\"An array of MarketData structs containing detailed market info for the given pool\"}},\"getVenusVotes(address,address,uint32[])\":{\"params\":{\"account\":\"Address of the account\",\"blockNumbers\":\"Array of blocks to query\",\"xvs\":\"XVS contract address\"},\"returns\":{\"_0\":\"Array of VenusVotes structs with block number and vote count\"}},\"getXVSBalanceMetadata(address,address)\":{\"params\":{\"account\":\"Account address\",\"xvs\":\"XVS contract address\"},\"returns\":{\"_0\":\"Struct with XVS balance and voter details\"}},\"getXVSBalanceMetadataExt(address,address,address)\":{\"params\":{\"account\":\"Account address\",\"comptroller\":\"Comptroller proxy contract address\",\"xvs\":\"XVS contract address\"},\"returns\":{\"_0\":\"Struct with XVS balance and voter details and XVS allocation\"}},\"pendingRewards(address,address)\":{\"params\":{\"comptroller\":\"Address of the comptroller\",\"holder\":\"Account to query pending XVS\"},\"returns\":{\"_0\":\"Reward object contraining the totalRewards and pending rewards for each market\"}},\"vTokenBalances(address,address)\":{\"params\":{\"account\":\"Account address to fetch the balance of\",\"vToken\":\"Address of the token to check the balance of\"},\"returns\":{\"_0\":\"VTokenBalances with token balance information\"}},\"vTokenBalancesAll(address[],address)\":{\"params\":{\"account\":\"Account address to fetch the balance of\",\"vTokens\":\"Addresses of the tokens to check the balance of\"},\"returns\":{\"_0\":\"VTokenBalances Array with token balance information\"}},\"vTokenMetadata(address)\":{\"params\":{\"vToken\":\"The address of the vToken to fetch VTokenMetadata\"},\"returns\":{\"_0\":\"VTokenMetadata struct with vToken supply and borrow information.\"}},\"vTokenMetadataAll(address[])\":{\"params\":{\"vTokens\":\"Array of vToken addresses to fetch VTokenMetadata\"},\"returns\":{\"_0\":\"Array of structs with vToken supply and borrow information.\"}},\"vTokenUnderlyingPrice(address)\":{\"params\":{\"vToken\":\"address of the vToken\"},\"returns\":{\"_0\":\"response struct with underlyingPrice info of vToken\"}},\"vTokenUnderlyingPriceAll(address[])\":{\"params\":{\"vTokens\":\"Array of vToken addresses\"},\"returns\":{\"_0\":\"array of response structs with underlying price information of vTokens\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"InvalidOperationForCorePool()\":[{\"notice\":\"Thrown when trying to call pool-specific methods on the Core Pool\"}],\"PoolDoesNotExist(uint96)\":[{\"notice\":\"Thrown when a given pool ID does not exist\"}]},\"kind\":\"user\",\"methods\":{\"BLOCKS_PER_DAY()\":{\"notice\":\"Blocks Per Day\"},\"VTOKEN_ACTIONS()\":{\"notice\":\"Total actions available on VToken\"},\"getAccountLimits(address,address)\":{\"notice\":\"Query the account liquidity and shortfall of an account\"},\"getAllPoolsData(address)\":{\"notice\":\"Returns all pools (excluding the Core Pool) along with their associated market data\"},\"getDailyXVS(address,address)\":{\"notice\":\"Get amount of XVS distributed daily to an account\"},\"getMarketsDataByPool(uint96,address)\":{\"notice\":\"Retrieves full market data for all vTokens in a specific pool (excluding the Core Pool)\"},\"getVenusVotes(address,address,uint32[])\":{\"notice\":\"Query the voting power for an account at a specific list of block numbers\"},\"getXVSBalanceMetadata(address,address)\":{\"notice\":\"Query the XVSBalance info of an account\"},\"getXVSBalanceMetadataExt(address,address,address)\":{\"notice\":\"Query the XVSBalance extended info of an account\"},\"pendingRewards(address,address)\":{\"notice\":\"Calculate the total XVS tokens pending and accrued by a user account\"},\"vTokenBalances(address,address)\":{\"notice\":\"Get the current vToken balance (outstanding borrows) for an account\"},\"vTokenBalancesAll(address[],address)\":{\"notice\":\"Get the current vToken balances (outstanding borrows) for all vTokens on an account\"},\"vTokenMetadata(address)\":{\"notice\":\"Query the metadata of a vToken by its address\"},\"vTokenMetadataAll(address[])\":{\"notice\":\"Get VTokenMetadata for an array of vToken addresses\"},\"vTokenUnderlyingPrice(address)\":{\"notice\":\"Get the price for the underlying asset of a vToken\"},\"vTokenUnderlyingPriceAll(address[])\":{\"notice\":\"Query the underlyingPrice of an array of vTokens\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lens/VenusLens.sol\":\"VenusLens\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@venusprotocol/governance-contracts/contracts/Governance/IAccessControlManagerV8.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.25;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\n/**\\n * @title IAccessControlManagerV8\\n * @author Venus\\n * @notice Interface implemented by the `AccessControlManagerV8` contract.\\n */\\ninterface IAccessControlManagerV8 is IAccessControl {\\n    function giveCallPermission(address contractAddress, string calldata functionSig, address accountToPermit) external;\\n\\n    function revokeCallPermission(\\n        address contractAddress,\\n        string calldata functionSig,\\n        address accountToRevoke\\n    ) external;\\n\\n    function isAllowedToCall(address account, string calldata functionSig) external view returns (bool);\\n\\n    function hasPermission(\\n        address account,\\n        address contractAddress,\\n        string calldata functionSig\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xaa29b098440d0b3a131c5ecdf25ce548790c1b5ac7bf9b5c0264b6af6f7a1e0b\",\"license\":\"BSD-3-Clause\"},\"@venusprotocol/oracle/contracts/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.25;\\n\\ninterface OracleInterface {\\n    function getPrice(address asset) external view returns (uint256);\\n}\\n\\ninterface ResilientOracleInterface is OracleInterface {\\n    function updatePrice(address vToken) external;\\n\\n    function updateAssetPrice(address asset) external;\\n\\n    function getUnderlyingPrice(address vToken) external view returns (uint256);\\n}\\n\\ninterface TwapInterface is OracleInterface {\\n    function updateTwap(address asset) external returns (uint256);\\n}\\n\\ninterface BoundValidatorInterface {\\n    function validatePriceWithAnchorPrice(\\n        address asset,\\n        uint256 reporterPrice,\\n        uint256 anchorPrice\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2432799b0d824fc701beb4c30146e912b9aeecf77b5c1635dde6c5fbe6bfc3a7\",\"license\":\"BSD-3-Clause\"},\"contracts/Comptroller/ComptrollerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.25;\\n\\nimport { ResilientOracleInterface } from \\\"@venusprotocol/oracle/contracts/interfaces/OracleInterface.sol\\\";\\n\\nimport { VToken } from \\\"../Tokens/VTokens/VToken.sol\\\";\\nimport { VAIControllerInterface } from \\\"../Tokens/VAI/VAIControllerInterface.sol\\\";\\nimport { WeightFunction } from \\\"./Diamond/interfaces/IFacetBase.sol\\\";\\n\\nenum Action {\\n    MINT,\\n    REDEEM,\\n    BORROW,\\n    REPAY,\\n    SEIZE,\\n    LIQUIDATE,\\n    TRANSFER,\\n    ENTER_MARKET,\\n    EXIT_MARKET\\n}\\n\\ninterface ComptrollerInterface {\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\n    function isComptroller() external pure returns (bool);\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata vTokens) external returns (uint[] memory);\\n\\n    function exitMarket(address vToken) external returns (uint);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(address vToken, address minter, uint mintAmount) external returns (uint);\\n\\n    function mintVerify(address vToken, address minter, uint mintAmount, uint mintTokens) external;\\n\\n    function redeemAllowed(address vToken, address redeemer, uint redeemTokens) external returns (uint);\\n\\n    function redeemVerify(address vToken, address redeemer, uint redeemAmount, uint redeemTokens) external;\\n\\n    function borrowAllowed(address vToken, address borrower, uint borrowAmount) external returns (uint);\\n\\n    function borrowVerify(address vToken, address borrower, uint borrowAmount) external;\\n\\n    function repayBorrowAllowed(\\n        address vToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount\\n    ) external returns (uint);\\n\\n    function repayBorrowVerify(\\n        address vToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount,\\n        uint borrowerIndex\\n    ) external;\\n\\n    function liquidateBorrowAllowed(\\n        address vTokenBorrowed,\\n        address vTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount\\n    ) external returns (uint);\\n\\n    function liquidateBorrowVerify(\\n        address vTokenBorrowed,\\n        address vTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        uint seizeTokens\\n    ) external;\\n\\n    function seizeAllowed(\\n        address vTokenCollateral,\\n        address vTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens\\n    ) external returns (uint);\\n\\n    function seizeVerify(\\n        address vTokenCollateral,\\n        address vTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens\\n    ) external;\\n\\n    function transferAllowed(address vToken, address src, address dst, uint transferTokens) external returns (uint);\\n\\n    function transferVerify(address vToken, address src, address dst, uint transferTokens) external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address vTokenBorrowed,\\n        address vTokenCollateral,\\n        uint repayAmount\\n    ) external view returns (uint, uint);\\n\\n    function liquidateCalculateSeizeTokens(\\n        address borrower,\\n        address vTokenBorrowed,\\n        address vTokenCollateral,\\n        uint repayAmount\\n    ) external view returns (uint, uint);\\n\\n    function setMintedVAIOf(address owner, uint amount) external returns (uint);\\n\\n    function liquidateVAICalculateSeizeTokens(\\n        address vTokenCollateral,\\n        uint repayAmount\\n    ) external view returns (uint, uint);\\n\\n    function getXVSAddress() external view returns (address);\\n\\n    function markets(address) external view returns (bool, uint);\\n\\n    function oracle() external view returns (ResilientOracleInterface);\\n\\n    function getAccountLiquidity(address) external view returns (uint, uint, uint);\\n\\n    function getAssetsIn(address) external view returns (VToken[] memory);\\n\\n    function claimVenus(address) external;\\n\\n    function venusAccrued(address) external view returns (uint);\\n\\n    function venusSupplySpeeds(address) external view returns (uint);\\n\\n    function venusBorrowSpeeds(address) external view returns (uint);\\n\\n    function getAllMarkets() external view returns (VToken[] memory);\\n\\n    function venusSupplierIndex(address, address) external view returns (uint);\\n\\n    function venusInitialIndex() external view returns (uint224);\\n\\n    function venusBorrowerIndex(address, address) external view returns (uint);\\n\\n    function venusBorrowState(address) external view returns (uint224, uint32);\\n\\n    function venusSupplyState(address) external view returns (uint224, uint32);\\n\\n    function approvedDelegates(address borrower, address delegate) external view returns (bool);\\n\\n    function vaiController() external view returns (VAIControllerInterface);\\n\\n    function protocolPaused() external view returns (bool);\\n\\n    function actionPaused(address market, Action action) external view returns (bool);\\n\\n    function mintedVAIs(address user) external view returns (uint);\\n\\n    function vaiMintRate() external view returns (uint);\\n\\n    function userPoolId(address account) external view returns (uint96);\\n\\n    function getLiquidationIncentive(address vToken) external view returns (uint256);\\n\\n    function getEffectiveLiquidationIncentive(address account, address vToken) external view returns (uint256);\\n\\n    function getEffectiveLtvFactor(\\n        address account,\\n        address vToken,\\n        WeightFunction weightingStrategy\\n    ) external view returns (uint256);\\n\\n    function lastPoolId() external view returns (uint96);\\n\\n    function corePoolId() external pure returns (uint96);\\n\\n    function pools(uint96 poolId) external view returns (string memory label);\\n\\n    function getPoolVTokens(uint96 poolId) external view returns (address[] memory);\\n\\n    function poolMarkets(\\n        uint96 poolId,\\n        address vToken\\n    )\\n        external\\n        view\\n        returns (\\n            bool isListed,\\n            uint256 collateralFactorMantissa,\\n            bool isVenus,\\n            uint256 liquidationThresholdMantissa,\\n            uint256 liquidationIncentiveMantissa,\\n            uint96 marketPoolId,\\n            bool isBorrowAllowed\\n        );\\n}\\n\\ninterface IVAIVault {\\n    function updatePendingRewards() external;\\n}\\n\\ninterface IComptroller {\\n    /*** Treasury Data ***/\\n    function treasuryAddress() external view returns (address);\\n\\n    function treasuryPercent() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x19445d046e7ae316fb2171787edc7120e2bbdea30c351b083346b5fae4deface\",\"license\":\"BSD-3-Clause\"},\"contracts/Comptroller/Diamond/interfaces/IFacetBase.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.25;\\n\\nimport { Action } from \\\"../../../Comptroller/ComptrollerInterface.sol\\\";\\nimport { PoolMarketId } from \\\"../../../Comptroller/Types/PoolMarketId.sol\\\";\\n\\nenum WeightFunction {\\n    /// @notice Use the collateral factor of the asset for weighting\\n    USE_COLLATERAL_FACTOR,\\n    /// @notice Use the liquidation threshold of the asset for weighting\\n    USE_LIQUIDATION_THRESHOLD\\n}\\n\\ninterface IFacetBase {\\n    /**\\n     * @notice The initial XVS rewards index for a market\\n     */\\n    function venusInitialIndex() external pure returns (uint224);\\n\\n    /**\\n     * @notice Checks if a certain action is paused on a market\\n     * @param action Action id\\n     * @param market vToken address\\n     */\\n    function actionPaused(address market, Action action) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the XVS address\\n     * @return The address of XVS token\\n     */\\n    function getXVSAddress() external view returns (address);\\n\\n    function getPoolMarketIndex(uint96 poolId, address vToken) external pure returns (PoolMarketId);\\n\\n    function corePoolId() external pure returns (uint96);\\n}\\n\",\"keccak256\":\"0x454a2e213a5f54fbe7991193b78ae23406234f465c9806f75ee7bf2fe6d1531c\",\"license\":\"BSD-3-Clause\"},\"contracts/Comptroller/Types/PoolMarketId.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.25;\\n\\n/// @notice Strongly-typed identifier for pool markets mapping keys\\n/// @dev Underlying storage is bytes32: first 12 bytes (96 bits) = poolId, last 20 bytes = vToken address\\ntype PoolMarketId is bytes32;\\n\\n \",\"keccak256\":\"0xf68bde30ddd6f8bf08194b493991c2a2ebd3814972f93a804beb9b366004cbe3\",\"license\":\"BSD-3-Clause\"},\"contracts/InterestRateModels/InterestRateModelV8.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\n/**\\n * @title Venus's InterestRateModelV8 Interface\\n * @author Venus\\n */\\nabstract contract InterestRateModelV8 {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    bool public constant isInterestRateModel = true;\\n\\n    /**\\n     * @notice Calculates the current borrow interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amnount of reserves the market has\\n     * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getBorrowRate(uint256 cash, uint256 borrows, uint256 reserves) external view virtual returns (uint256);\\n\\n    /**\\n     * @notice Calculates the current supply interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amnount of reserves the market has\\n     * @param reserveFactorMantissa The current reserve factor the market has\\n     * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getSupplyRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves,\\n        uint256 reserveFactorMantissa\\n    ) external view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x4d5595e761d50a1431c34b39e72dde6c09b0ebccdbe8c5c4e12c8a2ac7b796e1\",\"license\":\"BSD-3-Clause\"},\"contracts/Lens/VenusLens.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport { ResilientOracleInterface } from \\\"@venusprotocol/oracle/contracts/interfaces/OracleInterface.sol\\\";\\n\\nimport { ExponentialNoError } from \\\"../Utils/ExponentialNoError.sol\\\";\\nimport { VBep20 } from \\\"../Tokens/VTokens/VBep20.sol\\\";\\nimport { VToken } from \\\"../Tokens/VTokens/VToken.sol\\\";\\nimport { ComptrollerInterface, Action } from \\\"../Comptroller/ComptrollerInterface.sol\\\";\\nimport { IXVS } from \\\"../Tokens/XVS/IXVS.sol\\\";\\n\\ncontract VenusLens is ExponentialNoError {\\n    /// @notice Blocks Per Day\\n    uint public constant BLOCKS_PER_DAY = 28800;\\n\\n    /// @notice Total actions available on VToken\\n    uint public constant VTOKEN_ACTIONS = 8;\\n\\n    struct VenusMarketState {\\n        uint224 index;\\n        uint32 block;\\n    }\\n\\n    struct VTokenMetadata {\\n        address vToken;\\n        uint exchangeRateCurrent;\\n        uint supplyRatePerBlock;\\n        uint borrowRatePerBlock;\\n        uint reserveFactorMantissa;\\n        uint totalBorrows;\\n        uint totalReserves;\\n        uint totalSupply;\\n        uint totalCash;\\n        bool isListed;\\n        uint collateralFactorMantissa;\\n        address underlyingAssetAddress;\\n        uint vTokenDecimals;\\n        uint underlyingDecimals;\\n        uint venusSupplySpeed;\\n        uint venusBorrowSpeed;\\n        uint dailySupplyXvs;\\n        uint dailyBorrowXvs;\\n        uint pausedActions;\\n    }\\n\\n    struct VTokenBalances {\\n        address vToken;\\n        uint balanceOf;\\n        uint borrowBalanceCurrent;\\n        uint balanceOfUnderlying;\\n        uint tokenBalance;\\n        uint tokenAllowance;\\n    }\\n\\n    struct VTokenUnderlyingPrice {\\n        address vToken;\\n        uint underlyingPrice;\\n    }\\n\\n    struct AccountLimits {\\n        VToken[] markets;\\n        uint liquidity;\\n        uint shortfall;\\n    }\\n\\n    struct XVSBalanceMetadata {\\n        uint balance;\\n        uint votes;\\n        address delegate;\\n    }\\n\\n    struct XVSBalanceMetadataExt {\\n        uint balance;\\n        uint votes;\\n        address delegate;\\n        uint allocated;\\n    }\\n\\n    struct VenusVotes {\\n        uint blockNumber;\\n        uint votes;\\n    }\\n\\n    struct ClaimVenusLocalVariables {\\n        uint totalRewards;\\n        uint224 borrowIndex;\\n        uint32 borrowBlock;\\n        uint224 supplyIndex;\\n        uint32 supplyBlock;\\n    }\\n\\n    /**\\n     * @dev Struct for Pending Rewards for per market\\n     */\\n    struct PendingReward {\\n        address vTokenAddress;\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * @dev Struct for Reward of a single reward token.\\n     */\\n    struct RewardSummary {\\n        address distributorAddress;\\n        address rewardTokenAddress;\\n        uint256 totalRewards;\\n        PendingReward[] pendingRewards;\\n    }\\n\\n    /// @notice Holds full market information for a single vToken within a specific pool (excluding the Core Pool)\\n    struct MarketData {\\n        uint96 poolId;\\n        string poolLabel;\\n        address vToken;\\n        bool isListed;\\n        uint256 collateralFactor;\\n        bool isVenus;\\n        uint256 liquidationThreshold;\\n        uint256 liquidationIncentive;\\n        bool isBorrowAllowed;\\n    }\\n\\n    /// @notice Struct representing a pool (excluding the Core Pool) and its associated markets\\n    struct PoolWithMarkets {\\n        uint96 poolId;\\n        string label;\\n        MarketData[] markets;\\n    }\\n\\n    /// @notice Thrown when a given pool ID does not exist\\n    error PoolDoesNotExist(uint96 poolId);\\n\\n    /// @notice Thrown when trying to call pool-specific methods on the Core Pool\\n    error InvalidOperationForCorePool();\\n\\n    /**\\n     * @notice Query the metadata of a vToken by its address\\n     * @param vToken The address of the vToken to fetch VTokenMetadata\\n     * @return VTokenMetadata struct with vToken supply and borrow information.\\n     */\\n    function vTokenMetadata(VToken vToken) public returns (VTokenMetadata memory) {\\n        uint exchangeRateCurrent = vToken.exchangeRateCurrent();\\n        address comptrollerAddress = address(vToken.comptroller());\\n        ComptrollerInterface comptroller = ComptrollerInterface(comptrollerAddress);\\n        (bool isListed, uint collateralFactorMantissa) = comptroller.markets(address(vToken));\\n        address underlyingAssetAddress;\\n        uint underlyingDecimals;\\n\\n        if (compareStrings(vToken.symbol(), \\\"vBNB\\\")) {\\n            underlyingAssetAddress = address(0);\\n            underlyingDecimals = 18;\\n        } else {\\n            VBep20 vBep20 = VBep20(address(vToken));\\n            underlyingAssetAddress = vBep20.underlying();\\n            underlyingDecimals = IERC20Metadata(vBep20.underlying()).decimals();\\n        }\\n\\n        uint venusSupplySpeedPerBlock = comptroller.venusSupplySpeeds(address(vToken));\\n        uint venusBorrowSpeedPerBlock = comptroller.venusBorrowSpeeds(address(vToken));\\n\\n        uint256 pausedActions;\\n\\n        for (uint8 i; i <= VTOKEN_ACTIONS; ++i) {\\n            uint256 paused = comptroller.actionPaused(address(vToken), Action(i)) ? 1 : 0;\\n            pausedActions |= paused << i;\\n        }\\n\\n        return\\n            VTokenMetadata({\\n                vToken: address(vToken),\\n                exchangeRateCurrent: exchangeRateCurrent,\\n                supplyRatePerBlock: vToken.supplyRatePerBlock(),\\n                borrowRatePerBlock: vToken.borrowRatePerBlock(),\\n                reserveFactorMantissa: vToken.reserveFactorMantissa(),\\n                totalBorrows: vToken.totalBorrows(),\\n                totalReserves: vToken.totalReserves(),\\n                totalSupply: vToken.totalSupply(),\\n                totalCash: vToken.getCash(),\\n                isListed: isListed,\\n                collateralFactorMantissa: collateralFactorMantissa,\\n                underlyingAssetAddress: underlyingAssetAddress,\\n                vTokenDecimals: vToken.decimals(),\\n                underlyingDecimals: underlyingDecimals,\\n                venusSupplySpeed: venusSupplySpeedPerBlock,\\n                venusBorrowSpeed: venusBorrowSpeedPerBlock,\\n                dailySupplyXvs: venusSupplySpeedPerBlock * BLOCKS_PER_DAY,\\n                dailyBorrowXvs: venusBorrowSpeedPerBlock * BLOCKS_PER_DAY,\\n                pausedActions: pausedActions\\n            });\\n    }\\n\\n    /**\\n     * @notice Get VTokenMetadata for an array of vToken addresses\\n     * @param vTokens Array of vToken addresses to fetch VTokenMetadata\\n     * @return Array of structs with vToken supply and borrow information.\\n     */\\n    function vTokenMetadataAll(VToken[] calldata vTokens) external returns (VTokenMetadata[] memory) {\\n        uint vTokenCount = vTokens.length;\\n        VTokenMetadata[] memory res = new VTokenMetadata[](vTokenCount);\\n        for (uint i = 0; i < vTokenCount; i++) {\\n            res[i] = vTokenMetadata(vTokens[i]);\\n        }\\n        return res;\\n    }\\n\\n    /**\\n     * @notice Get amount of XVS distributed daily to an account\\n     * @param account Address of account to fetch the daily XVS distribution\\n     * @param comptrollerAddress Address of the comptroller proxy\\n     * @return Amount of XVS distributed daily to an account\\n     */\\n    function getDailyXVS(address payable account, address comptrollerAddress) external returns (uint) {\\n        ComptrollerInterface comptrollerInstance = ComptrollerInterface(comptrollerAddress);\\n        VToken[] memory vTokens = comptrollerInstance.getAllMarkets();\\n        uint dailyXvsPerAccount = 0;\\n\\n        for (uint i = 0; i < vTokens.length; i++) {\\n            VToken vToken = vTokens[i];\\n            if (!compareStrings(vToken.symbol(), \\\"vUST\\\") && !compareStrings(vToken.symbol(), \\\"vLUNA\\\")) {\\n                VTokenMetadata memory metaDataItem = vTokenMetadata(vToken);\\n\\n                //get balanceOfUnderlying and borrowBalanceCurrent from vTokenBalance\\n                VTokenBalances memory vTokenBalanceInfo = vTokenBalances(vToken, account);\\n\\n                VTokenUnderlyingPrice memory underlyingPriceResponse = vTokenUnderlyingPrice(vToken);\\n                uint underlyingPrice = underlyingPriceResponse.underlyingPrice;\\n                Exp memory underlyingPriceMantissa = Exp({ mantissa: underlyingPrice });\\n\\n                //get dailyXvsSupplyMarket\\n                uint dailyXvsSupplyMarket = 0;\\n                uint supplyInUsd = mul_ScalarTruncate(underlyingPriceMantissa, vTokenBalanceInfo.balanceOfUnderlying);\\n                uint marketTotalSupply = (metaDataItem.totalSupply * metaDataItem.exchangeRateCurrent) / 1e18;\\n                uint marketTotalSupplyInUsd = mul_ScalarTruncate(underlyingPriceMantissa, marketTotalSupply);\\n\\n                if (marketTotalSupplyInUsd > 0) {\\n                    dailyXvsSupplyMarket = (metaDataItem.dailySupplyXvs * supplyInUsd) / marketTotalSupplyInUsd;\\n                }\\n\\n                //get dailyXvsBorrowMarket\\n                uint dailyXvsBorrowMarket = 0;\\n                uint borrowsInUsd = mul_ScalarTruncate(underlyingPriceMantissa, vTokenBalanceInfo.borrowBalanceCurrent);\\n                uint marketTotalBorrowsInUsd = mul_ScalarTruncate(underlyingPriceMantissa, metaDataItem.totalBorrows);\\n\\n                if (marketTotalBorrowsInUsd > 0) {\\n                    dailyXvsBorrowMarket = (metaDataItem.dailyBorrowXvs * borrowsInUsd) / marketTotalBorrowsInUsd;\\n                }\\n\\n                dailyXvsPerAccount += dailyXvsSupplyMarket + dailyXvsBorrowMarket;\\n            }\\n        }\\n\\n        return dailyXvsPerAccount;\\n    }\\n\\n    /**\\n     * @notice Get the current vToken balance (outstanding borrows) for an account\\n     * @param vToken Address of the token to check the balance of\\n     * @param account Account address to fetch the balance of\\n     * @return VTokenBalances with token balance information\\n     */\\n    function vTokenBalances(VToken vToken, address payable account) public returns (VTokenBalances memory) {\\n        uint balanceOf = vToken.balanceOf(account);\\n        uint borrowBalanceCurrent = vToken.borrowBalanceCurrent(account);\\n        uint balanceOfUnderlying = vToken.balanceOfUnderlying(account);\\n        uint tokenBalance;\\n        uint tokenAllowance;\\n\\n        if (compareStrings(vToken.symbol(), \\\"vBNB\\\")) {\\n            tokenBalance = account.balance;\\n            tokenAllowance = account.balance;\\n        } else {\\n            VBep20 vBep20 = VBep20(address(vToken));\\n            IERC20Metadata underlying = IERC20Metadata(vBep20.underlying());\\n            tokenBalance = underlying.balanceOf(account);\\n            tokenAllowance = underlying.allowance(account, address(vToken));\\n        }\\n\\n        return\\n            VTokenBalances({\\n                vToken: address(vToken),\\n                balanceOf: balanceOf,\\n                borrowBalanceCurrent: borrowBalanceCurrent,\\n                balanceOfUnderlying: balanceOfUnderlying,\\n                tokenBalance: tokenBalance,\\n                tokenAllowance: tokenAllowance\\n            });\\n    }\\n\\n    /**\\n     * @notice Get the current vToken balances (outstanding borrows) for all vTokens on an account\\n     * @param vTokens Addresses of the tokens to check the balance of\\n     * @param account Account address to fetch the balance of\\n     * @return VTokenBalances Array with token balance information\\n     */\\n    function vTokenBalancesAll(\\n        VToken[] calldata vTokens,\\n        address payable account\\n    ) external returns (VTokenBalances[] memory) {\\n        uint vTokenCount = vTokens.length;\\n        VTokenBalances[] memory res = new VTokenBalances[](vTokenCount);\\n        for (uint i = 0; i < vTokenCount; i++) {\\n            res[i] = vTokenBalances(vTokens[i], account);\\n        }\\n        return res;\\n    }\\n\\n    /**\\n     * @notice Get the price for the underlying asset of a vToken\\n     * @param vToken address of the vToken\\n     * @return response struct with underlyingPrice info of vToken\\n     */\\n    function vTokenUnderlyingPrice(VToken vToken) public view returns (VTokenUnderlyingPrice memory) {\\n        ComptrollerInterface comptroller = ComptrollerInterface(address(vToken.comptroller()));\\n        ResilientOracleInterface priceOracle = comptroller.oracle();\\n\\n        return\\n            VTokenUnderlyingPrice({\\n                vToken: address(vToken),\\n                underlyingPrice: priceOracle.getUnderlyingPrice(address(vToken))\\n            });\\n    }\\n\\n    /**\\n     * @notice Query the underlyingPrice of an array of vTokens\\n     * @param vTokens Array of vToken addresses\\n     * @return array of response structs with underlying price information of vTokens\\n     */\\n    function vTokenUnderlyingPriceAll(\\n        VToken[] calldata vTokens\\n    ) external view returns (VTokenUnderlyingPrice[] memory) {\\n        uint vTokenCount = vTokens.length;\\n        VTokenUnderlyingPrice[] memory res = new VTokenUnderlyingPrice[](vTokenCount);\\n        for (uint i = 0; i < vTokenCount; i++) {\\n            res[i] = vTokenUnderlyingPrice(vTokens[i]);\\n        }\\n        return res;\\n    }\\n\\n    /**\\n     * @notice Query the account liquidity and shortfall of an account\\n     * @param comptroller Address of comptroller proxy\\n     * @param account Address of the account to query\\n     * @return Struct with markets user has entered, liquidity, and shortfall of the account\\n     */\\n    function getAccountLimits(\\n        ComptrollerInterface comptroller,\\n        address account\\n    ) public view returns (AccountLimits memory) {\\n        (uint errorCode, uint liquidity, uint shortfall) = comptroller.getAccountLiquidity(account);\\n        require(errorCode == 0, \\\"account liquidity error\\\");\\n\\n        return AccountLimits({ markets: comptroller.getAssetsIn(account), liquidity: liquidity, shortfall: shortfall });\\n    }\\n\\n    /**\\n     * @notice Query the XVSBalance info of an account\\n     * @param xvs XVS contract address\\n     * @param account Account address\\n     * @return Struct with XVS balance and voter details\\n     */\\n    function getXVSBalanceMetadata(IXVS xvs, address account) external view returns (XVSBalanceMetadata memory) {\\n        return\\n            XVSBalanceMetadata({\\n                balance: xvs.balanceOf(account),\\n                votes: uint256(xvs.getCurrentVotes(account)),\\n                delegate: xvs.delegates(account)\\n            });\\n    }\\n\\n    /**\\n     * @notice Query the XVSBalance extended info of an account\\n     * @param xvs XVS contract address\\n     * @param comptroller Comptroller proxy contract address\\n     * @param account Account address\\n     * @return Struct with XVS balance and voter details and XVS allocation\\n     */\\n    function getXVSBalanceMetadataExt(\\n        IXVS xvs,\\n        ComptrollerInterface comptroller,\\n        address account\\n    ) external returns (XVSBalanceMetadataExt memory) {\\n        uint balance = xvs.balanceOf(account);\\n        comptroller.claimVenus(account);\\n        uint newBalance = xvs.balanceOf(account);\\n        uint accrued = comptroller.venusAccrued(account);\\n        uint total = add_(accrued, newBalance, \\\"sum xvs total\\\");\\n        uint allocated = sub_(total, balance, \\\"sub allocated\\\");\\n\\n        return\\n            XVSBalanceMetadataExt({\\n                balance: balance,\\n                votes: uint256(xvs.getCurrentVotes(account)),\\n                delegate: xvs.delegates(account),\\n                allocated: allocated\\n            });\\n    }\\n\\n    /**\\n     * @notice Query the voting power for an account at a specific list of block numbers\\n     * @param xvs XVS contract address\\n     * @param account Address of the account\\n     * @param blockNumbers Array of blocks to query\\n     * @return Array of VenusVotes structs with block number and vote count\\n     */\\n    function getVenusVotes(\\n        IXVS xvs,\\n        address account,\\n        uint32[] calldata blockNumbers\\n    ) external view returns (VenusVotes[] memory) {\\n        VenusVotes[] memory res = new VenusVotes[](blockNumbers.length);\\n        for (uint i = 0; i < blockNumbers.length; i++) {\\n            res[i] = VenusVotes({\\n                blockNumber: uint256(blockNumbers[i]),\\n                votes: uint256(xvs.getPriorVotes(account, blockNumbers[i]))\\n            });\\n        }\\n        return res;\\n    }\\n\\n    /**\\n     * @dev Queries the current supply to calculate rewards for an account\\n     * @param supplyState VenusMarketState struct\\n     * @param vToken Address of a vToken\\n     * @param comptroller Address of the comptroller proxy\\n     */\\n    function updateVenusSupplyIndex(\\n        VenusMarketState memory supplyState,\\n        address vToken,\\n        ComptrollerInterface comptroller\\n    ) internal view {\\n        uint supplySpeed = comptroller.venusSupplySpeeds(vToken);\\n        uint blockNumber = block.number;\\n        uint deltaBlocks = sub_(blockNumber, uint(supplyState.block));\\n        if (deltaBlocks > 0 && supplySpeed > 0) {\\n            uint supplyTokens = VToken(vToken).totalSupply();\\n            uint venusAccrued = mul_(deltaBlocks, supplySpeed);\\n            Double memory ratio = supplyTokens > 0 ? fraction(venusAccrued, supplyTokens) : Double({ mantissa: 0 });\\n            Double memory index = add_(Double({ mantissa: supplyState.index }), ratio);\\n            supplyState.index = safe224(index.mantissa, \\\"new index overflows\\\");\\n            supplyState.block = safe32(blockNumber, \\\"block number overflows\\\");\\n        } else if (deltaBlocks > 0) {\\n            supplyState.block = safe32(blockNumber, \\\"block number overflows\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Queries the current borrow to calculate rewards for an account\\n     * @param borrowState VenusMarketState struct\\n     * @param vToken Address of a vToken\\n     * @param comptroller Address of the comptroller proxy\\n     */\\n    function updateVenusBorrowIndex(\\n        VenusMarketState memory borrowState,\\n        address vToken,\\n        Exp memory marketBorrowIndex,\\n        ComptrollerInterface comptroller\\n    ) internal view {\\n        uint borrowSpeed = comptroller.venusBorrowSpeeds(vToken);\\n        uint blockNumber = block.number;\\n        uint deltaBlocks = sub_(blockNumber, uint(borrowState.block));\\n        if (deltaBlocks > 0 && borrowSpeed > 0) {\\n            uint borrowAmount = div_(VToken(vToken).totalBorrows(), marketBorrowIndex);\\n            uint venusAccrued = mul_(deltaBlocks, borrowSpeed);\\n            Double memory ratio = borrowAmount > 0 ? fraction(venusAccrued, borrowAmount) : Double({ mantissa: 0 });\\n            Double memory index = add_(Double({ mantissa: borrowState.index }), ratio);\\n            borrowState.index = safe224(index.mantissa, \\\"new index overflows\\\");\\n            borrowState.block = safe32(blockNumber, \\\"block number overflows\\\");\\n        } else if (deltaBlocks > 0) {\\n            borrowState.block = safe32(blockNumber, \\\"block number overflows\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculate available rewards for an account's supply\\n     * @param supplyState VenusMarketState struct\\n     * @param vToken Address of a vToken\\n     * @param supplier Address of the account supplying\\n     * @param comptroller Address of the comptroller proxy\\n     * @return Undistributed earned XVS from supplies\\n     */\\n    function distributeSupplierVenus(\\n        VenusMarketState memory supplyState,\\n        address vToken,\\n        address supplier,\\n        ComptrollerInterface comptroller\\n    ) internal view returns (uint) {\\n        Double memory supplyIndex = Double({ mantissa: supplyState.index });\\n        Double memory supplierIndex = Double({ mantissa: comptroller.venusSupplierIndex(vToken, supplier) });\\n        if (supplierIndex.mantissa == 0 && supplyIndex.mantissa > 0) {\\n            supplierIndex.mantissa = comptroller.venusInitialIndex();\\n        }\\n\\n        Double memory deltaIndex = sub_(supplyIndex, supplierIndex);\\n        uint supplierTokens = VToken(vToken).balanceOf(supplier);\\n        uint supplierDelta = mul_(supplierTokens, deltaIndex);\\n        return supplierDelta;\\n    }\\n\\n    /**\\n     * @dev Calculate available rewards for an account's borrows\\n     * @param borrowState VenusMarketState struct\\n     * @param vToken Address of a vToken\\n     * @param borrower Address of the account borrowing\\n     * @param marketBorrowIndex vToken Borrow index\\n     * @param comptroller Address of the comptroller proxy\\n     * @return Undistributed earned XVS from borrows\\n     */\\n    function distributeBorrowerVenus(\\n        VenusMarketState memory borrowState,\\n        address vToken,\\n        address borrower,\\n        Exp memory marketBorrowIndex,\\n        ComptrollerInterface comptroller\\n    ) internal view returns (uint) {\\n        Double memory borrowIndex = Double({ mantissa: borrowState.index });\\n        Double memory borrowerIndex = Double({ mantissa: comptroller.venusBorrowerIndex(vToken, borrower) });\\n        if (borrowerIndex.mantissa > 0) {\\n            Double memory deltaIndex = sub_(borrowIndex, borrowerIndex);\\n            uint borrowerAmount = div_(VToken(vToken).borrowBalanceStored(borrower), marketBorrowIndex);\\n            uint borrowerDelta = mul_(borrowerAmount, deltaIndex);\\n            return borrowerDelta;\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Calculate the total XVS tokens pending and accrued by a user account\\n     * @param holder Account to query pending XVS\\n     * @param comptroller Address of the comptroller\\n     * @return Reward object contraining the totalRewards and pending rewards for each market\\n     */\\n    function pendingRewards(\\n        address holder,\\n        ComptrollerInterface comptroller\\n    ) external view returns (RewardSummary memory) {\\n        VToken[] memory vTokens = comptroller.getAllMarkets();\\n        ClaimVenusLocalVariables memory vars;\\n        RewardSummary memory rewardSummary;\\n        rewardSummary.distributorAddress = address(comptroller);\\n        rewardSummary.rewardTokenAddress = comptroller.getXVSAddress();\\n        rewardSummary.totalRewards = comptroller.venusAccrued(holder);\\n        rewardSummary.pendingRewards = new PendingReward[](vTokens.length);\\n        for (uint i; i < vTokens.length; ++i) {\\n            (vars.borrowIndex, vars.borrowBlock) = comptroller.venusBorrowState(address(vTokens[i]));\\n            VenusMarketState memory borrowState = VenusMarketState({\\n                index: vars.borrowIndex,\\n                block: vars.borrowBlock\\n            });\\n\\n            (vars.supplyIndex, vars.supplyBlock) = comptroller.venusSupplyState(address(vTokens[i]));\\n            VenusMarketState memory supplyState = VenusMarketState({\\n                index: vars.supplyIndex,\\n                block: vars.supplyBlock\\n            });\\n\\n            Exp memory borrowIndex = Exp({ mantissa: vTokens[i].borrowIndex() });\\n\\n            PendingReward memory marketReward;\\n            marketReward.vTokenAddress = address(vTokens[i]);\\n\\n            updateVenusBorrowIndex(borrowState, address(vTokens[i]), borrowIndex, comptroller);\\n            uint256 borrowReward = distributeBorrowerVenus(\\n                borrowState,\\n                address(vTokens[i]),\\n                holder,\\n                borrowIndex,\\n                comptroller\\n            );\\n\\n            updateVenusSupplyIndex(supplyState, address(vTokens[i]), comptroller);\\n            uint256 supplyReward = distributeSupplierVenus(supplyState, address(vTokens[i]), holder, comptroller);\\n\\n            marketReward.amount = add_(borrowReward, supplyReward);\\n            rewardSummary.pendingRewards[i] = marketReward;\\n        }\\n        return rewardSummary;\\n    }\\n\\n    /**\\n     * @notice Returns all pools (excluding the Core Pool) along with their associated market data\\n     * @param comptroller The Comptroller contract to query\\n     * @return poolsData An array of PoolWithMarkets structs, each containing pool info and its markets\\n     */\\n    function getAllPoolsData(\\n        ComptrollerInterface comptroller\\n    ) external view returns (PoolWithMarkets[] memory poolsData) {\\n        uint96 lastPoolId = comptroller.lastPoolId();\\n        poolsData = new PoolWithMarkets[](lastPoolId);\\n\\n        for (uint96 i = 1; i <= lastPoolId; ++i) {\\n            poolsData[i - 1] = PoolWithMarkets({\\n                poolId: i,\\n                label: comptroller.pools(i),\\n                markets: getMarketsDataByPool(i, comptroller)\\n            });\\n        }\\n    }\\n\\n    /**\\n     * @notice Retrieves full market data for all vTokens in a specific pool (excluding the Core Pool)\\n     * @param poolId The pool ID to fetch data for\\n     * @param comptroller The address of the Comptroller contract\\n     * @return result An array of MarketData structs containing detailed market info for the given pool\\n     * @custom:error PoolDoesNotExist Reverts if the given pool ID does not exist\\n     * @custom:error InvalidOperationForCorePool Reverts if called on the Core Pool (`poolId = 0`)\\n     */\\n    function getMarketsDataByPool(\\n        uint96 poolId,\\n        ComptrollerInterface comptroller\\n    ) public view returns (MarketData[] memory result) {\\n        if (poolId > comptroller.lastPoolId()) revert PoolDoesNotExist(poolId);\\n        if (poolId == comptroller.corePoolId()) revert InvalidOperationForCorePool();\\n\\n        address[] memory vTokens = comptroller.getPoolVTokens(poolId);\\n        uint256 length = vTokens.length;\\n        result = new MarketData[](length);\\n\\n        string memory label = comptroller.pools(poolId);\\n\\n        for (uint256 i; i < length; ++i) {\\n            (\\n                bool isListed,\\n                uint256 collateralFactor,\\n                bool isVenus,\\n                uint256 liquidationThreshold,\\n                uint256 liquidationIncentive,\\n                uint96 marketPoolId,\\n                bool isBorrowAllowed\\n            ) = comptroller.poolMarkets(poolId, vTokens[i]);\\n\\n            result[i] = MarketData({\\n                poolId: marketPoolId,\\n                poolLabel: label,\\n                vToken: vTokens[i],\\n                isListed: isListed,\\n                collateralFactor: collateralFactor,\\n                isVenus: isVenus,\\n                liquidationThreshold: liquidationThreshold,\\n                liquidationIncentive: liquidationIncentive,\\n                isBorrowAllowed: isBorrowAllowed\\n            });\\n        }\\n    }\\n\\n    // utilities\\n    /**\\n     * @notice Compares if two strings are equal\\n     * @param a First string to compare\\n     * @param b Second string to compare\\n     * @return Boolean depending on if the strings are equal\\n     */\\n    function compareStrings(string memory a, string memory b) internal pure returns (bool) {\\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\\n    }\\n}\\n\",\"keccak256\":\"0x0be91754ddce3a30e9adebd5bae2a36c13c5746d7ab6f1d05c150aac68009298\",\"license\":\"BSD-3-Clause\"},\"contracts/Tokens/VAI/VAIControllerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.25;\\n\\nimport { VTokenInterface } from \\\"../VTokens/VTokenInterfaces.sol\\\";\\n\\ninterface VAIControllerInterface {\\n    function mintVAI(uint256 mintVAIAmount) external returns (uint256);\\n\\n    function repayVAI(uint256 amount) external returns (uint256, uint256);\\n\\n    function repayVAIBehalf(address borrower, uint256 amount) external returns (uint256, uint256);\\n\\n    function liquidateVAI(\\n        address borrower,\\n        uint256 repayAmount,\\n        VTokenInterface vTokenCollateral\\n    ) external returns (uint256, uint256);\\n\\n    function getMintableVAI(address minter) external view returns (uint256, uint256);\\n\\n    function getVAIAddress() external view returns (address);\\n\\n    function getVAIRepayAmount(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x69d2f9e13b7fbf0a29885048503642372d9ba3d37f2427d4b9cffb87eddd925b\",\"license\":\"BSD-3-Clause\"},\"contracts/Tokens/VTokens/VBep20.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.25;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { ComptrollerInterface } from \\\"../../Comptroller/ComptrollerInterface.sol\\\";\\nimport { InterestRateModelV8 } from \\\"../../InterestRateModels/InterestRateModelV8.sol\\\";\\nimport { VBep20Interface, VTokenInterface } from \\\"./VTokenInterfaces.sol\\\";\\nimport { VToken } from \\\"./VToken.sol\\\";\\n\\n/**\\n * @title Venus's VBep20 Contract\\n * @notice vTokens which wrap an ERC-20 underlying\\n * @author Venus\\n */\\ncontract VBep20 is VToken, VBep20Interface {\\n    using SafeERC20 for IERC20;\\n\\n    /*** User Interface ***/\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receives vTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits Transfer event\\n    // @custom:event Emits Mint event\\n    function mint(uint mintAmount) external returns (uint) {\\n        (uint err, ) = mintInternal(mintAmount);\\n        return err;\\n    }\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receiver receives vTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param receiver The account which is receiving the vTokens\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits Transfer event\\n    // @custom:event Emits MintBehalf event\\n    function mintBehalf(address receiver, uint mintAmount) external returns (uint) {\\n        (uint err, ) = mintBehalfInternal(receiver, mintAmount);\\n        return err;\\n    }\\n\\n    /**\\n     * @notice Sender redeems vTokens in exchange for the underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemTokens The number of vTokens to redeem into underlying\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits Redeem event on success\\n    // @custom:event Emits Transfer event on success\\n    // @custom:event Emits RedeemFee when fee is charged by the treasury\\n    function redeem(uint redeemTokens) external returns (uint) {\\n        return redeemInternal(msg.sender, payable(msg.sender), redeemTokens);\\n    }\\n\\n    /**\\n     * @notice Sender redeems assets on behalf of some other address. This function is only available\\n     *   for senders, explicitly marked as delegates of the supplier using `comptroller.updateDelegate`\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemer The user on behalf of whom to redeem\\n     * @param redeemTokens The number of vTokens to redeem into underlying\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits Redeem event on success\\n    // @custom:event Emits Transfer event on success\\n    // @custom:event Emits RedeemFee when fee is charged by the treasury\\n    function redeemBehalf(address redeemer, uint redeemTokens) external returns (uint) {\\n        require(comptroller.approvedDelegates(redeemer, msg.sender), \\\"not an approved delegate\\\");\\n\\n        return redeemInternal(redeemer, payable(msg.sender), redeemTokens);\\n    }\\n\\n    /**\\n     * @notice Sender redeems vTokens in exchange for a specified amount of underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemAmount The amount of underlying to redeem\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits Redeem event on success\\n    // @custom:event Emits Transfer event on success\\n    // @custom:event Emits RedeemFee when fee is charged by the treasury\\n    function redeemUnderlying(uint redeemAmount) external returns (uint) {\\n        return redeemUnderlyingInternal(msg.sender, payable(msg.sender), redeemAmount);\\n    }\\n\\n    /**\\n     * @notice Sender redeems underlying assets on behalf of some other address. This function is only available\\n     *   for senders, explicitly marked as delegates of the supplier using `comptroller.updateDelegate`\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemer, on behalf of whom to redeem\\n     * @param redeemAmount The amount of underlying to receive from redeeming vTokens\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits Redeem event on success\\n    // @custom:event Emits Transfer event on success\\n    // @custom:event Emits RedeemFee when fee is charged by the treasury\\n    function redeemUnderlyingBehalf(address redeemer, uint redeemAmount) external returns (uint) {\\n        require(comptroller.approvedDelegates(redeemer, msg.sender), \\\"not an approved delegate\\\");\\n\\n        return redeemUnderlyingInternal(redeemer, payable(msg.sender), redeemAmount);\\n    }\\n\\n    /**\\n     * @notice Sender borrows assets from the protocol to their own address\\n     * @param borrowAmount The amount of the underlying asset to borrow\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits Borrow event on success\\n    function borrow(uint borrowAmount) external returns (uint) {\\n        return borrowInternal(msg.sender, payable(msg.sender), borrowAmount);\\n    }\\n\\n    /**\\n     * @notice Sender borrows assets on behalf of some other address. This function is only available\\n     *   for senders, explicitly marked as delegates of the borrower using `comptroller.updateDelegate`\\n     * @param borrower The borrower, on behalf of whom to borrow.\\n     * @param borrowAmount The amount of the underlying asset to borrow\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits Borrow event on success\\n    function borrowBehalf(address borrower, uint borrowAmount) external returns (uint) {\\n        require(comptroller.approvedDelegates(borrower, msg.sender), \\\"not an approved delegate\\\");\\n        return borrowInternal(borrower, payable(msg.sender), borrowAmount);\\n    }\\n\\n    /**\\n     * @notice Sender repays their own borrow\\n     * @param repayAmount The amount to repay\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits RepayBorrow event on success\\n    function repayBorrow(uint repayAmount) external returns (uint) {\\n        (uint err, ) = repayBorrowInternal(repayAmount);\\n        return err;\\n    }\\n\\n    /**\\n     * @notice Sender repays a borrow belonging to another borrowing account\\n     * @param borrower The account with the debt being payed off\\n     * @param repayAmount The amount to repay\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits RepayBorrow event on success\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint) {\\n        (uint err, ) = repayBorrowBehalfInternal(borrower, repayAmount);\\n        return err;\\n    }\\n\\n    /**\\n     * @notice The sender liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this vToken to be liquidated\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @param vTokenCollateral The market in which to seize collateral from the borrower\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emit LiquidateBorrow event on success\\n    function liquidateBorrow(\\n        address borrower,\\n        uint repayAmount,\\n        VTokenInterface vTokenCollateral\\n    ) external returns (uint) {\\n        (uint err, ) = liquidateBorrowInternal(borrower, repayAmount, vTokenCollateral);\\n        return err;\\n    }\\n\\n    /**\\n     * @notice The sender adds to reserves.\\n     * @param addAmount The amount of underlying tokens to add as reserves\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits ReservesAdded event\\n    function _addReserves(uint addAmount) external returns (uint) {\\n        return _addReservesInternal(addAmount);\\n    }\\n\\n    /**\\n     * @notice Initialize the new money market\\n     * @param underlying_ The address of the underlying asset\\n     * @param comptroller_ The address of the Comptroller\\n     * @param interestRateModel_ The address of the interest rate model\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n     * @param name_ BEP-20 name of this token\\n     * @param symbol_ BEP-20 symbol of this token\\n     * @param decimals_ BEP-20 decimal precision of this token\\n     */\\n    function initialize(\\n        address underlying_,\\n        ComptrollerInterface comptroller_,\\n        InterestRateModelV8 interestRateModel_,\\n        uint initialExchangeRateMantissa_,\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) public {\\n        // VToken initialize does the bulk of the work\\n        super.initialize(comptroller_, interestRateModel_, initialExchangeRateMantissa_, name_, symbol_, decimals_);\\n\\n        // Set underlying and sanity check it\\n        underlying = underlying_;\\n        IERC20(underlying).totalSupply();\\n    }\\n\\n    /*** Safe Token ***/\\n\\n    /**\\n     * @dev Similar to ERC-20 transfer, but handles tokens that have transfer fees.\\n     *      This function returns the actual amount received,\\n     *      which may be less than `amount` if there is a fee attached to the transfer.\\n     * @param from Sender of the underlying tokens\\n     * @param amount Amount of underlying to transfer\\n     * @return Actual amount received\\n     */\\n    function doTransferIn(address from, uint256 amount) internal virtual override returns (uint256) {\\n        IERC20 token = IERC20(underlying);\\n        uint256 balanceBefore = token.balanceOf(address(this));\\n        token.safeTransferFrom(from, address(this), amount);\\n        uint256 balanceAfter = token.balanceOf(address(this));\\n        // Return the amount that was *actually* transferred\\n        return balanceAfter - balanceBefore;\\n    }\\n\\n    /**\\n     * @dev Just a regular ERC-20 transfer, reverts on failure\\n     * @param to Receiver of the underlying tokens\\n     * @param amount Amount of underlying to transfer\\n     */\\n    function doTransferOut(address payable to, uint256 amount) internal virtual override {\\n        IERC20 token = IERC20(underlying);\\n        token.safeTransfer(to, amount);\\n    }\\n\\n    /**\\n     * @notice Gets balance of this contract in terms of the underlying\\n     * @dev This excludes the value of the current message, if any\\n     * @return The quantity of underlying tokens owned by this contract\\n     */\\n    function getCashPrior() internal view override returns (uint) {\\n        return IERC20(underlying).balanceOf(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x5c7901e5f3c83c48a62b9f4a4287ad51db9963b7a27d72295090759bd29aa7a9\",\"license\":\"BSD-3-Clause\"},\"contracts/Tokens/VTokens/VToken.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.25;\\n\\nimport { IAccessControlManagerV8 } from \\\"@venusprotocol/governance-contracts/contracts/Governance/IAccessControlManagerV8.sol\\\";\\nimport { IProtocolShareReserve } from \\\"../../external/IProtocolShareReserve.sol\\\";\\nimport { ComptrollerInterface, IComptroller } from \\\"../../Comptroller/ComptrollerInterface.sol\\\";\\nimport { TokenErrorReporter } from \\\"../../Utils/ErrorReporter.sol\\\";\\nimport { Exponential } from \\\"../../Utils/Exponential.sol\\\";\\nimport { InterestRateModelV8 } from \\\"../../InterestRateModels/InterestRateModelV8.sol\\\";\\nimport { VTokenInterface } from \\\"./VTokenInterfaces.sol\\\";\\n\\n/**\\n * @title Venus's vToken Contract\\n * @notice Abstract base for vTokens\\n * @author Venus\\n */\\nabstract contract VToken is VTokenInterface, Exponential, TokenErrorReporter {\\n    struct MintLocalVars {\\n        MathError mathErr;\\n        uint exchangeRateMantissa;\\n        uint mintTokens;\\n        uint totalSupplyNew;\\n        uint accountTokensNew;\\n        uint actualMintAmount;\\n    }\\n\\n    struct RedeemLocalVars {\\n        MathError mathErr;\\n        uint exchangeRateMantissa;\\n        uint redeemTokens;\\n        uint redeemAmount;\\n        uint totalSupplyNew;\\n        uint accountTokensNew;\\n    }\\n\\n    struct BorrowLocalVars {\\n        MathError mathErr;\\n        uint accountBorrows;\\n        uint accountBorrowsNew;\\n        uint totalBorrowsNew;\\n    }\\n\\n    struct RepayBorrowLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint repayAmount;\\n        uint borrowerIndex;\\n        uint accountBorrows;\\n        uint accountBorrowsNew;\\n        uint totalBorrowsNew;\\n        uint actualRepayAmount;\\n    }\\n\\n    /*** Reentrancy Guard ***/\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     */\\n    modifier nonReentrant() {\\n        require(_notEntered, \\\"re-entered\\\");\\n        _notEntered = false;\\n        _;\\n        _notEntered = true; // get a gas-refund post-Istanbul\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    // @custom:event Emits Transfer event\\n    function transfer(address dst, uint256 amount) external override nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, msg.sender, dst, amount) == uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    // @custom:event Emits Transfer event\\n    function transferFrom(address src, address dst, uint256 amount) external override nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, src, dst, amount) == uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (type(uint256).max means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    // @custom:event Emits Approval event on successful approve\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\n        transferAllowances[msg.sender][spender] = amount;\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the underlying balance of the `owner`\\n     * @dev This also accrues interest in a transaction\\n     * @param owner The address of the account to query\\n     * @return The amount of underlying owned by `owner`\\n     */\\n    function balanceOfUnderlying(address owner) external override returns (uint) {\\n        Exp memory exchangeRate = Exp({ mantissa: exchangeRateCurrent() });\\n        (MathError mErr, uint balance) = mulScalarTruncate(exchangeRate, accountTokens[owner]);\\n        ensureNoMathError(mErr);\\n        return balance;\\n    }\\n\\n    /**\\n     * @notice Returns the current total borrows plus accrued interest\\n     * @return The total borrows with interest\\n     */\\n    function totalBorrowsCurrent() external override nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return totalBorrows;\\n    }\\n\\n    /**\\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\\n     * @param account The address whose balance should be calculated after updating borrowIndex\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceCurrent(address account) external override nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return borrowBalanceStored(account);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Will fail unless called by another vToken during the process of liquidation.\\n     *  Its absolutely critical to use msg.sender as the borrowed vToken and not a parameter.\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of vTokens to seize\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits Transfer event\\n    function seize(\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens\\n    ) external override nonReentrant returns (uint) {\\n        return seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\n    }\\n\\n    /**\\n     * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n     * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n     * @param newPendingAdmin New pending admin.\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits NewPendingAdmin event with old and new admin addresses\\n    function _setPendingAdmin(address payable newPendingAdmin) external override returns (uint) {\\n        // Check caller = admin\\n        ensureAdmin(msg.sender);\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n     * @dev Admin function for pending admin to accept role and update admin\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits NewAdmin event on successful acceptance\\n    // @custom:event Emits NewPendingAdmin event with null new pending admin\\n    function _acceptAdmin() external override returns (uint) {\\n        // Check caller is pendingAdmin\\n        if (msg.sender != pendingAdmin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\\n        }\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = payable(address(0));\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice accrues interest and sets a new reserve factor for the protocol using `_setReserveFactorFresh`\\n     * @dev Governor function to accrue interest and set a new reserve factor\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits NewReserveFactor event\\n    function _setReserveFactor(uint newReserveFactorMantissa_) external override nonReentrant returns (uint) {\\n        ensureAllowed(\\\"_setReserveFactor(uint256)\\\");\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reserve factor change failed.\\n            return fail(Error(error), FailureInfo.SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\\n        return _setReserveFactorFresh(newReserveFactorMantissa_);\\n    }\\n\\n    /**\\n     * @notice Sets the address of the access control manager of this contract\\n     * @dev Admin function to set the access control address\\n     * @param newAccessControlManagerAddress New address for the access control\\n     * @return uint 0=success, otherwise will revert\\n     */\\n    function setAccessControlManager(address newAccessControlManagerAddress) external returns (uint) {\\n        // Check caller is admin\\n        ensureAdmin(msg.sender);\\n\\n        ensureNonZeroAddress(newAccessControlManagerAddress);\\n\\n        emit NewAccessControlManager(accessControlManager, newAccessControlManagerAddress);\\n        accessControlManager = newAccessControlManagerAddress;\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring to protocol share reserve\\n     * @param reduceAmount_ Amount of reduction to reserves\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits ReservesReduced event\\n    function _reduceReserves(uint reduceAmount_) external virtual override nonReentrant returns (uint) {\\n        ensureAllowed(\\\"_reduceReserves(uint256)\\\");\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\n            return fail(Error(error), FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED);\\n        }\\n\\n        // If reserves were reduced in accrueInterest\\n        if (reduceReservesBlockNumber == block.number) return (uint(Error.NO_ERROR));\\n        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n        return _reduceReservesFresh(reduceAmount_);\\n    }\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return The number of tokens allowed to be spent (type(uint256).max means infinite)\\n     */\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\n        return transferAllowances[owner][spender];\\n    }\\n\\n    /**\\n     * @notice Get the token balance of the `owner`\\n     * @param owner The address of the account to query\\n     * @return The number of tokens owned by `owner`\\n     */\\n    function balanceOf(address owner) external view override returns (uint256) {\\n        return accountTokens[owner];\\n    }\\n\\n    /**\\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\\n     * @dev This is used by comptroller to more efficiently perform liquidity checks.\\n     * @param account Address of the account to snapshot\\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\n     */\\n    function getAccountSnapshot(address account) external view override returns (uint, uint, uint, uint) {\\n        uint vTokenBalance = accountTokens[account];\\n        uint borrowBalance;\\n        uint exchangeRateMantissa;\\n\\n        MathError mErr;\\n\\n        (mErr, borrowBalance) = borrowBalanceStoredInternal(account);\\n        if (mErr != MathError.NO_ERROR) {\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\n        }\\n\\n        (mErr, exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (mErr != MathError.NO_ERROR) {\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\n        }\\n\\n        return (uint(Error.NO_ERROR), vTokenBalance, borrowBalance, exchangeRateMantissa);\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block supply interest rate for this vToken\\n     * @return The supply interest rate per block, scaled by 1e18\\n     */\\n    function supplyRatePerBlock() external view override returns (uint) {\\n        return interestRateModel.getSupplyRate(getCashPrior(), totalBorrows, totalReserves, reserveFactorMantissa);\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block borrow interest rate for this vToken\\n     * @return The borrow interest rate per block, scaled by 1e18\\n     */\\n    function borrowRatePerBlock() external view override returns (uint) {\\n        return interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, totalReserves);\\n    }\\n\\n    /**\\n     * @notice Get cash balance of this vToken in the underlying asset\\n     * @return The quantity of underlying asset owned by this contract\\n     */\\n    function getCash() external view override returns (uint) {\\n        return getCashPrior();\\n    }\\n\\n    /**\\n     * @notice Governance function to set new threshold of block difference after which funds will be sent to the protocol share reserve\\n     * @param newReduceReservesBlockDelta_ block difference value\\n     */\\n    function setReduceReservesBlockDelta(uint256 newReduceReservesBlockDelta_) external {\\n        require(newReduceReservesBlockDelta_ > 0, \\\"Invalid Input\\\");\\n        ensureAllowed(\\\"setReduceReservesBlockDelta(uint256)\\\");\\n        emit NewReduceReservesBlockDelta(reduceReservesBlockDelta, newReduceReservesBlockDelta_);\\n        reduceReservesBlockDelta = newReduceReservesBlockDelta_;\\n    }\\n\\n    /**\\n     * @notice Sets protocol share reserve contract address\\n     * @param protcolShareReserve_ The address of protocol share reserve contract\\n     */\\n    function setProtocolShareReserve(address payable protcolShareReserve_) external {\\n        // Check caller is admin\\n        ensureAdmin(msg.sender);\\n        ensureNonZeroAddress(protcolShareReserve_);\\n        emit NewProtocolShareReserve(protocolShareReserve, protcolShareReserve_);\\n        protocolShareReserve = protcolShareReserve_;\\n    }\\n\\n    /**\\n     * @notice Initialize the money market\\n     * @param comptroller_ The address of the Comptroller\\n     * @param interestRateModel_ The address of the interest rate model\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n     * @param name_ EIP-20 name of this token\\n     * @param symbol_ EIP-20 symbol of this token\\n     * @param decimals_ EIP-20 decimal precision of this token\\n     */\\n    function initialize(\\n        ComptrollerInterface comptroller_,\\n        InterestRateModelV8 interestRateModel_,\\n        uint initialExchangeRateMantissa_,\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) public {\\n        ensureAdmin(msg.sender);\\n        require(accrualBlockNumber == 0 && borrowIndex == 0, \\\"market may only be initialized once\\\");\\n\\n        // Set initial exchange rate\\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\\n        require(initialExchangeRateMantissa > 0, \\\"initial exchange rate must be greater than zero.\\\");\\n\\n        // Set the comptroller\\n        uint err = _setComptroller(comptroller_);\\n        require(err == uint(Error.NO_ERROR), \\\"setting comptroller failed\\\");\\n\\n        // Initialize block number and borrow index (block number mocks depend on comptroller being set)\\n        accrualBlockNumber = block.number;\\n        borrowIndex = mantissaOne;\\n\\n        // Set the interest rate model (depends on block number / borrow index)\\n        err = _setInterestRateModelFresh(interestRateModel_);\\n        require(err == uint(Error.NO_ERROR), \\\"setting interest rate model failed\\\");\\n\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = decimals_;\\n\\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @notice Accrue interest then return the up-to-date exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateCurrent() public override nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return exchangeRateStored();\\n    }\\n\\n    /**\\n     * @notice Applies accrued interest to total borrows and reserves\\n     * @dev This calculates interest accrued from the last checkpointed block\\n     * up to the current block and writes new checkpoint to storage and\\n     * reduce spread reserves to protocol share reserve\\n     * if currentBlock - reduceReservesBlockNumber >= blockDelta\\n     */\\n    // @custom:event Emits AccrueInterest event\\n    function accrueInterest() public virtual override returns (uint) {\\n        /* Remember the initial block number */\\n        uint currentBlockNumber = block.number;\\n        uint accrualBlockNumberPrior = accrualBlockNumber;\\n\\n        /* Short-circuit accumulating 0 interest */\\n        if (accrualBlockNumberPrior == currentBlockNumber) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        /* Read the previous values out of storage */\\n        uint cashPrior = getCashPrior();\\n        uint borrowsPrior = totalBorrows;\\n        uint reservesPrior = totalReserves;\\n        uint borrowIndexPrior = borrowIndex;\\n\\n        /* Calculate the current borrow interest rate */\\n        uint borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior, borrowsPrior, reservesPrior);\\n        require(borrowRateMantissa <= borrowRateMaxMantissa, \\\"borrow rate is absurdly high\\\");\\n\\n        /* Calculate the number of blocks elapsed since the last accrual */\\n        (MathError mathErr, uint blockDelta) = subUInt(currentBlockNumber, accrualBlockNumberPrior);\\n        ensureNoMathError(mathErr);\\n\\n        /*\\n         * Calculate the interest accumulated into borrows and reserves and the new index:\\n         *  simpleInterestFactor = borrowRate * blockDelta\\n         *  interestAccumulated = simpleInterestFactor * totalBorrows\\n         *  totalBorrowsNew = interestAccumulated + totalBorrows\\n         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\\n         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\\n         */\\n\\n        Exp memory simpleInterestFactor;\\n        uint interestAccumulated;\\n        uint totalBorrowsNew;\\n        uint totalReservesNew;\\n        uint borrowIndexNew;\\n\\n        (mathErr, simpleInterestFactor) = mulScalar(Exp({ mantissa: borrowRateMantissa }), blockDelta);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\\n                    uint(mathErr)\\n                );\\n        }\\n\\n        (mathErr, interestAccumulated) = mulScalarTruncate(simpleInterestFactor, borrowsPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\\n                    uint(mathErr)\\n                );\\n        }\\n\\n        (mathErr, totalBorrowsNew) = addUInt(interestAccumulated, borrowsPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\\n                    uint(mathErr)\\n                );\\n        }\\n\\n        (mathErr, totalReservesNew) = mulScalarTruncateAddUInt(\\n            Exp({ mantissa: reserveFactorMantissa }),\\n            interestAccumulated,\\n            reservesPrior\\n        );\\n        if (mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\\n                    uint(mathErr)\\n                );\\n        }\\n\\n        (mathErr, borrowIndexNew) = mulScalarTruncateAddUInt(simpleInterestFactor, borrowIndexPrior, borrowIndexPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\\n                    uint(mathErr)\\n                );\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accrualBlockNumber = currentBlockNumber;\\n        borrowIndex = borrowIndexNew;\\n        totalBorrows = totalBorrowsNew;\\n        totalReserves = totalReservesNew;\\n\\n        (mathErr, blockDelta) = subUInt(currentBlockNumber, reduceReservesBlockNumber);\\n        ensureNoMathError(mathErr);\\n        if (blockDelta >= reduceReservesBlockDelta) {\\n            reduceReservesBlockNumber = currentBlockNumber;\\n            if (cashPrior < totalReservesNew) {\\n                _reduceReservesFresh(cashPrior);\\n            } else {\\n                _reduceReservesFresh(totalReservesNew);\\n            }\\n        }\\n\\n        /* We emit an AccrueInterest event */\\n        emit AccrueInterest(cashPrior, interestAccumulated, borrowIndexNew, totalBorrowsNew);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets a new comptroller for the market\\n     * @dev Admin function to set a new comptroller\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits NewComptroller event\\n    function _setComptroller(ComptrollerInterface newComptroller) public override returns (uint) {\\n        // Check caller is admin\\n        ensureAdmin(msg.sender);\\n\\n        ComptrollerInterface oldComptroller = comptroller;\\n        // Ensure invoke comptroller.isComptroller() returns true\\n        require(newComptroller.isComptroller(), \\\"marker method returned false\\\");\\n\\n        // Set market's comptroller to newComptroller\\n        comptroller = newComptroller;\\n\\n        // Emit NewComptroller(oldComptroller, newComptroller)\\n        emit NewComptroller(oldComptroller, newComptroller);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and updates the interest rate model using _setInterestRateModelFresh\\n     * @dev Governance function to accrue interest and update the interest rate model\\n     * @param newInterestRateModel_ The new interest rate model to use\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function _setInterestRateModel(InterestRateModelV8 newInterestRateModel_) public override returns (uint) {\\n        ensureAllowed(\\\"_setInterestRateModel(address)\\\");\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted change of interest rate model failed\\n            return fail(Error(error), FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\\n        return _setInterestRateModelFresh(newInterestRateModel_);\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the VToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStored() public view override returns (uint) {\\n        (MathError err, uint result) = exchangeRateStoredInternal();\\n        ensureNoMathError(err);\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceStored(address account) public view override returns (uint) {\\n        (MathError err, uint result) = borrowBalanceStoredInternal(account);\\n        ensureNoMathError(err);\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Transfers `tokens` tokens from `src` to `dst` by `spender`\\n     * @dev Called by both `transfer` and `transferFrom` internally\\n     * @param spender The address of the account performing the transfer\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param tokens The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferTokens(address spender, address src, address dst, uint tokens) internal returns (uint) {\\n        /* Fail if transfer not allowed */\\n        uint allowed = comptroller.transferAllowed(address(this), src, dst, tokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.TRANSFER_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Do not allow self-transfers */\\n        if (src == dst) {\\n            return fail(Error.BAD_INPUT, FailureInfo.TRANSFER_NOT_ALLOWED);\\n        }\\n\\n        /* Get the allowance, infinite for the account owner */\\n        uint startingAllowance = 0;\\n        if (spender == src) {\\n            startingAllowance = type(uint256).max;\\n        } else {\\n            startingAllowance = transferAllowances[src][spender];\\n        }\\n\\n        /* Do the calculations, checking for {under,over}flow */\\n        MathError mathErr;\\n        uint allowanceNew;\\n        uint srvTokensNew;\\n        uint dstTokensNew;\\n\\n        (mathErr, allowanceNew) = subUInt(startingAllowance, tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ALLOWED);\\n        }\\n\\n        (mathErr, srvTokensNew) = subUInt(accountTokens[src], tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ENOUGH);\\n        }\\n\\n        (mathErr, dstTokensNew) = addUInt(accountTokens[dst], tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_TOO_MUCH);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        accountTokens[src] = srvTokensNew;\\n        accountTokens[dst] = dstTokensNew;\\n\\n        /* Eat some of the allowance (if necessary) */\\n        if (startingAllowance != type(uint256).max) {\\n            transferAllowances[src][spender] = allowanceNew;\\n        }\\n\\n        /* We emit a Transfer event */\\n        emit Transfer(src, dst, tokens);\\n\\n        comptroller.transferVerify(address(this), src, dst, tokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receives vTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintInternal(uint mintAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted mint failed\\n            return (fail(Error(error), FailureInfo.MINT_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\n        return mintFresh(msg.sender, mintAmount);\\n    }\\n\\n    /**\\n     * @notice User supplies assets into the market and receives vTokens in exchange\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param minter The address of the account which is supplying the assets\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintFresh(address minter, uint mintAmount) internal returns (uint, uint) {\\n        /* Fail if mint not allowed */\\n        uint allowed = comptroller.mintAllowed(address(this), minter, mintAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != block.number) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK), 0);\\n        }\\n\\n        MintLocalVars memory vars;\\n\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr)), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         *  We call `doTransferIn` for the minter and the mintAmount.\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\n         *  side-effects occurred. The function returns the amount actually transferred,\\n         *  in case of a fee. On success, the vToken holds an additional `actualMintAmount`\\n         *  of cash.\\n         */\\n        vars.actualMintAmount = doTransferIn(minter, mintAmount);\\n\\n        /*\\n         * We get the current exchange rate and calculate the number of vTokens to be minted:\\n         *  mintTokens = actualMintAmount / exchangeRate\\n         */\\n\\n        (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(\\n            vars.actualMintAmount,\\n            Exp({ mantissa: vars.exchangeRateMantissa })\\n        );\\n        ensureNoMathError(vars.mathErr);\\n\\n        /*\\n         * We calculate the new total supply of vTokens and minter token balance, checking for overflow:\\n         *  totalSupplyNew = totalSupply + mintTokens\\n         *  accountTokensNew = accountTokens[minter] + mintTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = addUInt(totalSupply, vars.mintTokens);\\n        ensureNoMathError(vars.mathErr);\\n        (vars.mathErr, vars.accountTokensNew) = addUInt(accountTokens[minter], vars.mintTokens);\\n        ensureNoMathError(vars.mathErr);\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[minter] = vars.accountTokensNew;\\n\\n        /* We emit a Mint event, and a Transfer event */\\n        emit Mint(minter, vars.actualMintAmount, vars.mintTokens, vars.accountTokensNew);\\n        emit Transfer(address(this), minter, vars.mintTokens);\\n\\n        /* We call the defense and prime accrue interest hook */\\n        comptroller.mintVerify(address(this), minter, vars.actualMintAmount, vars.mintTokens);\\n\\n        return (uint(Error.NO_ERROR), vars.actualMintAmount);\\n    }\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receiver receives vTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param receiver The address of the account which is receiving the vTokens\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintBehalfInternal(address receiver, uint mintAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted mintBehalf failed\\n            return (fail(Error(error), FailureInfo.MINT_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // mintBelahfFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\n        return mintBehalfFresh(msg.sender, receiver, mintAmount);\\n    }\\n\\n    /**\\n     * @notice Payer supplies assets into the market and receiver receives vTokens in exchange\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param payer The address of the account which is paying the underlying token\\n     * @param receiver The address of the account which is receiving vToken\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintBehalfFresh(address payer, address receiver, uint mintAmount) internal returns (uint, uint) {\\n        ensureNonZeroAddress(receiver);\\n        /* Fail if mint not allowed */\\n        uint allowed = comptroller.mintAllowed(address(this), receiver, mintAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != block.number) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK), 0);\\n        }\\n\\n        MintLocalVars memory vars;\\n\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr)), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         *  We call `doTransferIn` for the payer and the mintAmount.\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\n         *  side-effects occurred. The function returns the amount actually transferred,\\n         *  in case of a fee. On success, the vToken holds an additional `actualMintAmount`\\n         *  of cash.\\n         */\\n        vars.actualMintAmount = doTransferIn(payer, mintAmount);\\n\\n        /*\\n         * We get the current exchange rate and calculate the number of vTokens to be minted:\\n         *  mintTokens = actualMintAmount / exchangeRate\\n         */\\n\\n        (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(\\n            vars.actualMintAmount,\\n            Exp({ mantissa: vars.exchangeRateMantissa })\\n        );\\n        ensureNoMathError(vars.mathErr);\\n\\n        /*\\n         * We calculate the new total supply of vTokens and receiver token balance, checking for overflow:\\n         *  totalSupplyNew = totalSupply + mintTokens\\n         *  accountTokensNew = accountTokens[receiver] + mintTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = addUInt(totalSupply, vars.mintTokens);\\n        ensureNoMathError(vars.mathErr);\\n\\n        (vars.mathErr, vars.accountTokensNew) = addUInt(accountTokens[receiver], vars.mintTokens);\\n        ensureNoMathError(vars.mathErr);\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[receiver] = vars.accountTokensNew;\\n\\n        /* We emit a MintBehalf event, and a Transfer event */\\n        emit MintBehalf(payer, receiver, vars.actualMintAmount, vars.mintTokens, vars.accountTokensNew);\\n        emit Transfer(address(this), receiver, vars.mintTokens);\\n\\n        /* We call the defense and prime accrue interest hook */\\n        comptroller.mintVerify(address(this), receiver, vars.actualMintAmount, vars.mintTokens);\\n\\n        return (uint(Error.NO_ERROR), vars.actualMintAmount);\\n    }\\n\\n    /**\\n     * @notice Redeemer redeems vTokens in exchange for the underlying assets, transferred to the receiver. Redeemer and receiver can be the same\\n     *   address, or different addresses if the receiver was previously approved by the redeemer as a valid delegate (see MarketFacet.updateDelegate)\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemer The address of the account which is redeeming the tokens\\n     * @param receiver The receiver of the tokens\\n     * @param redeemTokens The number of vTokens to redeem into underlying\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function redeemInternal(\\n        address redeemer,\\n        address payable receiver,\\n        uint redeemTokens\\n    ) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n        }\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(redeemer, receiver, redeemTokens, 0);\\n    }\\n\\n    /**\\n     * @notice Sender redeems underlying assets on behalf of some other address. This function is only available\\n     *   for senders, explicitly marked as delegates of the supplier using `comptroller.updateDelegate`\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemer The address of the account which is redeeming the tokens\\n     * @param receiver The receiver of the tokens, if called by a delegate\\n     * @param redeemAmount The amount of underlying to receive from redeeming vTokens\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function redeemUnderlyingInternal(\\n        address redeemer,\\n        address payable receiver,\\n        uint redeemAmount\\n    ) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n        }\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(redeemer, receiver, 0, redeemAmount);\\n    }\\n\\n    /**\\n     * @notice Redeemer redeems vTokens in exchange for the underlying assets, transferred to the receiver. Redeemer and receiver can be the same\\n     *   address, or different addresses if the receiver was previously approved by the redeemer as a valid delegate (see MarketFacet.updateDelegate)\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param redeemer The address of the account which is redeeming the tokens\\n     * @param receiver The receiver of the tokens\\n     * @param redeemTokensIn The number of vTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @param redeemAmountIn The number of underlying tokens to receive from redeeming vTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // solhint-disable-next-line code-complexity\\n    function redeemFresh(\\n        address redeemer,\\n        address payable receiver,\\n        uint redeemTokensIn,\\n        uint redeemAmountIn\\n    ) internal returns (uint) {\\n        require(redeemTokensIn == 0 || redeemAmountIn == 0, \\\"one of redeemTokensIn or redeemAmountIn must be zero\\\");\\n\\n        RedeemLocalVars memory vars;\\n\\n        /* exchangeRate = invoke Exchange Rate Stored() */\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        ensureNoMathError(vars.mathErr);\\n\\n        /* If redeemTokensIn > 0: */\\n        if (redeemTokensIn > 0) {\\n            /*\\n             * We calculate the exchange rate and the amount of underlying to be redeemed:\\n             *  redeemTokens = redeemTokensIn\\n             *  redeemAmount = redeemTokensIn x exchangeRateCurrent\\n             */\\n            vars.redeemTokens = redeemTokensIn;\\n\\n            (vars.mathErr, vars.redeemAmount) = mulScalarTruncate(\\n                Exp({ mantissa: vars.exchangeRateMantissa }),\\n                redeemTokensIn\\n            );\\n            ensureNoMathError(vars.mathErr);\\n        } else {\\n            /*\\n             * We get the current exchange rate and calculate the amount to be redeemed:\\n             *  redeemTokens = redeemAmountIn / exchangeRate\\n             *  redeemAmount = redeemAmountIn\\n             */\\n\\n            (vars.mathErr, vars.redeemTokens) = divScalarByExpTruncate(\\n                redeemAmountIn,\\n                Exp({ mantissa: vars.exchangeRateMantissa })\\n            );\\n            ensureNoMathError(vars.mathErr);\\n\\n            vars.redeemAmount = redeemAmountIn;\\n        }\\n\\n        /* Fail if redeem not allowed */\\n        uint allowed = comptroller.redeemAllowed(address(this), redeemer, vars.redeemTokens);\\n        if (allowed != 0) {\\n            revert(\\\"math error\\\");\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != block.number) {\\n            revert(\\\"math error\\\");\\n        }\\n\\n        /*\\n         * We calculate the new total supply and redeemer balance, checking for underflow:\\n         *  totalSupplyNew = totalSupply - redeemTokens\\n         *  accountTokensNew = accountTokens[redeemer] - redeemTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = subUInt(totalSupply, vars.redeemTokens);\\n        ensureNoMathError(vars.mathErr);\\n\\n        (vars.mathErr, vars.accountTokensNew) = subUInt(accountTokens[redeemer], vars.redeemTokens);\\n        ensureNoMathError(vars.mathErr);\\n\\n        /* Fail gracefully if protocol has insufficient cash */\\n        if (getCashPrior() < vars.redeemAmount) {\\n            revert(\\\"math error\\\");\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[redeemer] = vars.accountTokensNew;\\n\\n        /*\\n         * We invoke doTransferOut for the receiver and the redeemAmount.\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\n         *  On success, the vToken has redeemAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n\\n        uint feeAmount;\\n        uint remainedAmount;\\n        if (IComptroller(address(comptroller)).treasuryPercent() != 0) {\\n            (vars.mathErr, feeAmount) = mulUInt(\\n                vars.redeemAmount,\\n                IComptroller(address(comptroller)).treasuryPercent()\\n            );\\n            ensureNoMathError(vars.mathErr);\\n\\n            (vars.mathErr, feeAmount) = divUInt(feeAmount, 1e18);\\n            ensureNoMathError(vars.mathErr);\\n\\n            (vars.mathErr, remainedAmount) = subUInt(vars.redeemAmount, feeAmount);\\n            ensureNoMathError(vars.mathErr);\\n\\n            address payable treasuryAddress = payable(IComptroller(address(comptroller)).treasuryAddress());\\n            doTransferOut(treasuryAddress, feeAmount);\\n\\n            emit RedeemFee(redeemer, feeAmount, vars.redeemTokens);\\n        } else {\\n            remainedAmount = vars.redeemAmount;\\n        }\\n\\n        doTransferOut(receiver, remainedAmount);\\n\\n        /* We emit a Transfer event, and a Redeem event */\\n        emit Transfer(redeemer, address(this), vars.redeemTokens);\\n        emit Redeem(redeemer, remainedAmount, vars.redeemTokens, vars.accountTokensNew);\\n\\n        /* We call the defense and prime accrue interest hook */\\n        comptroller.redeemVerify(address(this), redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Receiver gets the borrow on behalf of the borrower address\\n     * @param borrower The borrower, on behalf of whom to borrow\\n     * @param receiver The account that would receive the funds (can be the same as the borrower)\\n     * @param borrowAmount The amount of the underlying asset to borrow\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function borrowInternal(\\n        address borrower,\\n        address payable receiver,\\n        uint borrowAmount\\n    ) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return fail(Error(error), FailureInfo.BORROW_ACCRUE_INTEREST_FAILED);\\n        }\\n        // borrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return borrowFresh(borrower, receiver, borrowAmount);\\n    }\\n\\n    /**\\n     * @notice Receiver gets the borrow on behalf of the borrower address\\n     * @dev Before calling this function, ensure that the interest has been accrued\\n     * @param borrower The borrower, on behalf of whom to borrow\\n     * @param receiver The account that would receive the funds (can be the same as the borrower)\\n     * @param borrowAmount The amount of the underlying asset to borrow\\n     * @return uint Returns 0 on success, otherwise revert (see ErrorReporter.sol for details).\\n     */\\n    function borrowFresh(address borrower, address payable receiver, uint borrowAmount) internal returns (uint) {\\n        /* Revert if borrow not allowed */\\n        uint allowed = comptroller.borrowAllowed(address(this), borrower, borrowAmount);\\n        if (allowed != 0) {\\n            revert(\\\"math error\\\");\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != block.number) {\\n            revert(\\\"math error\\\");\\n        }\\n\\n        /* Revert if protocol has insufficient underlying cash */\\n        if (getCashPrior() < borrowAmount) {\\n            revert(\\\"math error\\\");\\n        }\\n\\n        BorrowLocalVars memory vars;\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on overflow:\\n         *  accountBorrowsNew = accountBorrows + borrowAmount\\n         *  totalBorrowsNew = totalBorrows + borrowAmount\\n         */\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n        ensureNoMathError(vars.mathErr);\\n\\n        (vars.mathErr, vars.accountBorrowsNew) = addUInt(vars.accountBorrows, borrowAmount);\\n        ensureNoMathError(vars.mathErr);\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = addUInt(totalBorrows, borrowAmount);\\n        ensureNoMathError(vars.mathErr);\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /*\\n         * We invoke doTransferOut for the receiver and the borrowAmount.\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\n         *  On success, the vToken borrowAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(receiver, borrowAmount);\\n\\n        /* We emit a Borrow event */\\n        emit Borrow(borrower, borrowAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense and prime accrue interest hook */\\n        comptroller.borrowVerify(address(this), borrower, borrowAmount);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender repays their own borrow\\n     * @param repayAmount The amount to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowInternal(uint repayAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.REPAY_BORROW_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        return repayBorrowFresh(msg.sender, msg.sender, repayAmount);\\n    }\\n\\n    /**\\n     * @notice Sender repays a borrow belonging to another borrowing account\\n     * @param borrower The account with the debt being payed off\\n     * @param repayAmount The amount to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowBehalfInternal(address borrower, uint repayAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.REPAY_BEHALF_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        return repayBorrowFresh(msg.sender, borrower, repayAmount);\\n    }\\n\\n    /**\\n     * @notice Borrows are repaid by another user (possibly the borrower).\\n     * @param payer The account paying off the borrow\\n     * @param borrower The account with the debt being payed off\\n     * @param repayAmount The amount of undelrying tokens being returned\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowFresh(address payer, address borrower, uint repayAmount) internal returns (uint, uint) {\\n        /* Fail if repayBorrow not allowed */\\n        uint allowed = comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount);\\n        if (allowed != 0) {\\n            return (\\n                failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION, allowed),\\n                0\\n            );\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != block.number) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.REPAY_BORROW_FRESHNESS_CHECK), 0);\\n        }\\n\\n        RepayBorrowLocalVars memory vars;\\n\\n        /* We remember the original borrowerIndex for verification purposes */\\n        vars.borrowerIndex = accountBorrows[borrower].interestIndex;\\n\\n        /* We fetch the amount the borrower owes, with accumulated interest */\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n                    uint(vars.mathErr)\\n                ),\\n                0\\n            );\\n        }\\n\\n        /* If repayAmount == type(uint256).max, repayAmount = accountBorrows */\\n        if (repayAmount == type(uint256).max) {\\n            vars.repayAmount = vars.accountBorrows;\\n        } else {\\n            vars.repayAmount = repayAmount;\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the payer and the repayAmount\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\n         *  On success, the vToken holds an additional repayAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *   it returns the amount actually transferred, in case of a fee.\\n         */\\n        vars.actualRepayAmount = doTransferIn(payer, vars.repayAmount);\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on underflow:\\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\\n         */\\n        (vars.mathErr, vars.accountBorrowsNew) = subUInt(vars.accountBorrows, vars.actualRepayAmount);\\n        ensureNoMathError(vars.mathErr);\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = subUInt(totalBorrows, vars.actualRepayAmount);\\n        ensureNoMathError(vars.mathErr);\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /* We emit a RepayBorrow event */\\n        emit RepayBorrow(payer, borrower, vars.actualRepayAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense and prime accrue interest hook */\\n        comptroller.repayBorrowVerify(address(this), payer, borrower, vars.actualRepayAmount, vars.borrowerIndex);\\n\\n        return (uint(Error.NO_ERROR), vars.actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice The sender liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this vToken to be liquidated\\n     * @param vTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateBorrowInternal(\\n        address borrower,\\n        uint repayAmount,\\n        VTokenInterface vTokenCollateral\\n    ) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED), 0);\\n        }\\n\\n        error = vTokenCollateral.accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED), 0);\\n        }\\n\\n        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return liquidateBorrowFresh(msg.sender, borrower, repayAmount, vTokenCollateral);\\n    }\\n\\n    /**\\n     * @notice The liquidator liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this vToken to be liquidated\\n     * @param liquidator The address repaying the borrow and seizing collateral\\n     * @param vTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    // solhint-disable-next-line code-complexity\\n    function liquidateBorrowFresh(\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        VTokenInterface vTokenCollateral\\n    ) internal returns (uint, uint) {\\n        /* Fail if liquidate not allowed */\\n        uint allowed = comptroller.liquidateBorrowAllowed(\\n            address(this),\\n            address(vTokenCollateral),\\n            liquidator,\\n            borrower,\\n            repayAmount\\n        );\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != block.number) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_FRESHNESS_CHECK), 0);\\n        }\\n\\n        /* Verify vTokenCollateral market's block number equals current block number */\\n        if (vTokenCollateral.accrualBlockNumber() != block.number) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK), 0);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            return (fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER), 0);\\n        }\\n\\n        /* Fail if repayAmount = 0 */\\n        if (repayAmount == 0) {\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO), 0);\\n        }\\n\\n        /* Fail if repayAmount = type(uint256).max */\\n        if (repayAmount == type(uint256).max) {\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX), 0);\\n        }\\n\\n        /* Fail if repayBorrow fails */\\n        (uint repayBorrowError, uint actualRepayAmount) = repayBorrowFresh(liquidator, borrower, repayAmount);\\n        if (repayBorrowError != uint(Error.NO_ERROR)) {\\n            return (fail(Error(repayBorrowError), FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We calculate the number of collateral tokens that will be seized */\\n        (uint amountSeizeError, uint seizeTokens) = comptroller.liquidateCalculateSeizeTokens(\\n            borrower,\\n            address(this),\\n            address(vTokenCollateral),\\n            actualRepayAmount\\n        );\\n        require(amountSeizeError == uint(Error.NO_ERROR), \\\"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\\\");\\n\\n        /* Revert if borrower collateral token balance < seizeTokens */\\n        require(vTokenCollateral.balanceOf(borrower) >= seizeTokens, \\\"LIQUIDATE_SEIZE_TOO_MUCH\\\");\\n\\n        // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\n        uint seizeError;\\n        if (address(vTokenCollateral) == address(this)) {\\n            seizeError = seizeInternal(address(this), liquidator, borrower, seizeTokens);\\n        } else {\\n            seizeError = vTokenCollateral.seize(liquidator, borrower, seizeTokens);\\n        }\\n\\n        /* Revert if seize tokens fails (since we cannot be sure of side effects) */\\n        require(seizeError == uint(Error.NO_ERROR), \\\"token seizure failed\\\");\\n\\n        /* We emit a LiquidateBorrow event */\\n        emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, address(vTokenCollateral), seizeTokens);\\n\\n        /* We call the defense and prime accrue interest hook */\\n        comptroller.liquidateBorrowVerify(\\n            address(this),\\n            address(vTokenCollateral),\\n            liquidator,\\n            borrower,\\n            actualRepayAmount,\\n            seizeTokens\\n        );\\n\\n        return (uint(Error.NO_ERROR), actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another vToken.\\n     *  Its absolutely critical to use msg.sender as the seizer vToken and not a parameter.\\n     * @param seizerToken The contract seizing the collateral (i.e. borrowed vToken)\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of vTokens to seize\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function seizeInternal(\\n        address seizerToken,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens\\n    ) internal returns (uint) {\\n        /* Fail if seize not allowed */\\n        uint allowed = comptroller.seizeAllowed(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_SEIZE_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            return fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER);\\n        }\\n\\n        MathError mathErr;\\n        uint borrowerTokensNew;\\n        uint liquidatorTokensNew;\\n\\n        /*\\n         * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\\n         *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\\n         *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\\n         */\\n        (mathErr, borrowerTokensNew) = subUInt(accountTokens[borrower], seizeTokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, liquidatorTokensNew) = addUInt(accountTokens[liquidator], seizeTokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED, uint(mathErr));\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accountTokens[borrower] = borrowerTokensNew;\\n        accountTokens[liquidator] = liquidatorTokensNew;\\n\\n        /* Emit a Transfer event */\\n        emit Transfer(borrower, liquidator, seizeTokens);\\n\\n        /* We call the defense and prime accrue interest hook */\\n        comptroller.seizeVerify(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets a new reserve factor for the protocol (requires fresh interest accrual)\\n     * @dev Governance function to set a new reserve factor\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function _setReserveFactorFresh(uint newReserveFactorMantissa) internal returns (uint) {\\n        // Verify market's block number equals current block number\\n        if (accrualBlockNumber != block.number) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK);\\n        }\\n\\n        // Check newReserveFactor \\u2264 maxReserveFactor\\n        if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\\n            return fail(Error.BAD_INPUT, FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);\\n        }\\n\\n        uint oldReserveFactorMantissa = reserveFactorMantissa;\\n        reserveFactorMantissa = newReserveFactorMantissa;\\n\\n        emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and adds reserves by transferring from `msg.sender`\\n     * @param addAmount Amount of addition to reserves\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function _addReservesInternal(uint addAmount) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\n            return fail(Error(error), FailureInfo.ADD_RESERVES_ACCRUE_INTEREST_FAILED);\\n        }\\n\\n        // _addReservesFresh emits reserve-addition-specific logs on errors, so we don't need to.\\n        (error, ) = _addReservesFresh(addAmount);\\n        return error;\\n    }\\n\\n    /**\\n     * @notice Add reserves by transferring from caller\\n     * @dev Requires fresh interest accrual\\n     * @param addAmount Amount of addition to reserves\\n     * @return (uint, uint) An error code (0=success, otherwise a failure (see ErrorReporter.sol for details)) and the actual amount added, net token fees\\n     */\\n    function _addReservesFresh(uint addAmount) internal returns (uint, uint) {\\n        // totalReserves + actualAddAmount\\n        uint totalReservesNew;\\n        uint actualAddAmount;\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != block.number) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.ADD_RESERVES_FRESH_CHECK), actualAddAmount);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the caller and the addAmount\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\n         *  On success, the vToken holds an additional addAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *  it returns the amount actually transferred, in case of a fee.\\n         */\\n\\n        actualAddAmount = doTransferIn(msg.sender, addAmount);\\n\\n        totalReservesNew = totalReserves + actualAddAmount;\\n\\n        /* Revert on overflow */\\n        require(totalReservesNew >= totalReserves, \\\"add reserves unexpected overflow\\\");\\n\\n        // Store reserves[n+1] = reserves[n] + actualAddAmount\\n        totalReserves = totalReservesNew;\\n\\n        /* Emit NewReserves(admin, actualAddAmount, reserves[n+1]) */\\n        emit ReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\\n\\n        /* Return (NO_ERROR, actualAddAmount) */\\n        return (uint(Error.NO_ERROR), actualAddAmount);\\n    }\\n\\n    /**\\n     * @notice Reduces reserves by transferring to protocol share reserve contract\\n     * @dev Requires fresh interest accrual\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function _reduceReservesFresh(uint reduceAmount) internal virtual returns (uint) {\\n        if (reduceAmount == 0) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != block.number) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);\\n        }\\n\\n        // Fail gracefully if protocol has insufficient underlying cash\\n        if (getCashPrior() < reduceAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);\\n        }\\n\\n        // Check reduceAmount \\u2264 reserves[n] (totalReserves)\\n        if (reduceAmount > totalReserves) {\\n            return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        // totalReserves - reduceAmount\\n        uint totalReservesNew = totalReserves - reduceAmount;\\n\\n        // Store reserves[n+1] = reserves[n] - reduceAmount\\n        totalReserves = totalReservesNew;\\n\\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n        doTransferOut(protocolShareReserve, reduceAmount);\\n\\n        IProtocolShareReserve(protocolShareReserve).updateAssetsState(\\n            address(comptroller),\\n            underlying,\\n            IProtocolShareReserve.IncomeType.SPREAD\\n        );\\n\\n        emit ReservesReduced(protocolShareReserve, reduceAmount, totalReservesNew);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice updates the interest rate model (requires fresh interest accrual)\\n     * @dev Governance function to update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function _setInterestRateModelFresh(InterestRateModelV8 newInterestRateModel) internal returns (uint) {\\n        // Used to store old model for use in the event that is emitted on success\\n        InterestRateModelV8 oldInterestRateModel;\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != block.number) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK);\\n        }\\n\\n        // Track the market's current interest rate model\\n        oldInterestRateModel = interestRateModel;\\n\\n        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\\n        require(newInterestRateModel.isInterestRateModel(), \\\"marker method returned false\\\");\\n\\n        // Set the interest rate model to newInterestRateModel\\n        interestRateModel = newInterestRateModel;\\n\\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\\n        emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /*** Safe Token ***/\\n\\n    /**\\n     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\n     *  This may revert due to insufficient balance or insufficient allowance.\\n     */\\n    function doTransferIn(address from, uint amount) internal virtual returns (uint);\\n\\n    /**\\n     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure rather than reverting.\\n     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\\n     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\\n     */\\n    function doTransferOut(address payable to, uint amount) internal virtual;\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return Tuple of error code and the calculated balance or 0 if error code is non-zero\\n     */\\n    function borrowBalanceStoredInternal(address account) internal view returns (MathError, uint) {\\n        /* Note: we do not assert that the market is up to date */\\n        MathError mathErr;\\n        uint principalTimesIndex;\\n        uint result;\\n\\n        /* Get borrowBalance and borrowIndex */\\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\n\\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\\n         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\n         */\\n        if (borrowSnapshot.principal == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        /* Calculate new borrow balance using the interest index:\\n         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\n         */\\n        (mathErr, principalTimesIndex) = mulUInt(borrowSnapshot.principal, borrowIndex);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        (mathErr, result) = divUInt(principalTimesIndex, borrowSnapshot.interestIndex);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, result);\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the vToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return Tuple of error code and calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStoredInternal() internal view virtual returns (MathError, uint) {\\n        uint _totalSupply = totalSupply;\\n        if (_totalSupply == 0) {\\n            /*\\n             * If there are no tokens minted:\\n             *  exchangeRate = initialExchangeRate\\n             */\\n            return (MathError.NO_ERROR, initialExchangeRateMantissa);\\n        } else {\\n            /*\\n             * Otherwise:\\n             *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\\n             */\\n            uint totalCash = getCashPrior();\\n            uint cashPlusBorrowsMinusReserves;\\n            Exp memory exchangeRate;\\n            MathError mathErr;\\n\\n            (mathErr, cashPlusBorrowsMinusReserves) = addThenSubUInt(totalCash, totalBorrows, totalReserves);\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n\\n            (mathErr, exchangeRate) = getExp(cashPlusBorrowsMinusReserves, _totalSupply);\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n\\n            return (MathError.NO_ERROR, exchangeRate.mantissa);\\n        }\\n    }\\n\\n    function ensureAllowed(string memory functionSig) private view {\\n        require(\\n            IAccessControlManagerV8(accessControlManager).isAllowedToCall(msg.sender, functionSig),\\n            \\\"access denied\\\"\\n        );\\n    }\\n\\n    function ensureAdmin(address caller_) private view {\\n        require(caller_ == admin, \\\"Unauthorized\\\");\\n    }\\n\\n    function ensureNoMathError(MathError mErr) private pure {\\n        require(mErr == MathError.NO_ERROR, \\\"math error\\\");\\n    }\\n\\n    function ensureNonZeroAddress(address address_) private pure {\\n        require(address_ != address(0), \\\"zero address\\\");\\n    }\\n\\n    /*** Safe Token ***/\\n\\n    /**\\n     * @notice Gets balance of this contract in terms of the underlying\\n     * @dev This excludes the value of the current message, if any\\n     * @return The quantity of underlying owned by this contract\\n     */\\n    function getCashPrior() internal view virtual returns (uint);\\n}\\n\",\"keccak256\":\"0x24ceb1a473f6e51ec1a7085b0a5b734c0104001bfddd3165b672e3ad2d5467d4\",\"license\":\"BSD-3-Clause\"},\"contracts/Tokens/VTokens/VTokenInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.25;\\n\\nimport { ComptrollerInterface } from \\\"../../Comptroller/ComptrollerInterface.sol\\\";\\nimport { InterestRateModelV8 } from \\\"../../InterestRateModels/InterestRateModelV8.sol\\\";\\n\\ncontract VTokenStorageBase {\\n    /**\\n     * @notice Container for borrow balance information\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n     */\\n    struct BorrowSnapshot {\\n        uint principal;\\n        uint interestIndex;\\n    }\\n\\n    /**\\n     * @dev Guard variable for re-entrancy checks\\n     */\\n    bool internal _notEntered;\\n\\n    /**\\n     * @notice EIP-20 token name for this token\\n     */\\n    string public name;\\n\\n    /**\\n     * @notice EIP-20 token symbol for this token\\n     */\\n    string public symbol;\\n\\n    /**\\n     * @notice EIP-20 token decimals for this token\\n     */\\n    uint8 public decimals;\\n\\n    /**\\n     * @notice Maximum borrow rate that can ever be applied (.0005% / block)\\n     */\\n\\n    uint internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n    /**\\n     * @notice Maximum fraction of interest that can be set aside for reserves\\n     */\\n    uint internal constant reserveFactorMaxMantissa = 1e18;\\n\\n    /**\\n     * @notice Administrator for this contract\\n     */\\n    address payable public admin;\\n\\n    /**\\n     * @notice Pending administrator for this contract\\n     */\\n    address payable public pendingAdmin;\\n\\n    /**\\n     * @notice Contract which oversees inter-vToken operations\\n     */\\n    ComptrollerInterface public comptroller;\\n\\n    /**\\n     * @notice Model which tells what the current interest rate should be\\n     */\\n    InterestRateModelV8 public interestRateModel;\\n\\n    /**\\n     * @notice Initial exchange rate used when minting the first VTokens (used when totalSupply = 0)\\n     */\\n    uint internal initialExchangeRateMantissa;\\n\\n    /**\\n     * @notice Fraction of interest currently set aside for reserves\\n     */\\n    uint public reserveFactorMantissa;\\n\\n    /**\\n     * @notice Block number that interest was last accrued at\\n     */\\n    uint public accrualBlockNumber;\\n\\n    /**\\n     * @notice Accumulator of the total earned interest rate since the opening of the market\\n     */\\n    uint public borrowIndex;\\n\\n    /**\\n     * @notice Total amount of outstanding borrows of the underlying in this market\\n     */\\n    uint public totalBorrows;\\n\\n    /**\\n     * @notice Total amount of reserves of the underlying held in this market\\n     */\\n    uint public totalReserves;\\n\\n    /**\\n     * @notice Total number of tokens in circulation\\n     */\\n    uint public totalSupply;\\n\\n    /**\\n     * @notice Official record of token balances for each account\\n     */\\n    mapping(address => uint) internal accountTokens;\\n\\n    /**\\n     * @notice Approved token transfer amounts on behalf of others\\n     */\\n    mapping(address => mapping(address => uint)) internal transferAllowances;\\n\\n    /**\\n     * @notice Mapping of account addresses to outstanding borrow balances\\n     */\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\n\\n    /**\\n     * @notice Underlying asset for this VToken\\n     */\\n    address public underlying;\\n\\n    /**\\n     * @notice Implementation address for this contract\\n     */\\n    address public implementation;\\n\\n    /**\\n     * @notice delta block after which reserves will be reduced\\n     */\\n    uint public reduceReservesBlockDelta;\\n\\n    /**\\n     * @notice last block number at which reserves were reduced\\n     */\\n    uint public reduceReservesBlockNumber;\\n\\n    /**\\n     * @notice address of protocol share reserve contract\\n     */\\n    address payable public protocolShareReserve;\\n\\n    /**\\n     * @notice address of accessControlManager\\n     */\\n\\n    address public accessControlManager;\\n}\\n\\ncontract VTokenStorage is VTokenStorageBase {\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\\nabstract contract VTokenInterface is VTokenStorage {\\n    /**\\n     * @notice Indicator that this is a vToken contract (for inspection)\\n     */\\n    bool public constant isVToken = true;\\n\\n    /*** Market Events ***/\\n\\n    /**\\n     * @notice Event emitted when interest is accrued\\n     */\\n    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when tokens are minted\\n     */\\n    event Mint(address minter, uint mintAmount, uint mintTokens, uint256 totalSupply);\\n\\n    /**\\n     * @notice Event emitted when tokens are minted behalf by payer to receiver\\n     */\\n    event MintBehalf(address payer, address receiver, uint mintAmount, uint mintTokens, uint256 totalSupply);\\n\\n    /**\\n     * @notice Event emitted when tokens are redeemed\\n     */\\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens, uint256 totalSupply);\\n\\n    /**\\n     * @notice Event emitted when tokens are redeemed and fee is transferred\\n     */\\n    event RedeemFee(address redeemer, uint feeAmount, uint redeemTokens);\\n\\n    /**\\n     * @notice Event emitted when underlying is borrowed\\n     */\\n    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is repaid\\n     */\\n    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is liquidated\\n     */\\n    event LiquidateBorrow(\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        address vTokenCollateral,\\n        uint seizeTokens\\n    );\\n\\n    /*** Admin Events ***/\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is changed\\n     */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is accepted, which means admin has been updated\\n     */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    /**\\n     * @notice Event emitted when comptroller is changed\\n     */\\n    event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\n\\n    /**\\n     * @notice Event emitted when interestRateModel is changed\\n     */\\n    event NewMarketInterestRateModel(\\n        InterestRateModelV8 oldInterestRateModel,\\n        InterestRateModelV8 newInterestRateModel\\n    );\\n\\n    /**\\n     * @notice Event emitted when the reserve factor is changed\\n     */\\n    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\\n\\n    /**\\n     * @notice Event emitted when the reserves are added\\n     */\\n    event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice Event emitted when the reserves are reduced\\n     */\\n    event ReservesReduced(address protocolShareReserve, uint reduceAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice EIP20 Transfer event\\n     */\\n    event Transfer(address indexed from, address indexed to, uint amount);\\n\\n    /**\\n     * @notice EIP20 Approval event\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\n\\n    /**\\n     * @notice Event emitted when block delta for reduce reserves get updated\\n     */\\n    event NewReduceReservesBlockDelta(uint256 oldReduceReservesBlockDelta, uint256 newReduceReservesBlockDelta);\\n\\n    /**\\n     * @notice Event emitted when address of ProtocolShareReserve contract get updated\\n     */\\n    event NewProtocolShareReserve(address indexed oldProtocolShareReserve, address indexed newProtocolShareReserve);\\n\\n    /// @notice Emitted when access control address is changed by admin\\n    event NewAccessControlManager(address oldAccessControlAddress, address newAccessControlAddress);\\n\\n    /*** User Interface ***/\\n\\n    function transfer(address dst, uint amount) external virtual returns (bool);\\n\\n    function transferFrom(address src, address dst, uint amount) external virtual returns (bool);\\n\\n    function approve(address spender, uint amount) external virtual returns (bool);\\n\\n    function balanceOfUnderlying(address owner) external virtual returns (uint);\\n\\n    function totalBorrowsCurrent() external virtual returns (uint);\\n\\n    function borrowBalanceCurrent(address account) external virtual returns (uint);\\n\\n    function seize(address liquidator, address borrower, uint seizeTokens) external virtual returns (uint);\\n\\n    /*** Admin Function ***/\\n    function _setPendingAdmin(address payable newPendingAdmin) external virtual returns (uint);\\n\\n    /*** Admin Function ***/\\n    function _acceptAdmin() external virtual returns (uint);\\n\\n    /*** Admin Function ***/\\n    function _setReserveFactor(uint newReserveFactorMantissa) external virtual returns (uint);\\n\\n    /*** Admin Function ***/\\n    function _reduceReserves(uint reduceAmount) external virtual returns (uint);\\n\\n    function balanceOf(address owner) external view virtual returns (uint);\\n\\n    function allowance(address owner, address spender) external view virtual returns (uint);\\n\\n    function getAccountSnapshot(address account) external view virtual returns (uint, uint, uint, uint);\\n\\n    function borrowRatePerBlock() external view virtual returns (uint);\\n\\n    function supplyRatePerBlock() external view virtual returns (uint);\\n\\n    function getCash() external view virtual returns (uint);\\n\\n    function exchangeRateCurrent() public virtual returns (uint);\\n\\n    function accrueInterest() public virtual returns (uint);\\n\\n    /*** Admin Function ***/\\n    function _setComptroller(ComptrollerInterface newComptroller) public virtual returns (uint);\\n\\n    /*** Admin Function ***/\\n    function _setInterestRateModel(InterestRateModelV8 newInterestRateModel) public virtual returns (uint);\\n\\n    function borrowBalanceStored(address account) public view virtual returns (uint);\\n\\n    function exchangeRateStored() public view virtual returns (uint);\\n}\\n\\ninterface VBep20Interface {\\n    /*** User Interface ***/\\n\\n    function mint(uint mintAmount) external returns (uint);\\n\\n    function mintBehalf(address receiver, uint mintAmount) external returns (uint);\\n\\n    function redeem(uint redeemTokens) external returns (uint);\\n\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\n\\n    function borrow(uint borrowAmount) external returns (uint);\\n\\n    function repayBorrow(uint repayAmount) external returns (uint);\\n\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\\n\\n    function liquidateBorrow(\\n        address borrower,\\n        uint repayAmount,\\n        VTokenInterface vTokenCollateral\\n    ) external returns (uint);\\n\\n    /*** Admin Functions ***/\\n\\n    function _addReserves(uint addAmount) external returns (uint);\\n}\\n\\ninterface VDelegatorInterface {\\n    /**\\n     * @notice Emitted when implementation is changed\\n     */\\n    event NewImplementation(address oldImplementation, address newImplementation);\\n\\n    /**\\n     * @notice Called by the admin to update the implementation of the delegator\\n     * @param implementation_ The address of the new implementation for delegation\\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\n     */\\n    function _setImplementation(\\n        address implementation_,\\n        bool allowResign,\\n        bytes memory becomeImplementationData\\n    ) external;\\n}\\n\\ninterface VDelegateInterface {\\n    /**\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\n     * @param data The encoded bytes data for any initialization\\n     */\\n    function _becomeImplementation(bytes memory data) external;\\n\\n    /**\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\n     */\\n    function _resignImplementation() external;\\n}\\n\",\"keccak256\":\"0x1409d08c6eb3181b2a62913e1c9457a57ce747c062dbf89d6aa568e316add079\",\"license\":\"BSD-3-Clause\"},\"contracts/Tokens/XVS/IXVS.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.25;\\n\\ninterface IXVS {\\n    /// @notice BEP-20 token name for this token\\n    function name() external pure returns (string memory);\\n\\n    /// @notice BEP-20 token symbol for this token\\n    function symbol() external pure returns (string memory);\\n\\n    /// @notice BEP-20 token decimals for this token\\n    function decimals() external pure returns (uint8);\\n\\n    /// @notice Total number of tokens in circulation\\n    function totalSupply() external pure returns (uint256);\\n\\n    /// @notice A record of each accounts delegate\\n    function delegates(address) external view returns (address);\\n\\n    /// @notice A checkpoint for marking number of votes from a given block\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint96 votes;\\n    }\\n\\n    /// @notice A record of votes checkpoints for each account, by index\\n    function checkpoints(address, uint32) external view returns (Checkpoint memory);\\n\\n    /// @notice The number of checkpoints for each account\\n    function numCheckpoints(address) external view returns (uint32);\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    function DOMAIN_TYPEHASH() external pure returns (bytes32);\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n    function DELEGATION_TYPEHASH() external pure returns (bytes32);\\n\\n    /// @notice A record of states for signing / validating signatures\\n    function nonces(address) external view returns (uint256);\\n\\n    /// @notice An event thats emitted when an account changes its delegate\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\\n\\n    /// @notice The standard BEP-20 transfer event\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    /// @notice The standard BEP-20 approval event\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param account The address of the account holding the funds\\n     * @param spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(address account, address spender) external view returns (uint);\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     * @param spender The address of the account which may transfer tokens\\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint rawAmount) external returns (bool);\\n\\n    /**\\n     * @notice Get the number of tokens held by the `account`\\n     * @param account The address of the account to get the balance of\\n     * @return The number of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint);\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param rawAmount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint rawAmount) external returns (bool);\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param rawAmount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint rawAmount) external returns (bool);\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @notice Delegates votes from signatory to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     * @param nonce The contract state required to match the signature\\n     * @param expiry The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function getCurrentVotes(address account) external view returns (uint96);\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function getPriorVotes(address account, uint blockNumber) external view returns (uint96);\\n}\\n\",\"keccak256\":\"0x3411030698e908f26a25c5eef2e971ce5902bb123dab80c3b4720cb98b9d6985\",\"license\":\"BSD-3-Clause\"},\"contracts/Utils/CarefulMath.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\n/**\\n * @title Careful Math\\n * @author Venus\\n * @notice Derived from OpenZeppelin's SafeMath library\\n *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\\n */\\ncontract CarefulMath {\\n    /**\\n     * @dev Possible error codes that we can return\\n     */\\n    enum MathError {\\n        NO_ERROR,\\n        DIVISION_BY_ZERO,\\n        INTEGER_OVERFLOW,\\n        INTEGER_UNDERFLOW\\n    }\\n\\n    /**\\n     * @dev Multiplies two numbers, returns an error on overflow.\\n     */\\n    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (a == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        uint c;\\n        unchecked {\\n            c = a * b;\\n        }\\n\\n        if (c / a != b) {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        } else {\\n            return (MathError.NO_ERROR, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, truncating the quotient.\\n     */\\n    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b == 0) {\\n            return (MathError.DIVISION_BY_ZERO, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, a / b);\\n    }\\n\\n    /**\\n     * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\\n     */\\n    function subUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b <= a) {\\n            unchecked {\\n                return (MathError.NO_ERROR, a - b);\\n            }\\n        } else {\\n            return (MathError.INTEGER_UNDERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Adds two numbers, returns an error on overflow.\\n     */\\n    function addUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        uint c;\\n        unchecked {\\n            c = a + b;\\n        }\\n\\n        if (c >= a) {\\n            return (MathError.NO_ERROR, c);\\n        } else {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev add a and b and then subtract c\\n     */\\n    function addThenSubUInt(uint a, uint b, uint c) internal pure returns (MathError, uint) {\\n        (MathError err0, uint sum) = addUInt(a, b);\\n\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, 0);\\n        }\\n\\n        return subUInt(sum, c);\\n    }\\n}\\n\",\"keccak256\":\"0xb7ca049dc6f4a31c8994ad5fd2093b9f7f60c21495ff8386c7802ef13d9858a7\",\"license\":\"BSD-3-Clause\"},\"contracts/Utils/ErrorReporter.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\nimport { WeightFunction } from \\\"../Comptroller/Diamond/interfaces/IFacetBase.sol\\\";\\n\\ncontract ComptrollerErrorReporter {\\n    /// @notice Thrown when You are already in the selected pool.\\n    error AlreadyInSelectedPool();\\n\\n    /// @notice Thrown when One or more of your assets are not compatible with the selected pool.\\n    error IncompatibleBorrowedAssets();\\n\\n    /// @notice Thrown when Switching to this pool would fail the liquidity check or lead to liquidation.\\n    error LiquidityCheckFailed(uint256 errorCode, uint256 shortfall);\\n\\n    /// @notice Thrown when trying to call pool-specific methods on the Core Pool\\n    error InvalidOperationForCorePool();\\n\\n    /// @notice Thrown when input array lengths do not match\\n    error ArrayLengthMismatch();\\n\\n    /// @notice Thrown when market trying to add in a pool is not listed in the core pool\\n    error MarketNotListedInCorePool();\\n\\n    /// @notice Thrown when market is not set in the _poolMarkets mapping\\n    error MarketConfigNotFound();\\n\\n    /// @notice Thrown when borrowing is not allowed in the selected pool for a given market.\\n    error BorrowNotAllowedInPool();\\n\\n    /// @notice Thrown when trying to remove a market that is not listed in the given pool.\\n    error PoolMarketNotFound(uint96 poolId, address vToken);\\n\\n    /// @notice Thrown when a given pool ID does not exist\\n    error PoolDoesNotExist(uint96 poolId);\\n\\n    /// @notice Thrown when the pool label is empty\\n    error EmptyPoolLabel();\\n\\n    /// @notice Thrown when a vToken is already listed in the specified pool\\n    error MarketAlreadyListed(uint96 poolId, address vToken);\\n\\n    /// @notice Thrown when an invalid weighting strategy is provided\\n    error InvalidWeightingStrategy(WeightFunction strategy);\\n\\n    /// @notice Thrown when attempting to interact with an inactive pool\\n    error InactivePool(uint96 poolId);\\n\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        COMPTROLLER_MISMATCH,\\n        INSUFFICIENT_SHORTFALL,\\n        INSUFFICIENT_LIQUIDITY,\\n        INVALID_CLOSE_FACTOR,\\n        INVALID_COLLATERAL_FACTOR,\\n        INVALID_LIQUIDATION_INCENTIVE,\\n        MARKET_NOT_ENTERED, // no longer possible\\n        MARKET_NOT_LISTED,\\n        MARKET_ALREADY_LISTED,\\n        MATH_ERROR,\\n        NONZERO_BORROW_BALANCE,\\n        PRICE_ERROR,\\n        REJECTION,\\n        SNAPSHOT_ERROR,\\n        TOO_MANY_ASSETS,\\n        TOO_MUCH_REPAY,\\n        INSUFFICIENT_BALANCE_FOR_VAI,\\n        MARKET_NOT_COLLATERAL,\\n        INVALID_LIQUIDATION_THRESHOLD\\n    }\\n\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n        EXIT_MARKET_BALANCE_OWED,\\n        EXIT_MARKET_REJECTION,\\n        SET_CLOSE_FACTOR_OWNER_CHECK,\\n        SET_CLOSE_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\n        SET_IMPLEMENTATION_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n        SET_PRICE_ORACLE_OWNER_CHECK,\\n        SUPPORT_MARKET_EXISTS,\\n        SUPPORT_MARKET_OWNER_CHECK,\\n        SET_PAUSE_GUARDIAN_OWNER_CHECK,\\n        SET_VAI_MINT_RATE_CHECK,\\n        SET_VAICONTROLLER_OWNER_CHECK,\\n        SET_MINTED_VAI_REJECTION,\\n        SET_TREASURY_OWNER_CHECK,\\n        UNLIST_MARKET_NOT_LISTED,\\n        SET_LIQUIDATION_THRESHOLD_VALIDATION,\\n        COLLATERAL_FACTOR_GREATER_THAN_LIQUIDATION_THRESHOLD\\n    }\\n\\n    /**\\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n     **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n     */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n     */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\\n\\ncontract TokenErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        BAD_INPUT,\\n        COMPTROLLER_REJECTION,\\n        COMPTROLLER_CALCULATION_ERROR,\\n        INTEREST_RATE_MODEL_ERROR,\\n        INVALID_ACCOUNT_PAIR,\\n        INVALID_CLOSE_AMOUNT_REQUESTED,\\n        INVALID_COLLATERAL_FACTOR,\\n        MATH_ERROR,\\n        MARKET_NOT_FRESH,\\n        MARKET_NOT_LISTED,\\n        TOKEN_INSUFFICIENT_ALLOWANCE,\\n        TOKEN_INSUFFICIENT_BALANCE,\\n        TOKEN_INSUFFICIENT_CASH,\\n        TOKEN_TRANSFER_IN_FAILED,\\n        TOKEN_TRANSFER_OUT_FAILED,\\n        TOKEN_PRICE_ERROR\\n    }\\n\\n    /*\\n     * Note: FailureInfo (but not Error) is kept in alphabetical order\\n     *       This is because FailureInfo grows significantly faster, and\\n     *       the order of Error has some meaning, while the order of FailureInfo\\n     *       is entirely arbitrary.\\n     */\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\\n        BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        BORROW_ACCRUE_INTEREST_FAILED,\\n        BORROW_CASH_NOT_AVAILABLE,\\n        BORROW_FRESHNESS_CHECK,\\n        BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        BORROW_MARKET_NOT_LISTED,\\n        BORROW_COMPTROLLER_REJECTION,\\n        LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\n        LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\n        LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\n        LIQUIDATE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\n        LIQUIDATE_FRESHNESS_CHECK,\\n        LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\n        LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_SEIZE_TOO_MUCH,\\n        MINT_ACCRUE_INTEREST_FAILED,\\n        MINT_COMPTROLLER_REJECTION,\\n        MINT_EXCHANGE_CALCULATION_FAILED,\\n        MINT_EXCHANGE_RATE_READ_FAILED,\\n        MINT_FRESHNESS_CHECK,\\n        MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        MINT_TRANSFER_IN_FAILED,\\n        MINT_TRANSFER_IN_NOT_POSSIBLE,\\n        REDEEM_ACCRUE_INTEREST_FAILED,\\n        REDEEM_COMPTROLLER_REJECTION,\\n        REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_RATE_READ_FAILED,\\n        REDEEM_FRESHNESS_CHECK,\\n        REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\\n        REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\\n        REDUCE_RESERVES_ADMIN_CHECK,\\n        REDUCE_RESERVES_CASH_NOT_AVAILABLE,\\n        REDUCE_RESERVES_FRESH_CHECK,\\n        REDUCE_RESERVES_VALIDATION,\\n        REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_COMPTROLLER_REJECTION,\\n        REPAY_BORROW_FRESHNESS_CHECK,\\n        REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COMPTROLLER_OWNER_CHECK,\\n        SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\\n        SET_INTEREST_RATE_MODEL_FRESH_CHECK,\\n        SET_INTEREST_RATE_MODEL_OWNER_CHECK,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_ORACLE_MARKET_NOT_LISTED,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\\n        SET_RESERVE_FACTOR_ADMIN_CHECK,\\n        SET_RESERVE_FACTOR_FRESH_CHECK,\\n        SET_RESERVE_FACTOR_BOUNDS_CHECK,\\n        TRANSFER_COMPTROLLER_REJECTION,\\n        TRANSFER_NOT_ALLOWED,\\n        TRANSFER_NOT_ENOUGH,\\n        TRANSFER_TOO_MUCH,\\n        ADD_RESERVES_ACCRUE_INTEREST_FAILED,\\n        ADD_RESERVES_FRESH_CHECK,\\n        ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE,\\n        TOKEN_GET_UNDERLYING_PRICE_ERROR,\\n        REPAY_VAI_COMPTROLLER_REJECTION,\\n        REPAY_VAI_FRESHNESS_CHECK,\\n        VAI_MINT_EXCHANGE_CALCULATION_FAILED,\\n        SFT_MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED\\n    }\\n\\n    /**\\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n     **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n     */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n     */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\\n\\ncontract VAIControllerErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED, // The sender is not authorized to perform this action.\\n        REJECTION, // The action would violate the comptroller, vaicontroller policy.\\n        SNAPSHOT_ERROR, // The comptroller could not get the account borrows and exchange rate from the market.\\n        PRICE_ERROR, // The comptroller could not obtain a required price of an asset.\\n        MATH_ERROR, // A math calculation error occurred.\\n        INSUFFICIENT_BALANCE_FOR_VAI // Caller does not have sufficient balance to mint VAI.\\n    }\\n\\n    enum FailureInfo {\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n        SET_COMPTROLLER_OWNER_CHECK,\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n        VAI_MINT_REJECTION,\\n        VAI_BURN_REJECTION,\\n        VAI_LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\n        VAI_LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\n        VAI_LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\n        VAI_LIQUIDATE_COMPTROLLER_REJECTION,\\n        VAI_LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\n        VAI_LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\n        VAI_LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\n        VAI_LIQUIDATE_FRESHNESS_CHECK,\\n        VAI_LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\n        VAI_LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\n        VAI_LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\n        VAI_LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\n        VAI_LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\n        VAI_LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\n        VAI_LIQUIDATE_SEIZE_TOO_MUCH,\\n        MINT_FEE_CALCULATION_FAILED,\\n        SET_TREASURY_OWNER_CHECK\\n    }\\n\\n    /**\\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n     **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n     */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n     */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\\n\",\"keccak256\":\"0xad8d795a0011f59304cae938f062a72a998710c01db94f9a813b4f2f00c9534b\",\"license\":\"BSD-3-Clause\"},\"contracts/Utils/Exponential.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\nimport { CarefulMath } from \\\"./CarefulMath.sol\\\";\\nimport { ExponentialNoError } from \\\"./ExponentialNoError.sol\\\";\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Venus\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract Exponential is CarefulMath, ExponentialNoError {\\n    /**\\n     * @dev Creates an exponential from numerator and denominator values.\\n     *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\\n     *            or if `denom` is zero.\\n     */\\n    function getExp(uint num, uint denom) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint scaledNumerator) = mulUInt(num, expScale);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({ mantissa: 0 }));\\n        }\\n\\n        (MathError err1, uint rational) = divUInt(scaledNumerator, denom);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({ mantissa: 0 }));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({ mantissa: rational }));\\n    }\\n\\n    /**\\n     * @dev Adds two exponentials, returning a new exponential.\\n     */\\n    function addExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        (MathError error, uint result) = addUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({ mantissa: result }));\\n    }\\n\\n    /**\\n     * @dev Subtracts two exponentials, returning a new exponential.\\n     */\\n    function subExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        (MathError error, uint result) = subUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({ mantissa: result }));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, returning a new Exp.\\n     */\\n    function mulScalar(Exp memory a, uint scalar) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint scaledMantissa) = mulUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({ mantissa: 0 }));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({ mantissa: scaledMantissa }));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mulScalarTruncate(Exp memory a, uint scalar) internal pure returns (MathError, uint) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(product));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mulScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) internal pure returns (MathError, uint) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return addUInt(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Divide an Exp by a scalar, returning a new Exp.\\n     */\\n    function divScalar(Exp memory a, uint scalar) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint descaledMantissa) = divUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({ mantissa: 0 }));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({ mantissa: descaledMantissa }));\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, returning a new Exp.\\n     */\\n    function divScalarByExp(uint scalar, Exp memory divisor) internal pure returns (MathError, Exp memory) {\\n        /*\\n          We are doing this as:\\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\\n\\n          How it works:\\n          Exp = a / b;\\n          Scalar = s;\\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\\n        */\\n        (MathError err0, uint numerator) = mulUInt(expScale, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({ mantissa: 0 }));\\n        }\\n        return getExp(numerator, divisor.mantissa);\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\\n     */\\n    function divScalarByExpTruncate(uint scalar, Exp memory divisor) internal pure returns (MathError, uint) {\\n        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(fraction));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials, returning a new exponential.\\n     */\\n    function mulExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({ mantissa: 0 }));\\n        }\\n\\n        // We add half the scale before dividing so that we get rounding instead of truncation.\\n        //  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717\\n        // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\\n        (MathError err1, uint doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({ mantissa: 0 }));\\n        }\\n\\n        (MathError err2, uint product) = divUInt(doubleScaledProductWithHalfScale, expScale);\\n        // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\\n        assert(err2 == MathError.NO_ERROR);\\n\\n        return (MathError.NO_ERROR, Exp({ mantissa: product }));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\\n     */\\n    function mulExp(uint a, uint b) internal pure returns (MathError, Exp memory) {\\n        return mulExp(Exp({ mantissa: a }), Exp({ mantissa: b }));\\n    }\\n\\n    /**\\n     * @dev Multiplies three exponentials, returning a new exponential.\\n     */\\n    function mulExp3(Exp memory a, Exp memory b, Exp memory c) internal pure returns (MathError, Exp memory) {\\n        (MathError err, Exp memory ab) = mulExp(a, b);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, ab);\\n        }\\n        return mulExp(ab, c);\\n    }\\n\\n    /**\\n     * @dev Divides two exponentials, returning a new exponential.\\n     *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\\n     *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\\n     */\\n    function divExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        return getExp(a.mantissa, b.mantissa);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9b293a09a3ec69ac16f58dce449a553b44121eb9aad666a777d8f6f4ae83f0\",\"license\":\"BSD-3-Clause\"},\"contracts/Utils/ExponentialNoError.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract ExponentialNoError {\\n    uint internal constant expScale = 1e18;\\n    uint internal constant doubleScale = 1e36;\\n    uint internal constant halfExpScale = expScale / 2;\\n    uint internal constant mantissaOne = expScale;\\n\\n    struct Exp {\\n        uint mantissa;\\n    }\\n\\n    struct Double {\\n        uint mantissa;\\n    }\\n\\n    /**\\n     * @dev Truncates the given exp to a whole number value.\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n     */\\n    function truncate(Exp memory exp) internal pure returns (uint) {\\n        // Note: We are not using careful math here as we're performing a division that cannot fail\\n        return exp.mantissa / expScale;\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mul_ScalarTruncate(Exp memory a, uint scalar) internal pure returns (uint) {\\n        Exp memory product = mul_(a, scalar);\\n        return truncate(product);\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mul_ScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) internal pure returns (uint) {\\n        Exp memory product = mul_(a, scalar);\\n        return add_(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Checks if first Exp is less than second Exp.\\n     */\\n    function lessThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n        return left.mantissa < right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp <= right Exp.\\n     */\\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n        return left.mantissa <= right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp > right Exp.\\n     */\\n    function greaterThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n        return left.mantissa > right.mantissa;\\n    }\\n\\n    /**\\n     * @dev returns true if Exp is exactly zero\\n     */\\n    function isZeroExp(Exp memory value) internal pure returns (bool) {\\n        return value.mantissa == 0;\\n    }\\n\\n    function safe224(uint n, string memory errorMessage) internal pure returns (uint224) {\\n        require(n < 2 ** 224, errorMessage);\\n        return uint224(n);\\n    }\\n\\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2 ** 32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function add_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: add_(a.mantissa, b.mantissa) });\\n    }\\n\\n    function add_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({ mantissa: add_(a.mantissa, b.mantissa) });\\n    }\\n\\n    function add_(uint a, uint b) internal pure returns (uint) {\\n        return add_(a, b, \\\"addition overflow\\\");\\n    }\\n\\n    function add_(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: sub_(a.mantissa, b.mantissa) });\\n    }\\n\\n    function sub_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({ mantissa: sub_(a.mantissa, b.mantissa) });\\n    }\\n\\n    function sub_(uint a, uint b) internal pure returns (uint) {\\n        return sub_(a, b, \\\"subtraction underflow\\\");\\n    }\\n\\n    function sub_(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function mul_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: mul_(a.mantissa, b.mantissa) / expScale });\\n    }\\n\\n    function mul_(Exp memory a, uint b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: mul_(a.mantissa, b) });\\n    }\\n\\n    function mul_(uint a, Exp memory b) internal pure returns (uint) {\\n        return mul_(a, b.mantissa) / expScale;\\n    }\\n\\n    function mul_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({ mantissa: mul_(a.mantissa, b.mantissa) / doubleScale });\\n    }\\n\\n    function mul_(Double memory a, uint b) internal pure returns (Double memory) {\\n        return Double({ mantissa: mul_(a.mantissa, b) });\\n    }\\n\\n    function mul_(uint a, Double memory b) internal pure returns (uint) {\\n        return mul_(a, b.mantissa) / doubleScale;\\n    }\\n\\n    function mul_(uint a, uint b) internal pure returns (uint) {\\n        return mul_(a, b, \\\"multiplication overflow\\\");\\n    }\\n\\n    function mul_(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        uint c = a * b;\\n        require(c / a == b, errorMessage);\\n        return c;\\n    }\\n\\n    function div_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: div_(mul_(a.mantissa, expScale), b.mantissa) });\\n    }\\n\\n    function div_(Exp memory a, uint b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: div_(a.mantissa, b) });\\n    }\\n\\n    function div_(uint a, Exp memory b) internal pure returns (uint) {\\n        return div_(mul_(a, expScale), b.mantissa);\\n    }\\n\\n    function div_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({ mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa) });\\n    }\\n\\n    function div_(Double memory a, uint b) internal pure returns (Double memory) {\\n        return Double({ mantissa: div_(a.mantissa, b) });\\n    }\\n\\n    function div_(uint a, Double memory b) internal pure returns (uint) {\\n        return div_(mul_(a, doubleScale), b.mantissa);\\n    }\\n\\n    function div_(uint a, uint b) internal pure returns (uint) {\\n        return div_(a, b, \\\"divide by zero\\\");\\n    }\\n\\n    function div_(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    function fraction(uint a, uint b) internal pure returns (Double memory) {\\n        return Double({ mantissa: div_(mul_(a, doubleScale), b) });\\n    }\\n}\\n\",\"keccak256\":\"0xce75802a56763fb96b2046b374127f080a425cfe3634670767ec040ccb6ea7e0\",\"license\":\"BSD-3-Clause\"},\"contracts/external/IProtocolShareReserve.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.25;\\n\\ninterface IProtocolShareReserve {\\n    enum IncomeType {\\n        SPREAD,\\n        LIQUIDATION\\n    }\\n\\n    function updateAssetsState(address comptroller, address asset, IncomeType incomeType) external;\\n}\\n\",\"keccak256\":\"0xf03faf89ad2689a29f0d456c1add258bc09bcf484840170154a32e129500818e\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600e575f80fd5b5061413b8061001c5f395ff3fe608060405234801561000f575f80fd5b50600436106100fb575f3560e01c8063aa5dbd2311610093578063e09744c611610063578063e09744c61461025a578063e0a67f11146102a9578063f40c2777146102c9578063fbd88b4614610307575f80fd5b8063aa5dbd23146101e7578063b312423914610207578063b814a8a614610227578063cbb1f5e91461023a575f80fd5b80637c84e3b3116100ce5780637c84e3b3146101675780637dd8f6d91461018757806380ac8228146101a7578063a9ac4179146101c7575f80fd5b80631f884fdf146100ff5780635a89b0e7146101285780636bb987fe1461013e5780637c51b64214610147575b5f80fd5b61011261010d3660046134ae565b610327565b60405161011f91906134ec565b60405180910390f35b610130600881565b60405190815260200161011f565b61013061708081565b61015a610155366004613562565b6103ee565b60405161011f91906135f4565b61017a610175366004613641565b6104b1565b60405161011f919061365c565b61019a61019536600461367c565b610612565b60405161011f91906136b3565b6101ba6101b536600461367c565b61078a565b60405161011f9190613721565b6101da6101d5366004613641565b610d18565b60405161011f91906138af565b6101fa6101f5366004613641565b610ef9565b60405161011f9190613a2b565b61021a61021536600461367c565b611748565b60405161011f9190613a3a565b61013061023536600461367c565b611a7a565b61024d610248366004613a5c565b611d4d565b60405161011f9190613a78565b61026d610268366004613a8a565b612167565b60405161011f919081518152602080830151908201526040808301516001600160a01b0316908201526060918201519181019190915260800190565b6102bc6102b73660046134ae565b6124af565b60405161011f9190613ac7565b6102dc6102d736600461367c565b612560565b604080518251815260208084015190820152918101516001600160a01b03169082015260600161011f565b61031a610315366004613b09565b6126f8565b60405161011f9190613b69565b6060815f816001600160401b0381111561034357610343613baa565b60405190808252806020026020018201604052801561038757816020015b604080518082019091525f80825260208201528152602001906001900390816103615790505b5090505f5b828110156103e3576103be8686838181106103a9576103a9613bbe565b90506020020160208101906101759190613641565b8282815181106103d0576103d0613bbe565b602090810291909101015260010161038c565b509150505b92915050565b6060825f816001600160401b0381111561040a5761040a613baa565b60405190808252806020026020018201604052801561044357816020015b61043061339b565b8152602001906001900390816104285790505b5090505f5b828110156104a55761048087878381811061046557610465613bbe565b905060200201602081019061047a9190613641565b86611748565b82828151811061049257610492613bbe565b6020908102919091010152600101610448565b509150505b9392505050565b604080518082019091525f80825260208201525f826001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610501573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105259190613bd2565b90505f816001600160a01b0316637dc0d1d06040518163ffffffff1660e01b8152600401602060405180830381865afa158015610564573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105889190613bd2565b6040805180820182526001600160a01b03808816808352925163fc57d4df60e01b815260048101939093529293509160208301919084169063fc57d4df90602401602060405180830381865afa1580156105e4573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106089190613bed565b9052949350505050565b6106346040518060600160405280606081526020015f81526020015f81525090565b604051635ec88c7960e01b81526001600160a01b0383811660048301525f918291829190871690635ec88c7990602401606060405180830381865afa15801561067f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106a39190613c04565b925092509250825f146106fd5760405162461bcd60e51b815260206004820152601760248201527f6163636f756e74206c6971756964697479206572726f7200000000000000000060448201526064015b60405180910390fd5b604080516060810191829052632aff3bff60e21b9091526001600160a01b0386811660648301528190881663abfceffc608483015f60405180830381865afa15801561074b573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526107729190810190613c81565b81526020810193909352604090920152949350505050565b604080516080810182525f80825260208201819052918101919091526060808201525f826001600160a01b031663b0772d0b6040518163ffffffff1660e01b81526004015f60405180830381865afa1580156107e8573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261080f9190810190613c81565b6040805160a0810182525f8082526020808301829052828401829052606080840183905260808085018490528551908101865280830184905280860193909352828101526001600160a01b038816808352845163bf32442d60e01b815294519596509294919363bf32442d92600480830193928290030181865afa158015610899573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108bd9190613bd2565b6001600160a01b039081166020830152604051638a7dc16560e01b8152878216600482015290861690638a7dc16590602401602060405180830381865afa15801561090a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061092e9190613bed565b604082015282516001600160401b0381111561094c5761094c613baa565b60405190808252806020026020018201604052801561099057816020015b604080518082019091525f808252602082015281526020019060019003908161096a5790505b5060608201525f5b8351811015610d0e57856001600160a01b031663e37d4b798583815181106109c2576109c2613bbe565b60200260200101516040518263ffffffff1660e01b81526004016109f591906001600160a01b0391909116815260200190565b6040805180830381865afa158015610a0f573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a339190613d46565b63ffffffff90811660408087019182526001600160e01b03938416602080890191825282518084019093529051909416815290519091169181019190915284516001600160a01b0388169063b8324c7c90879085908110610a9657610a96613bbe565b60200260200101516040518263ffffffff1660e01b8152600401610ac991906001600160a01b0391909116815260200190565b6040805180830381865afa158015610ae3573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b079190613d46565b85606001866080018263ffffffff1663ffffffff16815250826001600160e01b03166001600160e01b031681525050505f604051806040016040528086606001516001600160e01b03168152602001866080015163ffffffff1681525090505f6040518060200160405280888681518110610b8457610b84613bbe565b60200260200101516001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bc7573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610beb9190613bed565b9052604080518082019091525f8082526020820152909150878581518110610c1557610c15613bbe565b60209081029190910101516001600160a01b031681528751610c549085908a9088908110610c4557610c45613bbe565b6020026020010151848d61287a565b5f610c7b858a8881518110610c6b57610c6b613bbe565b60200260200101518e868f612ac0565b9050610ca1848a8881518110610c9357610c93613bbe565b60200260200101518d612c0c565b5f610cc7858b8981518110610cb857610cb8613bbe565b60200260200101518f8f612e48565b9050610cd38282612ff4565b60208401526060880151805184919089908110610cf257610cf2613bbe565b6020026020010181905250505050505050806001019050610998565b5095945050505050565b60605f826001600160a01b031663a657e5796040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d57573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d7b9190613d70565b9050806001600160601b03166001600160401b03811115610d9e57610d9e613baa565b604051908082528060200260200182016040528015610dfb57816020015b610de860405180606001604052805f6001600160601b0316815260200160608152602001606081525090565b815260200190600190039081610dbc5790505b50915060015b816001600160601b0316816001600160601b031611610ef257604080516060810182526001600160601b03831680825291516325b2641960e21b815260048101929092529060208201906001600160a01b038716906396c99064906024015f60405180830381865afa158015610e79573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610ea09190810190613d8b565b8152602001610eaf8387611d4d565b905283610ebd600184613e2d565b6001600160601b031681518110610ed657610ed6613bbe565b602002602001018190525080610eeb90613e54565b9050610e01565b5050919050565b610f016133d4565b5f826001600160a01b031663bd6d894d6040518163ffffffff1660e01b81526004016020604051808303815f875af1158015610f3f573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f639190613bed565b90505f836001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fa2573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610fc69190613bd2565b604051638e8f294b60e01b81526001600160a01b03868116600483015291925082915f918291841690638e8f294b906024016040805180830381865afa158015611012573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110369190613e88565b915091505f806110c3896001600160a01b03166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa15801561107a573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526110a19190810190613d8b565b604051806040016040528060048152602001633b21272160e11b815250613029565b156110d357505f905060126111ff565b5f899050806001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611113573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111379190613bd2565b9250806001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611175573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111999190613bd2565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111d4573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111f89190613eb2565b60ff169150505b604051635dd3fc9d60e01b81526001600160a01b038a811660048301525f9190871690635dd3fc9d90602401602060405180830381865afa158015611246573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061126a9190613bed565b604051635ddc432560e11b81526001600160a01b038c811660048301529192505f9188169063bbb8864a90602401602060405180830381865afa1580156112b3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112d79190613bed565b90505f805b60088160ff1611611395575f896001600160a01b031663e85a29608f8460ff16600881111561130d5761130d613ed2565b6040518363ffffffff1660e01b815260040161132a929190613ee6565b602060405180830381865afa158015611345573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113699190613f1f565b611373575f611376565b60015b60ff9081169083161b92909217915061138e81613f38565b90506112dc565b506040518061026001604052808d6001600160a01b031681526020018b81526020018d6001600160a01b031663ae9d70b06040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113f3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114179190613bed565b81526020018d6001600160a01b031663f8f9da286040518163ffffffff1660e01b8152600401602060405180830381865afa158015611458573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061147c9190613bed565b81526020018d6001600160a01b031663173b99046040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114bd573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114e19190613bed565b81526020018d6001600160a01b03166347bd37186040518163ffffffff1660e01b8152600401602060405180830381865afa158015611522573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906115469190613bed565b81526020018d6001600160a01b0316638f840ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611587573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906115ab9190613bed565b81526020018d6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115ec573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116109190613bed565b81526020018d6001600160a01b0316633b1d21a26040518163ffffffff1660e01b8152600401602060405180830381865afa158015611651573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116759190613bed565b81526020018815158152602001878152602001866001600160a01b031681526020018d6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116d3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116f79190613eb2565b60ff1681526020018581526020018481526020018381526020016170808561171f9190613f56565b815260200161173061708085613f56565b8152602001919091529b9a5050505050505050505050565b61175061339b565b6040516370a0823160e01b81526001600160a01b0383811660048301525f91908516906370a0823190602401602060405180830381865afa158015611797573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906117bb9190613bed565b6040516305eff7ef60e21b81526001600160a01b0385811660048301529192505f918616906317bfdfbc906024016020604051808303815f875af1158015611805573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906118299190613bed565b604051633af9e66960e01b81526001600160a01b0386811660048301529192505f91871690633af9e669906024016020604051808303815f875af1158015611873573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906118979190613bed565b90505f806118d9886001600160a01b03166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa15801561107a573d5f803e3d5ffd5b156118f35750506001600160a01b03851680319031611a3d565b5f8890505f816001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611934573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906119589190613bd2565b6040516370a0823160e01b81526001600160a01b038b81166004830152919250908216906370a0823190602401602060405180830381865afa1580156119a0573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906119c49190613bed565b604051636eb1769f60e11b81526001600160a01b038b811660048301528c811660248301529195509082169063dd62ed3e90604401602060405180830381865afa158015611a14573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a389190613bed565b925050505b6040805160c0810182526001600160a01b039990991689526020890195909552938701929092526060860152608085015260a08401525090919050565b5f808290505f816001600160a01b031663b0772d0b6040518163ffffffff1660e01b81526004015f60405180830381865afa158015611abb573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052611ae29190810190613c81565b90505f805b8251811015610d0e575f838281518110611b0357611b03613bbe565b60200260200101519050611b94816001600160a01b03166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa158015611b4b573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052611b729190810190613d8b565b604051806040016040528060048152602001631d9554d560e21b815250613029565b158015611c265750611c24816001600160a01b03166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa158015611bda573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052611c019190810190613d8b565b60405180604001604052806005815260200164764c554e4160d81b815250613029565b155b15611d44575f611c3582610ef9565b90505f611c42838b611748565b90505f611c4e846104b1565b90505f816020015190505f60405180602001604052808381525090505f80611c7a838760600151613081565b90505f670de0b6b3a764000088602001518960e00151611c9a9190613f56565b611ca49190613f6d565b90505f611cb18583613081565b90508015611cd85780838a6102000151611ccb9190613f56565b611cd59190613f6d565b93505b5f80611ce8878b60400151613081565b90505f611cf9888d60a00151613081565b90508015611d205780828d6102200151611d139190613f56565b611d1d9190613f6d565b92505b611d2a8388613f8c565b8f611d359190613f8c565b9e505050505050505050505050505b50600101611ae7565b6060816001600160a01b031663a657e5796040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d8b573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611daf9190613d70565b6001600160601b0316836001600160601b03161115611dec57604051632db8671b60e11b81526001600160601b03841660048201526024016106f4565b816001600160a01b031663d463654c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e28573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611e4c9190613d70565b6001600160601b0316836001600160601b031603611e7d57604051630203217b60e61b815260040160405180910390fd5b6040516318f8358d60e21b81526001600160601b03841660048201525f906001600160a01b038416906363e0d634906024015f60405180830381865afa158015611ec9573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052611ef09190810190613f9f565b8051909150806001600160401b03811115611f0d57611f0d613baa565b604051908082528060200260200182016040528015611f8257816020015b60408051610120810182525f8082526060602080840182905293830182905282018190526080820181905260a0820181905260c0820181905260e0820181905261010082015282525f19909201910181611f2b5790505b506040516325b2641960e21b81526001600160601b03871660048201529093505f906001600160a01b038616906396c99064906024015f60405180830381865afa158015611fd2573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052611ff99190810190613d8b565b90505f5b8281101561215d575f805f805f805f8c6001600160a01b0316633093c11e8f8d8b8151811061202e5761202e613bbe565b60200260200101516040518363ffffffff1660e01b81526004016120709291906001600160601b039290921682526001600160a01b0316602082015260400190565b60e060405180830381865afa15801561208b573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906120af9190614028565b9650965096509650965096509650604051806101200160405280836001600160601b031681526020018a81526020018c8a815181106120f0576120f0613bbe565b60200260200101516001600160a01b03168152602001881515815260200187815260200186151581526020018581526020018481526020018215158152508c898151811061214057612140613bbe565b602002602001018190525050505050505050806001019050611ffd565b5050505092915050565b61219760405180608001604052805f81526020015f81526020015f6001600160a01b031681526020015f81525090565b6040516370a0823160e01b81526001600160a01b0383811660048301525f91908616906370a0823190602401602060405180830381865afa1580156121de573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906122029190613bed565b60405163adcd5fb960e01b81526001600160a01b0385811660048301529192509085169063adcd5fb9906024015f604051808303815f87803b158015612246575f80fd5b505af1158015612258573d5f803e3d5ffd5b50506040516370a0823160e01b81526001600160a01b0386811660048301525f9350881691506370a0823190602401602060405180830381865afa1580156122a2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906122c69190613bed565b604051638a7dc16560e01b81526001600160a01b0386811660048301529192505f91871690638a7dc16590602401602060405180830381865afa15801561230f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906123339190613bed565b90505f61236682846040518060400160405280600d81526020016c1cdd5b481e1d9cc81d1bdd185b609a1b8152506130a0565b90505f61239982866040518060400160405280600d81526020016c1cdd5888185b1b1bd8d85d1959609a1b8152506130d9565b60408051608081018252878152905163b4b5ea5760e01b81526001600160a01b038a8116600483015292935090916020830191908c169063b4b5ea5790602401602060405180830381865afa1580156123f4573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906124189190613d70565b6001600160601b03168152604051632c3e6f0f60e11b81526001600160a01b038a811660048301526020909201918c169063587cde1e90602401602060405180830381865afa15801561246d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906124919190613bd2565b6001600160a01b031681526020019190915298975050505050505050565b6060815f816001600160401b038111156124cb576124cb613baa565b60405190808252806020026020018201604052801561250457816020015b6124f16133d4565b8152602001906001900390816124e95790505b5090505f5b828110156103e35761253b86868381811061252657612526613bbe565b90506020020160208101906101f59190613641565b82828151811061254d5761254d613bbe565b6020908102919091010152600101612509565b61258a60405180606001604052805f81526020015f81526020015f6001600160a01b031681525090565b6040805160608101918290526370a0823160e01b9091526001600160a01b038381166064830152819085166370a0823160848301602060405180830381865afa1580156125d9573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906125fd9190613bed565b815260405163b4b5ea5760e01b81526001600160a01b03858116600483015260209092019186169063b4b5ea5790602401602060405180830381865afa158015612649573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061266d9190613d70565b6001600160601b03168152604051632c3e6f0f60e11b81526001600160a01b03858116600483015260209092019186169063587cde1e90602401602060405180830381865afa1580156126c2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906126e69190613bd2565b6001600160a01b031690529392505050565b60605f826001600160401b0381111561271357612713613baa565b60405190808252806020026020018201604052801561275757816020015b604080518082019091525f80825260208201528152602001906001900390816127315790505b5090505f5b83811015610d0e57604051806040016040528086868481811061278157612781613bbe565b90506020020160208101906127969190614096565b63ffffffff168152602001886001600160a01b031663782d6fe1898989878181106127c3576127c3613bbe565b90506020020160208101906127d89190614096565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015263ffffffff166024820152604401602060405180830381865afa158015612825573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906128499190613d70565b6001600160601b031681525082828151811061286757612867613bbe565b602090810291909101015260010161275c565b604051635ddc432560e11b81526001600160a01b0384811660048301525f919083169063bbb8864a90602401602060405180830381865afa1580156128c1573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906128e59190613bed565b90505f4390505f61290082886020015163ffffffff16613107565b90505f8111801561291057505f83115b15612a6d575f61297f876001600160a01b03166347bd37186040518163ffffffff1660e01b8152600401602060405180830381865afa158015612955573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906129799190613bed565b87613140565b90505f61298c838661315d565b90505f8083116129aa5760405180602001604052805f8152506129b4565b6129b4828461319e565b90505f6129db60405180602001604052808d5f01516001600160e01b0316815250836131e2565b9050612a15815f0151604051806040016040528060138152602001726e657720696e646578206f766572666c6f777360681b81525061320b565b6001600160e01b03168b52604080518082019091526016815275626c6f636b206e756d626572206f766572666c6f777360501b6020820152612a58908790613239565b63ffffffff1660208c015250612ab792505050565b8015612ab757612aab8260405180604001604052806016815260200175626c6f636b206e756d626572206f766572666c6f777360501b815250613239565b63ffffffff1660208801525b50505050505050565b604080516020808201835287516001600160e01b03168252825190810192839052630238089760e21b9092526001600160a01b03868116602484015285811660448401525f928391819086166308e0225c60648301602060405180830381865afa158015612b30573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612b549190613bed565b9052805190915015612bfd575f612b6b8383613260565b6040516395dd919360e01b81526001600160a01b0389811660048301529192505f91612be391908b16906395dd919390602401602060405180830381865afa158015612bb9573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612bdd9190613bed565b88613140565b90505f612bf08284613289565b9550612c03945050505050565b5f925050505b95945050505050565b604051635dd3fc9d60e01b81526001600160a01b0383811660048301525f9190831690635dd3fc9d90602401602060405180830381865afa158015612c53573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612c779190613bed565b90505f4390505f612c9282876020015163ffffffff16613107565b90505f81118015612ca257505f83115b15612df6575f856001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ce4573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612d089190613bed565b90505f612d15838661315d565b90505f808311612d335760405180602001604052805f815250612d3d565b612d3d828461319e565b90505f612d6460405180602001604052808c5f01516001600160e01b0316815250836131e2565b9050612d9e815f0151604051806040016040528060138152602001726e657720696e646578206f766572666c6f777360681b81525061320b565b6001600160e01b03168a52604080518082019091526016815275626c6f636b206e756d626572206f766572666c6f777360501b6020820152612de1908790613239565b63ffffffff1660208b015250612e4092505050565b8015612e4057612e348260405180604001604052806016815260200175626c6f636b206e756d626572206f766572666c6f777360501b815250613239565b63ffffffff1660208701525b505050505050565b604080516020808201835286516001600160e01b03168252825190810192839052631068634b60e21b9092526001600160a01b03858116602484015284811660448401525f928391819086166341a18d2c60648301602060405180830381865afa158015612eb8573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612edc9190613bed565b90528051909150158015612ef05750815115155b15612f6157836001600160a01b031663c5b4db556040518163ffffffff1660e01b8152600401602060405180830381865afa158015612f31573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612f5591906140b1565b6001600160e01b031681525b5f612f6c8383613260565b6040516370a0823160e01b81526001600160a01b0388811660048301529192505f918916906370a0823190602401602060405180830381865afa158015612fb5573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612fd99190613bed565b90505f612fe68284613289565b9a9950505050505050505050565b5f6104aa8383604051806040016040528060118152602001706164646974696f6e206f766572666c6f7760781b8152506130a0565b5f8160405160200161303b91906140ca565b604051602081830303815290604052805190602001208360405160200161306291906140ca565b6040516020818303038152906040528051906020012014905092915050565b5f8061308d84846132b1565b9050613098816132d7565b949350505050565b5f806130ac8486613f8c565b905082858210156130d05760405162461bcd60e51b81526004016106f491906140e0565b50949350505050565b5f81848411156130fc5760405162461bcd60e51b81526004016106f491906140e0565b5061309883856140f2565b5f6104aa8383604051806040016040528060158152602001747375627472616374696f6e20756e646572666c6f7760581b8152506130d9565b5f6104aa61315684670de0b6b3a764000061315d565b83516132ee565b5f6104aa83836040518060400160405280601781526020017f6d756c7469706c69636174696f6e206f766572666c6f77000000000000000000815250613320565b60408051602081019091525f815260405180602001604052806131d96131d3866ec097ce7bc90715b34b9f100000000061315d565b856132ee565b90529392505050565b60408051602081019091525f815260405180602001604052806131d9855f0151855f0151612ff4565b5f81600160e01b84106132315760405162461bcd60e51b81526004016106f491906140e0565b509192915050565b5f8164010000000084106132315760405162461bcd60e51b81526004016106f491906140e0565b60408051602081019091525f815260405180602001604052806131d9855f0151855f0151613107565b5f6ec097ce7bc90715b34b9f10000000006132a784845f015161315d565b6104aa9190613f6d565b60408051602081019091525f815260405180602001604052806131d9855f01518561315d565b80515f906103e890670de0b6b3a764000090613f6d565b5f6104aa83836040518060400160405280600e81526020016d646976696465206279207a65726f60901b815250613370565b5f83158061332c575082155b1561333857505f6104aa565b5f6133438486613f56565b9050836133508683613f6d565b1483906130d05760405162461bcd60e51b81526004016106f491906140e0565b5f81836133905760405162461bcd60e51b81526004016106f491906140e0565b506130988385613f6d565b6040518060c001604052805f6001600160a01b031681526020015f81526020015f81526020015f81526020015f81526020015f81525090565b6040518061026001604052805f6001600160a01b031681526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f151581526020015f81526020015f6001600160a01b031681526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81525090565b5f8083601f840112613477575f80fd5b5081356001600160401b0381111561348d575f80fd5b6020830191508360208260051b85010111156134a7575f80fd5b9250929050565b5f80602083850312156134bf575f80fd5b82356001600160401b038111156134d4575f80fd5b6134e085828601613467565b90969095509350505050565b602080825282518282018190525f919060409081850190868401855b8281101561353e5761352e84835180516001600160a01b03168252602090810151910152565b9284019290850190600101613508565b5091979650505050505050565b6001600160a01b038116811461355f575f80fd5b50565b5f805f60408486031215613574575f80fd5b83356001600160401b03811115613589575f80fd5b61359586828701613467565b90945092505060208401356135a98161354b565b809150509250925092565b80516001600160a01b031682526020808201519083015260408082015190830152606080820151908301526080808201519083015260a090810151910152565b602080825282518282018190525f9190848201906040850190845b81811015613635576136228385516135b4565b9284019260c0929092019160010161360f565b50909695505050505050565b5f60208284031215613651575f80fd5b81356104aa8161354b565b81516001600160a01b0316815260208083015190820152604081016103e8565b5f806040838503121561368d575f80fd5b82356136988161354b565b915060208301356136a88161354b565b809150509250929050565b602080825282516060838301528051608084018190525f9291820190839060a08601905b808310156137005783516001600160a01b031682529284019260019290920191908401906136d7565b50838701516040870152604087015160608701528094505050505092915050565b602080825282516001600160a01b0390811683830152838201511660408084019190915280840151606080850191909152840151608080850152805160a085018190525f939291830191849160c0870191905b808410156137ae5761379a83865180516001600160a01b03168252602090810151910152565b938501936001939093019291810191613774565b5090979650505050505050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b5f82825180855260208086019550808260051b8401018186015f5b848110156137ae57858303601f19018952815180516001600160601b0316845261012085820151818787015261383c828701826137bb565b915050604080830151613859828801826001600160a01b03169052565b50506060828101511515908601526080808301519086015260a08083015115159086015260c0808301519086015260e0808301519086015261010091820151151591909401529783019790830190600101613804565b5f60208083018184528085518083526040925060408601915060408160051b8701018488015f5b8381101561393b57603f19898403018552815160606001600160601b03825116855288820151818a87015261390d828701826137bb565b9150508782015191508481038886015261392781836137e9565b9689019694505050908601906001016138d6565b509098975050505050505050565b80516001600160a01b031682526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e0830152610100808201518184015250610120808201516139bc8285018215159052565b50506101408181015190830152610160808201516001600160a01b03169083015261018080820151908301526101a080820151908301526101c080820151908301526101e080820151908301526102008082015190830152610220808201519083015261024090810151910152565b61026081016103e88284613949565b60c081016103e882846135b4565b6001600160601b038116811461355f575f80fd5b5f8060408385031215613a6d575f80fd5b823561369881613a48565b602081525f6104aa60208301846137e9565b5f805f60608486031215613a9c575f80fd5b8335613aa78161354b565b92506020840135613ab78161354b565b915060408401356135a98161354b565b602080825282518282018190525f9190848201906040850190845b8181101561363557613af5838551613949565b928401926102609290920191600101613ae2565b5f805f8060608587031215613b1c575f80fd5b8435613b278161354b565b93506020850135613b378161354b565b925060408501356001600160401b03811115613b51575f80fd5b613b5d87828801613467565b95989497509550505050565b602080825282518282018190525f919060409081850190868401855b8281101561353e57815180518552860151868501529284019290850190600101613b85565b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b5f60208284031215613be2575f80fd5b81516104aa8161354b565b5f60208284031215613bfd575f80fd5b5051919050565b5f805f60608486031215613c16575f80fd5b8351925060208401519150604084015190509250925092565b604051601f8201601f191681016001600160401b0381118282101715613c5757613c57613baa565b604052919050565b5f6001600160401b03821115613c7757613c77613baa565b5060051b60200190565b5f6020808385031215613c92575f80fd5b82516001600160401b03811115613ca7575f80fd5b8301601f81018513613cb7575f80fd5b8051613cca613cc582613c5f565b613c2f565b81815260059190911b82018301908381019087831115613ce8575f80fd5b928401925b82841015613d0f578351613d008161354b565b82529284019290840190613ced565b979650505050505050565b80516001600160e01b0381168114613d30575f80fd5b919050565b63ffffffff8116811461355f575f80fd5b5f8060408385031215613d57575f80fd5b613d6083613d1a565b915060208301516136a881613d35565b5f60208284031215613d80575f80fd5b81516104aa81613a48565b5f6020808385031215613d9c575f80fd5b82516001600160401b0380821115613db2575f80fd5b818501915085601f830112613dc5575f80fd5b815181811115613dd757613dd7613baa565b613de9601f8201601f19168501613c2f565b91508082528684828501011115613dfe575f80fd5b808484018584015e5f90820190930192909252509392505050565b634e487b7160e01b5f52601160045260245ffd5b6001600160601b03828116828216039080821115613e4d57613e4d613e19565b5092915050565b5f6001600160601b03808316818103613e6f57613e6f613e19565b6001019392505050565b80518015158114613d30575f80fd5b5f8060408385031215613e99575f80fd5b613ea283613e79565b9150602083015190509250929050565b5f60208284031215613ec2575f80fd5b815160ff811681146104aa575f80fd5b634e487b7160e01b5f52602160045260245ffd5b6001600160a01b03831681526040810160098310613f1257634e487b7160e01b5f52602160045260245ffd5b8260208301529392505050565b5f60208284031215613f2f575f80fd5b6104aa82613e79565b5f60ff821660ff8103613f4d57613f4d613e19565b60010192915050565b80820281158282048414176103e8576103e8613e19565b5f82613f8757634e487b7160e01b5f52601260045260245ffd5b500490565b808201808211156103e8576103e8613e19565b5f6020808385031215613fb0575f80fd5b82516001600160401b03811115613fc5575f80fd5b8301601f81018513613fd5575f80fd5b8051613fe3613cc582613c5f565b81815260059190911b82018301908381019087831115614001575f80fd5b928401925b82841015613d0f5783516140198161354b565b82529284019290840190614006565b5f805f805f805f60e0888a03121561403e575f80fd5b61404788613e79565b96506020880151955061405c60408901613e79565b9450606088015193506080880151925060a088015161407a81613a48565b915061408860c08901613e79565b905092959891949750929550565b5f602082840312156140a6575f80fd5b81356104aa81613d35565b5f602082840312156140c1575f80fd5b6104aa82613d1a565b5f82518060208501845e5f920191825250919050565b602081525f6104aa60208301846137bb565b818103818111156103e8576103e8613e1956fea264697066735822122070de10234a2c30ccdad7bb76550bf2d81b2c8a62f50e2a5599a361a7ada44ecb64736f6c63430008190033",
  "deployedBytecode": "0x608060405234801561000f575f80fd5b50600436106100fb575f3560e01c8063aa5dbd2311610093578063e09744c611610063578063e09744c61461025a578063e0a67f11146102a9578063f40c2777146102c9578063fbd88b4614610307575f80fd5b8063aa5dbd23146101e7578063b312423914610207578063b814a8a614610227578063cbb1f5e91461023a575f80fd5b80637c84e3b3116100ce5780637c84e3b3146101675780637dd8f6d91461018757806380ac8228146101a7578063a9ac4179146101c7575f80fd5b80631f884fdf146100ff5780635a89b0e7146101285780636bb987fe1461013e5780637c51b64214610147575b5f80fd5b61011261010d3660046134ae565b610327565b60405161011f91906134ec565b60405180910390f35b610130600881565b60405190815260200161011f565b61013061708081565b61015a610155366004613562565b6103ee565b60405161011f91906135f4565b61017a610175366004613641565b6104b1565b60405161011f919061365c565b61019a61019536600461367c565b610612565b60405161011f91906136b3565b6101ba6101b536600461367c565b61078a565b60405161011f9190613721565b6101da6101d5366004613641565b610d18565b60405161011f91906138af565b6101fa6101f5366004613641565b610ef9565b60405161011f9190613a2b565b61021a61021536600461367c565b611748565b60405161011f9190613a3a565b61013061023536600461367c565b611a7a565b61024d610248366004613a5c565b611d4d565b60405161011f9190613a78565b61026d610268366004613a8a565b612167565b60405161011f919081518152602080830151908201526040808301516001600160a01b0316908201526060918201519181019190915260800190565b6102bc6102b73660046134ae565b6124af565b60405161011f9190613ac7565b6102dc6102d736600461367c565b612560565b604080518251815260208084015190820152918101516001600160a01b03169082015260600161011f565b61031a610315366004613b09565b6126f8565b60405161011f9190613b69565b6060815f816001600160401b0381111561034357610343613baa565b60405190808252806020026020018201604052801561038757816020015b604080518082019091525f80825260208201528152602001906001900390816103615790505b5090505f5b828110156103e3576103be8686838181106103a9576103a9613bbe565b90506020020160208101906101759190613641565b8282815181106103d0576103d0613bbe565b602090810291909101015260010161038c565b509150505b92915050565b6060825f816001600160401b0381111561040a5761040a613baa565b60405190808252806020026020018201604052801561044357816020015b61043061339b565b8152602001906001900390816104285790505b5090505f5b828110156104a55761048087878381811061046557610465613bbe565b905060200201602081019061047a9190613641565b86611748565b82828151811061049257610492613bbe565b6020908102919091010152600101610448565b509150505b9392505050565b604080518082019091525f80825260208201525f826001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610501573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105259190613bd2565b90505f816001600160a01b0316637dc0d1d06040518163ffffffff1660e01b8152600401602060405180830381865afa158015610564573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105889190613bd2565b6040805180820182526001600160a01b03808816808352925163fc57d4df60e01b815260048101939093529293509160208301919084169063fc57d4df90602401602060405180830381865afa1580156105e4573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106089190613bed565b9052949350505050565b6106346040518060600160405280606081526020015f81526020015f81525090565b604051635ec88c7960e01b81526001600160a01b0383811660048301525f918291829190871690635ec88c7990602401606060405180830381865afa15801561067f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106a39190613c04565b925092509250825f146106fd5760405162461bcd60e51b815260206004820152601760248201527f6163636f756e74206c6971756964697479206572726f7200000000000000000060448201526064015b60405180910390fd5b604080516060810191829052632aff3bff60e21b9091526001600160a01b0386811660648301528190881663abfceffc608483015f60405180830381865afa15801561074b573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526107729190810190613c81565b81526020810193909352604090920152949350505050565b604080516080810182525f80825260208201819052918101919091526060808201525f826001600160a01b031663b0772d0b6040518163ffffffff1660e01b81526004015f60405180830381865afa1580156107e8573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261080f9190810190613c81565b6040805160a0810182525f8082526020808301829052828401829052606080840183905260808085018490528551908101865280830184905280860193909352828101526001600160a01b038816808352845163bf32442d60e01b815294519596509294919363bf32442d92600480830193928290030181865afa158015610899573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108bd9190613bd2565b6001600160a01b039081166020830152604051638a7dc16560e01b8152878216600482015290861690638a7dc16590602401602060405180830381865afa15801561090a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061092e9190613bed565b604082015282516001600160401b0381111561094c5761094c613baa565b60405190808252806020026020018201604052801561099057816020015b604080518082019091525f808252602082015281526020019060019003908161096a5790505b5060608201525f5b8351811015610d0e57856001600160a01b031663e37d4b798583815181106109c2576109c2613bbe565b60200260200101516040518263ffffffff1660e01b81526004016109f591906001600160a01b0391909116815260200190565b6040805180830381865afa158015610a0f573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a339190613d46565b63ffffffff90811660408087019182526001600160e01b03938416602080890191825282518084019093529051909416815290519091169181019190915284516001600160a01b0388169063b8324c7c90879085908110610a9657610a96613bbe565b60200260200101516040518263ffffffff1660e01b8152600401610ac991906001600160a01b0391909116815260200190565b6040805180830381865afa158015610ae3573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b079190613d46565b85606001866080018263ffffffff1663ffffffff16815250826001600160e01b03166001600160e01b031681525050505f604051806040016040528086606001516001600160e01b03168152602001866080015163ffffffff1681525090505f6040518060200160405280888681518110610b8457610b84613bbe565b60200260200101516001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bc7573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610beb9190613bed565b9052604080518082019091525f8082526020820152909150878581518110610c1557610c15613bbe565b60209081029190910101516001600160a01b031681528751610c549085908a9088908110610c4557610c45613bbe565b6020026020010151848d61287a565b5f610c7b858a8881518110610c6b57610c6b613bbe565b60200260200101518e868f612ac0565b9050610ca1848a8881518110610c9357610c93613bbe565b60200260200101518d612c0c565b5f610cc7858b8981518110610cb857610cb8613bbe565b60200260200101518f8f612e48565b9050610cd38282612ff4565b60208401526060880151805184919089908110610cf257610cf2613bbe565b6020026020010181905250505050505050806001019050610998565b5095945050505050565b60605f826001600160a01b031663a657e5796040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d57573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d7b9190613d70565b9050806001600160601b03166001600160401b03811115610d9e57610d9e613baa565b604051908082528060200260200182016040528015610dfb57816020015b610de860405180606001604052805f6001600160601b0316815260200160608152602001606081525090565b815260200190600190039081610dbc5790505b50915060015b816001600160601b0316816001600160601b031611610ef257604080516060810182526001600160601b03831680825291516325b2641960e21b815260048101929092529060208201906001600160a01b038716906396c99064906024015f60405180830381865afa158015610e79573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610ea09190810190613d8b565b8152602001610eaf8387611d4d565b905283610ebd600184613e2d565b6001600160601b031681518110610ed657610ed6613bbe565b602002602001018190525080610eeb90613e54565b9050610e01565b5050919050565b610f016133d4565b5f826001600160a01b031663bd6d894d6040518163ffffffff1660e01b81526004016020604051808303815f875af1158015610f3f573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f639190613bed565b90505f836001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fa2573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610fc69190613bd2565b604051638e8f294b60e01b81526001600160a01b03868116600483015291925082915f918291841690638e8f294b906024016040805180830381865afa158015611012573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110369190613e88565b915091505f806110c3896001600160a01b03166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa15801561107a573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526110a19190810190613d8b565b604051806040016040528060048152602001633b21272160e11b815250613029565b156110d357505f905060126111ff565b5f899050806001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611113573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111379190613bd2565b9250806001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611175573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111999190613bd2565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111d4573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111f89190613eb2565b60ff169150505b604051635dd3fc9d60e01b81526001600160a01b038a811660048301525f9190871690635dd3fc9d90602401602060405180830381865afa158015611246573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061126a9190613bed565b604051635ddc432560e11b81526001600160a01b038c811660048301529192505f9188169063bbb8864a90602401602060405180830381865afa1580156112b3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112d79190613bed565b90505f805b60088160ff1611611395575f896001600160a01b031663e85a29608f8460ff16600881111561130d5761130d613ed2565b6040518363ffffffff1660e01b815260040161132a929190613ee6565b602060405180830381865afa158015611345573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113699190613f1f565b611373575f611376565b60015b60ff9081169083161b92909217915061138e81613f38565b90506112dc565b506040518061026001604052808d6001600160a01b031681526020018b81526020018d6001600160a01b031663ae9d70b06040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113f3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114179190613bed565b81526020018d6001600160a01b031663f8f9da286040518163ffffffff1660e01b8152600401602060405180830381865afa158015611458573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061147c9190613bed565b81526020018d6001600160a01b031663173b99046040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114bd573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114e19190613bed565b81526020018d6001600160a01b03166347bd37186040518163ffffffff1660e01b8152600401602060405180830381865afa158015611522573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906115469190613bed565b81526020018d6001600160a01b0316638f840ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611587573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906115ab9190613bed565b81526020018d6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115ec573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116109190613bed565b81526020018d6001600160a01b0316633b1d21a26040518163ffffffff1660e01b8152600401602060405180830381865afa158015611651573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116759190613bed565b81526020018815158152602001878152602001866001600160a01b031681526020018d6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116d3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116f79190613eb2565b60ff1681526020018581526020018481526020018381526020016170808561171f9190613f56565b815260200161173061708085613f56565b8152602001919091529b9a5050505050505050505050565b61175061339b565b6040516370a0823160e01b81526001600160a01b0383811660048301525f91908516906370a0823190602401602060405180830381865afa158015611797573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906117bb9190613bed565b6040516305eff7ef60e21b81526001600160a01b0385811660048301529192505f918616906317bfdfbc906024016020604051808303815f875af1158015611805573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906118299190613bed565b604051633af9e66960e01b81526001600160a01b0386811660048301529192505f91871690633af9e669906024016020604051808303815f875af1158015611873573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906118979190613bed565b90505f806118d9886001600160a01b03166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa15801561107a573d5f803e3d5ffd5b156118f35750506001600160a01b03851680319031611a3d565b5f8890505f816001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611934573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906119589190613bd2565b6040516370a0823160e01b81526001600160a01b038b81166004830152919250908216906370a0823190602401602060405180830381865afa1580156119a0573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906119c49190613bed565b604051636eb1769f60e11b81526001600160a01b038b811660048301528c811660248301529195509082169063dd62ed3e90604401602060405180830381865afa158015611a14573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a389190613bed565b925050505b6040805160c0810182526001600160a01b039990991689526020890195909552938701929092526060860152608085015260a08401525090919050565b5f808290505f816001600160a01b031663b0772d0b6040518163ffffffff1660e01b81526004015f60405180830381865afa158015611abb573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052611ae29190810190613c81565b90505f805b8251811015610d0e575f838281518110611b0357611b03613bbe565b60200260200101519050611b94816001600160a01b03166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa158015611b4b573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052611b729190810190613d8b565b604051806040016040528060048152602001631d9554d560e21b815250613029565b158015611c265750611c24816001600160a01b03166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa158015611bda573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052611c019190810190613d8b565b60405180604001604052806005815260200164764c554e4160d81b815250613029565b155b15611d44575f611c3582610ef9565b90505f611c42838b611748565b90505f611c4e846104b1565b90505f816020015190505f60405180602001604052808381525090505f80611c7a838760600151613081565b90505f670de0b6b3a764000088602001518960e00151611c9a9190613f56565b611ca49190613f6d565b90505f611cb18583613081565b90508015611cd85780838a6102000151611ccb9190613f56565b611cd59190613f6d565b93505b5f80611ce8878b60400151613081565b90505f611cf9888d60a00151613081565b90508015611d205780828d6102200151611d139190613f56565b611d1d9190613f6d565b92505b611d2a8388613f8c565b8f611d359190613f8c565b9e505050505050505050505050505b50600101611ae7565b6060816001600160a01b031663a657e5796040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d8b573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611daf9190613d70565b6001600160601b0316836001600160601b03161115611dec57604051632db8671b60e11b81526001600160601b03841660048201526024016106f4565b816001600160a01b031663d463654c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e28573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611e4c9190613d70565b6001600160601b0316836001600160601b031603611e7d57604051630203217b60e61b815260040160405180910390fd5b6040516318f8358d60e21b81526001600160601b03841660048201525f906001600160a01b038416906363e0d634906024015f60405180830381865afa158015611ec9573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052611ef09190810190613f9f565b8051909150806001600160401b03811115611f0d57611f0d613baa565b604051908082528060200260200182016040528015611f8257816020015b60408051610120810182525f8082526060602080840182905293830182905282018190526080820181905260a0820181905260c0820181905260e0820181905261010082015282525f19909201910181611f2b5790505b506040516325b2641960e21b81526001600160601b03871660048201529093505f906001600160a01b038616906396c99064906024015f60405180830381865afa158015611fd2573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052611ff99190810190613d8b565b90505f5b8281101561215d575f805f805f805f8c6001600160a01b0316633093c11e8f8d8b8151811061202e5761202e613bbe565b60200260200101516040518363ffffffff1660e01b81526004016120709291906001600160601b039290921682526001600160a01b0316602082015260400190565b60e060405180830381865afa15801561208b573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906120af9190614028565b9650965096509650965096509650604051806101200160405280836001600160601b031681526020018a81526020018c8a815181106120f0576120f0613bbe565b60200260200101516001600160a01b03168152602001881515815260200187815260200186151581526020018581526020018481526020018215158152508c898151811061214057612140613bbe565b602002602001018190525050505050505050806001019050611ffd565b5050505092915050565b61219760405180608001604052805f81526020015f81526020015f6001600160a01b031681526020015f81525090565b6040516370a0823160e01b81526001600160a01b0383811660048301525f91908616906370a0823190602401602060405180830381865afa1580156121de573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906122029190613bed565b60405163adcd5fb960e01b81526001600160a01b0385811660048301529192509085169063adcd5fb9906024015f604051808303815f87803b158015612246575f80fd5b505af1158015612258573d5f803e3d5ffd5b50506040516370a0823160e01b81526001600160a01b0386811660048301525f9350881691506370a0823190602401602060405180830381865afa1580156122a2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906122c69190613bed565b604051638a7dc16560e01b81526001600160a01b0386811660048301529192505f91871690638a7dc16590602401602060405180830381865afa15801561230f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906123339190613bed565b90505f61236682846040518060400160405280600d81526020016c1cdd5b481e1d9cc81d1bdd185b609a1b8152506130a0565b90505f61239982866040518060400160405280600d81526020016c1cdd5888185b1b1bd8d85d1959609a1b8152506130d9565b60408051608081018252878152905163b4b5ea5760e01b81526001600160a01b038a8116600483015292935090916020830191908c169063b4b5ea5790602401602060405180830381865afa1580156123f4573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906124189190613d70565b6001600160601b03168152604051632c3e6f0f60e11b81526001600160a01b038a811660048301526020909201918c169063587cde1e90602401602060405180830381865afa15801561246d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906124919190613bd2565b6001600160a01b031681526020019190915298975050505050505050565b6060815f816001600160401b038111156124cb576124cb613baa565b60405190808252806020026020018201604052801561250457816020015b6124f16133d4565b8152602001906001900390816124e95790505b5090505f5b828110156103e35761253b86868381811061252657612526613bbe565b90506020020160208101906101f59190613641565b82828151811061254d5761254d613bbe565b6020908102919091010152600101612509565b61258a60405180606001604052805f81526020015f81526020015f6001600160a01b031681525090565b6040805160608101918290526370a0823160e01b9091526001600160a01b038381166064830152819085166370a0823160848301602060405180830381865afa1580156125d9573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906125fd9190613bed565b815260405163b4b5ea5760e01b81526001600160a01b03858116600483015260209092019186169063b4b5ea5790602401602060405180830381865afa158015612649573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061266d9190613d70565b6001600160601b03168152604051632c3e6f0f60e11b81526001600160a01b03858116600483015260209092019186169063587cde1e90602401602060405180830381865afa1580156126c2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906126e69190613bd2565b6001600160a01b031690529392505050565b60605f826001600160401b0381111561271357612713613baa565b60405190808252806020026020018201604052801561275757816020015b604080518082019091525f80825260208201528152602001906001900390816127315790505b5090505f5b83811015610d0e57604051806040016040528086868481811061278157612781613bbe565b90506020020160208101906127969190614096565b63ffffffff168152602001886001600160a01b031663782d6fe1898989878181106127c3576127c3613bbe565b90506020020160208101906127d89190614096565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015263ffffffff166024820152604401602060405180830381865afa158015612825573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906128499190613d70565b6001600160601b031681525082828151811061286757612867613bbe565b602090810291909101015260010161275c565b604051635ddc432560e11b81526001600160a01b0384811660048301525f919083169063bbb8864a90602401602060405180830381865afa1580156128c1573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906128e59190613bed565b90505f4390505f61290082886020015163ffffffff16613107565b90505f8111801561291057505f83115b15612a6d575f61297f876001600160a01b03166347bd37186040518163ffffffff1660e01b8152600401602060405180830381865afa158015612955573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906129799190613bed565b87613140565b90505f61298c838661315d565b90505f8083116129aa5760405180602001604052805f8152506129b4565b6129b4828461319e565b90505f6129db60405180602001604052808d5f01516001600160e01b0316815250836131e2565b9050612a15815f0151604051806040016040528060138152602001726e657720696e646578206f766572666c6f777360681b81525061320b565b6001600160e01b03168b52604080518082019091526016815275626c6f636b206e756d626572206f766572666c6f777360501b6020820152612a58908790613239565b63ffffffff1660208c015250612ab792505050565b8015612ab757612aab8260405180604001604052806016815260200175626c6f636b206e756d626572206f766572666c6f777360501b815250613239565b63ffffffff1660208801525b50505050505050565b604080516020808201835287516001600160e01b03168252825190810192839052630238089760e21b9092526001600160a01b03868116602484015285811660448401525f928391819086166308e0225c60648301602060405180830381865afa158015612b30573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612b549190613bed565b9052805190915015612bfd575f612b6b8383613260565b6040516395dd919360e01b81526001600160a01b0389811660048301529192505f91612be391908b16906395dd919390602401602060405180830381865afa158015612bb9573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612bdd9190613bed565b88613140565b90505f612bf08284613289565b9550612c03945050505050565b5f925050505b95945050505050565b604051635dd3fc9d60e01b81526001600160a01b0383811660048301525f9190831690635dd3fc9d90602401602060405180830381865afa158015612c53573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612c779190613bed565b90505f4390505f612c9282876020015163ffffffff16613107565b90505f81118015612ca257505f83115b15612df6575f856001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ce4573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612d089190613bed565b90505f612d15838661315d565b90505f808311612d335760405180602001604052805f815250612d3d565b612d3d828461319e565b90505f612d6460405180602001604052808c5f01516001600160e01b0316815250836131e2565b9050612d9e815f0151604051806040016040528060138152602001726e657720696e646578206f766572666c6f777360681b81525061320b565b6001600160e01b03168a52604080518082019091526016815275626c6f636b206e756d626572206f766572666c6f777360501b6020820152612de1908790613239565b63ffffffff1660208b015250612e4092505050565b8015612e4057612e348260405180604001604052806016815260200175626c6f636b206e756d626572206f766572666c6f777360501b815250613239565b63ffffffff1660208701525b505050505050565b604080516020808201835286516001600160e01b03168252825190810192839052631068634b60e21b9092526001600160a01b03858116602484015284811660448401525f928391819086166341a18d2c60648301602060405180830381865afa158015612eb8573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612edc9190613bed565b90528051909150158015612ef05750815115155b15612f6157836001600160a01b031663c5b4db556040518163ffffffff1660e01b8152600401602060405180830381865afa158015612f31573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612f5591906140b1565b6001600160e01b031681525b5f612f6c8383613260565b6040516370a0823160e01b81526001600160a01b0388811660048301529192505f918916906370a0823190602401602060405180830381865afa158015612fb5573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612fd99190613bed565b90505f612fe68284613289565b9a9950505050505050505050565b5f6104aa8383604051806040016040528060118152602001706164646974696f6e206f766572666c6f7760781b8152506130a0565b5f8160405160200161303b91906140ca565b604051602081830303815290604052805190602001208360405160200161306291906140ca565b6040516020818303038152906040528051906020012014905092915050565b5f8061308d84846132b1565b9050613098816132d7565b949350505050565b5f806130ac8486613f8c565b905082858210156130d05760405162461bcd60e51b81526004016106f491906140e0565b50949350505050565b5f81848411156130fc5760405162461bcd60e51b81526004016106f491906140e0565b5061309883856140f2565b5f6104aa8383604051806040016040528060158152602001747375627472616374696f6e20756e646572666c6f7760581b8152506130d9565b5f6104aa61315684670de0b6b3a764000061315d565b83516132ee565b5f6104aa83836040518060400160405280601781526020017f6d756c7469706c69636174696f6e206f766572666c6f77000000000000000000815250613320565b60408051602081019091525f815260405180602001604052806131d96131d3866ec097ce7bc90715b34b9f100000000061315d565b856132ee565b90529392505050565b60408051602081019091525f815260405180602001604052806131d9855f0151855f0151612ff4565b5f81600160e01b84106132315760405162461bcd60e51b81526004016106f491906140e0565b509192915050565b5f8164010000000084106132315760405162461bcd60e51b81526004016106f491906140e0565b60408051602081019091525f815260405180602001604052806131d9855f0151855f0151613107565b5f6ec097ce7bc90715b34b9f10000000006132a784845f015161315d565b6104aa9190613f6d565b60408051602081019091525f815260405180602001604052806131d9855f01518561315d565b80515f906103e890670de0b6b3a764000090613f6d565b5f6104aa83836040518060400160405280600e81526020016d646976696465206279207a65726f60901b815250613370565b5f83158061332c575082155b1561333857505f6104aa565b5f6133438486613f56565b9050836133508683613f6d565b1483906130d05760405162461bcd60e51b81526004016106f491906140e0565b5f81836133905760405162461bcd60e51b81526004016106f491906140e0565b506130988385613f6d565b6040518060c001604052805f6001600160a01b031681526020015f81526020015f81526020015f81526020015f81526020015f81525090565b6040518061026001604052805f6001600160a01b031681526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f151581526020015f81526020015f6001600160a01b031681526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81525090565b5f8083601f840112613477575f80fd5b5081356001600160401b0381111561348d575f80fd5b6020830191508360208260051b85010111156134a7575f80fd5b9250929050565b5f80602083850312156134bf575f80fd5b82356001600160401b038111156134d4575f80fd5b6134e085828601613467565b90969095509350505050565b602080825282518282018190525f919060409081850190868401855b8281101561353e5761352e84835180516001600160a01b03168252602090810151910152565b9284019290850190600101613508565b5091979650505050505050565b6001600160a01b038116811461355f575f80fd5b50565b5f805f60408486031215613574575f80fd5b83356001600160401b03811115613589575f80fd5b61359586828701613467565b90945092505060208401356135a98161354b565b809150509250925092565b80516001600160a01b031682526020808201519083015260408082015190830152606080820151908301526080808201519083015260a090810151910152565b602080825282518282018190525f9190848201906040850190845b81811015613635576136228385516135b4565b9284019260c0929092019160010161360f565b50909695505050505050565b5f60208284031215613651575f80fd5b81356104aa8161354b565b81516001600160a01b0316815260208083015190820152604081016103e8565b5f806040838503121561368d575f80fd5b82356136988161354b565b915060208301356136a88161354b565b809150509250929050565b602080825282516060838301528051608084018190525f9291820190839060a08601905b808310156137005783516001600160a01b031682529284019260019290920191908401906136d7565b50838701516040870152604087015160608701528094505050505092915050565b602080825282516001600160a01b0390811683830152838201511660408084019190915280840151606080850191909152840151608080850152805160a085018190525f939291830191849160c0870191905b808410156137ae5761379a83865180516001600160a01b03168252602090810151910152565b938501936001939093019291810191613774565b5090979650505050505050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b5f82825180855260208086019550808260051b8401018186015f5b848110156137ae57858303601f19018952815180516001600160601b0316845261012085820151818787015261383c828701826137bb565b915050604080830151613859828801826001600160a01b03169052565b50506060828101511515908601526080808301519086015260a08083015115159086015260c0808301519086015260e0808301519086015261010091820151151591909401529783019790830190600101613804565b5f60208083018184528085518083526040925060408601915060408160051b8701018488015f5b8381101561393b57603f19898403018552815160606001600160601b03825116855288820151818a87015261390d828701826137bb565b9150508782015191508481038886015261392781836137e9565b9689019694505050908601906001016138d6565b509098975050505050505050565b80516001600160a01b031682526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e0830152610100808201518184015250610120808201516139bc8285018215159052565b50506101408181015190830152610160808201516001600160a01b03169083015261018080820151908301526101a080820151908301526101c080820151908301526101e080820151908301526102008082015190830152610220808201519083015261024090810151910152565b61026081016103e88284613949565b60c081016103e882846135b4565b6001600160601b038116811461355f575f80fd5b5f8060408385031215613a6d575f80fd5b823561369881613a48565b602081525f6104aa60208301846137e9565b5f805f60608486031215613a9c575f80fd5b8335613aa78161354b565b92506020840135613ab78161354b565b915060408401356135a98161354b565b602080825282518282018190525f9190848201906040850190845b8181101561363557613af5838551613949565b928401926102609290920191600101613ae2565b5f805f8060608587031215613b1c575f80fd5b8435613b278161354b565b93506020850135613b378161354b565b925060408501356001600160401b03811115613b51575f80fd5b613b5d87828801613467565b95989497509550505050565b602080825282518282018190525f919060409081850190868401855b8281101561353e57815180518552860151868501529284019290850190600101613b85565b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b5f60208284031215613be2575f80fd5b81516104aa8161354b565b5f60208284031215613bfd575f80fd5b5051919050565b5f805f60608486031215613c16575f80fd5b8351925060208401519150604084015190509250925092565b604051601f8201601f191681016001600160401b0381118282101715613c5757613c57613baa565b604052919050565b5f6001600160401b03821115613c7757613c77613baa565b5060051b60200190565b5f6020808385031215613c92575f80fd5b82516001600160401b03811115613ca7575f80fd5b8301601f81018513613cb7575f80fd5b8051613cca613cc582613c5f565b613c2f565b81815260059190911b82018301908381019087831115613ce8575f80fd5b928401925b82841015613d0f578351613d008161354b565b82529284019290840190613ced565b979650505050505050565b80516001600160e01b0381168114613d30575f80fd5b919050565b63ffffffff8116811461355f575f80fd5b5f8060408385031215613d57575f80fd5b613d6083613d1a565b915060208301516136a881613d35565b5f60208284031215613d80575f80fd5b81516104aa81613a48565b5f6020808385031215613d9c575f80fd5b82516001600160401b0380821115613db2575f80fd5b818501915085601f830112613dc5575f80fd5b815181811115613dd757613dd7613baa565b613de9601f8201601f19168501613c2f565b91508082528684828501011115613dfe575f80fd5b808484018584015e5f90820190930192909252509392505050565b634e487b7160e01b5f52601160045260245ffd5b6001600160601b03828116828216039080821115613e4d57613e4d613e19565b5092915050565b5f6001600160601b03808316818103613e6f57613e6f613e19565b6001019392505050565b80518015158114613d30575f80fd5b5f8060408385031215613e99575f80fd5b613ea283613e79565b9150602083015190509250929050565b5f60208284031215613ec2575f80fd5b815160ff811681146104aa575f80fd5b634e487b7160e01b5f52602160045260245ffd5b6001600160a01b03831681526040810160098310613f1257634e487b7160e01b5f52602160045260245ffd5b8260208301529392505050565b5f60208284031215613f2f575f80fd5b6104aa82613e79565b5f60ff821660ff8103613f4d57613f4d613e19565b60010192915050565b80820281158282048414176103e8576103e8613e19565b5f82613f8757634e487b7160e01b5f52601260045260245ffd5b500490565b808201808211156103e8576103e8613e19565b5f6020808385031215613fb0575f80fd5b82516001600160401b03811115613fc5575f80fd5b8301601f81018513613fd5575f80fd5b8051613fe3613cc582613c5f565b81815260059190911b82018301908381019087831115614001575f80fd5b928401925b82841015613d0f5783516140198161354b565b82529284019290840190614006565b5f805f805f805f60e0888a03121561403e575f80fd5b61404788613e79565b96506020880151955061405c60408901613e79565b9450606088015193506080880151925060a088015161407a81613a48565b915061408860c08901613e79565b905092959891949750929550565b5f602082840312156140a6575f80fd5b81356104aa81613d35565b5f602082840312156140c1575f80fd5b6104aa82613d1a565b5f82518060208501845e5f920191825250919050565b602081525f6104aa60208301846137bb565b818103818111156103e8576103e8613e1956fea264697066735822122070de10234a2c30ccdad7bb76550bf2d81b2c8a62f50e2a5599a361a7ada44ecb64736f6c63430008190033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getAccountLimits(address,address)": {
        "params": {
          "account": "Address of the account to query",
          "comptroller": "Address of comptroller proxy"
        },
        "returns": {
          "_0": "Struct with markets user has entered, liquidity, and shortfall of the account"
        }
      },
      "getAllPoolsData(address)": {
        "params": {
          "comptroller": "The Comptroller contract to query"
        },
        "returns": {
          "poolsData": "An array of PoolWithMarkets structs, each containing pool info and its markets"
        }
      },
      "getDailyXVS(address,address)": {
        "params": {
          "account": "Address of account to fetch the daily XVS distribution",
          "comptrollerAddress": "Address of the comptroller proxy"
        },
        "returns": {
          "_0": "Amount of XVS distributed daily to an account"
        }
      },
      "getMarketsDataByPool(uint96,address)": {
        "custom:error": "PoolDoesNotExist Reverts if the given pool ID does not existInvalidOperationForCorePool Reverts if called on the Core Pool (`poolId = 0`)",
        "params": {
          "comptroller": "The address of the Comptroller contract",
          "poolId": "The pool ID to fetch data for"
        },
        "returns": {
          "result": "An array of MarketData structs containing detailed market info for the given pool"
        }
      },
      "getVenusVotes(address,address,uint32[])": {
        "params": {
          "account": "Address of the account",
          "blockNumbers": "Array of blocks to query",
          "xvs": "XVS contract address"
        },
        "returns": {
          "_0": "Array of VenusVotes structs with block number and vote count"
        }
      },
      "getXVSBalanceMetadata(address,address)": {
        "params": {
          "account": "Account address",
          "xvs": "XVS contract address"
        },
        "returns": {
          "_0": "Struct with XVS balance and voter details"
        }
      },
      "getXVSBalanceMetadataExt(address,address,address)": {
        "params": {
          "account": "Account address",
          "comptroller": "Comptroller proxy contract address",
          "xvs": "XVS contract address"
        },
        "returns": {
          "_0": "Struct with XVS balance and voter details and XVS allocation"
        }
      },
      "pendingRewards(address,address)": {
        "params": {
          "comptroller": "Address of the comptroller",
          "holder": "Account to query pending XVS"
        },
        "returns": {
          "_0": "Reward object contraining the totalRewards and pending rewards for each market"
        }
      },
      "vTokenBalances(address,address)": {
        "params": {
          "account": "Account address to fetch the balance of",
          "vToken": "Address of the token to check the balance of"
        },
        "returns": {
          "_0": "VTokenBalances with token balance information"
        }
      },
      "vTokenBalancesAll(address[],address)": {
        "params": {
          "account": "Account address to fetch the balance of",
          "vTokens": "Addresses of the tokens to check the balance of"
        },
        "returns": {
          "_0": "VTokenBalances Array with token balance information"
        }
      },
      "vTokenMetadata(address)": {
        "params": {
          "vToken": "The address of the vToken to fetch VTokenMetadata"
        },
        "returns": {
          "_0": "VTokenMetadata struct with vToken supply and borrow information."
        }
      },
      "vTokenMetadataAll(address[])": {
        "params": {
          "vTokens": "Array of vToken addresses to fetch VTokenMetadata"
        },
        "returns": {
          "_0": "Array of structs with vToken supply and borrow information."
        }
      },
      "vTokenUnderlyingPrice(address)": {
        "params": {
          "vToken": "address of the vToken"
        },
        "returns": {
          "_0": "response struct with underlyingPrice info of vToken"
        }
      },
      "vTokenUnderlyingPriceAll(address[])": {
        "params": {
          "vTokens": "Array of vToken addresses"
        },
        "returns": {
          "_0": "array of response structs with underlying price information of vTokens"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "InvalidOperationForCorePool()": [
        {
          "notice": "Thrown when trying to call pool-specific methods on the Core Pool"
        }
      ],
      "PoolDoesNotExist(uint96)": [
        {
          "notice": "Thrown when a given pool ID does not exist"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "BLOCKS_PER_DAY()": {
        "notice": "Blocks Per Day"
      },
      "VTOKEN_ACTIONS()": {
        "notice": "Total actions available on VToken"
      },
      "getAccountLimits(address,address)": {
        "notice": "Query the account liquidity and shortfall of an account"
      },
      "getAllPoolsData(address)": {
        "notice": "Returns all pools (excluding the Core Pool) along with their associated market data"
      },
      "getDailyXVS(address,address)": {
        "notice": "Get amount of XVS distributed daily to an account"
      },
      "getMarketsDataByPool(uint96,address)": {
        "notice": "Retrieves full market data for all vTokens in a specific pool (excluding the Core Pool)"
      },
      "getVenusVotes(address,address,uint32[])": {
        "notice": "Query the voting power for an account at a specific list of block numbers"
      },
      "getXVSBalanceMetadata(address,address)": {
        "notice": "Query the XVSBalance info of an account"
      },
      "getXVSBalanceMetadataExt(address,address,address)": {
        "notice": "Query the XVSBalance extended info of an account"
      },
      "pendingRewards(address,address)": {
        "notice": "Calculate the total XVS tokens pending and accrued by a user account"
      },
      "vTokenBalances(address,address)": {
        "notice": "Get the current vToken balance (outstanding borrows) for an account"
      },
      "vTokenBalancesAll(address[],address)": {
        "notice": "Get the current vToken balances (outstanding borrows) for all vTokens on an account"
      },
      "vTokenMetadata(address)": {
        "notice": "Query the metadata of a vToken by its address"
      },
      "vTokenMetadataAll(address[])": {
        "notice": "Get VTokenMetadata for an array of vToken addresses"
      },
      "vTokenUnderlyingPrice(address)": {
        "notice": "Get the price for the underlying asset of a vToken"
      },
      "vTokenUnderlyingPriceAll(address[])": {
        "notice": "Query the underlyingPrice of an array of vTokens"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
