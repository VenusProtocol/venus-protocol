{
  "address": "0x1b9E17a9E6f0239DeD067bFCA916c5628972083B",
  "abi": [
    {
      "inputs": [],
      "name": "AlreadyInSelectedPool",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ArrayLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BorrowNotAllowedInPool",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CorePoolModificationNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyPoolLabel",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncompatibleBorrowedAssets",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "enum WeightFunction",
          "name": "strategy",
          "type": "uint8"
        }
      ],
      "name": "InvalidWeightingStrategy",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "errorCode",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shortfall",
          "type": "uint256"
        }
      ],
      "name": "LiquidityCheckFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "poolId",
          "type": "uint96"
        },
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        }
      ],
      "name": "MarketAlreadyListed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MarketConfigNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MarketNotListedInCorePool",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "poolId",
          "type": "uint96"
        }
      ],
      "name": "PoolDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "poolId",
          "type": "uint96"
        },
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        }
      ],
      "name": "PoolMarketNotFound",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract VToken",
          "name": "vToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "venusDelta",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "venusBorrowIndex",
          "type": "uint256"
        }
      ],
      "name": "DistributedBorrowerVenus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract VToken",
          "name": "vToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "supplier",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "venusDelta",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "venusSupplyIndex",
          "type": "uint256"
        }
      ],
      "name": "DistributedSupplierVenus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DistributedVAIVaultVenus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "error",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "info",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "detail",
          "type": "uint256"
        }
      ],
      "name": "Failure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract VToken[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "FlashLoanExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract VToken",
          "name": "vToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MarketEntered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract VToken",
          "name": "vToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSpeed",
          "type": "uint256"
        }
      ],
      "name": "VenusBorrowSpeedUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract VToken",
          "name": "vToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSpeed",
          "type": "uint256"
        }
      ],
      "name": "VenusSupplySpeedUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract VToken[]",
          "name": "vTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "supplySpeeds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "borrowSpeeds",
          "type": "uint256[]"
        }
      ],
      "name": "_setVenusSpeeds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "accountAssets",
      "outputs": [
        {
          "internalType": "contract VToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "enum Action",
          "name": "action",
          "type": "uint8"
        }
      ],
      "name": "actionPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allMarkets",
      "outputs": [
        {
          "internalType": "contract VToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvedDelegates",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "authorizedFlashLoan",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "borrowAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowCapGuardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowCaps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "borrowVerify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeFactorMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comptrollerImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comptrollerLens",
      "outputs": [
        {
          "internalType": "contract ComptrollerLensInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "corePoolId",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delegateAuthorizationFlashloan",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "initiator",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "contract VToken[]",
          "name": "vTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "underlyingAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "modes",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "param",
          "type": "bytes"
        }
      ],
      "name": "executeFlashLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAccountLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getBorrowingPower",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vTokenModify",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "getHypotheticalAccountLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "poolId",
          "type": "uint96"
        },
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        }
      ],
      "name": "getPoolMarketIndex",
      "outputs": [
        {
          "internalType": "PoolMarketId",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getXVSAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isForcedLiquidationEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "isForcedLiquidationEnabledForUser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastPoolId",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "name": "liquidateBorrowAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "actualRepayAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "seizeTokens",
          "type": "uint256"
        }
      ],
      "name": "liquidateBorrowVerify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidatorContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minReleaseAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        }
      ],
      "name": "mintAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintVAIGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "actualMintAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintTokens",
          "type": "uint256"
        }
      ],
      "name": "mintVerify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mintedVAIs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oldLiquidationIncentiveMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract ResilientOracleInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseGuardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingComptrollerImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "string",
          "name": "label",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prime",
      "outputs": [
        {
          "internalType": "contract IPrime",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        }
      ],
      "name": "redeemAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "redeemAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        }
      ],
      "name": "redeemVerify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "releaseStartBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "name": "repayBorrowAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "actualRepayAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowerIndex",
          "type": "uint256"
        }
      ],
      "name": "repayBorrowVerify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "repayVAIGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "seizeTokens",
          "type": "uint256"
        }
      ],
      "name": "seizeAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "seizeTokens",
          "type": "uint256"
        }
      ],
      "name": "seizeVerify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "supplyCaps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "transferTokens",
          "type": "uint256"
        }
      ],
      "name": "transferAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "transferTokens",
          "type": "uint256"
        }
      ],
      "name": "transferVerify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryGuardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userPoolId",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaiController",
      "outputs": [
        {
          "internalType": "contract VAIControllerInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaiMintRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaiVaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "venusAccrued",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "venusBorrowSpeeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "venusBorrowState",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "index",
          "type": "uint224"
        },
        {
          "internalType": "uint32",
          "name": "block",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "venusBorrowerIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "venusInitialIndex",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "",
          "type": "uint224"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "venusSupplierIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "venusSupplySpeeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "venusSupplyState",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "index",
          "type": "uint224"
        },
        {
          "internalType": "uint32",
          "name": "block",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "venusVAIVaultRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x61b45317af51a212edd7ab739f80a1b7643bff8678012bf5afb575400f3d484d",
  "receipt": {
    "to": null,
    "from": "0x33C6476F88eeA28D7E7900F759B4597704Ef95B7",
    "contractAddress": "0x1b9E17a9E6f0239DeD067bFCA916c5628972083B",
    "transactionIndex": 0,
    "gasUsed": "4094485",
    "logsBloom": "0x
    "blockHash": "0xf24d9113e6071f60ac545b61624924f6ff5a10c32da22bdad8fde09208bd8347",
    "transactionHash": "0x61b45317af51a212edd7ab739f80a1b7643bff8678012bf5afb575400f3d484d",
    "logs": [],
    "blockNumber": 64317435,
    "cumulativeGasUsed": "4094485",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 6,
  "solcInputHash": "c33b7fcf83bb58226fe9a079903f59bc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyInSelectedPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ArrayLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BorrowNotAllowedInPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CorePoolModificationNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyPoolLabel\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncompatibleBorrowedAssets\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum WeightFunction\",\"name\":\"strategy\",\"type\":\"uint8\"}],\"name\":\"InvalidWeightingStrategy\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shortfall\",\"type\":\"uint256\"}],\"name\":\"LiquidityCheckFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"poolId\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"}],\"name\":\"MarketAlreadyListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MarketConfigNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MarketNotListedInCorePool\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"poolId\",\"type\":\"uint96\"}],\"name\":\"PoolDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"poolId\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"}],\"name\":\"PoolMarketNotFound\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract VToken\",\"name\":\"vToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"venusDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"venusBorrowIndex\",\"type\":\"uint256\"}],\"name\":\"DistributedBorrowerVenus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract VToken\",\"name\":\"vToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"venusDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"venusSupplyIndex\",\"type\":\"uint256\"}],\"name\":\"DistributedSupplierVenus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DistributedVAIVaultVenus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"error\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"detail\",\"type\":\"uint256\"}],\"name\":\"Failure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract VToken[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"FlashLoanExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract VToken\",\"name\":\"vToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MarketEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract VToken\",\"name\":\"vToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSpeed\",\"type\":\"uint256\"}],\"name\":\"VenusBorrowSpeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract VToken\",\"name\":\"vToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSpeed\",\"type\":\"uint256\"}],\"name\":\"VenusSupplySpeedUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract VToken[]\",\"name\":\"vTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"supplySpeeds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"borrowSpeeds\",\"type\":\"uint256[]\"}],\"name\":\"_setVenusSpeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accountAssets\",\"outputs\":[{\"internalType\":\"contract VToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"enum Action\",\"name\":\"action\",\"type\":\"uint8\"}],\"name\":\"actionPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allMarkets\",\"outputs\":[{\"internalType\":\"contract VToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedDelegates\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedFlashLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrowAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowCapGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowCaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrowVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeFactorMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptrollerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptrollerLens\",\"outputs\":[{\"internalType\":\"contract ComptrollerLensInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"corePoolId\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegateAuthorizationFlashloan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"contract VToken[]\",\"name\":\"vTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"underlyingAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"modes\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"param\",\"type\":\"bytes\"}],\"name\":\"executeFlashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBorrowingPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vTokenModify\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"getHypotheticalAccountLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"poolId\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"}],\"name\":\"getPoolMarketIndex\",\"outputs\":[{\"internalType\":\"PoolMarketId\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getXVSAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isForcedLiquidationEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"isForcedLiquidationEnabledForUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPoolId\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"liquidateBorrowAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actualRepayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"liquidateBorrowVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidatorContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minReleaseAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"mintAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintVAIGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actualMintAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintTokens\",\"type\":\"uint256\"}],\"name\":\"mintVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintedVAIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldLiquidationIncentiveMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract ResilientOracleInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingComptrollerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prime\",\"outputs\":[{\"internalType\":\"contract IPrime\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"redeemAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"redeemVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"repayBorrowAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actualRepayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowerIndex\",\"type\":\"uint256\"}],\"name\":\"repayBorrowVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repayVAIGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"seizeAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"seizeVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supplyCaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"transferTokens\",\"type\":\"uint256\"}],\"name\":\"transferAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"transferTokens\",\"type\":\"uint256\"}],\"name\":\"transferVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPoolId\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaiController\",\"outputs\":[{\"internalType\":\"contract VAIControllerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaiMintRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaiVaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"venusAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"venusBorrowSpeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"venusBorrowState\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"index\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"block\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"venusBorrowerIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"venusInitialIndex\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"\",\"type\":\"uint224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"venusSupplierIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"venusSupplySpeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"venusSupplyState\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"index\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"block\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"venusVAIVaultRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Venus\",\"details\":\"This facet contains all the hooks used while transferring the assets\",\"events\":{\"Failure(uint256,uint256,uint256)\":{\"details\":\"`error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary contract-specific code that enables us to report opaque error codes from upgradeable contracts.*\"}},\"kind\":\"dev\",\"methods\":{\"_setVenusSpeeds(address[],uint256[],uint256[])\":{\"details\":\"Allows the contract admin to set XVS speed for a market\",\"params\":{\"borrowSpeeds\":\"New XVS speed for borrow\",\"supplySpeeds\":\"New XVS speed for supply\",\"vTokens\":\"The market whose XVS speed to update\"}},\"actionPaused(address,uint8)\":{\"params\":{\"action\":\"Action id\",\"market\":\"vToken address\"}},\"borrowAllowed(address,address,uint256)\":{\"params\":{\"borrowAmount\":\"The amount of underlying the account would borrow\",\"borrower\":\"The account which would borrow the asset\",\"vToken\":\"The market to verify the borrow against\"},\"returns\":{\"_0\":\"0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"}},\"borrowVerify(address,address,uint256)\":{\"params\":{\"borrowAmount\":\"The amount of the underlying asset requested to borrow\",\"borrower\":\"The address borrowing the underlying\",\"vToken\":\"Asset whose underlying is being borrowed\"}},\"executeFlashLoan(address,address,address[],uint256[],uint256[],address,bytes)\":{\"details\":\"Transfer the specified assets to the receiver contract and handles repayment based on modes.      Mode 0: Classic flash loan - must repay everything or revert      Mode 1: Can create debt position for unpaid amounts\",\"params\":{\"initiator\":\"The address initiating the flash loan\",\"modes\":\"How each borrowed asset is handled if not repaid immediately (0: flash loan, 1: debt position)\",\"onBehalfOf\":\"The address for whom debt positions will be opened (if mode = 1)\",\"param\":\"The bytes passed in the executeOperation call\",\"receiver\":\"The address of the contract that will receive the flashLoan and execute the operation\",\"underlyingAmounts\":\"The amounts of each underlying asset to be loaned\",\"vTokens\":\"The addresses of the vToken assets to be loaned\"}},\"getAccountLiquidity(address)\":{\"params\":{\"account\":\"The account get liquidity for\"},\"returns\":{\"_0\":\"(possible error code (semi-opaque), account liquidity in excess of collateral requirements,          account shortfall below collateral requirements)\"}},\"getBorrowingPower(address)\":{\"params\":{\"account\":\"The account get liquidity for\"},\"returns\":{\"_0\":\"(possible error code (semi-opaque), account liquidity in excess of collateral requirements,          account shortfall below collateral requirements)\"}},\"getHypotheticalAccountLiquidity(address,address,uint256,uint256)\":{\"params\":{\"account\":\"The account to determine liquidity for\",\"borrowAmount\":\"The amount of underlying to hypothetically borrow\",\"redeemTokens\":\"The number of tokens to hypothetically redeem\",\"vTokenModify\":\"The market to hypothetically redeem/borrow in\"},\"returns\":{\"_0\":\"(possible error code (semi-opaque), hypothetical account liquidity in excess of collateral requirements,          hypothetical account shortfall below collateral requirements)\"}},\"getPoolMarketIndex(uint96,address)\":{\"details\":\"Computes a unique key for a (poolId, market) pair used in the `_poolMarkets` mapping. - For the core pool (`poolId == 0`), this results in the address being left-padded to 32 bytes,   maintaining backward compatibility with legacy mappings. - For other pools, packs the `poolId` and `market` address into a single `bytes32` key,   The first 96 bits are used for the `poolId`, and the remaining 160 bits for the `market` address.\",\"params\":{\"poolId\":\"The ID of the pool.\",\"vToken\":\"The address of the market (vToken).\"},\"returns\":{\"_0\":\"A `bytes32` key that uniquely represents the (poolId, market) pair.\"}},\"getXVSAddress()\":{\"returns\":{\"_0\":\"The address of XVS token\"}},\"liquidateBorrowAllowed(address,address,address,address,uint256)\":{\"params\":{\"borrower\":\"The address of the borrower\",\"liquidator\":\"The address repaying the borrow and seizing the collateral\",\"repayAmount\":\"The amount of underlying being repaid\",\"vTokenBorrowed\":\"Asset which was borrowed by the borrower\",\"vTokenCollateral\":\"Asset which was used as collateral and will be seized\"}},\"liquidateBorrowVerify(address,address,address,address,uint256,uint256)\":{\"params\":{\"actualRepayAmount\":\"The amount of underlying being repaid\",\"borrower\":\"The address of the borrower\",\"liquidator\":\"The address repaying the borrow and seizing the collateral\",\"seizeTokens\":\"The amount of collateral token that will be seized\",\"vTokenBorrowed\":\"Asset which was borrowed by the borrower\",\"vTokenCollateral\":\"Asset which was used as collateral and will be seized\"}},\"mintAllowed(address,address,uint256)\":{\"params\":{\"mintAmount\":\"The amount of underlying being supplied to the market in exchange for tokens\",\"minter\":\"The account which would get the minted tokens\",\"vToken\":\"The market to verify the mint against\"},\"returns\":{\"_0\":\"0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"}},\"mintVerify(address,address,uint256,uint256)\":{\"params\":{\"actualMintAmount\":\"The amount of the underlying asset being minted\",\"mintTokens\":\"The number of tokens being minted\",\"minter\":\"The address minting the tokens\",\"vToken\":\"Asset being minted\"}},\"redeemAllowed(address,address,uint256)\":{\"params\":{\"redeemTokens\":\"The number of vTokens to exchange for the underlying asset in the market\",\"redeemer\":\"The account which would redeem the tokens\",\"vToken\":\"The market to verify the redeem against\"},\"returns\":{\"_0\":\"0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"}},\"redeemVerify(address,address,uint256,uint256)\":{\"params\":{\"redeemAmount\":\"The amount of the underlying asset being redeemed\",\"redeemTokens\":\"The number of tokens being redeemed\",\"redeemer\":\"The address redeeming the tokens\",\"vToken\":\"Asset being redeemed\"}},\"repayBorrowAllowed(address,address,address,uint256)\":{\"params\":{\"borrower\":\"The account which borrowed the asset\",\"payer\":\"The account which would repay the asset\",\"repayAmount\":\"The amount of the underlying asset the account would repay\",\"vToken\":\"The market to verify the repay against\"},\"returns\":{\"_0\":\"0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"}},\"repayBorrowVerify(address,address,address,uint256,uint256)\":{\"params\":{\"actualRepayAmount\":\"The amount of underlying being repaid\",\"borrower\":\"The address of the borrower\",\"payer\":\"The address repaying the borrow\",\"vToken\":\"Asset being repaid\"}},\"seizeAllowed(address,address,address,address,uint256)\":{\"params\":{\"borrower\":\"The address of the borrower\",\"liquidator\":\"The address repaying the borrow and seizing the collateral\",\"seizeTokens\":\"The number of collateral tokens to seize\",\"vTokenBorrowed\":\"Asset which was borrowed by the borrower\",\"vTokenCollateral\":\"Asset which was used as collateral and will be seized\"}},\"seizeVerify(address,address,address,address,uint256)\":{\"params\":{\"borrower\":\"The address of the borrower\",\"liquidator\":\"The address repaying the borrow and seizing the collateral\",\"seizeTokens\":\"The number of collateral tokens to seize\",\"vTokenBorrowed\":\"Asset which was borrowed by the borrower\",\"vTokenCollateral\":\"Asset which was used as collateral and will be seized\"}},\"transferAllowed(address,address,address,uint256)\":{\"params\":{\"dst\":\"The account which receives the tokens\",\"src\":\"The account which sources the tokens\",\"transferTokens\":\"The number of vTokens to transfer\",\"vToken\":\"The market to verify the transfer against\"},\"returns\":{\"_0\":\"0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"}},\"transferVerify(address,address,address,uint256)\":{\"params\":{\"dst\":\"The account which receives the tokens\",\"src\":\"The account which sources the tokens\",\"transferTokens\":\"The number of vTokens to transfer\",\"vToken\":\"Asset being transferred\"}}},\"title\":\"PolicyFacet\",\"version\":1},\"userdoc\":{\"errors\":{\"AlreadyInSelectedPool()\":[{\"notice\":\"Thrown when You are already in the selected pool.\"}],\"ArrayLengthMismatch()\":[{\"notice\":\"Thrown when input array lengths do not match\"}],\"BorrowNotAllowedInPool()\":[{\"notice\":\"Thrown when borrowing is not allowed in the selected pool for a given market.\"}],\"CorePoolModificationNotAllowed()\":[{\"notice\":\"Thrown when trying to modify the core pool (poolId == 0)\"}],\"EmptyPoolLabel()\":[{\"notice\":\"Thrown when the pool label is empty\"}],\"IncompatibleBorrowedAssets()\":[{\"notice\":\"Thrown when One or more of your assets are not compatible with the selected pool.\"}],\"InvalidWeightingStrategy(uint8)\":[{\"notice\":\"Thrown when an invalid weighting strategy is provided\"}],\"LiquidityCheckFailed(uint256,uint256)\":[{\"notice\":\"Thrown when Switching to this pool would fail the liquidity check or lead to liquidation.\"}],\"MarketAlreadyListed(uint96,address)\":[{\"notice\":\"Thrown when a vToken is already listed in the specified pool\"}],\"MarketConfigNotFound()\":[{\"notice\":\"Thrown when market is not set in the _poolMarkets mapping\"}],\"MarketNotListedInCorePool()\":[{\"notice\":\"Thrown when market trying to add in a pool is not listed in the core pool\"}],\"PoolDoesNotExist(uint96)\":[{\"notice\":\"Thrown when a given pool ID does not exist\"}],\"PoolMarketNotFound(uint96,address)\":[{\"notice\":\"Thrown when trying to remove a market that is not listed in the given pool.\"}]},\"events\":{\"DistributedBorrowerVenus(address,address,uint256,uint256)\":{\"notice\":\"Emitted when XVS is distributed to a borrower\"},\"DistributedSupplierVenus(address,address,uint256,uint256)\":{\"notice\":\"Emitted when XVS is distributed to a supplier\"},\"DistributedVAIVaultVenus(uint256)\":{\"notice\":\"Emitted when XVS is distributed to VAI Vault\"},\"MarketEntered(address,address)\":{\"notice\":\"Emitted when an account enters a market\"},\"VenusBorrowSpeedUpdated(address,uint256)\":{\"notice\":\"Emitted when a new borrow-side XVS speed is calculated for a market\"},\"VenusSupplySpeedUpdated(address,uint256)\":{\"notice\":\"Emitted when a new supply-side XVS speed is calculated for a market\"}},\"kind\":\"user\",\"methods\":{\"_setVenusSpeeds(address[],uint256[],uint256[])\":{\"notice\":\"Set XVS speed for a single market\"},\"accountAssets(address,uint256)\":{\"notice\":\"Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\"},\"actionPaused(address,uint8)\":{\"notice\":\"Checks if a certain action is paused on a market\"},\"admin()\":{\"notice\":\"Administrator for this contract\"},\"allMarkets(uint256)\":{\"notice\":\"A list of all markets\"},\"approvedDelegates(address,address)\":{\"notice\":\"Whether the delegate is allowed to borrow or redeem on behalf of the user\"},\"authorizedFlashLoan(address)\":{\"notice\":\"Mapping of accounts authorized to execute flash loans\"},\"borrowAllowed(address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to borrow the underlying asset of the given market\"},\"borrowCapGuardian()\":{\"notice\":\"The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\"},\"borrowCaps(address)\":{\"notice\":\"Borrow caps enforced by borrowAllowed for each vToken address.\"},\"borrowVerify(address,address,uint256)\":{\"notice\":\"Validates borrow, accrues interest and updates score in prime. Reverts on rejection. May emit logs.\"},\"closeFactorMantissa()\":{\"notice\":\"Multiplier used to calculate the maximum repayAmount when liquidating a borrow\"},\"comptrollerImplementation()\":{\"notice\":\"Active brains of Unitroller\"},\"delegateAuthorizationFlashloan(address,address,address)\":{\"notice\":\"Mapping to store delegate authorization for flash loans\"},\"executeFlashLoan(address,address,address[],uint256[],uint256[],address,bytes)\":{\"notice\":\"Executes a flashLoan operation with the specified assets, amounts, and modes.\"},\"getAccountLiquidity(address)\":{\"notice\":\"Determine the current account liquidity wrt collateral requirements\"},\"getBorrowingPower(address)\":{\"notice\":\"Alias to getAccountLiquidity to support the Isolated Lending Comptroller Interface\"},\"getHypotheticalAccountLiquidity(address,address,uint256,uint256)\":{\"notice\":\"Determine what the account liquidity would be if the given amounts were redeemed/borrowed\"},\"getPoolMarketIndex(uint96,address)\":{\"notice\":\"Returns the market index for a given vToken\"},\"getXVSAddress()\":{\"notice\":\"Returns the XVS address\"},\"isForcedLiquidationEnabled(address)\":{\"notice\":\"Whether forced liquidation is enabled for all users borrowing in a certain market\"},\"isForcedLiquidationEnabledForUser(address,address)\":{\"notice\":\"Whether forced liquidation is enabled for the borrows of a user in a market\"},\"lastPoolId()\":{\"notice\":\"Counter used to generate unique pool IDs\"},\"liquidateBorrowAllowed(address,address,address,address,uint256)\":{\"notice\":\"Checks if the liquidation should be allowed to occur\"},\"liquidateBorrowVerify(address,address,address,address,uint256,uint256)\":{\"notice\":\"Validates liquidateBorrow, accrues interest and updates score in prime. Reverts on rejection. May emit logs.\"},\"maxAssets()\":{\"notice\":\"Max number of assets a single account can participate in (borrow or use as collateral)\"},\"mintAllowed(address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to mint tokens in the given market\"},\"mintVAIGuardianPaused()\":{\"notice\":\"The Pause Guardian can pause certain actions as a safety mechanism.\"},\"mintVerify(address,address,uint256,uint256)\":{\"notice\":\"Validates mint, accrues interest and updates score in prime. Reverts on rejection. May emit logs.\"},\"mintedVAIs(address)\":{\"notice\":\"The minted VAI amount to each user\"},\"oldLiquidationIncentiveMantissa()\":{\"notice\":\"Multiplier representing the discount on collateral that a liquidator receives (deprecated)\"},\"oracle()\":{\"notice\":\"Oracle which gives the price of any given asset\"},\"pauseGuardian()\":{\"notice\":\"The Pause Guardian can pause certain actions as a safety mechanism.\"},\"pendingAdmin()\":{\"notice\":\"Pending administrator for this contract\"},\"pendingComptrollerImplementation()\":{\"notice\":\"Pending brains of Unitroller\"},\"pools(uint96)\":{\"notice\":\"Mapping of pool ID to its corresponding metadata and configuration\"},\"prime()\":{\"notice\":\"Prime token address\"},\"protocolPaused()\":{\"notice\":\"Pause/Unpause whole protocol actions\"},\"redeemAllowed(address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to redeem tokens in the given market\"},\"redeemVerify(address,address,uint256,uint256)\":{\"notice\":\"Validates redeem, accrues interest and updates score in prime. Reverts on rejection. May emit logs.\"},\"repayBorrowAllowed(address,address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to repay a borrow in the given market\"},\"repayBorrowVerify(address,address,address,uint256,uint256)\":{\"notice\":\"Validates repayBorrow, accrues interest and updates score in prime. Reverts on rejection. May emit logs.\"},\"seizeAllowed(address,address,address,address,uint256)\":{\"notice\":\"Checks if the seizing of assets should be allowed to occur\"},\"seizeVerify(address,address,address,address,uint256)\":{\"notice\":\"Validates seize, accrues interest and updates score in prime. Reverts on rejection. May emit logs.\"},\"supplyCaps(address)\":{\"notice\":\"Supply caps enforced by mintAllowed for each vToken address. Defaults to zero which corresponds to minting notAllowed\"},\"transferAllowed(address,address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to transfer tokens in the given market\"},\"transferVerify(address,address,address,uint256)\":{\"notice\":\"Validates transfer, accrues interest and updates score in prime. Reverts on rejection. May emit logs.\"},\"treasuryAddress()\":{\"notice\":\"Treasury address\"},\"treasuryGuardian()\":{\"notice\":\"Treasury Guardian address\"},\"treasuryPercent()\":{\"notice\":\"Fee percent of accrued interest with decimal 18\"},\"userPoolId(address)\":{\"notice\":\"Tracks the selected pool for each user.\"},\"vaiController()\":{\"notice\":\"The Address of VAIController\"},\"vaiMintRate()\":{\"notice\":\"VAI Mint Rate as a percentage\"},\"venusAccrued(address)\":{\"notice\":\"The XVS accrued but not yet transferred to each user\"},\"venusBorrowSpeeds(address)\":{\"notice\":\"The rate at which venus is distributed to the corresponding borrow market (per block)\"},\"venusBorrowState(address)\":{\"notice\":\"The Venus market borrow state for each market\"},\"venusBorrowerIndex(address,address)\":{\"notice\":\"The Venus borrow index for each market for each borrower as of the last time they accrued XVS\"},\"venusInitialIndex()\":{\"notice\":\"The initial Venus index for a market\"},\"venusSupplierIndex(address,address)\":{\"notice\":\"The Venus supply index for each market for each supplier as of the last time they accrued XVS\"},\"venusSupplySpeeds(address)\":{\"notice\":\"The rate at which venus is distributed to the corresponding supply market (per block)\"},\"venusSupplyState(address)\":{\"notice\":\"The Venus market supply state for each market\"},\"venusVAIVaultRate()\":{\"notice\":\"The rate at which the flywheel distributes XVS to VAI Vault, per block\"}},\"notice\":\"This facet contract contains all the external pre-hook functions related to vToken\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Comptroller/Diamond/facets/PolicyFacet.sol\":\"PolicyFacet\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@venusprotocol/governance-contracts/contracts/Governance/IAccessControlManagerV8.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.25;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\n/**\\n * @title IAccessControlManagerV8\\n * @author Venus\\n * @notice Interface implemented by the `AccessControlManagerV8` contract.\\n */\\ninterface IAccessControlManagerV8 is IAccessControl {\\n    function giveCallPermission(address contractAddress, string calldata functionSig, address accountToPermit) external;\\n\\n    function revokeCallPermission(\\n        address contractAddress,\\n        string calldata functionSig,\\n        address accountToRevoke\\n    ) external;\\n\\n    function isAllowedToCall(address account, string calldata functionSig) external view returns (bool);\\n\\n    function hasPermission(\\n        address account,\\n        address contractAddress,\\n        string calldata functionSig\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xaa29b098440d0b3a131c5ecdf25ce548790c1b5ac7bf9b5c0264b6af6f7a1e0b\",\"license\":\"BSD-3-Clause\"},\"@venusprotocol/oracle/contracts/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.25;\\n\\ninterface OracleInterface {\\n    function getPrice(address asset) external view returns (uint256);\\n}\\n\\ninterface ResilientOracleInterface is OracleInterface {\\n    function updatePrice(address vToken) external;\\n\\n    function updateAssetPrice(address asset) external;\\n\\n    function getUnderlyingPrice(address vToken) external view returns (uint256);\\n}\\n\\ninterface TwapInterface is OracleInterface {\\n    function updateTwap(address asset) external returns (uint256);\\n}\\n\\ninterface BoundValidatorInterface {\\n    function validatePriceWithAnchorPrice(\\n        address asset,\\n        uint256 reporterPrice,\\n        uint256 anchorPrice\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2432799b0d824fc701beb4c30146e912b9aeecf77b5c1635dde6c5fbe6bfc3a7\",\"license\":\"BSD-3-Clause\"},\"contracts/Comptroller/ComptrollerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.25;\\n\\nimport { ResilientOracleInterface } from \\\"@venusprotocol/oracle/contracts/interfaces/OracleInterface.sol\\\";\\n\\nimport { VToken } from \\\"../Tokens/VTokens/VToken.sol\\\";\\nimport { VAIControllerInterface } from \\\"../Tokens/VAI/VAIControllerInterface.sol\\\";\\nimport { WeightFunction } from \\\"./Diamond/interfaces/IFacetBase.sol\\\";\\n\\nenum Action {\\n    MINT,\\n    REDEEM,\\n    BORROW,\\n    REPAY,\\n    SEIZE,\\n    LIQUIDATE,\\n    TRANSFER,\\n    ENTER_MARKET,\\n    EXIT_MARKET\\n}\\n\\ninterface ComptrollerInterface {\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\n    function isComptroller() external pure returns (bool);\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata vTokens) external returns (uint[] memory);\\n\\n    function exitMarket(address vToken) external returns (uint);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(address vToken, address minter, uint mintAmount) external returns (uint);\\n\\n    function mintVerify(address vToken, address minter, uint mintAmount, uint mintTokens) external;\\n\\n    function redeemAllowed(address vToken, address redeemer, uint redeemTokens) external returns (uint);\\n\\n    function redeemVerify(address vToken, address redeemer, uint redeemAmount, uint redeemTokens) external;\\n\\n    function borrowAllowed(address vToken, address borrower, uint borrowAmount) external returns (uint);\\n\\n    function borrowVerify(address vToken, address borrower, uint borrowAmount) external;\\n\\n    function executeFlashLoan(\\n        address payable initiator,\\n        address payable receiver,\\n        VToken[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata modes,\\n        address onBehalfOf,\\n        bytes calldata param\\n    ) external;\\n\\n    function repayBorrowAllowed(\\n        address vToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount\\n    ) external returns (uint);\\n\\n    function repayBorrowVerify(\\n        address vToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount,\\n        uint borrowerIndex\\n    ) external;\\n\\n    function liquidateBorrowAllowed(\\n        address vTokenBorrowed,\\n        address vTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount\\n    ) external returns (uint);\\n\\n    function liquidateBorrowVerify(\\n        address vTokenBorrowed,\\n        address vTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        uint seizeTokens\\n    ) external;\\n\\n    function seizeAllowed(\\n        address vTokenCollateral,\\n        address vTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens\\n    ) external returns (uint);\\n\\n    function seizeVerify(\\n        address vTokenCollateral,\\n        address vTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens\\n    ) external;\\n\\n    function transferAllowed(address vToken, address src, address dst, uint transferTokens) external returns (uint);\\n\\n    function transferVerify(address vToken, address src, address dst, uint transferTokens) external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address vTokenBorrowed,\\n        address vTokenCollateral,\\n        uint repayAmount\\n    ) external view returns (uint, uint);\\n\\n    function liquidateCalculateSeizeTokens(\\n        address borrower,\\n        address vTokenBorrowed,\\n        address vTokenCollateral,\\n        uint repayAmount\\n    ) external view returns (uint, uint);\\n\\n    function setMintedVAIOf(address owner, uint amount) external returns (uint);\\n\\n    function liquidateVAICalculateSeizeTokens(\\n        address vTokenCollateral,\\n        uint repayAmount\\n    ) external view returns (uint, uint);\\n\\n    function getXVSAddress() external view returns (address);\\n\\n    function markets(address) external view returns (bool, uint);\\n\\n    function oracle() external view returns (ResilientOracleInterface);\\n\\n    function getAccountLiquidity(address) external view returns (uint, uint, uint);\\n\\n    function getAssetsIn(address) external view returns (VToken[] memory);\\n\\n    function claimVenus(address) external;\\n\\n    function venusAccrued(address) external view returns (uint);\\n\\n    function venusSupplySpeeds(address) external view returns (uint);\\n\\n    function venusBorrowSpeeds(address) external view returns (uint);\\n\\n    function getAllMarkets() external view returns (VToken[] memory);\\n\\n    function venusSupplierIndex(address, address) external view returns (uint);\\n\\n    function venusInitialIndex() external view returns (uint224);\\n\\n    function venusBorrowerIndex(address, address) external view returns (uint);\\n\\n    function venusBorrowState(address) external view returns (uint224, uint32);\\n\\n    function venusSupplyState(address) external view returns (uint224, uint32);\\n\\n    function approvedDelegates(address borrower, address delegate) external view returns (bool);\\n\\n    function vaiController() external view returns (VAIControllerInterface);\\n\\n    function oldLiquidationIncentiveMantissa() external view returns (uint);\\n\\n    function protocolPaused() external view returns (bool);\\n\\n    function actionPaused(address market, Action action) external view returns (bool);\\n\\n    function mintedVAIs(address user) external view returns (uint);\\n\\n    function vaiMintRate() external view returns (uint);\\n\\n    function authorizedFlashLoan(address account) external view returns (bool);\\n    function delegateAuthorizationFlashloan(\\n        address account,\\n        address market,\\n        address delegate\\n    ) external view returns (bool);\\n    function userPoolId(address account) external view returns (uint96);\\n\\n    function getLiquidationIncentive(address vToken) external view returns (uint256);\\n\\n    function getEffectiveLiquidationIncentive(address account, address vToken) external view returns (uint256);\\n\\n    function getEffectiveLtvFactor(\\n        address account,\\n        address vToken,\\n        WeightFunction weightingStrategy\\n    ) external view returns (uint256);\\n\\n    function lastPoolId() external view returns (uint96);\\n\\n    function pools(uint96 poolId) external view returns (string memory label);\\n\\n    function getPoolVTokens(uint96 poolId) external view returns (address[] memory);\\n\\n    function poolMarkets(\\n        uint96 poolId,\\n        address vToken\\n    )\\n        external\\n        view\\n        returns (\\n            bool isListed,\\n            uint256 collateralFactorMantissa,\\n            bool isVenus,\\n            uint256 liquidationThresholdMantissa,\\n            uint256 maxLiquidationIncentiveMantissa,\\n            uint96 marketPoolId,\\n            bool isBorrowAllowed\\n        );\\n}\\n\\ninterface IVAIVault {\\n    function updatePendingRewards() external;\\n}\\n\\ninterface IComptroller {\\n    function liquidationIncentiveMantissa() external view returns (uint);\\n\\n    /*** Treasury Data ***/\\n    function treasuryAddress() external view returns (address);\\n\\n    function treasuryPercent() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x54217cb2900ba4cc6c7632c5382a7adf5bbf7aba950edb1f82f436870c494472\",\"license\":\"BSD-3-Clause\"},\"contracts/Comptroller/ComptrollerLensInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.25;\\n\\nimport { VToken } from \\\"../Tokens/VTokens/VToken.sol\\\";\\nimport { WeightFunction } from \\\"./Diamond/interfaces/IFacetBase.sol\\\";\\n\\ninterface ComptrollerLensInterface {\\n    function liquidateCalculateSeizeTokens(\\n        address comptroller,\\n        address vTokenBorrowed,\\n        address vTokenCollateral,\\n        uint actualRepayAmount\\n    ) external view returns (uint, uint);\\n\\n    function liquidateCalculateSeizeTokens(\\n        address borrower,\\n        address comptroller,\\n        address vTokenBorrowed,\\n        address vTokenCollateral,\\n        uint actualRepayAmount\\n    ) external view returns (uint, uint);\\n\\n    function liquidateVAICalculateSeizeTokens(\\n        address comptroller,\\n        address vTokenCollateral,\\n        uint actualRepayAmount\\n    ) external view returns (uint, uint);\\n\\n    function getHypotheticalAccountLiquidity(\\n        address comptroller,\\n        address account,\\n        VToken vTokenModify,\\n        uint redeemTokens,\\n        uint borrowAmount,\\n        WeightFunction weightingStrategy\\n    ) external view returns (uint, uint, uint);\\n}\\n\",\"keccak256\":\"0x5613ff839f6aed74491f3248723c6c3d73e39fc9ec3ac5b2db5e605f14a89ac0\",\"license\":\"BSD-3-Clause\"},\"contracts/Comptroller/ComptrollerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.25;\\n\\nimport { ResilientOracleInterface } from \\\"@venusprotocol/oracle/contracts/interfaces/OracleInterface.sol\\\";\\nimport { PoolMarketId } from \\\"./Types/PoolMarketId.sol\\\";\\n\\nimport { VToken } from \\\"../Tokens/VTokens/VToken.sol\\\";\\nimport { VAIControllerInterface } from \\\"../Tokens/VAI/VAIControllerInterface.sol\\\";\\nimport { ComptrollerLensInterface } from \\\"./ComptrollerLensInterface.sol\\\";\\nimport { IPrime } from \\\"../Tokens/Prime/IPrime.sol\\\";\\n\\ncontract UnitrollerAdminStorage {\\n    /**\\n     * @notice Administrator for this contract\\n     */\\n    address public admin;\\n\\n    /**\\n     * @notice Pending administrator for this contract\\n     */\\n    address public pendingAdmin;\\n\\n    /**\\n     * @notice Active brains of Unitroller\\n     */\\n    address public comptrollerImplementation;\\n\\n    /**\\n     * @notice Pending brains of Unitroller\\n     */\\n    address public pendingComptrollerImplementation;\\n}\\n\\ncontract ComptrollerV1Storage is UnitrollerAdminStorage {\\n    /**\\n     * @notice Oracle which gives the price of any given asset\\n     */\\n    ResilientOracleInterface public oracle;\\n\\n    /**\\n     * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\\n     */\\n    uint256 public closeFactorMantissa;\\n\\n    /**\\n     * @notice Multiplier representing the discount on collateral that a liquidator receives (deprecated)\\n     */\\n    uint256 public oldLiquidationIncentiveMantissa;\\n\\n    /**\\n     * @notice Max number of assets a single account can participate in (borrow or use as collateral)\\n     */\\n    uint256 public maxAssets;\\n\\n    /**\\n     * @notice Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\\n     */\\n    mapping(address => VToken[]) public accountAssets;\\n\\n    struct Market {\\n        /// @notice Whether or not this market is listed\\n        bool isListed;\\n        /**\\n         * @notice Multiplier representing the most one can borrow against their collateral in this market.\\n         *  For instance, 0.9 to allow borrowing 90% of collateral value.\\n         *  Must be between 0 and 1, and stored as a mantissa.\\n         */\\n        uint256 collateralFactorMantissa;\\n        /// @notice Per-market mapping of \\\"accounts in this asset\\\"\\n        mapping(address => bool) accountMembership;\\n        /// @notice Whether or not this market receives XVS\\n        bool isVenus;\\n        /**\\n         * @notice Multiplier representing the collateralization after which the borrow is eligible\\n         * for liquidation. For instance, 0.8 liquidate when the borrow is 80% of collateral\\n         * value. Must be between 0 and collateral factor, stored as a mantissa.\\n         */\\n        uint256 liquidationThresholdMantissa;\\n        /// @notice discount on collateral that a liquidator receives when liquidating a borrow in this market\\n        uint256 liquidationIncentiveMantissa;\\n        /// @notice The pool ID this market is associated with, Used to support pools/emodes\\n        uint96 poolId;\\n        /// @notice Flag  to restrict borrowing in certain pools/emodes.\\n        bool isBorrowAllowed;\\n    }\\n\\n    /**\\n     * @notice Mapping of PoolMarketId -> Market metadata\\n     * Underlying key layout: First 12 bytes (96 bits) represent the poolId, last 20 bytes the vToken address\\n     */\\n    mapping(PoolMarketId => Market) internal _poolMarkets;\\n\\n    /**\\n     * @notice The Pause Guardian can pause certain actions as a safety mechanism.\\n     */\\n    address public pauseGuardian;\\n\\n    /// @notice Whether minting is paused (deprecated, superseded by actionPaused)\\n    bool private _mintGuardianPaused;\\n    /// @notice Whether borrowing is paused (deprecated, superseded by actionPaused)\\n    bool private _borrowGuardianPaused;\\n    /// @notice Whether borrowing is paused (deprecated, superseded by actionPaused)\\n    bool internal transferGuardianPaused;\\n    /// @notice Whether borrowing is paused (deprecated, superseded by actionPaused)\\n    bool internal seizeGuardianPaused;\\n    /// @notice Whether borrowing is paused (deprecated, superseded by actionPaused)\\n    mapping(address => bool) internal mintGuardianPaused;\\n    /// @notice Whether borrowing is paused (deprecated, superseded by actionPaused)\\n    mapping(address => bool) internal borrowGuardianPaused;\\n\\n    struct VenusMarketState {\\n        /// @notice The market's last updated venusBorrowIndex or venusSupplyIndex\\n        uint224 index;\\n        /// @notice The block number the index was last updated at\\n        uint32 block;\\n    }\\n\\n    /// @notice A list of all markets\\n    VToken[] public allMarkets;\\n\\n    /// @notice The rate at which the flywheel distributes XVS, per block\\n    uint256 internal venusRate;\\n\\n    /// @notice The portion of venusRate that each market currently receives\\n    mapping(address => uint256) internal venusSpeeds;\\n\\n    /// @notice The Venus market supply state for each market\\n    mapping(address => VenusMarketState) public venusSupplyState;\\n\\n    /// @notice The Venus market borrow state for each market\\n    mapping(address => VenusMarketState) public venusBorrowState;\\n\\n    /// @notice The Venus supply index for each market for each supplier as of the last time they accrued XVS\\n    mapping(address => mapping(address => uint256)) public venusSupplierIndex;\\n\\n    /// @notice The Venus borrow index for each market for each borrower as of the last time they accrued XVS\\n    mapping(address => mapping(address => uint256)) public venusBorrowerIndex;\\n\\n    /// @notice The XVS accrued but not yet transferred to each user\\n    mapping(address => uint256) public venusAccrued;\\n\\n    /// @notice The Address of VAIController\\n    VAIControllerInterface public vaiController;\\n\\n    /// @notice The minted VAI amount to each user\\n    mapping(address => uint256) public mintedVAIs;\\n\\n    /// @notice VAI Mint Rate as a percentage\\n    uint256 public vaiMintRate;\\n\\n    /**\\n     * @notice The Pause Guardian can pause certain actions as a safety mechanism.\\n     */\\n    bool public mintVAIGuardianPaused;\\n    bool public repayVAIGuardianPaused;\\n\\n    /**\\n     * @notice Pause/Unpause whole protocol actions\\n     */\\n    bool public protocolPaused;\\n\\n    /// @notice The rate at which the flywheel distributes XVS to VAI Minters, per block (deprecated)\\n    uint256 private venusVAIRate;\\n}\\n\\ncontract ComptrollerV2Storage is ComptrollerV1Storage {\\n    /// @notice The rate at which the flywheel distributes XVS to VAI Vault, per block\\n    uint256 public venusVAIVaultRate;\\n\\n    // address of VAI Vault\\n    address public vaiVaultAddress;\\n\\n    // start block of release to VAI Vault\\n    uint256 public releaseStartBlock;\\n\\n    // minimum release amount to VAI Vault\\n    uint256 public minReleaseAmount;\\n}\\n\\ncontract ComptrollerV3Storage is ComptrollerV2Storage {\\n    /// @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\\n    address public borrowCapGuardian;\\n\\n    /// @notice Borrow caps enforced by borrowAllowed for each vToken address.\\n    mapping(address => uint256) public borrowCaps;\\n}\\n\\ncontract ComptrollerV4Storage is ComptrollerV3Storage {\\n    /// @notice Treasury Guardian address\\n    address public treasuryGuardian;\\n\\n    /// @notice Treasury address\\n    address public treasuryAddress;\\n\\n    /// @notice Fee percent of accrued interest with decimal 18\\n    uint256 public treasuryPercent;\\n}\\n\\ncontract ComptrollerV5Storage is ComptrollerV4Storage {\\n    /// @notice The portion of XVS that each contributor receives per block (deprecated)\\n    mapping(address => uint256) private venusContributorSpeeds;\\n\\n    /// @notice Last block at which a contributor's XVS rewards have been allocated (deprecated)\\n    mapping(address => uint256) private lastContributorBlock;\\n}\\n\\ncontract ComptrollerV6Storage is ComptrollerV5Storage {\\n    address public liquidatorContract;\\n}\\n\\ncontract ComptrollerV7Storage is ComptrollerV6Storage {\\n    ComptrollerLensInterface public comptrollerLens;\\n}\\n\\ncontract ComptrollerV8Storage is ComptrollerV7Storage {\\n    /// @notice Supply caps enforced by mintAllowed for each vToken address. Defaults to zero which corresponds to minting notAllowed\\n    mapping(address => uint256) public supplyCaps;\\n}\\n\\ncontract ComptrollerV9Storage is ComptrollerV8Storage {\\n    /// @notice AccessControlManager address\\n    address internal accessControl;\\n\\n    /// @notice True if a certain action is paused on a certain market\\n    mapping(address => mapping(uint256 => bool)) internal _actionPaused;\\n}\\n\\ncontract ComptrollerV10Storage is ComptrollerV9Storage {\\n    /// @notice The rate at which venus is distributed to the corresponding borrow market (per block)\\n    mapping(address => uint256) public venusBorrowSpeeds;\\n\\n    /// @notice The rate at which venus is distributed to the corresponding supply market (per block)\\n    mapping(address => uint256) public venusSupplySpeeds;\\n}\\n\\ncontract ComptrollerV11Storage is ComptrollerV10Storage {\\n    /// @notice Whether the delegate is allowed to borrow or redeem on behalf of the user\\n    //mapping(address user => mapping (address delegate => bool approved)) public approvedDelegates;\\n    mapping(address => mapping(address => bool)) public approvedDelegates;\\n}\\n\\ncontract ComptrollerV12Storage is ComptrollerV11Storage {\\n    /// @notice Whether forced liquidation is enabled for all users borrowing in a certain market\\n    mapping(address => bool) public isForcedLiquidationEnabled;\\n}\\n\\ncontract ComptrollerV13Storage is ComptrollerV12Storage {\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in _facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in _facetAddresses array\\n    }\\n\\n    mapping(bytes4 => FacetAddressAndPosition) internal _selectorToFacetAndPosition;\\n    // maps facet addresses to function selectors\\n    mapping(address => FacetFunctionSelectors) internal _facetFunctionSelectors;\\n    // facet addresses\\n    address[] internal _facetAddresses;\\n}\\n\\ncontract ComptrollerV14Storage is ComptrollerV13Storage {\\n    /// @notice Prime token address\\n    IPrime public prime;\\n}\\n\\ncontract ComptrollerV15Storage is ComptrollerV14Storage {\\n    /// @notice Whether forced liquidation is enabled for the borrows of a user in a market\\n    mapping(address user => mapping(address market => bool)) public isForcedLiquidationEnabledForUser;\\n}\\n\\ncontract ComptrollerV16Storage is ComptrollerV15Storage {\\n    /// @notice The XVS token contract address\\n    address internal xvs;\\n\\n    /// @notice The XVS vToken contract address\\n    address internal xvsVToken;\\n}\\n\\ncontract ComptrollerV17Storage is ComptrollerV16Storage {\\n    struct PoolData {\\n        /// @notice label for the pool\\n        string label;\\n        /// @notice List of vToken addresses associated with this pool\\n        address[] vTokens;\\n    }\\n\\n    /**\\n     * @notice Tracks the selected pool for each user.\\n     * @dev\\n     * - The mapping stores the pool ID (`uint96`) that each user (`address`) is currently in.\\n     * - A value of `0` represents the default core pool (legacy behavior).\\n     */\\n    mapping(address => uint96) public userPoolId;\\n\\n    /**\\n     * @notice Mapping of pool ID to its corresponding metadata and configuration\\n     * @dev Pool IDs are unique and incremented via `nextPoolId` when a new pool is created\\n     */\\n    mapping(uint96 => PoolData) public pools;\\n\\n    /**\\n     * @notice Counter used to generate unique pool IDs\\n     * @dev Increments each time a pool is created; `poolId = 0` is reserved for the core pool\\n     */\\n    uint96 public lastPoolId;\\n\\n    /// @notice Mapping of accounts authorized to execute flash loans\\n    mapping(address => bool) public authorizedFlashLoan;\\n\\n    struct FlashLoanData {\\n        uint256[] protocolFees;\\n        uint256[] supplierFees;\\n        uint256[] totalFees;\\n        uint256[] balanceAfterTransfer;\\n        uint256[] actualRepayments;\\n        uint256[] remainingDebts;\\n    }\\n    /// @notice Mapping to store delegate authorization for flash loans\\n    mapping(address /* delegator */ => mapping(address /* market */ => mapping(address /* sender */ => bool)))\\n        public delegateAuthorizationFlashloan;\\n}\\n\",\"keccak256\":\"0x3a99f71829b54a23e6b8afa2cf8a731ee4554bd948b395c6c56b701c3025d7fb\",\"license\":\"BSD-3-Clause\"},\"contracts/Comptroller/Diamond/facets/FacetBase.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.25;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IAccessControlManagerV8 } from \\\"@venusprotocol/governance-contracts/contracts/Governance/IAccessControlManagerV8.sol\\\";\\n\\nimport { VToken } from \\\"../../../Tokens/VTokens/VToken.sol\\\";\\nimport { ComptrollerErrorReporter } from \\\"../../../Utils/ErrorReporter.sol\\\";\\nimport { ExponentialNoError } from \\\"../../../Utils/ExponentialNoError.sol\\\";\\nimport { IVAIVault, Action } from \\\"../../../Comptroller/ComptrollerInterface.sol\\\";\\nimport { ComptrollerV17Storage } from \\\"../../../Comptroller/ComptrollerStorage.sol\\\";\\nimport { PoolMarketId } from \\\"../../../Comptroller/Types/PoolMarketId.sol\\\";\\nimport { IFacetBase, WeightFunction } from \\\"../interfaces/IFacetBase.sol\\\";\\n\\n/**\\n * @title FacetBase\\n * @author Venus\\n * @notice This facet contract contains functions related to access and checks\\n */\\ncontract FacetBase is IFacetBase, ComptrollerV17Storage, ExponentialNoError, ComptrollerErrorReporter {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice The initial Venus index for a market\\n    uint224 public constant venusInitialIndex = 1e36;\\n    // poolId for core Pool\\n    uint96 public constant corePoolId = 0;\\n    // closeFactorMantissa must be strictly greater than this value\\n    uint256 internal constant closeFactorMinMantissa = 0.05e18; // 0.05\\n    // closeFactorMantissa must not exceed this value\\n    uint256 internal constant closeFactorMaxMantissa = 0.9e18; // 0.9\\n\\n    /// @notice Emitted when an account enters a market\\n    event MarketEntered(VToken indexed vToken, address indexed account);\\n\\n    /// @notice Emitted when XVS is distributed to VAI Vault\\n    event DistributedVAIVaultVenus(uint256 amount);\\n\\n    /// @notice Reverts if the protocol is paused\\n    function checkProtocolPauseState() internal view {\\n        require(!protocolPaused, \\\"protocol is paused\\\");\\n    }\\n\\n    /// @notice Reverts if a certain action is paused on a market\\n    function checkActionPauseState(address market, Action action) internal view {\\n        require(!actionPaused(market, action), \\\"action is paused\\\");\\n    }\\n\\n    /// @notice Reverts if the caller is not admin\\n    function ensureAdmin() internal view {\\n        require(msg.sender == admin, \\\"only admin can\\\");\\n    }\\n\\n    /// @notice Checks the passed address is nonzero\\n    function ensureNonzeroAddress(address someone) internal pure {\\n        require(someone != address(0), \\\"can't be zero address\\\");\\n    }\\n\\n    /// @notice Reverts if the market is not listed\\n    function ensureListed(Market storage market) internal view {\\n        require(market.isListed, \\\"market not listed\\\");\\n    }\\n\\n    /// @notice Reverts if the caller is neither admin nor the passed address\\n    function ensureAdminOr(address privilegedAddress) internal view {\\n        require(msg.sender == admin || msg.sender == privilegedAddress, \\\"access denied\\\");\\n    }\\n\\n    /// @notice Checks the caller is allowed to call the specified fuction\\n    function ensureAllowed(string memory functionSig) internal view {\\n        require(IAccessControlManagerV8(accessControl).isAllowedToCall(msg.sender, functionSig), \\\"access denied\\\");\\n    }\\n\\n    /**\\n     * @notice Checks if a certain action is paused on a market\\n     * @param action Action id\\n     * @param market vToken address\\n     */\\n    function actionPaused(address market, Action action) public view returns (bool) {\\n        return _actionPaused[market][uint256(action)];\\n    }\\n\\n    /**\\n     * @notice Get the latest block number\\n     */\\n    function getBlockNumber() internal view virtual returns (uint256) {\\n        return block.number;\\n    }\\n\\n    /**\\n     * @notice Get the latest block number with the safe32 check\\n     */\\n    function getBlockNumberAsUint32() internal view returns (uint32) {\\n        return safe32(getBlockNumber(), \\\"block # > 32 bits\\\");\\n    }\\n\\n    /**\\n     * @notice Transfer XVS to VAI Vault\\n     */\\n    function releaseToVault() internal {\\n        if (releaseStartBlock == 0 || getBlockNumber() < releaseStartBlock) {\\n            return;\\n        }\\n\\n        IERC20 xvs_ = IERC20(xvs);\\n\\n        uint256 xvsBalance = xvs_.balanceOf(address(this));\\n        if (xvsBalance == 0) {\\n            return;\\n        }\\n\\n        uint256 actualAmount;\\n        uint256 deltaBlocks = sub_(getBlockNumber(), releaseStartBlock);\\n        // releaseAmount = venusVAIVaultRate * deltaBlocks\\n        uint256 releaseAmount_ = mul_(venusVAIVaultRate, deltaBlocks);\\n\\n        if (xvsBalance >= releaseAmount_) {\\n            actualAmount = releaseAmount_;\\n        } else {\\n            actualAmount = xvsBalance;\\n        }\\n\\n        if (actualAmount < minReleaseAmount) {\\n            return;\\n        }\\n\\n        releaseStartBlock = getBlockNumber();\\n\\n        xvs_.safeTransfer(vaiVaultAddress, actualAmount);\\n        emit DistributedVAIVaultVenus(actualAmount);\\n\\n        IVAIVault(vaiVaultAddress).updatePendingRewards();\\n    }\\n\\n    /**\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\n     * @param vTokenModify The market to hypothetically redeem/borrow in\\n     * @param account The account to determine liquidity for\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\n     * @param weightingStrategy The weighting strategy to use:\\n     *                          - `WeightFunction.USE_COLLATERAL_FACTOR` to use collateral factor\\n     *                          - `WeightFunction.USE_LIQUIDATION_THRESHOLD` to use liquidation threshold\\n     * @dev Note that we calculate the exchangeRateStored for each collateral vToken using stored data,\\n     *  without calculating accumulated interest.\\n     * @return (possible error code,\\n                hypothetical account liquidity in excess of collateral requirements,\\n     *          hypothetical account shortfall below collateral requirements)\\n     */\\n    function getHypotheticalAccountLiquidityInternal(\\n        address account,\\n        VToken vTokenModify,\\n        uint256 redeemTokens,\\n        uint256 borrowAmount,\\n        WeightFunction weightingStrategy\\n    ) internal view returns (Error, uint256, uint256) {\\n        (uint256 err, uint256 liquidity, uint256 shortfall) = comptrollerLens.getHypotheticalAccountLiquidity(\\n            address(this),\\n            account,\\n            vTokenModify,\\n            redeemTokens,\\n            borrowAmount,\\n            weightingStrategy\\n        );\\n        return (Error(err), liquidity, shortfall);\\n    }\\n\\n    /**\\n     * @notice Add the market to the borrower's \\\"assets in\\\" for liquidity calculations\\n     * @param vToken The market to enter\\n     * @param borrower The address of the account to modify\\n     * @return Success indicator for whether the market was entered\\n     */\\n    function addToMarketInternal(VToken vToken, address borrower) internal returns (Error) {\\n        checkActionPauseState(address(vToken), Action.ENTER_MARKET);\\n        Market storage marketToJoin = _poolMarkets[getCorePoolMarketIndex(address(vToken))];\\n        ensureListed(marketToJoin);\\n        if (marketToJoin.accountMembership[borrower]) {\\n            // already joined\\n            return Error.NO_ERROR;\\n        }\\n        // survived the gauntlet, add to list\\n        // NOTE: we store these somewhat redundantly as a significant optimization\\n        //  this avoids having to iterate through the list for the most common use cases\\n        //  that is, only when we need to perform liquidity checks\\n        //  and not whenever we want to check if an account is in a particular market\\n        marketToJoin.accountMembership[borrower] = true;\\n        accountAssets[borrower].push(vToken);\\n\\n        emit MarketEntered(vToken, borrower);\\n\\n        return Error.NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Checks for the user is allowed to redeem tokens\\n     * @param vToken Address of the market\\n     * @param redeemer Address of the user\\n     * @param redeemTokens Amount of tokens to redeem\\n     * @return Success indicator for redeem is allowed or not\\n     */\\n    function redeemAllowedInternal(\\n        address vToken,\\n        address redeemer,\\n        uint256 redeemTokens\\n    ) internal view returns (uint256) {\\n        ensureListed(getCorePoolMarket(vToken));\\n        /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */\\n        if (!getCorePoolMarket(vToken).accountMembership[redeemer]) {\\n            return uint256(Error.NO_ERROR);\\n        }\\n        /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\\n        (Error err, , uint256 shortfall) = getHypotheticalAccountLiquidityInternal(\\n            redeemer,\\n            VToken(vToken),\\n            redeemTokens,\\n            0,\\n            WeightFunction.USE_COLLATERAL_FACTOR\\n        );\\n        if (err != Error.NO_ERROR) {\\n            return uint256(err);\\n        }\\n        if (shortfall != 0) {\\n            return uint256(Error.INSUFFICIENT_LIQUIDITY);\\n        }\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Returns the XVS address\\n     * @return The address of XVS token\\n     */\\n    function getXVSAddress() external view returns (address) {\\n        return xvs;\\n    }\\n\\n    /**\\n     * @notice Returns the market index for a given vToken\\n     * @dev Computes a unique key for a (poolId, market) pair used in the `_poolMarkets` mapping.\\n     * - For the core pool (`poolId == 0`), this results in the address being left-padded to 32 bytes,\\n     *   maintaining backward compatibility with legacy mappings.\\n     * - For other pools, packs the `poolId` and `market` address into a single `bytes32` key,\\n     *   The first 96 bits are used for the `poolId`, and the remaining 160 bits for the `market` address.\\n     * @param poolId The ID of the pool.\\n     * @param vToken The address of the market (vToken).\\n     * @return A `bytes32` key that uniquely represents the (poolId, market) pair.\\n     */\\n    function getPoolMarketIndex(uint96 poolId, address vToken) public pure returns (PoolMarketId) {\\n        return PoolMarketId.wrap(bytes32((uint256(poolId) << 160) | uint160(vToken)));\\n    }\\n\\n    /**\\n     * @dev Returns the market index for a given vToken in the Core Pool (poolId = 0)\\n     * @param vToken The address of the vToken\\n     * @return The bytes32 key used to index into the _poolMarkets mapping for the Core Pool\\n     */\\n    function getCorePoolMarketIndex(address vToken) internal pure returns (PoolMarketId) {\\n        return getPoolMarketIndex(corePoolId, vToken);\\n    }\\n\\n    /**\\n     * @notice Returns the Market struct for a given vToken in the core pool\\n     * @param vToken The vToken address for which the market details are requested\\n     * @return Market data corresponding to the given vToken\\n     */\\n    function getCorePoolMarket(address vToken) internal view returns (Market storage) {\\n        return _poolMarkets[getCorePoolMarketIndex(address(vToken))];\\n    }\\n\\n    /**\\n     * @notice Determine the current account liquidity wrt collateral requirements\\n     * @param account The account to get liquidity for\\n     * @param weightingStrategy The weighting strategy to use:\\n     *                          - `WeightFunction.USE_COLLATERAL_FACTOR` to use collateral factor\\n     *                          - `WeightFunction.USE_LIQUIDATION_THRESHOLD` to use liquidation threshold\\n     * @return (possible error code (semi-opaque),\\n     * account liquidity in excess of collateral requirements,\\n     * account shortfall below collateral requirements)\\n     */\\n    function _getAccountLiquidity(\\n        address account,\\n        WeightFunction weightingStrategy\\n    ) internal view returns (uint256, uint256, uint256) {\\n        (Error err, uint256 liquidity, uint256 shortfall) = getHypotheticalAccountLiquidityInternal(\\n            account,\\n            VToken(address(0)),\\n            0,\\n            0,\\n            weightingStrategy\\n        );\\n\\n        return (uint256(err), liquidity, shortfall);\\n    }\\n}\\n\",\"keccak256\":\"0x72f12f8c73cd60d58a0e997a27e9be1e0799e82ec7339b887adb6c8666494b26\",\"license\":\"BSD-3-Clause\"},\"contracts/Comptroller/Diamond/facets/PolicyFacet.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.25;\\n\\nimport { VToken } from \\\"../../../Tokens/VTokens/VToken.sol\\\";\\nimport { Action } from \\\"../../ComptrollerInterface.sol\\\";\\nimport { IPolicyFacet } from \\\"../interfaces/IPolicyFacet.sol\\\";\\n\\nimport { XVSRewardsHelper } from \\\"./XVSRewardsHelper.sol\\\";\\nimport { IFlashLoanReceiver } from \\\"../../../FlashLoan/interfaces/IFlashLoanReceiver.sol\\\";\\nimport { VBep20Interface } from \\\"../../../Tokens/VTokens/VTokenInterfaces.sol\\\";\\nimport { PoolMarketId } from \\\"../../../Comptroller/Types/PoolMarketId.sol\\\";\\nimport { WeightFunction } from \\\"../interfaces/IFacetBase.sol\\\";\\n\\nimport { IProtocolShareReserve } from \\\"../../../external/IProtocolShareReserve.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n/**\\n * @title PolicyFacet\\n * @author Venus\\n * @dev This facet contains all the hooks used while transferring the assets\\n * @notice This facet contract contains all the external pre-hook functions related to vToken\\n */\\ncontract PolicyFacet is IPolicyFacet, XVSRewardsHelper {\\n    /// @notice Emitted when a new borrow-side XVS speed is calculated for a market\\n    event VenusBorrowSpeedUpdated(VToken indexed vToken, uint256 newSpeed);\\n\\n    /// @notice Emitted when a new supply-side XVS speed is calculated for a market\\n    event VenusSupplySpeedUpdated(VToken indexed vToken, uint256 newSpeed);\\n\\n    // @notice Emitted When the flash loan is successfully executed\\n    event FlashLoanExecuted(address receiver, VToken[] assets, uint256[] amounts);\\n\\n    /**\\n     * @notice Checks if the account should be allowed to mint tokens in the given market\\n     * @param vToken The market to verify the mint against\\n     * @param minter The account which would get the minted tokens\\n     * @param mintAmount The amount of underlying being supplied to the market in exchange for tokens\\n     * @return 0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function mintAllowed(address vToken, address minter, uint256 mintAmount) external returns (uint256) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        checkProtocolPauseState();\\n        checkActionPauseState(vToken, Action.MINT);\\n        ensureListed(getCorePoolMarket(vToken));\\n\\n        uint256 supplyCap = supplyCaps[vToken];\\n        require(supplyCap != 0, \\\"market supply cap is 0\\\");\\n\\n        uint256 vTokenSupply = VToken(vToken).totalSupply();\\n        Exp memory exchangeRate = Exp({ mantissa: VToken(vToken).exchangeRateStored() });\\n        uint256 nextTotalSupply = mul_ScalarTruncateAddUInt(exchangeRate, vTokenSupply, mintAmount);\\n\\n        require(nextTotalSupply <= supplyCap, \\\"market supply cap reached\\\");\\n\\n        // Keep the flywheel moving\\n        updateVenusSupplyIndex(vToken);\\n        distributeSupplierVenus(vToken, minter);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates mint, accrues interest and updates score in prime. Reverts on rejection. May emit logs.\\n     * @param vToken Asset being minted\\n     * @param minter The address minting the tokens\\n     * @param actualMintAmount The amount of the underlying asset being minted\\n     * @param mintTokens The number of tokens being minted\\n     */\\n    // solhint-disable-next-line no-unused-vars\\n    function mintVerify(address vToken, address minter, uint256 actualMintAmount, uint256 mintTokens) external {\\n        if (address(prime) != address(0)) {\\n            prime.accrueInterestAndUpdateScore(minter, vToken);\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to redeem tokens in the given market\\n     * @param vToken The market to verify the redeem against\\n     * @param redeemer The account which would redeem the tokens\\n     * @param redeemTokens The number of vTokens to exchange for the underlying asset in the market\\n     * @return 0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function redeemAllowed(address vToken, address redeemer, uint256 redeemTokens) external returns (uint256) {\\n        checkProtocolPauseState();\\n        checkActionPauseState(vToken, Action.REDEEM);\\n\\n        uint256 allowed = redeemAllowedInternal(vToken, redeemer, redeemTokens);\\n        if (allowed != uint256(Error.NO_ERROR)) {\\n            return allowed;\\n        }\\n\\n        // Keep the flywheel moving\\n        updateVenusSupplyIndex(vToken);\\n        distributeSupplierVenus(vToken, redeemer);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates redeem, accrues interest and updates score in prime. Reverts on rejection. May emit logs.\\n     * @param vToken Asset being redeemed\\n     * @param redeemer The address redeeming the tokens\\n     * @param redeemAmount The amount of the underlying asset being redeemed\\n     * @param redeemTokens The number of tokens being redeemed\\n     */\\n    function redeemVerify(address vToken, address redeemer, uint256 redeemAmount, uint256 redeemTokens) external {\\n        require(redeemTokens != 0 || redeemAmount == 0, \\\"redeemTokens zero\\\");\\n        if (address(prime) != address(0)) {\\n            prime.accrueInterestAndUpdateScore(redeemer, vToken);\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\\n     * @param vToken The market to verify the borrow against\\n     * @param borrower The account which would borrow the asset\\n     * @param borrowAmount The amount of underlying the account would borrow\\n     * @return 0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function borrowAllowed(address vToken, address borrower, uint256 borrowAmount) external returns (uint256) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        checkProtocolPauseState();\\n        checkActionPauseState(vToken, Action.BORROW);\\n        ensureListed(getCorePoolMarket(vToken));\\n        poolBorrowAllowed(borrower, vToken);\\n\\n        uint256 borrowCap = borrowCaps[vToken];\\n        require(borrowCap != 0, \\\"market borrow cap is 0\\\");\\n\\n        if (!getCorePoolMarket(vToken).accountMembership[borrower]) {\\n            // only vTokens may call borrowAllowed if borrower not in market\\n            require(msg.sender == vToken, \\\"sender must be vToken\\\");\\n\\n            // attempt to add borrower to the market\\n            Error err = addToMarketInternal(VToken(vToken), borrower);\\n            if (err != Error.NO_ERROR) {\\n                return uint256(err);\\n            }\\n        }\\n\\n        if (oracle.getUnderlyingPrice(vToken) == 0) {\\n            return uint256(Error.PRICE_ERROR);\\n        }\\n\\n        uint256 nextTotalBorrows = add_(VToken(vToken).totalBorrows(), borrowAmount);\\n        require(nextTotalBorrows <= borrowCap, \\\"market borrow cap reached\\\");\\n\\n        (Error err, , uint256 shortfall) = getHypotheticalAccountLiquidityInternal(\\n            borrower,\\n            VToken(vToken),\\n            0,\\n            borrowAmount,\\n            WeightFunction.USE_COLLATERAL_FACTOR\\n        );\\n        if (err != Error.NO_ERROR) {\\n            return uint256(err);\\n        }\\n\\n        if (shortfall != 0) {\\n            return uint256(Error.INSUFFICIENT_LIQUIDITY);\\n        }\\n\\n        // Keep the flywheel moving\\n        Exp memory borrowIndex = Exp({ mantissa: VToken(vToken).borrowIndex() });\\n        updateVenusBorrowIndex(vToken, borrowIndex);\\n        distributeBorrowerVenus(vToken, borrower, borrowIndex);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates borrow, accrues interest and updates score in prime. Reverts on rejection. May emit logs.\\n     * @param vToken Asset whose underlying is being borrowed\\n     * @param borrower The address borrowing the underlying\\n     * @param borrowAmount The amount of the underlying asset requested to borrow\\n     */\\n    // solhint-disable-next-line no-unused-vars\\n    function borrowVerify(address vToken, address borrower, uint256 borrowAmount) external {\\n        if (address(prime) != address(0)) {\\n            prime.accrueInterestAndUpdateScore(borrower, vToken);\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to repay a borrow in the given market\\n     * @param vToken The market to verify the repay against\\n     * @param payer The account which would repay the asset\\n     * @param borrower The account which borrowed the asset\\n     * @param repayAmount The amount of the underlying asset the account would repay\\n     * @return 0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function repayBorrowAllowed(\\n        address vToken,\\n        address payer, // solhint-disable-line no-unused-vars\\n        address borrower,\\n        uint256 repayAmount // solhint-disable-line no-unused-vars\\n    ) external returns (uint256) {\\n        checkProtocolPauseState();\\n        checkActionPauseState(vToken, Action.REPAY);\\n        ensureListed(getCorePoolMarket(vToken));\\n\\n        // Keep the flywheel moving\\n        Exp memory borrowIndex = Exp({ mantissa: VToken(vToken).borrowIndex() });\\n        updateVenusBorrowIndex(vToken, borrowIndex);\\n        distributeBorrowerVenus(vToken, borrower, borrowIndex);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates repayBorrow, accrues interest and updates score in prime. Reverts on rejection. May emit logs.\\n     * @param vToken Asset being repaid\\n     * @param payer The address repaying the borrow\\n     * @param borrower The address of the borrower\\n     * @param actualRepayAmount The amount of underlying being repaid\\n     */\\n    function repayBorrowVerify(\\n        address vToken,\\n        address payer, // solhint-disable-line no-unused-vars\\n        address borrower,\\n        uint256 actualRepayAmount, // solhint-disable-line no-unused-vars\\n        uint256 borrowerIndex // solhint-disable-line no-unused-vars\\n    ) external {\\n        if (address(prime) != address(0)) {\\n            prime.accrueInterestAndUpdateScore(borrower, vToken);\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the liquidation should be allowed to occur\\n     * @param vTokenBorrowed Asset which was borrowed by the borrower\\n     * @param vTokenCollateral Asset which was used as collateral and will be seized\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param repayAmount The amount of underlying being repaid\\n     */\\n    function liquidateBorrowAllowed(\\n        address vTokenBorrowed,\\n        address vTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external view returns (uint256) {\\n        checkProtocolPauseState();\\n\\n        // if we want to pause liquidating to vTokenCollateral, we should pause seizing\\n        checkActionPauseState(vTokenBorrowed, Action.LIQUIDATE);\\n\\n        if (liquidatorContract != address(0) && liquidator != liquidatorContract) {\\n            return uint256(Error.UNAUTHORIZED);\\n        }\\n\\n        ensureListed(getCorePoolMarket(vTokenCollateral));\\n        uint256 borrowBalance;\\n        if (address(vTokenBorrowed) != address(vaiController)) {\\n            ensureListed(getCorePoolMarket(vTokenBorrowed));\\n            borrowBalance = VToken(vTokenBorrowed).borrowBalanceStored(borrower);\\n        } else {\\n            borrowBalance = vaiController.getVAIRepayAmount(borrower);\\n        }\\n\\n        if (isForcedLiquidationEnabled[vTokenBorrowed] || isForcedLiquidationEnabledForUser[borrower][vTokenBorrowed]) {\\n            if (repayAmount > borrowBalance) {\\n                return uint(Error.TOO_MUCH_REPAY);\\n            }\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        /* The borrower must have shortfall in order to be liquidatable */\\n        (Error err, , uint256 shortfall) = getHypotheticalAccountLiquidityInternal(\\n            borrower,\\n            VToken(address(0)),\\n            0,\\n            0,\\n            WeightFunction.USE_LIQUIDATION_THRESHOLD\\n        );\\n\\n        if (err != Error.NO_ERROR) {\\n            return uint256(err);\\n        }\\n        if (shortfall == 0) {\\n            return uint256(Error.INSUFFICIENT_SHORTFALL);\\n        }\\n\\n        // The liquidator may not repay more than what is allowed by the closeFactor\\n        //-- maxClose = multipy of closeFactorMantissa and borrowBalance\\n        if (repayAmount > mul_ScalarTruncate(Exp({ mantissa: closeFactorMantissa }), borrowBalance)) {\\n            return uint256(Error.TOO_MUCH_REPAY);\\n        }\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates liquidateBorrow, accrues interest and updates score in prime. Reverts on rejection. May emit logs.\\n     * @param vTokenBorrowed Asset which was borrowed by the borrower\\n     * @param vTokenCollateral Asset which was used as collateral and will be seized\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param actualRepayAmount The amount of underlying being repaid\\n     * @param seizeTokens The amount of collateral token that will be seized\\n     */\\n    function liquidateBorrowVerify(\\n        address vTokenBorrowed,\\n        address vTokenCollateral, // solhint-disable-line no-unused-vars\\n        address liquidator,\\n        address borrower,\\n        uint256 actualRepayAmount, // solhint-disable-line no-unused-vars\\n        uint256 seizeTokens // solhint-disable-line no-unused-vars\\n    ) external {\\n        if (address(prime) != address(0)) {\\n            prime.accrueInterestAndUpdateScore(borrower, vTokenBorrowed);\\n            prime.accrueInterestAndUpdateScore(liquidator, vTokenBorrowed);\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the seizing of assets should be allowed to occur\\n     * @param vTokenCollateral Asset which was used as collateral and will be seized\\n     * @param vTokenBorrowed Asset which was borrowed by the borrower\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param seizeTokens The number of collateral tokens to seize\\n     */\\n    function seizeAllowed(\\n        address vTokenCollateral,\\n        address vTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens // solhint-disable-line no-unused-vars\\n    ) external returns (uint256) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        checkProtocolPauseState();\\n        checkActionPauseState(vTokenCollateral, Action.SEIZE);\\n\\n        Market storage market = _poolMarkets[getCorePoolMarketIndex(vTokenCollateral)];\\n\\n        // We've added VAIController as a borrowed token list check for seize\\n        ensureListed(market);\\n\\n        if (!market.accountMembership[borrower]) {\\n            return uint256(Error.MARKET_NOT_COLLATERAL);\\n        }\\n\\n        if (address(vTokenBorrowed) != address(vaiController)) {\\n            ensureListed(getCorePoolMarket(vTokenBorrowed));\\n        }\\n\\n        if (VToken(vTokenCollateral).comptroller() != VToken(vTokenBorrowed).comptroller()) {\\n            return uint256(Error.COMPTROLLER_MISMATCH);\\n        }\\n\\n        // Keep the flywheel moving\\n        updateVenusSupplyIndex(vTokenCollateral);\\n        distributeSupplierVenus(vTokenCollateral, borrower);\\n        distributeSupplierVenus(vTokenCollateral, liquidator);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates seize, accrues interest and updates score in prime. Reverts on rejection. May emit logs.\\n     * @param vTokenCollateral Asset which was used as collateral and will be seized\\n     * @param vTokenBorrowed Asset which was borrowed by the borrower\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param seizeTokens The number of collateral tokens to seize\\n     */\\n    function seizeVerify(\\n        address vTokenCollateral,\\n        address vTokenBorrowed, // solhint-disable-line no-unused-vars\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens // solhint-disable-line no-unused-vars\\n    ) external {\\n        if (address(prime) != address(0)) {\\n            prime.accrueInterestAndUpdateScore(borrower, vTokenCollateral);\\n            prime.accrueInterestAndUpdateScore(liquidator, vTokenCollateral);\\n        }\\n    }\\n\\n    /**\\n     * @notice Executes a flashLoan operation with the specified assets, amounts, and modes.\\n     * @dev Transfer the specified assets to the receiver contract and handles repayment based on modes.\\n     *      Mode 0: Classic flash loan - must repay everything or revert\\n     *      Mode 1: Can create debt position for unpaid amounts\\n     * @param initiator The address initiating the flash loan\\n     * @param receiver The address of the contract that will receive the flashLoan and execute the operation\\n     * @param vTokens The addresses of the vToken assets to be loaned\\n     * @param underlyingAmounts The amounts of each underlying asset to be loaned\\n     * @param modes How each borrowed asset is handled if not repaid immediately (0: flash loan, 1: debt position)\\n     * @param onBehalfOf The address for whom debt positions will be opened (if mode = 1)\\n     * @param param The bytes passed in the executeOperation call\\n     */\\n    function executeFlashLoan(\\n        address payable initiator,\\n        address payable receiver,\\n        VToken[] calldata vTokens,\\n        uint256[] calldata underlyingAmounts,\\n        uint256[] calldata modes,\\n        address onBehalfOf,\\n        bytes calldata param\\n    ) external {\\n        for (uint256 i; i < vTokens.length; i++) {\\n            if (!(vTokens[i]).isFlashLoanEnabled()) revert(\\\"FlashLoan not enabled\\\");\\n            if (underlyingAmounts[i] == 0) revert(\\\"Invalid amount\\\");\\n        }\\n\\n        ensureNonzeroAddress(receiver);\\n        ensureNonzeroAddress(onBehalfOf);\\n\\n        // All arrays must have the same length and not be zero\\n        if (vTokens.length != underlyingAmounts.length || vTokens.length != modes.length || vTokens.length == 0) {\\n            revert(\\\"Invalid flashLoan params\\\");\\n        }\\n        // Validate parameters and delegation\\n        _validateFlashLoanParams(initiator, vTokens, modes, onBehalfOf);\\n\\n        if (!authorizedFlashLoan[initiator]) {\\n            revert(\\\"Flash loan not authorized for this account\\\");\\n        }\\n        // Execute flash loan phases\\n        _executeFlashLoanPhases(receiver, vTokens, underlyingAmounts, modes, onBehalfOf, param);\\n\\n        emit FlashLoanExecuted(receiver, vTokens, underlyingAmounts);\\n    }\\n\\n    /**\\n     * @notice Validates flash loan parameters and delegation\\n     */\\n    function _validateFlashLoanParams(\\n        address payable initiator,\\n        VToken[] memory vTokens,\\n        uint256[] memory modes,\\n        address onBehalfOf\\n    ) internal view {\\n        // Check delegation if borrowing on behalf of someone else\\n        if (onBehalfOf != initiator) {\\n            for (uint256 i; i < vTokens.length; i++) {\\n                if (modes[i] == 1) {\\n                    // Only check delegation for debt-creating modes\\n                    require(\\n                        delegateAuthorizationFlashloan[onBehalfOf][address(vTokens[i])][initiator],\\n                        \\\"Sender not authorized to use flashloan on behalf\\\"\\n                    );\\n                }\\n            }\\n        }\\n\\n        // Validate modes\\n        for (uint256 i; i < modes.length; i++) {\\n            require(modes[i] <= 1, \\\"Invalid mode\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Executes all flash loan phases\\n     */\\n    function _executeFlashLoanPhases(\\n        address payable receiver,\\n        VToken[] memory vTokens,\\n        uint256[] memory underlyingAmounts,\\n        uint256[] memory modes,\\n        address onBehalfOf,\\n        bytes memory param\\n    ) internal returns (FlashLoanData memory flashLoanData) {\\n        // Initialize arrays\\n        flashLoanData.protocolFees = new uint256[](vTokens.length);\\n        flashLoanData.supplierFees = new uint256[](vTokens.length);\\n        flashLoanData.totalFees = new uint256[](vTokens.length);\\n        flashLoanData.balanceAfterTransfer = new uint256[](vTokens.length);\\n        flashLoanData.actualRepayments = new uint256[](vTokens.length);\\n        flashLoanData.remainingDebts = new uint256[](vTokens.length);\\n\\n        // Phase 1: Calculate fees and transfer assets\\n        _executePhase1(receiver, vTokens, underlyingAmounts, flashLoanData);\\n        // Phase 2: Execute operation on receiver contract\\n        _executePhase2(receiver, vTokens, underlyingAmounts, flashLoanData.totalFees, param);\\n        // Phase 3: Handle repayment based on modes\\n        _executePhase3(receiver, vTokens, underlyingAmounts, modes, onBehalfOf, flashLoanData);\\n\\n        return flashLoanData;\\n    }\\n\\n    /**\\n     * @notice Phase 1: Calculate fees and transfer assets to receiver\\n     */\\n    function _executePhase1(\\n        address payable receiver,\\n        VToken[] memory vTokens,\\n        uint256[] memory underlyingAmounts,\\n        FlashLoanData memory flashLoanData\\n    ) internal {\\n        for (uint256 j = 0; j < vTokens.length; j++) {\\n            (flashLoanData.protocolFees[j], flashLoanData.supplierFees[j]) = vTokens[j].calculateFlashLoanFee(\\n                underlyingAmounts[j]\\n            );\\n            flashLoanData.totalFees[j] = flashLoanData.protocolFees[j] + flashLoanData.supplierFees[j];\\n\\n            // Transfer the asset to receiver\\n            flashLoanData.balanceAfterTransfer[j] = vTokens[j].transferOutUnderlying(receiver, underlyingAmounts[j]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Phase 2: Execute operation on receiver contract\\n     */\\n    function _executePhase2(\\n        address payable receiver,\\n        VToken[] memory vTokens,\\n        uint256[] memory underlyingAmounts,\\n        uint256[] memory totalFees,\\n        bytes memory param\\n    ) internal {\\n        if (!IFlashLoanReceiver(receiver).executeOperation(vTokens, underlyingAmounts, totalFees, msg.sender, param)) {\\n            revert(\\\"Execute flashLoan failed\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Phase 3: Handle repayment based on modes\\n     */\\n    function _executePhase3(\\n        address payable receiver,\\n        VToken[] memory vTokens,\\n        uint256[] memory underlyingAmounts,\\n        uint256[] memory modes,\\n        address onBehalfOf,\\n        FlashLoanData memory flashLoanData\\n    ) internal {\\n        for (uint256 k = 0; k < vTokens.length; k++) {\\n            if (modes[k] == 0) {\\n                // Mode 0: Classic flash loan - must repay everything\\n                _handleFlashLoanMode0(\\n                    vTokens[k],\\n                    receiver,\\n                    underlyingAmounts[k],\\n                    flashLoanData.totalFees[k],\\n                    flashLoanData.protocolFees[k],\\n                    flashLoanData.balanceAfterTransfer[k]\\n                );\\n                flashLoanData.actualRepayments[k] = underlyingAmounts[k] + flashLoanData.totalFees[k];\\n                flashLoanData.remainingDebts[k] = 0;\\n            } else if (modes[k] == 1) {\\n                // Mode 1: Can create debt position\\n                (flashLoanData.actualRepayments[k], flashLoanData.remainingDebts[k]) = _handleFlashLoanMode1(\\n                    address(vTokens[k]),\\n                    onBehalfOf,\\n                    underlyingAmounts[k],\\n                    flashLoanData.totalFees[k],\\n                    flashLoanData.protocolFees[k],\\n                    flashLoanData.balanceAfterTransfer[k]\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Handles classic flash loan mode (mode 0) - must repay within transaction\\n     */\\n    function _handleFlashLoanMode0(\\n        VToken vToken,\\n        address payable receiver,\\n        uint256 amount,\\n        uint256 totalFee,\\n        uint256 protocolFee,\\n        uint256 balanceAfterTransfer\\n    ) internal {\\n        // Must repay full amount + fee\\n        vToken.transferInUnderlyingAndVerify(receiver, amount, totalFee, balanceAfterTransfer);\\n\\n        // Transfer protocol fee to protocol share reserve\\n        vToken.transferOutUnderlying(vToken.protocolShareReserve(), protocolFee);\\n\\n        // Update protocol share reserve state\\n        IProtocolShareReserve(vToken.protocolShareReserve()).updateAssetsState(\\n            address(vToken.comptroller()),\\n            address(vToken.underlying()),\\n            IProtocolShareReserve.IncomeType.FLASHLOAN\\n        );\\n    }\\n\\n    /**\\n     * @notice Handles debt position mode (mode 1) - can create ongoing debt\\n     * @return actualRepayment The amount actually repaid\\n     * @return remainingDebt The amount that became ongoing debt\\n     */\\n    function _handleFlashLoanMode1(\\n        address vTokenAddress,\\n        address onBehalfOf,\\n        uint256 amount,\\n        uint256 totalFee,\\n        uint256 protocolFee,\\n        uint256 balanceAfterTransfer\\n    ) internal returns (uint256 actualRepayment, uint256 remainingDebt) {\\n        VToken vToken = VToken(vTokenAddress);\\n        uint256 requiredRepayment = amount + totalFee;\\n\\n        uint256 accrueResult = vToken.accrueInterest();\\n        require(accrueResult == 0, \\\"Failed to accrue interest\\\");\\n\\n        // create a debt position\\n        uint256 debtError = vToken.borrowDebtPosition(onBehalfOf, requiredRepayment);\\n        require(debtError == 0, \\\"Failed to create debt position\\\");\\n\\n        return (0, requiredRepayment);\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to transfer tokens in the given market\\n     * @param vToken The market to verify the transfer against\\n     * @param src The account which sources the tokens\\n     * @param dst The account which receives the tokens\\n     * @param transferTokens The number of vTokens to transfer\\n     * @return 0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function transferAllowed(\\n        address vToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external returns (uint256) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        checkProtocolPauseState();\\n        checkActionPauseState(vToken, Action.TRANSFER);\\n\\n        // Currently the only consideration is whether or not\\n        //  the src is allowed to redeem this many tokens\\n        uint256 allowed = redeemAllowedInternal(vToken, src, transferTokens);\\n        if (allowed != uint256(Error.NO_ERROR)) {\\n            return allowed;\\n        }\\n\\n        // Keep the flywheel moving\\n        updateVenusSupplyIndex(vToken);\\n        distributeSupplierVenus(vToken, src);\\n        distributeSupplierVenus(vToken, dst);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates transfer, accrues interest and updates score in prime. Reverts on rejection. May emit logs.\\n     * @param vToken Asset being transferred\\n     * @param src The account which sources the tokens\\n     * @param dst The account which receives the tokens\\n     * @param transferTokens The number of vTokens to transfer\\n     */\\n    // solhint-disable-next-line no-unused-vars\\n    function transferVerify(address vToken, address src, address dst, uint256 transferTokens) external {\\n        if (address(prime) != address(0)) {\\n            prime.accrueInterestAndUpdateScore(src, vToken);\\n            prime.accrueInterestAndUpdateScore(dst, vToken);\\n        }\\n    }\\n\\n    /**\\n     * @notice Alias to getAccountLiquidity to support the Isolated Lending Comptroller Interface\\n     * @param account The account get liquidity for\\n     * @return (possible error code (semi-opaque),\\n                account liquidity in excess of collateral requirements,\\n     *          account shortfall below collateral requirements)\\n     */\\n    function getBorrowingPower(address account) external view returns (uint256, uint256, uint256) {\\n        return _getAccountLiquidity(account, WeightFunction.USE_COLLATERAL_FACTOR);\\n    }\\n\\n    /**\\n     * @notice Determine the current account liquidity wrt collateral requirements\\n     * @param account The account get liquidity for\\n     * @return (possible error code (semi-opaque),\\n                account liquidity in excess of collateral requirements,\\n     *          account shortfall below collateral requirements)\\n     */\\n    function getAccountLiquidity(address account) external view returns (uint256, uint256, uint256) {\\n        return _getAccountLiquidity(account, WeightFunction.USE_COLLATERAL_FACTOR);\\n    }\\n\\n    /**\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\n     * @param vTokenModify The market to hypothetically redeem/borrow in\\n     * @param account The account to determine liquidity for\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\n     * @return (possible error code (semi-opaque),\\n                hypothetical account liquidity in excess of collateral requirements,\\n     *          hypothetical account shortfall below collateral requirements)\\n     */\\n    function getHypotheticalAccountLiquidity(\\n        address account,\\n        address vTokenModify,\\n        uint256 redeemTokens,\\n        uint256 borrowAmount\\n    ) external view returns (uint256, uint256, uint256) {\\n        (Error err, uint256 liquidity, uint256 shortfall) = getHypotheticalAccountLiquidityInternal(\\n            account,\\n            VToken(vTokenModify),\\n            redeemTokens,\\n            borrowAmount,\\n            WeightFunction.USE_COLLATERAL_FACTOR\\n        );\\n        return (uint256(err), liquidity, shortfall);\\n    }\\n\\n    // setter functionality\\n    /**\\n     * @notice Set XVS speed for a single market\\n     * @dev Allows the contract admin to set XVS speed for a market\\n     * @param vTokens The market whose XVS speed to update\\n     * @param supplySpeeds New XVS speed for supply\\n     * @param borrowSpeeds New XVS speed for borrow\\n     */\\n    function _setVenusSpeeds(\\n        VToken[] calldata vTokens,\\n        uint256[] calldata supplySpeeds,\\n        uint256[] calldata borrowSpeeds\\n    ) external {\\n        ensureAdmin();\\n\\n        uint256 numTokens = vTokens.length;\\n        require(numTokens == supplySpeeds.length && numTokens == borrowSpeeds.length, \\\"invalid input\\\");\\n\\n        for (uint256 i; i < numTokens; ++i) {\\n            ensureNonzeroAddress(address(vTokens[i]));\\n            setVenusSpeedInternal(vTokens[i], supplySpeeds[i], borrowSpeeds[i]);\\n        }\\n    }\\n\\n    function setVenusSpeedInternal(VToken vToken, uint256 supplySpeed, uint256 borrowSpeed) internal {\\n        ensureListed(getCorePoolMarket(address(vToken)));\\n\\n        if (venusSupplySpeeds[address(vToken)] != supplySpeed) {\\n            // Supply speed updated so let's update supply state to ensure that\\n            //  1. XVS accrued properly for the old speed, and\\n            //  2. XVS accrued at the new speed starts after this block.\\n\\n            updateVenusSupplyIndex(address(vToken));\\n            // Update speed and emit event\\n            venusSupplySpeeds[address(vToken)] = supplySpeed;\\n            emit VenusSupplySpeedUpdated(vToken, supplySpeed);\\n        }\\n\\n        if (venusBorrowSpeeds[address(vToken)] != borrowSpeed) {\\n            // Borrow speed updated so let's update borrow state to ensure that\\n            //  1. XVS accrued properly for the old speed, and\\n            //  2. XVS accrued at the new speed starts after this block.\\n            Exp memory borrowIndex = Exp({ mantissa: vToken.borrowIndex() });\\n            updateVenusBorrowIndex(address(vToken), borrowIndex);\\n\\n            // Update speed and emit event\\n            venusBorrowSpeeds[address(vToken)] = borrowSpeed;\\n            emit VenusBorrowSpeedUpdated(vToken, borrowSpeed);\\n        }\\n    }\\n\\n    function poolBorrowAllowed(address account, address vToken) internal view {\\n        PoolMarketId index = getPoolMarketIndex(userPoolId[account], vToken);\\n        if (!_poolMarkets[index].isBorrowAllowed) {\\n            revert BorrowNotAllowedInPool();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeea5ddc9b33000eee311aa34893f6ae4b76f89bbdd31bf83b8e5a84a7f511fc9\",\"license\":\"BSD-3-Clause\"},\"contracts/Comptroller/Diamond/facets/XVSRewardsHelper.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.25;\\n\\nimport { VToken } from \\\"../../../Tokens/VTokens/VToken.sol\\\";\\nimport { FacetBase } from \\\"./FacetBase.sol\\\";\\n\\n/**\\n * @title XVSRewardsHelper\\n * @author Venus\\n * @dev This contract contains internal functions used in RewardFacet and PolicyFacet\\n * @notice This facet contract contains the shared functions used by the RewardFacet and PolicyFacet\\n */\\ncontract XVSRewardsHelper is FacetBase {\\n    /// @notice Emitted when XVS is distributed to a borrower\\n    event DistributedBorrowerVenus(\\n        VToken indexed vToken,\\n        address indexed borrower,\\n        uint256 venusDelta,\\n        uint256 venusBorrowIndex\\n    );\\n\\n    /// @notice Emitted when XVS is distributed to a supplier\\n    event DistributedSupplierVenus(\\n        VToken indexed vToken,\\n        address indexed supplier,\\n        uint256 venusDelta,\\n        uint256 venusSupplyIndex\\n    );\\n\\n    /**\\n     * @notice Accrue XVS to the market by updating the borrow index\\n     * @param vToken The market whose borrow index to update\\n     */\\n    function updateVenusBorrowIndex(address vToken, Exp memory marketBorrowIndex) internal {\\n        VenusMarketState storage borrowState = venusBorrowState[vToken];\\n        uint256 borrowSpeed = venusBorrowSpeeds[vToken];\\n        uint32 blockNumber = getBlockNumberAsUint32();\\n        uint256 deltaBlocks = sub_(blockNumber, borrowState.block);\\n        if (deltaBlocks != 0 && borrowSpeed != 0) {\\n            uint256 borrowAmount = div_(VToken(vToken).totalBorrows(), marketBorrowIndex);\\n            uint256 accruedVenus = mul_(deltaBlocks, borrowSpeed);\\n            Double memory ratio = borrowAmount != 0 ? fraction(accruedVenus, borrowAmount) : Double({ mantissa: 0 });\\n            borrowState.index = safe224(add_(Double({ mantissa: borrowState.index }), ratio).mantissa, \\\"224\\\");\\n            borrowState.block = blockNumber;\\n        } else if (deltaBlocks != 0) {\\n            borrowState.block = blockNumber;\\n        }\\n    }\\n\\n    /**\\n     * @notice Accrue XVS to the market by updating the supply index\\n     * @param vToken The market whose supply index to update\\n     */\\n    function updateVenusSupplyIndex(address vToken) internal {\\n        VenusMarketState storage supplyState = venusSupplyState[vToken];\\n        uint256 supplySpeed = venusSupplySpeeds[vToken];\\n        uint32 blockNumber = getBlockNumberAsUint32();\\n\\n        uint256 deltaBlocks = sub_(blockNumber, supplyState.block);\\n        if (deltaBlocks != 0 && supplySpeed != 0) {\\n            uint256 supplyTokens = VToken(vToken).totalSupply();\\n            uint256 accruedVenus = mul_(deltaBlocks, supplySpeed);\\n            Double memory ratio = supplyTokens != 0 ? fraction(accruedVenus, supplyTokens) : Double({ mantissa: 0 });\\n            supplyState.index = safe224(add_(Double({ mantissa: supplyState.index }), ratio).mantissa, \\\"224\\\");\\n            supplyState.block = blockNumber;\\n        } else if (deltaBlocks != 0) {\\n            supplyState.block = blockNumber;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate XVS accrued by a supplier and possibly transfer it to them\\n     * @param vToken The market in which the supplier is interacting\\n     * @param supplier The address of the supplier to distribute XVS to\\n     */\\n    function distributeSupplierVenus(address vToken, address supplier) internal {\\n        if (address(vaiVaultAddress) != address(0)) {\\n            releaseToVault();\\n        }\\n        uint256 supplyIndex = venusSupplyState[vToken].index;\\n        uint256 supplierIndex = venusSupplierIndex[vToken][supplier];\\n        // Update supplier's index to the current index since we are distributing accrued XVS\\n        venusSupplierIndex[vToken][supplier] = supplyIndex;\\n        if (supplierIndex == 0 && supplyIndex >= venusInitialIndex) {\\n            // Covers the case where users supplied tokens before the market's supply state index was set.\\n            // Rewards the user with XVS accrued from the start of when supplier rewards were first\\n            // set for the market.\\n            supplierIndex = venusInitialIndex;\\n        }\\n        // Calculate change in the cumulative sum of the XVS per vToken accrued\\n        Double memory deltaIndex = Double({ mantissa: sub_(supplyIndex, supplierIndex) });\\n        // Multiply of supplierTokens and supplierDelta\\n        uint256 supplierDelta = mul_(VToken(vToken).balanceOf(supplier), deltaIndex);\\n        // Addition of supplierAccrued and supplierDelta\\n        venusAccrued[supplier] = add_(venusAccrued[supplier], supplierDelta);\\n        emit DistributedSupplierVenus(VToken(vToken), supplier, supplierDelta, supplyIndex);\\n    }\\n\\n    /**\\n     * @notice Calculate XVS accrued by a borrower and possibly transfer it to them\\n     * @dev Borrowers will not begin to accrue until after the first interaction with the protocol\\n     * @param vToken The market in which the borrower is interacting\\n     * @param borrower The address of the borrower to distribute XVS to\\n     */\\n    function distributeBorrowerVenus(address vToken, address borrower, Exp memory marketBorrowIndex) internal {\\n        if (address(vaiVaultAddress) != address(0)) {\\n            releaseToVault();\\n        }\\n        uint256 borrowIndex = venusBorrowState[vToken].index;\\n        uint256 borrowerIndex = venusBorrowerIndex[vToken][borrower];\\n        // Update borrowers's index to the current index since we are distributing accrued XVS\\n        venusBorrowerIndex[vToken][borrower] = borrowIndex;\\n        if (borrowerIndex == 0 && borrowIndex >= venusInitialIndex) {\\n            // Covers the case where users borrowed tokens before the market's borrow state index was set.\\n            // Rewards the user with XVS accrued from the start of when borrower rewards were first\\n            // set for the market.\\n            borrowerIndex = venusInitialIndex;\\n        }\\n        // Calculate change in the cumulative sum of the XVS per borrowed unit accrued\\n        Double memory deltaIndex = Double({ mantissa: sub_(borrowIndex, borrowerIndex) });\\n        uint256 borrowerDelta = mul_(div_(VToken(vToken).borrowBalanceStored(borrower), marketBorrowIndex), deltaIndex);\\n        venusAccrued[borrower] = add_(venusAccrued[borrower], borrowerDelta);\\n        emit DistributedBorrowerVenus(VToken(vToken), borrower, borrowerDelta, borrowIndex);\\n    }\\n}\\n\",\"keccak256\":\"0xf356db714f7aada286380ee5092b0a3e3163428943cfb5561ded76597e1c0c15\",\"license\":\"BSD-3-Clause\"},\"contracts/Comptroller/Diamond/interfaces/IFacetBase.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.25;\\n\\nimport { Action } from \\\"../../../Comptroller/ComptrollerInterface.sol\\\";\\nimport { PoolMarketId } from \\\"../../../Comptroller/Types/PoolMarketId.sol\\\";\\n\\nenum WeightFunction {\\n    /// @notice Use the collateral factor of the asset for weighting\\n    USE_COLLATERAL_FACTOR,\\n    /// @notice Use the liquidation threshold of the asset for weighting\\n    USE_LIQUIDATION_THRESHOLD\\n}\\n\\ninterface IFacetBase {\\n    /**\\n     * @notice The initial XVS rewards index for a market\\n     */\\n    function venusInitialIndex() external pure returns (uint224);\\n\\n    /**\\n     * @notice Checks if a certain action is paused on a market\\n     * @param action Action id\\n     * @param market vToken address\\n     */\\n    function actionPaused(address market, Action action) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the XVS address\\n     * @return The address of XVS token\\n     */\\n    function getXVSAddress() external view returns (address);\\n\\n    function getPoolMarketIndex(uint96 poolId, address vToken) external pure returns (PoolMarketId);\\n\\n    function corePoolId() external pure returns (uint96);\\n}\\n\",\"keccak256\":\"0x454a2e213a5f54fbe7991193b78ae23406234f465c9806f75ee7bf2fe6d1531c\",\"license\":\"BSD-3-Clause\"},\"contracts/Comptroller/Diamond/interfaces/IPolicyFacet.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.25;\\n\\nimport { VToken } from \\\"../../../Tokens/VTokens/VToken.sol\\\";\\n\\ninterface IPolicyFacet {\\n    function mintAllowed(address vToken, address minter, uint256 mintAmount) external returns (uint256);\\n\\n    function mintVerify(address vToken, address minter, uint256 mintAmount, uint256 mintTokens) external;\\n\\n    function redeemAllowed(address vToken, address redeemer, uint256 redeemTokens) external returns (uint256);\\n\\n    function redeemVerify(address vToken, address redeemer, uint256 redeemAmount, uint256 redeemTokens) external;\\n\\n    function borrowAllowed(address vToken, address borrower, uint256 borrowAmount) external returns (uint256);\\n\\n    function borrowVerify(address vToken, address borrower, uint256 borrowAmount) external;\\n\\n    function repayBorrowAllowed(\\n        address vToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external returns (uint256);\\n\\n    function repayBorrowVerify(\\n        address vToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 borrowerIndex\\n    ) external;\\n\\n    function liquidateBorrowAllowed(\\n        address vTokenBorrowed,\\n        address vTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external view returns (uint256);\\n\\n    function liquidateBorrowVerify(\\n        address vTokenBorrowed,\\n        address vTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function seizeAllowed(\\n        address vTokenCollateral,\\n        address vTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external returns (uint256);\\n\\n    function seizeVerify(\\n        address vTokenCollateral,\\n        address vTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function transferAllowed(\\n        address vToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external returns (uint256);\\n\\n    function transferVerify(address vToken, address src, address dst, uint256 transferTokens) external;\\n\\n    function getAccountLiquidity(address account) external view returns (uint256, uint256, uint256);\\n\\n    function getHypotheticalAccountLiquidity(\\n        address account,\\n        address vTokenModify,\\n        uint256 redeemTokens,\\n        uint256 borrowAmount\\n    ) external view returns (uint256, uint256, uint256);\\n\\n    function _setVenusSpeeds(\\n        VToken[] calldata vTokens,\\n        uint256[] calldata supplySpeeds,\\n        uint256[] calldata borrowSpeeds\\n    ) external;\\n\\n    function executeFlashLoan(\\n        address payable initiator,\\n        address payable receiver,\\n        VToken[] calldata assets,\\n        uint256[] calldata underlyingAmounts,\\n        uint256[] calldata modes,\\n        address onBehalfOf,\\n        bytes calldata param\\n    ) external;\\n    function getBorrowingPower(\\n        address account\\n    ) external view returns (uint256 error, uint256 liquidity, uint256 shortfall);\\n}\\n\",\"keccak256\":\"0x6ba620ca1a445ddc11a33e89ef90ccb3c8ce4bec996c16beda5607bc656570f9\",\"license\":\"BSD-3-Clause\"},\"contracts/Comptroller/Types/PoolMarketId.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.25;\\n\\n/// @notice Strongly-typed identifier for pool markets mapping keys\\n/// @dev Underlying storage is bytes32: first 12 bytes (96 bits) = poolId, last 20 bytes = vToken address\\ntype PoolMarketId is bytes32;\\n\\n \",\"keccak256\":\"0xf68bde30ddd6f8bf08194b493991c2a2ebd3814972f93a804beb9b366004cbe3\",\"license\":\"BSD-3-Clause\"},\"contracts/FlashLoan/interfaces/IFlashLoanReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\nimport { VToken } from \\\"../../Tokens/VTokens/VToken.sol\\\";\\n\\n/// @title IFlashLoanReceiver\\n/// @notice Interface for flashLoan receiver contract, which execute custom logic with flash-borrowed assets.\\n/// @dev This interface defines the method that must be implemented by any contract wishing to interact with the flashLoan system.\\n///      Contracts must ensure they have the means to repay both the flashLoan amount and the associated premium (fee).\\ninterface IFlashLoanReceiver {\\n    /**\\n     * @notice Executes an operation after receiving the flash-borrowed assets.\\n     * @dev Implementation of this function must ensure the borrowed amount plus the premium (fee) is repaid within the same transaction.\\n     * @param assets The assets that were flash-borrowed.\\n     * @param amounts The amounts of each of the flash-borrowed assets.\\n     * @param premiums The premiums (fees) associated with each flash-borrowed asset.\\n     * @param initiator The address that initiated the flashLoan operation.\\n     * @param param Additional parameters encoded as bytes. These can be used to pass custom data to the receiver contract.\\n     * @return True if the operation succeeds and the borrowed amount plus the premium is repaid, false otherwise.\\n     */\\n    function executeOperation(\\n        VToken[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata premiums,\\n        address initiator,\\n        bytes calldata param\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x597daf8811ccaf85baeb57670ff1953fffffdfdde0c592b69a332d062d6e1610\",\"license\":\"BSD-3-Clause\"},\"contracts/FlashLoan/interfaces/IFlashLoanSimpleReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\n/// @title IFlashLoanSimpleReceiver\\n/// @notice Interface for flashLoan receiver contract, which execute custom logic with flash-borrowed asset.\\n/// @dev This interface defines the method that must be implemented by any contract wishing to interact with the flashLoan system.\\n///      Contracts must ensure they have the means to repay both the flashLoan amount and the associated premium (fee).\\ninterface IFlashLoanSimpleReceiver {\\n    /**\\n     * @notice Executes an operation after receiving the flash-borrowed asset\\n     * @dev Ensure that the contract can return the debt + premium, e.g., has\\n     *      enough funds to repay and has to transfer the debt + premium to the VToken\\n     * @param asset The address of the flash-borrowed asset\\n     * @param amount The amount of the flash-borrowed asset\\n     * @param premium The premium (fee) associated with flash-borrowed asset.\\n     * @param initiator The address that initiated the flashLoan operation\\n     * @param param The byte-encoded param passed when initiating the flashLoan\\n     * @return True if the execution of the operation succeeds, false otherwise\\n     */\\n    function executeOperation(\\n        address asset,\\n        uint256 amount,\\n        uint256 premium,\\n        address initiator,\\n        bytes calldata param\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xd7e485aafe271a740b8ee0f1f0848f57272c69410ade7d419baad8c709cb12d4\",\"license\":\"BSD-3-Clause\"},\"contracts/InterestRateModels/InterestRateModelV8.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\n/**\\n * @title Venus's InterestRateModelV8 Interface\\n * @author Venus\\n */\\nabstract contract InterestRateModelV8 {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    bool public constant isInterestRateModel = true;\\n\\n    /**\\n     * @notice Calculates the current borrow interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amnount of reserves the market has\\n     * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getBorrowRate(uint256 cash, uint256 borrows, uint256 reserves) external view virtual returns (uint256);\\n\\n    /**\\n     * @notice Calculates the current supply interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amnount of reserves the market has\\n     * @param reserveFactorMantissa The current reserve factor the market has\\n     * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getSupplyRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves,\\n        uint256 reserveFactorMantissa\\n    ) external view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x4d5595e761d50a1431c34b39e72dde6c09b0ebccdbe8c5c4e12c8a2ac7b796e1\",\"license\":\"BSD-3-Clause\"},\"contracts/Tokens/Prime/IPrime.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\n/**\\n * @title IPrime\\n * @author Venus\\n * @notice Interface for Prime Token\\n */\\ninterface IPrime {\\n    /**\\n     * @notice Executed by XVSVault whenever user's XVSVault balance changes\\n     * @param user the account address whose balance was updated\\n     */\\n    function xvsUpdated(address user) external;\\n\\n    /**\\n     * @notice accrues interest and updates score for an user for a specific market\\n     * @param user the account address for which to accrue interest and update score\\n     * @param market the market for which to accrue interest and update score\\n     */\\n    function accrueInterestAndUpdateScore(address user, address market) external;\\n\\n    /**\\n     * @notice Distributes income from market since last distribution\\n     * @param vToken the market for which to distribute the income\\n     */\\n    function accrueInterest(address vToken) external;\\n\\n    /**\\n     * @notice Returns if user is a prime holder\\n     * @param isPrimeHolder returns if the user is a prime holder\\n     */\\n    function isUserPrimeHolder(address user) external view returns (bool isPrimeHolder);\\n}\\n\",\"keccak256\":\"0x566ad76b73bfe08c37ec0b06a6e3006171a47e00711270aae92356dbefc6ee73\",\"license\":\"BSD-3-Clause\"},\"contracts/Tokens/VAI/VAIControllerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.25;\\n\\nimport { VTokenInterface } from \\\"../VTokens/VTokenInterfaces.sol\\\";\\n\\ninterface VAIControllerInterface {\\n    function mintVAI(uint256 mintVAIAmount) external returns (uint256);\\n\\n    function repayVAI(uint256 amount) external returns (uint256, uint256);\\n\\n    function repayVAIBehalf(address borrower, uint256 amount) external returns (uint256, uint256);\\n\\n    function liquidateVAI(\\n        address borrower,\\n        uint256 repayAmount,\\n        VTokenInterface vTokenCollateral\\n    ) external returns (uint256, uint256);\\n\\n    function getMintableVAI(address minter) external view returns (uint256, uint256);\\n\\n    function getVAIAddress() external view returns (address);\\n\\n    function getVAIRepayAmount(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x69d2f9e13b7fbf0a29885048503642372d9ba3d37f2427d4b9cffb87eddd925b\",\"license\":\"BSD-3-Clause\"},\"contracts/Tokens/VTokens/VToken.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.25;\\n\\nimport { IAccessControlManagerV8 } from \\\"@venusprotocol/governance-contracts/contracts/Governance/IAccessControlManagerV8.sol\\\";\\nimport { IProtocolShareReserve } from \\\"../../external/IProtocolShareReserve.sol\\\";\\nimport { ComptrollerInterface, IComptroller } from \\\"../../Comptroller/ComptrollerInterface.sol\\\";\\nimport { TokenErrorReporter } from \\\"../../Utils/ErrorReporter.sol\\\";\\nimport { Exponential } from \\\"../../Utils/Exponential.sol\\\";\\nimport { InterestRateModelV8 } from \\\"../../InterestRateModels/InterestRateModelV8.sol\\\";\\nimport { VTokenInterface } from \\\"./VTokenInterfaces.sol\\\";\\nimport { IFlashLoanSimpleReceiver } from \\\"../../FlashLoan/interfaces/IFlashLoanSimpleReceiver.sol\\\";\\n\\n/**\\n * @title Venus's vToken Contract\\n * @notice Abstract base for vTokens\\n * @author Venus\\n */\\nabstract contract VToken is VTokenInterface, Exponential, TokenErrorReporter {\\n    struct MintLocalVars {\\n        MathError mathErr;\\n        uint exchangeRateMantissa;\\n        uint mintTokens;\\n        uint totalSupplyNew;\\n        uint accountTokensNew;\\n        uint actualMintAmount;\\n    }\\n\\n    struct RedeemLocalVars {\\n        MathError mathErr;\\n        uint exchangeRateMantissa;\\n        uint redeemTokens;\\n        uint redeemAmount;\\n        uint totalSupplyNew;\\n        uint accountTokensNew;\\n    }\\n\\n    struct BorrowLocalVars {\\n        MathError mathErr;\\n        uint accountBorrows;\\n        uint accountBorrowsNew;\\n        uint totalBorrowsNew;\\n    }\\n\\n    struct RepayBorrowLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint repayAmount;\\n        uint borrowerIndex;\\n        uint accountBorrows;\\n        uint accountBorrowsNew;\\n        uint totalBorrowsNew;\\n        uint actualRepayAmount;\\n    }\\n\\n    /*** Reentrancy Guard ***/\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     */\\n    modifier nonReentrant() {\\n        require(_notEntered, \\\"re-entered\\\");\\n        _notEntered = false;\\n        _;\\n        _notEntered = true; // get a gas-refund post-Istanbul\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    // @custom:event Emits Transfer event\\n    function transfer(address dst, uint256 amount) external override nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, msg.sender, dst, amount) == uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    // @custom:event Emits Transfer event\\n    function transferFrom(address src, address dst, uint256 amount) external override nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, src, dst, amount) == uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (type(uint256).max means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    // @custom:event Emits Approval event on successful approve\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\n        transferAllowances[msg.sender][spender] = amount;\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the underlying balance of the `owner`\\n     * @dev This also accrues interest in a transaction\\n     * @param owner The address of the account to query\\n     * @return The amount of underlying owned by `owner`\\n     */\\n    function balanceOfUnderlying(address owner) external override returns (uint) {\\n        Exp memory exchangeRate = Exp({ mantissa: exchangeRateCurrent() });\\n        (MathError mErr, uint balance) = mulScalarTruncate(exchangeRate, accountTokens[owner]);\\n        ensureNoMathError(mErr);\\n        return balance;\\n    }\\n\\n    /**\\n     * @notice Returns the current total borrows plus accrued interest\\n     * @return The total borrows with interest\\n     */\\n    function totalBorrowsCurrent() external override nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return totalBorrows;\\n    }\\n\\n    /**\\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\\n     * @param account The address whose balance should be calculated after updating borrowIndex\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceCurrent(address account) external override nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return borrowBalanceStored(account);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Will fail unless called by another vToken during the process of liquidation.\\n     *  Its absolutely critical to use msg.sender as the borrowed vToken and not a parameter.\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of vTokens to seize\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits Transfer event\\n    function seize(\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens\\n    ) external override nonReentrant returns (uint) {\\n        return seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\n    }\\n\\n    /**\\n     * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n     * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n     * @param newPendingAdmin New pending admin.\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits NewPendingAdmin event with old and new admin addresses\\n    function _setPendingAdmin(address payable newPendingAdmin) external override returns (uint) {\\n        // Check caller = admin\\n        ensureAdmin(msg.sender);\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n     * @dev Admin function for pending admin to accept role and update admin\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits NewAdmin event on successful acceptance\\n    // @custom:event Emits NewPendingAdmin event with null new pending admin\\n    function _acceptAdmin() external override returns (uint) {\\n        // Check caller is pendingAdmin\\n        if (msg.sender != pendingAdmin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\\n        }\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = payable(address(0));\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice accrues interest and sets a new reserve factor for the protocol using `_setReserveFactorFresh`\\n     * @dev Governor function to accrue interest and set a new reserve factor\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits NewReserveFactor event\\n    function _setReserveFactor(uint newReserveFactorMantissa_) external override nonReentrant returns (uint) {\\n        ensureAllowed(\\\"_setReserveFactor(uint256)\\\");\\n        checkAccrueInterest(FailureInfo.SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED);\\n\\n        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\\n        return _setReserveFactorFresh(newReserveFactorMantissa_);\\n    }\\n\\n    /**\\n     * @notice Sets the address of the access control manager of this contract\\n     * @dev Admin function to set the access control address\\n     * @param newAccessControlManagerAddress New address for the access control\\n     * @return uint 0=success, otherwise will revert\\n     */\\n    function setAccessControlManager(address newAccessControlManagerAddress) external returns (uint) {\\n        // Check caller is admin\\n        ensureAdmin(msg.sender);\\n\\n        ensureNonZeroAddress(newAccessControlManagerAddress);\\n\\n        emit NewAccessControlManager(accessControlManager, newAccessControlManagerAddress);\\n        accessControlManager = newAccessControlManagerAddress;\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring to protocol share reserve\\n     * @param reduceAmount_ Amount of reduction to reserves\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits ReservesReduced event\\n    function _reduceReserves(uint reduceAmount_) external virtual override nonReentrant returns (uint) {\\n        ensureAllowed(\\\"_reduceReserves(uint256)\\\");\\n        checkAccrueInterest(FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED);\\n\\n        // If reserves were reduced in accrueInterest\\n        if (reduceReservesBlockNumber == block.number) return (uint(Error.NO_ERROR));\\n        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n        return _reduceReservesFresh(reduceAmount_);\\n    }\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return The number of tokens allowed to be spent (type(uint256).max means infinite)\\n     */\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\n        return transferAllowances[owner][spender];\\n    }\\n\\n    /**\\n     * @notice Get the token balance of the `owner`\\n     * @param owner The address of the account to query\\n     * @return The number of tokens owned by `owner`\\n     */\\n    function balanceOf(address owner) external view override returns (uint256) {\\n        return accountTokens[owner];\\n    }\\n\\n    /**\\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\\n     * @dev This is used by comptroller to more efficiently perform liquidity checks.\\n     * @param account Address of the account to snapshot\\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\n     */\\n    function getAccountSnapshot(address account) external view override returns (uint, uint, uint, uint) {\\n        uint borrowBalance;\\n        uint exchangeRateMantissa;\\n\\n        MathError mErr;\\n\\n        (mErr, borrowBalance) = borrowBalanceStoredInternal(account);\\n        if (mErr != MathError.NO_ERROR) {\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\n        }\\n\\n        (mErr, exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (mErr != MathError.NO_ERROR) {\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\n        }\\n\\n        return (uint(Error.NO_ERROR), accountTokens[account], borrowBalance, exchangeRateMantissa);\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block supply interest rate for this vToken\\n     * @return The supply interest rate per block, scaled by 1e18\\n     */\\n    function supplyRatePerBlock() external view override returns (uint) {\\n        return interestRateModel.getSupplyRate(getCashPrior(), totalBorrows, totalReserves, reserveFactorMantissa);\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block borrow interest rate for this vToken\\n     * @return The borrow interest rate per block, scaled by 1e18\\n     */\\n    function borrowRatePerBlock() external view override returns (uint) {\\n        return interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, totalReserves);\\n    }\\n\\n    /**\\n     * @notice Get cash balance of this vToken in the underlying asset\\n     * @return The quantity of underlying asset owned by this contract\\n     */\\n    function getCash() external view override returns (uint) {\\n        return getCashPrior();\\n    }\\n\\n    /**\\n     * @notice Governance function to set new threshold of block difference after which funds will be sent to the protocol share reserve\\n     * @param newReduceReservesBlockDelta_ block difference value\\n     */\\n    function setReduceReservesBlockDelta(uint256 newReduceReservesBlockDelta_) external {\\n        require(newReduceReservesBlockDelta_ > 0, \\\"Invalid Input\\\");\\n        ensureAllowed(\\\"setReduceReservesBlockDelta(uint256)\\\");\\n        emit NewReduceReservesBlockDelta(reduceReservesBlockDelta, newReduceReservesBlockDelta_);\\n        reduceReservesBlockDelta = newReduceReservesBlockDelta_;\\n    }\\n\\n    /**\\n     * @notice Sets protocol share reserve contract address\\n     * @param protcolShareReserve_ The address of protocol share reserve contract\\n     */\\n    function setProtocolShareReserve(address payable protcolShareReserve_) external {\\n        // Check caller is admin\\n        ensureAdmin(msg.sender);\\n        ensureNonZeroAddress(protcolShareReserve_);\\n        emit NewProtocolShareReserve(protocolShareReserve, protcolShareReserve_);\\n        protocolShareReserve = protcolShareReserve_;\\n    }\\n\\n    /**\\n     * @notice Transfers the underlying asset to the specified address.\\n     * @dev Can only be called by the Comptroller contract. This function performs the actual transfer of the underlying\\n     *      asset by calling the `doTransferOut` internal function.\\n     * @param to The address to which the underlying asset is to be transferred.\\n     * @param amount The amount of the underlying asset to transfer.\\n     * requirements\\n     *      - The caller must be the Comptroller contract.\\n     * custom:reverts\\n     *      - Reverts with \\\"Invalid Comptroller\\\" if the caller is not the Comptroller.\\n     * custom:event Emits TransferOutUnderlying event on successful transfer of amount to receiver\\n     */\\n    function transferOutUnderlying(\\n        address payable to,\\n        uint256 amount\\n    ) external nonReentrant returns (uint256 balanceBeforeRepayFlashloan) {\\n        if (msg.sender != address(comptroller)) {\\n            revert(\\\"Invalid comptroller\\\");\\n        }\\n\\n        flashLoanAmount += amount;\\n        doTransferOut(to, amount);\\n\\n        balanceBeforeRepayFlashloan = getCashPrior();\\n        emit TransferOutUnderlying(underlying, to, amount);\\n    }\\n\\n    /**\\n     * @notice Transfers the underlying asset from the specified address.\\n     * @dev Can only be called by the Comptroller contract. This function performs the actual transfer of the underlying\\n     *      asset by calling the `doTransferIn` internal function.\\n     * @param from The address from which the underlying asset is to be transferred.\\n     * @param amount The amount of the underlying asset to transfer.\\n     * @param fee The accrued fee\\n     * @param balanceBefore Cash before transfer in\\n     * requirements\\n     *      - The caller must be the Comptroller contract.\\n     * custom:reverts\\n     *      - Reverts with \\\"Invalid Comptroller\\\" if the caller is not the Comptroller.\\n     * custom:event Emits TransferOutUnderlying event on successful transfer of amount to receiver\\n     */\\n    function transferInUnderlyingAndVerify(\\n        address payable from,\\n        uint256 amount,\\n        uint256 fee,\\n        uint256 balanceBefore\\n    ) external nonReentrant {\\n        if (msg.sender != address(comptroller)) {\\n            revert(\\\"Invalid comptroller\\\");\\n        }\\n\\n        uint256 repayment = amount + fee;\\n        doTransferIn(from, repayment);\\n        flashLoanAmount -= amount;\\n\\n        if ((getCashPrior() - balanceBefore) < repayment) revert InsufficientRepaymentBalance();\\n\\n        emit TransferInUnderlyingAndVerify(underlying, from, repayment);\\n    }\\n\\n    /**\\n     * @notice Executes a flashLoan operation.\\n     * @dev Transfers the amount to the receiver contract and ensures that the total repayment (amount + fee)\\n     *      is returned by the receiver contract after the operation. The function performs checks to ensure the validity\\n     *      of parameters, that flashLoan is enabled for the given asset, and that the total repayment is sufficient.\\n     *      Reverts on invalid parameters, disabled flashLoans, or insufficient repayment.\\n     * @param initiator The address that initiated the flash loan.\\n     * @param receiver The address of the contract that will receive the flashLoan and execute the operation.\\n     * @param amount The amount of asset to be loaned.\\n     * @param param Additional encoded parameters passed with the flash loan.\\n     * custom:requirements\\n     *      - The `receiver` address must not be the zero address.\\n     *      - FlashLoans must be enabled for the asset.\\n     *      - The `receiver` contract must repay the loan with the appropriate fee.\\n     * custom:reverts\\n     *      - Reverts with `Flash loan not authorized for this account` if the initiator is not authorized for flash loans.\\n     *      - Reverts with `FlashLoan not enabled` if flashLoans are disabled for any of the requested assets.\\n     *      - Reverts with `Execute flashLoan failed` if the receiver contract fails to execute the operation.\\n     *      - Reverts with `Insufficient repayment balance` if the repayment (amount + fee) is insufficient after the operation.\\n     * custom:event Emits FlashLoanExecuted event on success\\n     */\\n    function executeFlashLoan(\\n        address initiator,\\n        address payable receiver,\\n        uint256 amount,\\n        bytes calldata param\\n    ) external nonReentrant returns (uint256) {\\n        if (!isFlashLoanEnabled) revert FlashLoanNotEnabled();\\n        ensureNonZeroAddress(receiver);\\n\\n        // Check if the caller is authorized to execute flash loans\\n        if (!comptroller.authorizedFlashLoan(initiator)) revert FlashLoanNotAuthorized();\\n\\n        // Tracks the flashLoan amount before transferring amount to the receiver\\n        flashLoanAmount += amount;\\n\\n        // Transfer the underlying asset to the receiver\\n        doTransferOut(receiver, amount);\\n\\n        uint256 balanceBefore = getCashPrior();\\n        (uint256 protocolFee, uint256 supplierFee) = calculateFlashLoanFee(amount);\\n        uint256 fee = protocolFee + supplierFee;\\n        uint256 repayAmount = amount + fee;\\n\\n        // Call the execute operation on receiver contract\\n        if (!IFlashLoanSimpleReceiver(receiver).executeOperation(underlying, amount, fee, msg.sender, param))\\n            revert ExecuteFlashLoanFailed();\\n\\n        doTransferIn(receiver, repayAmount);\\n        flashLoanAmount -= amount;\\n\\n        if ((getCashPrior() - balanceBefore) < repayAmount) revert InsufficientRepaymentBalance();\\n\\n        // Transfer protocol fee to protocol share reserve\\n        doTransferOut(protocolShareReserve, protocolFee);\\n\\n        IProtocolShareReserve(protocolShareReserve).updateAssetsState(\\n            address(comptroller),\\n            underlying,\\n            IProtocolShareReserve.IncomeType.FLASHLOAN\\n        );\\n\\n        emit FlashLoanExecuted(receiver, underlying, amount);\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Enable or disable flash loan for the market\\n     * custom:access Only Governance\\n     * custom:event Emits ToggleFlashLoanEnabled event on success\\n     */\\n    function _toggleFlashLoan() external returns (uint256) {\\n        ensureAllowed(\\\"_toggleFlashLoan()\\\");\\n        isFlashLoanEnabled = !isFlashLoanEnabled;\\n\\n        emit ToggleFlashLoanEnabled(!isFlashLoanEnabled, isFlashLoanEnabled);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Update flashLoan fee mantissa\\n     * @param protocolFeeMantissa_ FlashLoan protocol fee mantissa, transferred to protocol share reserve\\n     * @param supplierFeeMantissa_ FlashLoan supplier fee mantissa, transferred to the supplier of the asset\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     * custom:access Only Governance\\n     * custom:event Emits FlashLoanFeeUpdated event on success\\n     */\\n    function _setFlashLoanFeeMantissa(\\n        uint256 protocolFeeMantissa_,\\n        uint256 supplierFeeMantissa_\\n    ) external returns (uint256) {\\n        // update the signature\\n        ensureAllowed(\\\"_setFlashLoanFeeMantissa(uint256,uint256)\\\");\\n\\n        emit FlashLoanFeeUpdated(\\n            flashLoanProtocolFeeMantissa,\\n            protocolFeeMantissa_,\\n            flashLoanSupplierFeeMantissa,\\n            supplierFeeMantissa_\\n        );\\n        flashLoanProtocolFeeMantissa = protocolFeeMantissa_;\\n        flashLoanSupplierFeeMantissa = supplierFeeMantissa_;\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Initialize the money market\\n     * @param comptroller_ The address of the Comptroller\\n     * @param interestRateModel_ The address of the interest rate model\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n     * @param name_ EIP-20 name of this token\\n     * @param symbol_ EIP-20 symbol of this token\\n     * @param decimals_ EIP-20 decimal precision of this token\\n     */\\n    function initialize(\\n        ComptrollerInterface comptroller_,\\n        InterestRateModelV8 interestRateModel_,\\n        uint initialExchangeRateMantissa_,\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) public {\\n        ensureAdmin(msg.sender);\\n        require(\\n            accrualBlockNumber == 0 && borrowIndex == 0 && (initialExchangeRateMantissa_ > 0),\\n            \\\"market may only be initialized once\\\"\\n        );\\n\\n        // Set initial exchange rate\\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\\n\\n        // Set the comptroller\\n        uint ComptrollerErr = _setComptroller(comptroller_);\\n\\n        // Initialize block number and borrow index (block number mocks depend on comptroller being set)\\n        accrualBlockNumber = block.number;\\n        borrowIndex = mantissaOne;\\n\\n        // Set the interest rate model (depends on block number / borrow index)\\n        uint InterestModelErr = _setInterestRateModelFresh(interestRateModel_);\\n        require(\\n            (ComptrollerErr == uint(Error.NO_ERROR)) && (InterestModelErr == uint(Error.NO_ERROR)),\\n            \\\"comptroller or interest model initialization failed\\\"\\n        );\\n\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = decimals_;\\n\\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @notice Accrue interest then return the up-to-date exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateCurrent() public override nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return exchangeRateStored();\\n    }\\n\\n    /**\\n     * @notice Applies accrued interest to total borrows and reserves\\n     * @dev This calculates interest accrued from the last checkpointed block\\n     * up to the current block and writes new checkpoint to storage and\\n     * reduce spread reserves to protocol share reserve\\n     * if currentBlock - reduceReservesBlockNumber >= blockDelta\\n     */\\n    // @custom:event Emits AccrueInterest event\\n    function accrueInterest() public virtual override returns (uint) {\\n        /* Remember the initial block number */\\n        uint currentBlockNumber = block.number;\\n        uint accrualBlockNumberPrior = accrualBlockNumber;\\n\\n        /* Short-circuit accumulating 0 interest */\\n        if (accrualBlockNumberPrior == currentBlockNumber) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        /* Read the previous values out of storage */\\n        uint cashPrior = getCashPrior();\\n        uint borrowsPrior = totalBorrows;\\n        uint reservesPrior = totalReserves;\\n        uint borrowIndexPrior = borrowIndex;\\n\\n        /* Calculate the current borrow interest rate */\\n        uint borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior, borrowsPrior, reservesPrior);\\n        require(borrowRateMantissa <= borrowRateMaxMantissa, \\\"borrow rate is absurdly high\\\");\\n\\n        /* Calculate the number of blocks elapsed since the last accrual */\\n        (MathError mathErr, uint blockDelta) = subUInt(currentBlockNumber, accrualBlockNumberPrior);\\n        ensureNoMathError(mathErr);\\n\\n        /*\\n         * Calculate the interest accumulated into borrows and reserves and the new index:\\n         *  simpleInterestFactor = borrowRate * blockDelta\\n         *  interestAccumulated = simpleInterestFactor * totalBorrows\\n         *  totalBorrowsNew = interestAccumulated + totalBorrows\\n         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\\n         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\\n         */\\n\\n        Exp memory simpleInterestFactor;\\n        uint interestAccumulated;\\n        uint totalBorrowsNew;\\n        uint totalReservesNew;\\n        uint borrowIndexNew;\\n\\n        (mathErr, simpleInterestFactor) = mulScalar(Exp({ mantissa: borrowRateMantissa }), blockDelta);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\\n                    uint(mathErr)\\n                );\\n        }\\n\\n        (mathErr, interestAccumulated) = mulScalarTruncate(simpleInterestFactor, borrowsPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\\n                    uint(mathErr)\\n                );\\n        }\\n\\n        (mathErr, totalBorrowsNew) = addUInt(interestAccumulated, borrowsPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\\n                    uint(mathErr)\\n                );\\n        }\\n\\n        (mathErr, totalReservesNew) = mulScalarTruncateAddUInt(\\n            Exp({ mantissa: reserveFactorMantissa }),\\n            interestAccumulated,\\n            reservesPrior\\n        );\\n        if (mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\\n                    uint(mathErr)\\n                );\\n        }\\n\\n        (mathErr, borrowIndexNew) = mulScalarTruncateAddUInt(simpleInterestFactor, borrowIndexPrior, borrowIndexPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\\n                    uint(mathErr)\\n                );\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accrualBlockNumber = currentBlockNumber;\\n        borrowIndex = borrowIndexNew;\\n        totalBorrows = totalBorrowsNew;\\n        totalReserves = totalReservesNew;\\n\\n        (mathErr, blockDelta) = subUInt(currentBlockNumber, reduceReservesBlockNumber);\\n        ensureNoMathError(mathErr);\\n        if (blockDelta >= reduceReservesBlockDelta) {\\n            reduceReservesBlockNumber = currentBlockNumber;\\n            if (cashPrior < totalReservesNew) {\\n                _reduceReservesFresh(cashPrior);\\n            } else {\\n                _reduceReservesFresh(totalReservesNew);\\n            }\\n        }\\n\\n        /* We emit an AccrueInterest event */\\n        emit AccrueInterest(cashPrior, interestAccumulated, borrowIndexNew, totalBorrowsNew);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets a new comptroller for the market\\n     * @dev Admin function to set a new comptroller\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits NewComptroller event\\n    function _setComptroller(ComptrollerInterface newComptroller) public override returns (uint) {\\n        // Check caller is admin\\n        ensureAdmin(msg.sender);\\n\\n        // Ensure invoke comptroller.isComptroller() returns true\\n        require(newComptroller.isComptroller(), \\\"marker method returned false\\\");\\n\\n        // Emit NewComptroller(oldComptroller, newComptroller)\\n        emit NewComptroller(comptroller, newComptroller);\\n\\n        // Set market's comptroller to newComptroller\\n        comptroller = newComptroller;\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and updates the interest rate model using _setInterestRateModelFresh\\n     * @dev Governance function to accrue interest and update the interest rate model\\n     * @param newInterestRateModel_ The new interest rate model to use\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function _setInterestRateModel(InterestRateModelV8 newInterestRateModel_) public override returns (uint) {\\n        ensureAllowed(\\\"_setInterestRateModel(address)\\\");\\n        checkAccrueInterest(FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED);\\n\\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\\n        return _setInterestRateModelFresh(newInterestRateModel_);\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the VToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStored() public view override returns (uint) {\\n        (MathError err, uint result) = exchangeRateStoredInternal();\\n        ensureNoMathError(err);\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceStored(address account) public view override returns (uint) {\\n        (MathError err, uint result) = borrowBalanceStoredInternal(account);\\n        ensureNoMathError(err);\\n        return result;\\n    }\\n\\n    /**\\n     * @notice open a debt position for the borrower\\n     * @param borrower The address of the borrower\\n     * @param borrowAmount The amount of underlying asset to borrow\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     * @dev This function checks if the borrow is allowed, accrues interest, and updates the borrower's balance.\\n     *      It also emits a Borrow event and calls the comptroller's borrowVerify function.\\n     *      It reverts if the borrow is not allowed, if the market's block number is not current, or if the protocol has insufficient cash.\\n     */\\n    function borrowDebtPosition(address borrower, uint borrowAmount) external override returns (uint256) {\\n        /* Revert if borrow not allowed */\\n        uint allowed = comptroller.borrowAllowed(address(this), borrower, borrowAmount);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.BORROW_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != block.number) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.BORROW_FRESHNESS_CHECK);\\n        }\\n\\n        /* Revert if protocol has insufficient underlying cash */\\n        if (getCashPrior() < borrowAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.BORROW_CASH_NOT_AVAILABLE);\\n        }\\n\\n        BorrowLocalVars memory vars;\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on overflow:\\n         *  accountBorrowsNew = accountBorrows + borrowAmount\\n         *  totalBorrowsNew = totalBorrows + borrowAmount\\n         */\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n        ensureNoMathError(vars.mathErr);\\n\\n        (vars.mathErr, vars.accountBorrowsNew) = addUInt(vars.accountBorrows, borrowAmount);\\n        ensureNoMathError(vars.mathErr);\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = addUInt(totalBorrows, borrowAmount);\\n        ensureNoMathError(vars.mathErr);\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /* We emit a Borrow event */\\n        emit Borrow(borrower, borrowAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense and prime accrue interest hook */\\n        comptroller.borrowVerify(address(this), borrower, borrowAmount);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Calculates the protocol fee and supplier fee for a flash loan.\\n     * @param amount The amount of the flash loan.\\n     * @return protocolFee The portion of the fee allocated to the protocol.\\n     * @return supplierFee The portion of the fee allocated to the supplier.\\n     * @dev This function reverts if flash loans are not enabled.\\n     */\\n    function calculateFlashLoanFee(uint256 amount) public view returns (uint256, uint256) {\\n        MathError mErr;\\n        uint256 protocolFee;\\n        uint256 supplierFee;\\n\\n        (mErr, protocolFee) = mulScalarTruncate(Exp({ mantissa: amount }), flashLoanProtocolFeeMantissa);\\n        ensureNoMathError(mErr);\\n\\n        (mErr, supplierFee) = mulScalarTruncate(Exp({ mantissa: amount }), flashLoanSupplierFeeMantissa);\\n        ensureNoMathError(mErr);\\n\\n        return (protocolFee, supplierFee);\\n    }\\n\\n    /**\\n     * @notice Transfers `tokens` tokens from `src` to `dst` by `spender`\\n     * @dev Called by both `transfer` and `transferFrom` internally\\n     * @param spender The address of the account performing the transfer\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param tokens The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferTokens(address spender, address src, address dst, uint tokens) internal returns (uint) {\\n        /* Fail if transfer not allowed */\\n        uint allowed = comptroller.transferAllowed(address(this), src, dst, tokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.TRANSFER_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Do not allow self-transfers */\\n        if (src == dst) {\\n            return fail(Error.BAD_INPUT, FailureInfo.TRANSFER_NOT_ALLOWED);\\n        }\\n\\n        /* Get the allowance, infinite for the account owner */\\n        uint startingAllowance = 0;\\n        if (spender == src) {\\n            startingAllowance = type(uint256).max;\\n        } else {\\n            startingAllowance = transferAllowances[src][spender];\\n        }\\n\\n        /* Do the calculations, checking for {under,over}flow */\\n        MathError mathErr;\\n        uint allowanceNew;\\n        uint srvTokensNew;\\n        uint dstTokensNew;\\n\\n        (mathErr, allowanceNew) = subUInt(startingAllowance, tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ALLOWED);\\n        }\\n\\n        (mathErr, srvTokensNew) = subUInt(accountTokens[src], tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ENOUGH);\\n        }\\n\\n        (mathErr, dstTokensNew) = addUInt(accountTokens[dst], tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_TOO_MUCH);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        accountTokens[src] = srvTokensNew;\\n        accountTokens[dst] = dstTokensNew;\\n\\n        /* Eat some of the allowance (if necessary) */\\n        if (startingAllowance != type(uint256).max) {\\n            transferAllowances[src][spender] = allowanceNew;\\n        }\\n\\n        /* We emit a Transfer event */\\n        emit Transfer(src, dst, tokens);\\n\\n        comptroller.transferVerify(address(this), src, dst, tokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receives vTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintInternal(uint mintAmount) internal nonReentrant returns (uint, uint) {\\n        checkAccrueInterest(FailureInfo.MINT_ACCRUE_INTEREST_FAILED);\\n\\n        // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\n        return mintFresh(msg.sender, mintAmount);\\n    }\\n\\n    /**\\n     * @notice User supplies assets into the market and receives vTokens in exchange\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param minter The address of the account which is supplying the assets\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintFresh(address minter, uint mintAmount) internal returns (uint, uint) {\\n        /* Fail if mint not allowed */\\n        uint allowed = comptroller.mintAllowed(address(this), minter, mintAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != block.number) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK), 0);\\n        }\\n\\n        MintLocalVars memory vars;\\n\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr)), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         *  We call `doTransferIn` for the minter and the mintAmount.\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\n         *  side-effects occurred. The function returns the amount actually transferred,\\n         *  in case of a fee. On success, the vToken holds an additional `actualMintAmount`\\n         *  of cash.\\n         */\\n        vars.actualMintAmount = doTransferIn(minter, mintAmount);\\n\\n        /*\\n         * We get the current exchange rate and calculate the number of vTokens to be minted:\\n         *  mintTokens = actualMintAmount / exchangeRate\\n         */\\n\\n        (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(\\n            vars.actualMintAmount,\\n            Exp({ mantissa: vars.exchangeRateMantissa })\\n        );\\n        ensureNoMathError(vars.mathErr);\\n\\n        /*\\n         * We calculate the new total supply of vTokens and minter token balance, checking for overflow:\\n         *  totalSupplyNew = totalSupply + mintTokens\\n         *  accountTokensNew = accountTokens[minter] + mintTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = addUInt(totalSupply, vars.mintTokens);\\n        ensureNoMathError(vars.mathErr);\\n        (vars.mathErr, vars.accountTokensNew) = addUInt(accountTokens[minter], vars.mintTokens);\\n        ensureNoMathError(vars.mathErr);\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[minter] = vars.accountTokensNew;\\n\\n        /* We emit a Mint event, and a Transfer event */\\n        emit Mint(minter, vars.actualMintAmount, vars.mintTokens, vars.accountTokensNew);\\n        emit Transfer(address(this), minter, vars.mintTokens);\\n\\n        /* We call the defense and prime accrue interest hook */\\n        comptroller.mintVerify(address(this), minter, vars.actualMintAmount, vars.mintTokens);\\n\\n        return (uint(Error.NO_ERROR), vars.actualMintAmount);\\n    }\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receiver receives vTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param receiver The address of the account which is receiving the vTokens\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintBehalfInternal(address receiver, uint mintAmount) internal nonReentrant returns (uint, uint) {\\n        checkAccrueInterest(FailureInfo.MINT_ACCRUE_INTEREST_FAILED);\\n\\n        // mintBelahfFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\n        return mintBehalfFresh(msg.sender, receiver, mintAmount);\\n    }\\n\\n    /**\\n     * @notice Payer supplies assets into the market and receiver receives vTokens in exchange\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param payer The address of the account which is paying the underlying token\\n     * @param receiver The address of the account which is receiving vToken\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintBehalfFresh(address payer, address receiver, uint mintAmount) internal returns (uint, uint) {\\n        ensureNonZeroAddress(receiver);\\n        /* Fail if mint not allowed */\\n        uint allowed = comptroller.mintAllowed(address(this), receiver, mintAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != block.number) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK), 0);\\n        }\\n\\n        MintLocalVars memory vars;\\n\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr)), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         *  We call `doTransferIn` for the payer and the mintAmount.\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\n         *  side-effects occurred. The function returns the amount actually transferred,\\n         *  in case of a fee. On success, the vToken holds an additional `actualMintAmount`\\n         *  of cash.\\n         */\\n        vars.actualMintAmount = doTransferIn(payer, mintAmount);\\n\\n        /*\\n         * We get the current exchange rate and calculate the number of vTokens to be minted:\\n         *  mintTokens = actualMintAmount / exchangeRate\\n         */\\n\\n        (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(\\n            vars.actualMintAmount,\\n            Exp({ mantissa: vars.exchangeRateMantissa })\\n        );\\n        ensureNoMathError(vars.mathErr);\\n\\n        /*\\n         * We calculate the new total supply of vTokens and receiver token balance, checking for overflow:\\n         *  totalSupplyNew = totalSupply + mintTokens\\n         *  accountTokensNew = accountTokens[receiver] + mintTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = addUInt(totalSupply, vars.mintTokens);\\n        ensureNoMathError(vars.mathErr);\\n\\n        (vars.mathErr, vars.accountTokensNew) = addUInt(accountTokens[receiver], vars.mintTokens);\\n        ensureNoMathError(vars.mathErr);\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[receiver] = vars.accountTokensNew;\\n\\n        /* We emit a MintBehalf event, and a Transfer event */\\n        emit MintBehalf(payer, receiver, vars.actualMintAmount, vars.mintTokens, vars.accountTokensNew);\\n        emit Transfer(address(this), receiver, vars.mintTokens);\\n\\n        /* We call the defense and prime accrue interest hook */\\n        comptroller.mintVerify(address(this), receiver, vars.actualMintAmount, vars.mintTokens);\\n\\n        return (uint(Error.NO_ERROR), vars.actualMintAmount);\\n    }\\n\\n    /**\\n     * @notice Redeemer redeems vTokens in exchange for the underlying assets, transferred to the receiver. Redeemer and receiver can be the same\\n     *   address, or different addresses if the receiver was previously approved by the redeemer as a valid delegate (see MarketFacet.updateDelegate)\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemer The address of the account which is redeeming the tokens\\n     * @param receiver The receiver of the tokens\\n     * @param redeemTokens The number of vTokens to redeem into underlying\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function redeemInternal(\\n        address redeemer,\\n        address payable receiver,\\n        uint redeemTokens\\n    ) internal nonReentrant returns (uint) {\\n        checkAccrueInterest(FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(redeemer, receiver, redeemTokens, 0);\\n    }\\n\\n    /**\\n     * @notice Sender redeems underlying assets on behalf of some other address. This function is only available\\n     *   for senders, explicitly marked as delegates of the supplier using `comptroller.updateDelegate`\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemer The address of the account which is redeeming the tokens\\n     * @param receiver The receiver of the tokens, if called by a delegate\\n     * @param redeemAmount The amount of underlying to receive from redeeming vTokens\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function redeemUnderlyingInternal(\\n        address redeemer,\\n        address payable receiver,\\n        uint redeemAmount\\n    ) internal nonReentrant returns (uint) {\\n        checkAccrueInterest(FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(redeemer, receiver, 0, redeemAmount);\\n    }\\n\\n    /**\\n     * @notice Redeemer redeems vTokens in exchange for the underlying assets, transferred to the receiver. Redeemer and receiver can be the same\\n     *   address, or different addresses if the receiver was previously approved by the redeemer as a valid delegate (see MarketFacet.updateDelegate)\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param redeemer The address of the account which is redeeming the tokens\\n     * @param receiver The receiver of the tokens\\n     * @param redeemTokensIn The number of vTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @param redeemAmountIn The number of underlying tokens to receive from redeeming vTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // solhint-disable-next-line code-complexity\\n    function redeemFresh(\\n        address redeemer,\\n        address payable receiver,\\n        uint redeemTokensIn,\\n        uint redeemAmountIn\\n    ) internal returns (uint) {\\n        require(redeemTokensIn == 0 || redeemAmountIn == 0, \\\"one of redeemTokensIn or redeemAmountIn must be zero\\\");\\n\\n        RedeemLocalVars memory vars;\\n\\n        /* exchangeRate = invoke Exchange Rate Stored() */\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        ensureNoMathError(vars.mathErr);\\n\\n        /* If redeemTokensIn > 0: */\\n        if (redeemTokensIn > 0) {\\n            /*\\n             * We calculate the exchange rate and the amount of underlying to be redeemed:\\n             *  redeemTokens = redeemTokensIn\\n             *  redeemAmount = redeemTokensIn x exchangeRateCurrent\\n             */\\n            vars.redeemTokens = redeemTokensIn;\\n\\n            (vars.mathErr, vars.redeemAmount) = mulScalarTruncate(\\n                Exp({ mantissa: vars.exchangeRateMantissa }),\\n                redeemTokensIn\\n            );\\n            ensureNoMathError(vars.mathErr);\\n        } else {\\n            /*\\n             * We get the current exchange rate and calculate the amount to be redeemed:\\n             *  redeemTokens = redeemAmountIn / exchangeRate\\n             *  redeemAmount = redeemAmountIn\\n             */\\n\\n            (vars.mathErr, vars.redeemTokens) = divScalarByExpTruncate(\\n                redeemAmountIn,\\n                Exp({ mantissa: vars.exchangeRateMantissa })\\n            );\\n            ensureNoMathError(vars.mathErr);\\n\\n            vars.redeemAmount = redeemAmountIn;\\n        }\\n\\n        /* Fail if redeem not allowed */\\n        uint allowed = comptroller.redeemAllowed(address(this), redeemer, vars.redeemTokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REDEEM_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != block.number) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDEEM_FRESHNESS_CHECK);\\n        }\\n\\n        /*\\n         * We calculate the new total supply and redeemer balance, checking for underflow:\\n         *  totalSupplyNew = totalSupply - redeemTokens\\n         *  accountTokensNew = accountTokens[redeemer] - redeemTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = subUInt(totalSupply, vars.redeemTokens);\\n        ensureNoMathError(vars.mathErr);\\n\\n        (vars.mathErr, vars.accountTokensNew) = subUInt(accountTokens[redeemer], vars.redeemTokens);\\n        ensureNoMathError(vars.mathErr);\\n\\n        /* Fail gracefully if protocol has insufficient cash */\\n        if (getCashPrior() < vars.redeemAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDEEM_CASH_NOT_AVAILABLE);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[redeemer] = vars.accountTokensNew;\\n\\n        /*\\n         * We invoke doTransferOut for the receiver and the redeemAmount.\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\n         *  On success, the vToken has redeemAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n\\n        uint feeAmount;\\n        uint remainedAmount;\\n        if (IComptroller(address(comptroller)).treasuryPercent() != 0) {\\n            (vars.mathErr, feeAmount) = mulUInt(\\n                vars.redeemAmount,\\n                IComptroller(address(comptroller)).treasuryPercent()\\n            );\\n            ensureNoMathError(vars.mathErr);\\n\\n            (vars.mathErr, feeAmount) = divUInt(feeAmount, 1e18);\\n            ensureNoMathError(vars.mathErr);\\n\\n            (vars.mathErr, remainedAmount) = subUInt(vars.redeemAmount, feeAmount);\\n            ensureNoMathError(vars.mathErr);\\n\\n            address payable treasuryAddress = payable(IComptroller(address(comptroller)).treasuryAddress());\\n            doTransferOut(treasuryAddress, feeAmount);\\n\\n            emit RedeemFee(redeemer, feeAmount, vars.redeemTokens);\\n        } else {\\n            remainedAmount = vars.redeemAmount;\\n        }\\n\\n        doTransferOut(receiver, remainedAmount);\\n\\n        /* We emit a Transfer event, and a Redeem event */\\n        emit Transfer(redeemer, address(this), vars.redeemTokens);\\n        emit Redeem(redeemer, remainedAmount, vars.redeemTokens, vars.accountTokensNew);\\n\\n        /* We call the defense and prime accrue interest hook */\\n        comptroller.redeemVerify(address(this), redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Receiver gets the borrow on behalf of the borrower address\\n     * @param borrower The borrower, on behalf of whom to borrow\\n     * @param receiver The account that would receive the funds (can be the same as the borrower)\\n     * @param borrowAmount The amount of the underlying asset to borrow\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function borrowInternal(\\n        address borrower,\\n        address payable receiver,\\n        uint borrowAmount\\n    ) internal nonReentrant returns (uint) {\\n        checkAccrueInterest(FailureInfo.BORROW_ACCRUE_INTEREST_FAILED);\\n\\n        // borrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return borrowFresh(borrower, receiver, borrowAmount);\\n    }\\n\\n    /**\\n     * @notice Receiver gets the borrow on behalf of the borrower address\\n     * @dev Before calling this function, ensure that the interest has been accrued\\n     * @param borrower The borrower, on behalf of whom to borrow\\n     * @param receiver The account that would receive the funds (can be the same as the borrower)\\n     * @param borrowAmount The amount of the underlying asset to borrow\\n     * @return uint Returns 0 on success, otherwise revert (see ErrorReporter.sol for details).\\n     */\\n    function borrowFresh(address borrower, address payable receiver, uint borrowAmount) internal returns (uint) {\\n        /* Revert if borrow not allowed */\\n        uint allowed = comptroller.borrowAllowed(address(this), borrower, borrowAmount);\\n\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.BORROW_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != block.number) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.BORROW_FRESHNESS_CHECK);\\n        }\\n\\n        /* Revert if protocol has insufficient underlying cash */\\n        if (getCashPrior() < borrowAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.BORROW_CASH_NOT_AVAILABLE);\\n        }\\n\\n        BorrowLocalVars memory vars;\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on overflow:\\n         *  accountBorrowsNew = accountBorrows + borrowAmount\\n         *  totalBorrowsNew = totalBorrows + borrowAmount\\n         */\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n        ensureNoMathError(vars.mathErr);\\n\\n        (vars.mathErr, vars.accountBorrowsNew) = addUInt(vars.accountBorrows, borrowAmount);\\n        ensureNoMathError(vars.mathErr);\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = addUInt(totalBorrows, borrowAmount);\\n        ensureNoMathError(vars.mathErr);\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /*\\n         * We invoke doTransferOut for the receiver and the borrowAmount.\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\n         *  On success, the vToken borrowAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(receiver, borrowAmount);\\n\\n        /* We emit a Borrow event */\\n        emit Borrow(borrower, borrowAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense and prime accrue interest hook */\\n        comptroller.borrowVerify(address(this), borrower, borrowAmount);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender repays their own borrow\\n     * @param repayAmount The amount to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowInternal(uint repayAmount) internal nonReentrant returns (uint, uint) {\\n        checkAccrueInterest(FailureInfo.REPAY_BORROW_ACCRUE_INTEREST_FAILED);\\n\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        return repayBorrowFresh(msg.sender, msg.sender, repayAmount);\\n    }\\n\\n    /**\\n     * @notice Sender repays a borrow belonging to another borrowing account\\n     * @param borrower The account with the debt being payed off\\n     * @param repayAmount The amount to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowBehalfInternal(address borrower, uint repayAmount) internal nonReentrant returns (uint, uint) {\\n        checkAccrueInterest(FailureInfo.REPAY_BEHALF_ACCRUE_INTEREST_FAILED);\\n\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        return repayBorrowFresh(msg.sender, borrower, repayAmount);\\n    }\\n\\n    /**\\n     * @notice Borrows are repaid by another user (possibly the borrower).\\n     * @param payer The account paying off the borrow\\n     * @param borrower The account with the debt being payed off\\n     * @param repayAmount The amount of undelrying tokens being returned\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowFresh(address payer, address borrower, uint repayAmount) internal returns (uint, uint) {\\n        /* Fail if repayBorrow not allowed */\\n        uint allowed = comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount);\\n        if (allowed != 0) {\\n            return (\\n                failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION, allowed),\\n                0\\n            );\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != block.number) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.REPAY_BORROW_FRESHNESS_CHECK), 0);\\n        }\\n\\n        RepayBorrowLocalVars memory vars;\\n\\n        /* We remember the original borrowerIndex for verification purposes */\\n        vars.borrowerIndex = accountBorrows[borrower].interestIndex;\\n\\n        /* We fetch the amount the borrower owes, with accumulated interest */\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n        ensureNoMathError(vars.mathErr);\\n\\n        /* If repayAmount == type(uint256).max, repayAmount = accountBorrows */\\n        if (repayAmount == type(uint256).max) {\\n            vars.repayAmount = vars.accountBorrows;\\n        } else {\\n            vars.repayAmount = repayAmount;\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the payer and the repayAmount\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\n         *  On success, the vToken holds an additional repayAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *   it returns the amount actually transferred, in case of a fee.\\n         */\\n        vars.actualRepayAmount = doTransferIn(payer, vars.repayAmount);\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on underflow:\\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\\n         */\\n        (vars.mathErr, vars.accountBorrowsNew) = subUInt(vars.accountBorrows, vars.actualRepayAmount);\\n        ensureNoMathError(vars.mathErr);\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = subUInt(totalBorrows, vars.actualRepayAmount);\\n        ensureNoMathError(vars.mathErr);\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /* We emit a RepayBorrow event */\\n        emit RepayBorrow(payer, borrower, vars.actualRepayAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense and prime accrue interest hook */\\n        comptroller.repayBorrowVerify(address(this), payer, borrower, vars.actualRepayAmount, vars.borrowerIndex);\\n\\n        return (uint(Error.NO_ERROR), vars.actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice The sender liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this vToken to be liquidated\\n     * @param vTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateBorrowInternal(\\n        address borrower,\\n        uint repayAmount,\\n        VTokenInterface vTokenCollateral\\n    ) internal nonReentrant returns (uint, uint) {\\n        checkAccrueInterest(FailureInfo.LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED);\\n\\n        uint error = vTokenCollateral.accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED), 0);\\n        }\\n\\n        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return liquidateBorrowFresh(msg.sender, borrower, repayAmount, vTokenCollateral);\\n    }\\n\\n    /**\\n     * @notice The liquidator liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this vToken to be liquidated\\n     * @param liquidator The address repaying the borrow and seizing collateral\\n     * @param vTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    // solhint-disable-next-line code-complexity\\n    function liquidateBorrowFresh(\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        VTokenInterface vTokenCollateral\\n    ) internal returns (uint, uint) {\\n        /* Fail if liquidate not allowed */\\n        uint allowed = comptroller.liquidateBorrowAllowed(\\n            address(this),\\n            address(vTokenCollateral),\\n            liquidator,\\n            borrower,\\n            repayAmount\\n        );\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != block.number) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_FRESHNESS_CHECK), 0);\\n        }\\n\\n        /* Verify vTokenCollateral market's block number equals current block number */\\n        if (vTokenCollateral.accrualBlockNumber() != block.number) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK), 0);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            return (fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER), 0);\\n        }\\n\\n        /* Fail if repayAmount = 0 */\\n        if (repayAmount == 0) {\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO), 0);\\n        }\\n\\n        /* Fail if repayAmount = type(uint256).max */\\n        if (repayAmount == type(uint256).max) {\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX), 0);\\n        }\\n\\n        /* Fail if repayBorrow fails */\\n        uint err;\\n        uint actualRepayAmount;\\n        (err, actualRepayAmount) = repayBorrowFresh(liquidator, borrower, repayAmount);\\n        if (err != uint(Error.NO_ERROR)) {\\n            return (fail(Error(err), FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We calculate the number of collateral tokens that will be seized */\\n        (, uint seizeTokens) = comptroller.liquidateCalculateSeizeTokens(\\n            borrower,\\n            address(this),\\n            address(vTokenCollateral),\\n            actualRepayAmount\\n        );\\n\\n        require(\\n            (err == uint(Error.NO_ERROR)) && (vTokenCollateral.balanceOf(borrower) >= seizeTokens),\\n            \\\"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED or LIQUIDATE_SEIZE_TOO_MUCH\\\"\\n        );\\n\\n        // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\n        if (address(vTokenCollateral) == address(this)) {\\n            err = seizeInternal(address(this), liquidator, borrower, seizeTokens);\\n        } else {\\n            err = vTokenCollateral.seize(liquidator, borrower, seizeTokens);\\n        }\\n\\n        /* Revert if seize tokens fails (since we cannot be sure of side effects) */\\n        require(err == uint(Error.NO_ERROR), \\\"token seizure failed\\\");\\n\\n        /* We emit a LiquidateBorrow event */\\n        emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, address(vTokenCollateral), seizeTokens);\\n\\n        /* We call the defense and prime accrue interest hook */\\n        comptroller.liquidateBorrowVerify(\\n            address(this),\\n            address(vTokenCollateral),\\n            liquidator,\\n            borrower,\\n            actualRepayAmount,\\n            seizeTokens\\n        );\\n\\n        return (uint(Error.NO_ERROR), actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another vToken.\\n     *  Its absolutely critical to use msg.sender as the seizer vToken and not a parameter.\\n     * @param seizerToken The contract seizing the collateral (i.e. borrowed vToken)\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of vTokens to seize\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function seizeInternal(\\n        address seizerToken,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens\\n    ) internal returns (uint) {\\n        /* Fail if seize not allowed */\\n        uint allowed = comptroller.seizeAllowed(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_SEIZE_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            return fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER);\\n        }\\n\\n        MathError mathErr;\\n        uint borrowerTokensNew;\\n        uint liquidatorTokensNew;\\n\\n        /*\\n         * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\\n         *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\\n         *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\\n         */\\n        (mathErr, borrowerTokensNew) = subUInt(accountTokens[borrower], seizeTokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, liquidatorTokensNew) = addUInt(accountTokens[liquidator], seizeTokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED, uint(mathErr));\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accountTokens[borrower] = borrowerTokensNew;\\n        accountTokens[liquidator] = liquidatorTokensNew;\\n\\n        /* Emit a Transfer event */\\n        emit Transfer(borrower, liquidator, seizeTokens);\\n\\n        /* We call the defense and prime accrue interest hook */\\n        comptroller.seizeVerify(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets a new reserve factor for the protocol (requires fresh interest accrual)\\n     * @dev Governance function to set a new reserve factor\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function _setReserveFactorFresh(uint newReserveFactorMantissa) internal returns (uint) {\\n        // Verify market's block number equals current block number\\n        if (accrualBlockNumber != block.number) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK);\\n        }\\n\\n        // Check newReserveFactor \\u2264 maxReserveFactor\\n        if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\\n            return fail(Error.BAD_INPUT, FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);\\n        }\\n\\n        uint oldReserveFactorMantissa = reserveFactorMantissa;\\n        reserveFactorMantissa = newReserveFactorMantissa;\\n\\n        emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and adds reserves by transferring from `msg.sender`\\n     * @param addAmount Amount of addition to reserves\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function _addReservesInternal(uint addAmount) internal nonReentrant returns (uint) {\\n        checkAccrueInterest(FailureInfo.ADD_RESERVES_ACCRUE_INTEREST_FAILED);\\n        uint error;\\n\\n        // _addReservesFresh emits reserve-addition-specific logs on errors, so we don't need to.\\n        (error, ) = _addReservesFresh(addAmount);\\n        return error;\\n    }\\n\\n    /**\\n     * @notice Add reserves by transferring from caller\\n     * @dev Requires fresh interest accrual\\n     * @param addAmount Amount of addition to reserves\\n     * @return (uint, uint) An error code (0=success, otherwise a failure (see ErrorReporter.sol for details)) and the actual amount added, net token fees\\n     */\\n    function _addReservesFresh(uint addAmount) internal returns (uint, uint) {\\n        // totalReserves + actualAddAmount\\n        uint totalReservesNew;\\n        uint actualAddAmount;\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != block.number) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.ADD_RESERVES_FRESH_CHECK), actualAddAmount);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the caller and the addAmount\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\n         *  On success, the vToken holds an additional addAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *  it returns the amount actually transferred, in case of a fee.\\n         */\\n\\n        actualAddAmount = doTransferIn(msg.sender, addAmount);\\n\\n        totalReservesNew = totalReserves + actualAddAmount;\\n\\n        /* Revert on overflow */\\n        require(totalReservesNew >= totalReserves, \\\"add reserves unexpected overflow\\\");\\n\\n        // Store reserves[n+1] = reserves[n] + actualAddAmount\\n        totalReserves = totalReservesNew;\\n\\n        /* Emit NewReserves(admin, actualAddAmount, reserves[n+1]) */\\n        emit ReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\\n\\n        /* Return (NO_ERROR, actualAddAmount) */\\n        return (uint(Error.NO_ERROR), actualAddAmount);\\n    }\\n\\n    /**\\n     * @notice Reduces reserves by transferring to protocol share reserve contract\\n     * @dev Requires fresh interest accrual\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function _reduceReservesFresh(uint reduceAmount) internal virtual returns (uint) {\\n        if (reduceAmount == 0) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != block.number) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);\\n        }\\n\\n        // Fail gracefully if protocol has insufficient underlying cash\\n        if (getCashPrior() < reduceAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);\\n        }\\n\\n        // Check reduceAmount \\u2264 reserves[n] (totalReserves)\\n        if (reduceAmount > totalReserves) {\\n            return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        // Store reserves[n+1] = reserves[n] - reduceAmount\\n        totalReserves = totalReserves - reduceAmount;\\n\\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n        doTransferOut(protocolShareReserve, reduceAmount);\\n\\n        IProtocolShareReserve(protocolShareReserve).updateAssetsState(\\n            address(comptroller),\\n            underlying,\\n            IProtocolShareReserve.IncomeType.SPREAD\\n        );\\n\\n        emit ReservesReduced(protocolShareReserve, reduceAmount, totalReserves);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice updates the interest rate model (requires fresh interest accrual)\\n     * @dev Governance function to update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function _setInterestRateModelFresh(InterestRateModelV8 newInterestRateModel) internal returns (uint) {\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != block.number) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK);\\n        }\\n\\n        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\\n        require(newInterestRateModel.isInterestRateModel(), \\\"marker method returned false\\\");\\n\\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\\n        emit NewMarketInterestRateModel(interestRateModel, newInterestRateModel);\\n\\n        // Set the interest rate model to newInterestRateModel\\n        interestRateModel = newInterestRateModel;\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /*** Safe Token ***/\\n\\n    /**\\n     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\n     *  This may revert due to insufficient balance or insufficient allowance.\\n     */\\n    function doTransferIn(address from, uint amount) internal virtual returns (uint);\\n\\n    /**\\n     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure rather than reverting.\\n     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\\n     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\\n     */\\n    function doTransferOut(address payable to, uint amount) internal virtual;\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return Tuple of error code and the calculated balance or 0 if error code is non-zero\\n     */\\n    function borrowBalanceStoredInternal(address account) internal view returns (MathError, uint) {\\n        /* Note: we do not assert that the market is up to date */\\n        MathError mathErr;\\n        uint principalTimesIndex;\\n        uint result;\\n\\n        /* Get borrowBalance and borrowIndex */\\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\n\\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\\n         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\n         */\\n        if (borrowSnapshot.principal == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        /* Calculate new borrow balance using the interest index:\\n         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\n         */\\n        (mathErr, principalTimesIndex) = mulUInt(borrowSnapshot.principal, borrowIndex);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        (mathErr, result) = divUInt(principalTimesIndex, borrowSnapshot.interestIndex);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, result);\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the vToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return Tuple of error code and calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStoredInternal() internal view virtual returns (MathError, uint) {\\n        uint _totalSupply = totalSupply;\\n        if (_totalSupply == 0) {\\n            /*\\n             * If there are no tokens minted:\\n             *  exchangeRate = initialExchangeRate\\n             */\\n            return (MathError.NO_ERROR, initialExchangeRateMantissa);\\n        } else {\\n            /*\\n             * Otherwise:\\n             *  exchangeRate = (totalCash + totalBorrows + flashLoanAmount - totalReserves) / totalSupply\\n             */\\n            uint totalCash = getCashPrior();\\n            uint cashPlusBorrowsMinusReserves;\\n            Exp memory exchangeRate;\\n            MathError mathErr;\\n\\n            (mathErr, cashPlusBorrowsMinusReserves) = addThenSubUInt(\\n                totalCash + flashLoanAmount,\\n                totalBorrows,\\n                totalReserves\\n            );\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n\\n            (mathErr, exchangeRate) = getExp(cashPlusBorrowsMinusReserves, _totalSupply);\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n\\n            return (MathError.NO_ERROR, exchangeRate.mantissa);\\n        }\\n    }\\n\\n    function ensureAllowed(string memory functionSig) private view {\\n        require(\\n            IAccessControlManagerV8(accessControlManager).isAllowedToCall(msg.sender, functionSig),\\n            \\\"access denied\\\"\\n        );\\n    }\\n\\n    function ensureAdmin(address caller_) private view {\\n        require(caller_ == admin, \\\"Unauthorized\\\");\\n    }\\n\\n    function ensureNoMathError(MathError mErr) private pure {\\n        require(mErr == MathError.NO_ERROR, \\\"math error\\\");\\n    }\\n\\n    function ensureNonZeroAddress(address address_) private pure {\\n        require(address_ != address(0), \\\"zero address\\\");\\n    }\\n\\n    function ensureAccrueInterest() private {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n    }\\n\\n    function checkAccrueInterest(FailureInfo info) private returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reserve factor change failed.\\n            return fail(Error(error), info);\\n        }\\n    }\\n\\n    /*** Safe Token ***/\\n\\n    /**\\n     * @notice Gets balance of this contract in terms of the underlying\\n     * @dev This excludes the value of the current message, if any\\n     * @return The quantity of underlying owned by this contract\\n     */\\n    function getCashPrior() internal view virtual returns (uint);\\n}\\n\",\"keccak256\":\"0x9846356ad44f02d5b9d0bd884749eb51a1504428e7f9d09bc771a7d337ffbedb\",\"license\":\"BSD-3-Clause\"},\"contracts/Tokens/VTokens/VTokenInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.25;\\n\\nimport { ComptrollerInterface } from \\\"../../Comptroller/ComptrollerInterface.sol\\\";\\nimport { InterestRateModelV8 } from \\\"../../InterestRateModels/InterestRateModelV8.sol\\\";\\n\\ncontract VTokenStorageBase {\\n    /**\\n     * @notice Container for borrow balance information\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n     */\\n    struct BorrowSnapshot {\\n        uint principal;\\n        uint interestIndex;\\n    }\\n\\n    /**\\n     * @dev Guard variable for re-entrancy checks\\n     */\\n    bool internal _notEntered;\\n\\n    /**\\n     * @notice EIP-20 token name for this token\\n     */\\n    string public name;\\n\\n    /**\\n     * @notice EIP-20 token symbol for this token\\n     */\\n    string public symbol;\\n\\n    /**\\n     * @notice EIP-20 token decimals for this token\\n     */\\n    uint8 public decimals;\\n\\n    /**\\n     * @notice Maximum borrow rate that can ever be applied (.0005% / block)\\n     */\\n\\n    uint internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n    /**\\n     * @notice Maximum fraction of interest that can be set aside for reserves\\n     */\\n    uint internal constant reserveFactorMaxMantissa = 1e18;\\n\\n    /**\\n     * @notice Administrator for this contract\\n     */\\n    address payable public admin;\\n\\n    /**\\n     * @notice Pending administrator for this contract\\n     */\\n    address payable public pendingAdmin;\\n\\n    /**\\n     * @notice Contract which oversees inter-vToken operations\\n     */\\n    ComptrollerInterface public comptroller;\\n\\n    /**\\n     * @notice Model which tells what the current interest rate should be\\n     */\\n    InterestRateModelV8 public interestRateModel;\\n\\n    /**\\n     * @notice Initial exchange rate used when minting the first VTokens (used when totalSupply = 0)\\n     */\\n    uint internal initialExchangeRateMantissa;\\n\\n    /**\\n     * @notice Fraction of interest currently set aside for reserves\\n     */\\n    uint public reserveFactorMantissa;\\n\\n    /**\\n     * @notice Block number that interest was last accrued at\\n     */\\n    uint public accrualBlockNumber;\\n\\n    /**\\n     * @notice Accumulator of the total earned interest rate since the opening of the market\\n     */\\n    uint public borrowIndex;\\n\\n    /**\\n     * @notice Total amount of outstanding borrows of the underlying in this market\\n     */\\n    uint public totalBorrows;\\n\\n    /**\\n     * @notice Total amount of reserves of the underlying held in this market\\n     */\\n    uint public totalReserves;\\n\\n    /**\\n     * @notice Total number of tokens in circulation\\n     */\\n    uint public totalSupply;\\n\\n    /**\\n     * @notice Official record of token balances for each account\\n     */\\n    mapping(address => uint) internal accountTokens;\\n\\n    /**\\n     * @notice Approved token transfer amounts on behalf of others\\n     */\\n    mapping(address => mapping(address => uint)) internal transferAllowances;\\n\\n    /**\\n     * @notice Mapping of account addresses to outstanding borrow balances\\n     */\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\n\\n    /**\\n     * @notice Underlying asset for this VToken\\n     */\\n    address public underlying;\\n\\n    /**\\n     * @notice Implementation address for this contract\\n     */\\n    address public implementation;\\n\\n    /**\\n     * @notice delta block after which reserves will be reduced\\n     */\\n    uint public reduceReservesBlockDelta;\\n\\n    /**\\n     * @notice last block number at which reserves were reduced\\n     */\\n    uint public reduceReservesBlockNumber;\\n\\n    /**\\n     * @notice address of protocol share reserve contract\\n     */\\n    address payable public protocolShareReserve;\\n\\n    /**\\n     * @notice address of accessControlManager\\n     */\\n\\n    address public accessControlManager;\\n}\\n\\ncontract VTokenStorage is VTokenStorageBase {\\n    /**\\n     * @notice flashLoan is enabled for this market or not\\n     */\\n    bool public isFlashLoanEnabled;\\n\\n    /**\\n     * @notice fee percentage collected by protocol on flashLoan\\n     */\\n    uint256 public flashLoanProtocolFeeMantissa;\\n\\n    /**\\n     * @notice fee percentage collected by supplier on flashLoan\\n     */\\n    uint256 public flashLoanSupplierFeeMantissa;\\n\\n    /**\\n     * @notice Amount of flashLoan taken by the receiver\\n     * @dev This is used to track the amount of flashLoan taken in the current transaction\\n     */\\n    uint256 public flashLoanAmount;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[46] private __gap;\\n}\\n\\nabstract contract VTokenInterface is VTokenStorage {\\n    /**\\n     * @notice Indicator that this is a vToken contract (for inspection)\\n     */\\n    bool public constant isVToken = true;\\n\\n    /*** Market Events ***/\\n\\n    /**\\n     * @notice Event emitted when interest is accrued\\n     */\\n    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when tokens are minted\\n     */\\n    event Mint(address minter, uint mintAmount, uint mintTokens, uint256 totalSupply);\\n\\n    /**\\n     * @notice Event emitted when tokens are minted behalf by payer to receiver\\n     */\\n    event MintBehalf(address payer, address receiver, uint mintAmount, uint mintTokens, uint256 totalSupply);\\n\\n    /**\\n     * @notice Event emitted when tokens are redeemed\\n     */\\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens, uint256 totalSupply);\\n\\n    /**\\n     * @notice Event emitted when tokens are redeemed and fee is transferred\\n     */\\n    event RedeemFee(address redeemer, uint feeAmount, uint redeemTokens);\\n\\n    /**\\n     * @notice Event emitted when underlying is borrowed\\n     */\\n    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is repaid\\n     */\\n    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is liquidated\\n     */\\n    event LiquidateBorrow(\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        address vTokenCollateral,\\n        uint seizeTokens\\n    );\\n\\n    /*** Admin Events ***/\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is changed\\n     */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is accepted, which means admin has been updated\\n     */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    /**\\n     * @notice Event emitted when comptroller is changed\\n     */\\n    event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\n\\n    /**\\n     * @notice Event emitted when interestRateModel is changed\\n     */\\n    event NewMarketInterestRateModel(\\n        InterestRateModelV8 oldInterestRateModel,\\n        InterestRateModelV8 newInterestRateModel\\n    );\\n\\n    /**\\n     * @notice Event emitted when the reserve factor is changed\\n     */\\n    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\\n\\n    /**\\n     * @notice Event emitted when the reserves are added\\n     */\\n    event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice Event emitted when the reserves are reduced\\n     */\\n    event ReservesReduced(address protocolShareReserve, uint reduceAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice EIP20 Transfer event\\n     */\\n    event Transfer(address indexed from, address indexed to, uint amount);\\n\\n    /**\\n     * @notice EIP20 Approval event\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\n\\n    /**\\n     * @notice Event emitted when block delta for reduce reserves get updated\\n     */\\n    event NewReduceReservesBlockDelta(uint256 oldReduceReservesBlockDelta, uint256 newReduceReservesBlockDelta);\\n\\n    /**\\n     * @notice Event emitted when address of ProtocolShareReserve contract get updated\\n     */\\n    event NewProtocolShareReserve(address indexed oldProtocolShareReserve, address indexed newProtocolShareReserve);\\n\\n    /**\\n     * @notice Emitted when access control address is changed by admin\\n     */\\n    event NewAccessControlManager(address oldAccessControlAddress, address newAccessControlAddress);\\n\\n    /**\\n     * @notice Event emitted when flashLoanEnabled status is changed\\n     */\\n    event ToggleFlashLoanEnabled(bool previousStatus, bool newStatus);\\n\\n    /**\\n     * @notice Event emitted when flashLoan is executed\\n     */\\n    event FlashLoanExecuted(address receiver, address underlying, uint256 amount);\\n\\n    /**\\n     * @notice Event emitted when asset is transferred to receiver\\n     */\\n    event TransferOutUnderlying(address asset, address receiver, uint256 amount);\\n\\n    /**\\n     * @notice Event emitted when asset is transferred from sender and verified\\n     */\\n    event TransferInUnderlyingAndVerify(address asset, address sender, uint256 amount);\\n\\n    /**\\n     * @notice Event emitted when flashLoan fee mantissa is updated\\n     */\\n    event FlashLoanFeeUpdated(\\n        uint256 oldFlashLoanProtocolFeeMantissa,\\n        uint256 newFlashLoanProtocolFeeMantissa,\\n        uint256 oldFlashLoanSupplierFeeMantissa,\\n        uint256 newFlashLoanSupplierFeeMantissa\\n    );\\n\\n    /*** Flash Loan Error***/\\n\\n    error FlashLoanNotAuthorized();\\n\\n    error FlashLoanNotEnabled();\\n\\n    error ExecuteFlashLoanFailed();\\n\\n    error InsufficientRepaymentBalance();\\n\\n    /*** User Interface ***/\\n\\n    function transfer(address dst, uint amount) external virtual returns (bool);\\n\\n    function transferFrom(address src, address dst, uint amount) external virtual returns (bool);\\n\\n    function approve(address spender, uint amount) external virtual returns (bool);\\n\\n    function balanceOfUnderlying(address owner) external virtual returns (uint);\\n\\n    function totalBorrowsCurrent() external virtual returns (uint);\\n\\n    function borrowBalanceCurrent(address account) external virtual returns (uint);\\n\\n    function seize(address liquidator, address borrower, uint seizeTokens) external virtual returns (uint);\\n\\n    /*** Admin Function ***/\\n    function _setPendingAdmin(address payable newPendingAdmin) external virtual returns (uint);\\n\\n    /*** Admin Function ***/\\n    function _acceptAdmin() external virtual returns (uint);\\n\\n    /*** Admin Function ***/\\n    function _setReserveFactor(uint newReserveFactorMantissa) external virtual returns (uint);\\n\\n    /*** Admin Function ***/\\n    function _reduceReserves(uint reduceAmount) external virtual returns (uint);\\n\\n    function borrowDebtPosition(address borrower, uint borrowAmount) external virtual returns (uint);\\n\\n    function balanceOf(address owner) external view virtual returns (uint);\\n\\n    function allowance(address owner, address spender) external view virtual returns (uint);\\n\\n    function getAccountSnapshot(address account) external view virtual returns (uint, uint, uint, uint);\\n\\n    function borrowRatePerBlock() external view virtual returns (uint);\\n\\n    function supplyRatePerBlock() external view virtual returns (uint);\\n\\n    function getCash() external view virtual returns (uint);\\n\\n    function exchangeRateCurrent() public virtual returns (uint);\\n\\n    function accrueInterest() public virtual returns (uint);\\n\\n    /*** Admin Function ***/\\n    function _setComptroller(ComptrollerInterface newComptroller) public virtual returns (uint);\\n\\n    /*** Admin Function ***/\\n    function _setInterestRateModel(InterestRateModelV8 newInterestRateModel) public virtual returns (uint);\\n\\n    function borrowBalanceStored(address account) public view virtual returns (uint);\\n\\n    function exchangeRateStored() public view virtual returns (uint);\\n}\\n\\ninterface VBep20Interface {\\n    /*** User Interface ***/\\n\\n    function mint(uint mintAmount) external returns (uint);\\n\\n    function mintBehalf(address receiver, uint mintAmount) external returns (uint);\\n\\n    function redeem(uint redeemTokens) external returns (uint);\\n\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\n\\n    function borrow(uint borrowAmount) external returns (uint);\\n\\n    function repayBorrow(uint repayAmount) external returns (uint);\\n\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\\n\\n    function liquidateBorrow(\\n        address borrower,\\n        uint repayAmount,\\n        VTokenInterface vTokenCollateral\\n    ) external returns (uint);\\n\\n    /*** Admin Functions ***/\\n\\n    function _addReserves(uint addAmount) external returns (uint);\\n}\\n\\ninterface VDelegatorInterface {\\n    /**\\n     * @notice Emitted when implementation is changed\\n     */\\n    event NewImplementation(address oldImplementation, address newImplementation);\\n\\n    /**\\n     * @notice Called by the admin to update the implementation of the delegator\\n     * @param implementation_ The address of the new implementation for delegation\\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\n     */\\n    function _setImplementation(\\n        address implementation_,\\n        bool allowResign,\\n        bytes memory becomeImplementationData\\n    ) external;\\n}\\n\\ninterface VDelegateInterface {\\n    /**\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\n     * @param data The encoded bytes data for any initialization\\n     */\\n    function _becomeImplementation(bytes memory data) external;\\n\\n    /**\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\n     */\\n    function _resignImplementation() external;\\n}\\n\",\"keccak256\":\"0x203055ba2bceae39599ba15321b843d0ddae2cbe18ff9df977823e9a26fbbb9f\",\"license\":\"BSD-3-Clause\"},\"contracts/Utils/CarefulMath.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\n/**\\n * @title Careful Math\\n * @author Venus\\n * @notice Derived from OpenZeppelin's SafeMath library\\n *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\\n */\\ncontract CarefulMath {\\n    /**\\n     * @dev Possible error codes that we can return\\n     */\\n    enum MathError {\\n        NO_ERROR,\\n        DIVISION_BY_ZERO,\\n        INTEGER_OVERFLOW,\\n        INTEGER_UNDERFLOW\\n    }\\n\\n    /**\\n     * @dev Multiplies two numbers, returns an error on overflow.\\n     */\\n    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (a == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        uint c;\\n        unchecked {\\n            c = a * b;\\n        }\\n\\n        if (c / a != b) {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        } else {\\n            return (MathError.NO_ERROR, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, truncating the quotient.\\n     */\\n    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b == 0) {\\n            return (MathError.DIVISION_BY_ZERO, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, a / b);\\n    }\\n\\n    /**\\n     * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\\n     */\\n    function subUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b <= a) {\\n            unchecked {\\n                return (MathError.NO_ERROR, a - b);\\n            }\\n        } else {\\n            return (MathError.INTEGER_UNDERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Adds two numbers, returns an error on overflow.\\n     */\\n    function addUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        uint c;\\n        unchecked {\\n            c = a + b;\\n        }\\n\\n        if (c >= a) {\\n            return (MathError.NO_ERROR, c);\\n        } else {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev add a and b and then subtract c\\n     */\\n    function addThenSubUInt(uint a, uint b, uint c) internal pure returns (MathError, uint) {\\n        (MathError err0, uint sum) = addUInt(a, b);\\n\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, 0);\\n        }\\n\\n        return subUInt(sum, c);\\n    }\\n}\\n\",\"keccak256\":\"0xb7ca049dc6f4a31c8994ad5fd2093b9f7f60c21495ff8386c7802ef13d9858a7\",\"license\":\"BSD-3-Clause\"},\"contracts/Utils/ErrorReporter.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\nimport { WeightFunction } from \\\"../Comptroller/Diamond/interfaces/IFacetBase.sol\\\";\\n\\ncontract ComptrollerErrorReporter {\\n    /// @notice Thrown when You are already in the selected pool.\\n    error AlreadyInSelectedPool();\\n\\n    /// @notice Thrown when One or more of your assets are not compatible with the selected pool.\\n    error IncompatibleBorrowedAssets();\\n\\n    /// @notice Thrown when Switching to this pool would fail the liquidity check or lead to liquidation.\\n    error LiquidityCheckFailed(uint256 errorCode, uint256 shortfall);\\n\\n    /// @notice Thrown when trying to modify the core pool (poolId == 0)\\n    error CorePoolModificationNotAllowed();\\n\\n    /// @notice Thrown when input array lengths do not match\\n    error ArrayLengthMismatch();\\n\\n    /// @notice Thrown when market trying to add in a pool is not listed in the core pool\\n    error MarketNotListedInCorePool();\\n\\n    /// @notice Thrown when market is not set in the _poolMarkets mapping\\n    error MarketConfigNotFound();\\n\\n    /// @notice Thrown when borrowing is not allowed in the selected pool for a given market.\\n    error BorrowNotAllowedInPool();\\n\\n    /// @notice Thrown when trying to remove a market that is not listed in the given pool.\\n    error PoolMarketNotFound(uint96 poolId, address vToken);\\n\\n    /// @notice Thrown when a given pool ID does not exist\\n    error PoolDoesNotExist(uint96 poolId);\\n\\n    /// @notice Thrown when the pool label is empty\\n    error EmptyPoolLabel();\\n\\n    /// @notice Thrown when a vToken is already listed in the specified pool\\n    error MarketAlreadyListed(uint96 poolId, address vToken);\\n\\n    /// @notice Thrown when an invalid weighting strategy is provided\\n    error InvalidWeightingStrategy(WeightFunction strategy);\\n\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        COMPTROLLER_MISMATCH,\\n        INSUFFICIENT_SHORTFALL,\\n        INSUFFICIENT_LIQUIDITY,\\n        INVALID_CLOSE_FACTOR,\\n        INVALID_COLLATERAL_FACTOR,\\n        INVALID_LIQUIDATION_INCENTIVE,\\n        MARKET_NOT_ENTERED, // no longer possible\\n        MARKET_NOT_LISTED,\\n        MARKET_ALREADY_LISTED,\\n        MATH_ERROR,\\n        NONZERO_BORROW_BALANCE,\\n        PRICE_ERROR,\\n        REJECTION,\\n        SNAPSHOT_ERROR,\\n        TOO_MANY_ASSETS,\\n        TOO_MUCH_REPAY,\\n        INSUFFICIENT_BALANCE_FOR_VAI,\\n        MARKET_NOT_COLLATERAL,\\n        INVALID_LIQUIDATION_THRESHOLD\\n    }\\n\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n        EXIT_MARKET_BALANCE_OWED,\\n        EXIT_MARKET_REJECTION,\\n        SET_CLOSE_FACTOR_OWNER_CHECK,\\n        SET_CLOSE_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\n        SET_IMPLEMENTATION_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n        SET_PRICE_ORACLE_OWNER_CHECK,\\n        SUPPORT_MARKET_EXISTS,\\n        SUPPORT_MARKET_OWNER_CHECK,\\n        SET_PAUSE_GUARDIAN_OWNER_CHECK,\\n        SET_VAI_MINT_RATE_CHECK,\\n        SET_VAICONTROLLER_OWNER_CHECK,\\n        SET_MINTED_VAI_REJECTION,\\n        SET_TREASURY_OWNER_CHECK,\\n        UNLIST_MARKET_NOT_LISTED,\\n        SET_LIQUIDATION_THRESHOLD_VALIDATION,\\n        COLLATERAL_FACTOR_GREATER_THAN_LIQUIDATION_THRESHOLD\\n    }\\n\\n    /**\\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n     **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n     */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n     */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\\n\\ncontract TokenErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        BAD_INPUT,\\n        COMPTROLLER_REJECTION,\\n        COMPTROLLER_CALCULATION_ERROR,\\n        INTEREST_RATE_MODEL_ERROR,\\n        INVALID_ACCOUNT_PAIR,\\n        INVALID_CLOSE_AMOUNT_REQUESTED,\\n        INVALID_COLLATERAL_FACTOR,\\n        MATH_ERROR,\\n        MARKET_NOT_FRESH,\\n        MARKET_NOT_LISTED,\\n        TOKEN_INSUFFICIENT_ALLOWANCE,\\n        TOKEN_INSUFFICIENT_BALANCE,\\n        TOKEN_INSUFFICIENT_CASH,\\n        TOKEN_TRANSFER_IN_FAILED,\\n        TOKEN_TRANSFER_OUT_FAILED,\\n        TOKEN_PRICE_ERROR\\n    }\\n\\n    /*\\n     * Note: FailureInfo (but not Error) is kept in alphabetical order\\n     *       This is because FailureInfo grows significantly faster, and\\n     *       the order of Error has some meaning, while the order of FailureInfo\\n     *       is entirely arbitrary.\\n     */\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\\n        BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        BORROW_ACCRUE_INTEREST_FAILED,\\n        BORROW_CASH_NOT_AVAILABLE,\\n        BORROW_FRESHNESS_CHECK,\\n        BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        BORROW_MARKET_NOT_LISTED,\\n        BORROW_COMPTROLLER_REJECTION,\\n        LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\n        LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\n        LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\n        LIQUIDATE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\n        LIQUIDATE_FRESHNESS_CHECK,\\n        LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\n        LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_SEIZE_TOO_MUCH,\\n        MINT_ACCRUE_INTEREST_FAILED,\\n        MINT_COMPTROLLER_REJECTION,\\n        MINT_EXCHANGE_CALCULATION_FAILED,\\n        MINT_EXCHANGE_RATE_READ_FAILED,\\n        MINT_FRESHNESS_CHECK,\\n        MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        MINT_TRANSFER_IN_FAILED,\\n        MINT_TRANSFER_IN_NOT_POSSIBLE,\\n        REDEEM_ACCRUE_INTEREST_FAILED,\\n        REDEEM_COMPTROLLER_REJECTION,\\n        REDEEM_CASH_NOT_AVAILABLE,\\n        REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_RATE_READ_FAILED,\\n        REDEEM_FRESHNESS_CHECK,\\n        REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\\n        REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\\n        REDUCE_RESERVES_ADMIN_CHECK,\\n        REDUCE_RESERVES_CASH_NOT_AVAILABLE,\\n        REDUCE_RESERVES_FRESH_CHECK,\\n        REDUCE_RESERVES_VALIDATION,\\n        REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_COMPTROLLER_REJECTION,\\n        REPAY_BORROW_FRESHNESS_CHECK,\\n        REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COMPTROLLER_OWNER_CHECK,\\n        SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\\n        SET_INTEREST_RATE_MODEL_FRESH_CHECK,\\n        SET_INTEREST_RATE_MODEL_OWNER_CHECK,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_ORACLE_MARKET_NOT_LISTED,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\\n        SET_RESERVE_FACTOR_ADMIN_CHECK,\\n        SET_RESERVE_FACTOR_FRESH_CHECK,\\n        SET_RESERVE_FACTOR_BOUNDS_CHECK,\\n        TRANSFER_COMPTROLLER_REJECTION,\\n        TRANSFER_NOT_ALLOWED,\\n        TRANSFER_NOT_ENOUGH,\\n        TRANSFER_TOO_MUCH,\\n        ADD_RESERVES_ACCRUE_INTEREST_FAILED,\\n        ADD_RESERVES_FRESH_CHECK,\\n        ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE,\\n        TOKEN_GET_UNDERLYING_PRICE_ERROR,\\n        REPAY_VAI_COMPTROLLER_REJECTION,\\n        REPAY_VAI_FRESHNESS_CHECK,\\n        VAI_MINT_EXCHANGE_CALCULATION_FAILED,\\n        SFT_MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED\\n    }\\n\\n    /**\\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n     **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n     */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n     */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\\n\\ncontract VAIControllerErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED, // The sender is not authorized to perform this action.\\n        REJECTION, // The action would violate the comptroller, vaicontroller policy.\\n        SNAPSHOT_ERROR, // The comptroller could not get the account borrows and exchange rate from the market.\\n        PRICE_ERROR, // The comptroller could not obtain a required price of an asset.\\n        MATH_ERROR, // A math calculation error occurred.\\n        INSUFFICIENT_BALANCE_FOR_VAI // Caller does not have sufficient balance to mint VAI.\\n    }\\n\\n    enum FailureInfo {\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n        SET_COMPTROLLER_OWNER_CHECK,\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n        VAI_MINT_REJECTION,\\n        VAI_BURN_REJECTION,\\n        VAI_LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\n        VAI_LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\n        VAI_LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\n        VAI_LIQUIDATE_COMPTROLLER_REJECTION,\\n        VAI_LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\n        VAI_LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\n        VAI_LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\n        VAI_LIQUIDATE_FRESHNESS_CHECK,\\n        VAI_LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\n        VAI_LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\n        VAI_LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\n        VAI_LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\n        VAI_LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\n        VAI_LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\n        VAI_LIQUIDATE_SEIZE_TOO_MUCH,\\n        MINT_FEE_CALCULATION_FAILED,\\n        SET_TREASURY_OWNER_CHECK\\n    }\\n\\n    /**\\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n     **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n     */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n     */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\\n\",\"keccak256\":\"0xc2cfa514a3103b35f9fe8149b8de3f7f05df543f55b89af1f98bc63fd53459f2\",\"license\":\"BSD-3-Clause\"},\"contracts/Utils/Exponential.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\nimport { CarefulMath } from \\\"./CarefulMath.sol\\\";\\nimport { ExponentialNoError } from \\\"./ExponentialNoError.sol\\\";\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Venus\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract Exponential is CarefulMath, ExponentialNoError {\\n    /**\\n     * @dev Creates an exponential from numerator and denominator values.\\n     *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\\n     *            or if `denom` is zero.\\n     */\\n    function getExp(uint num, uint denom) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint scaledNumerator) = mulUInt(num, expScale);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({ mantissa: 0 }));\\n        }\\n\\n        (MathError err1, uint rational) = divUInt(scaledNumerator, denom);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({ mantissa: 0 }));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({ mantissa: rational }));\\n    }\\n\\n    /**\\n     * @dev Adds two exponentials, returning a new exponential.\\n     */\\n    function addExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        (MathError error, uint result) = addUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({ mantissa: result }));\\n    }\\n\\n    /**\\n     * @dev Subtracts two exponentials, returning a new exponential.\\n     */\\n    function subExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        (MathError error, uint result) = subUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({ mantissa: result }));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, returning a new Exp.\\n     */\\n    function mulScalar(Exp memory a, uint scalar) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint scaledMantissa) = mulUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({ mantissa: 0 }));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({ mantissa: scaledMantissa }));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mulScalarTruncate(Exp memory a, uint scalar) internal pure returns (MathError, uint) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(product));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mulScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) internal pure returns (MathError, uint) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return addUInt(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Divide an Exp by a scalar, returning a new Exp.\\n     */\\n    function divScalar(Exp memory a, uint scalar) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint descaledMantissa) = divUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({ mantissa: 0 }));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({ mantissa: descaledMantissa }));\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, returning a new Exp.\\n     */\\n    function divScalarByExp(uint scalar, Exp memory divisor) internal pure returns (MathError, Exp memory) {\\n        /*\\n          We are doing this as:\\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\\n\\n          How it works:\\n          Exp = a / b;\\n          Scalar = s;\\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\\n        */\\n        (MathError err0, uint numerator) = mulUInt(expScale, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({ mantissa: 0 }));\\n        }\\n        return getExp(numerator, divisor.mantissa);\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\\n     */\\n    function divScalarByExpTruncate(uint scalar, Exp memory divisor) internal pure returns (MathError, uint) {\\n        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(fraction));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials, returning a new exponential.\\n     */\\n    function mulExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({ mantissa: 0 }));\\n        }\\n\\n        // We add half the scale before dividing so that we get rounding instead of truncation.\\n        //  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717\\n        // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\\n        (MathError err1, uint doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({ mantissa: 0 }));\\n        }\\n\\n        (MathError err2, uint product) = divUInt(doubleScaledProductWithHalfScale, expScale);\\n        // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\\n        assert(err2 == MathError.NO_ERROR);\\n\\n        return (MathError.NO_ERROR, Exp({ mantissa: product }));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\\n     */\\n    function mulExp(uint a, uint b) internal pure returns (MathError, Exp memory) {\\n        return mulExp(Exp({ mantissa: a }), Exp({ mantissa: b }));\\n    }\\n\\n    /**\\n     * @dev Multiplies three exponentials, returning a new exponential.\\n     */\\n    function mulExp3(Exp memory a, Exp memory b, Exp memory c) internal pure returns (MathError, Exp memory) {\\n        (MathError err, Exp memory ab) = mulExp(a, b);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, ab);\\n        }\\n        return mulExp(ab, c);\\n    }\\n\\n    /**\\n     * @dev Divides two exponentials, returning a new exponential.\\n     *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\\n     *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\\n     */\\n    function divExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        return getExp(a.mantissa, b.mantissa);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9b293a09a3ec69ac16f58dce449a553b44121eb9aad666a777d8f6f4ae83f0\",\"license\":\"BSD-3-Clause\"},\"contracts/Utils/ExponentialNoError.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract ExponentialNoError {\\n    uint internal constant expScale = 1e18;\\n    uint internal constant doubleScale = 1e36;\\n    uint internal constant halfExpScale = expScale / 2;\\n    uint internal constant mantissaOne = expScale;\\n\\n    struct Exp {\\n        uint mantissa;\\n    }\\n\\n    struct Double {\\n        uint mantissa;\\n    }\\n\\n    /**\\n     * @dev Truncates the given exp to a whole number value.\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n     */\\n    function truncate(Exp memory exp) internal pure returns (uint) {\\n        // Note: We are not using careful math here as we're performing a division that cannot fail\\n        return exp.mantissa / expScale;\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mul_ScalarTruncate(Exp memory a, uint scalar) internal pure returns (uint) {\\n        Exp memory product = mul_(a, scalar);\\n        return truncate(product);\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mul_ScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) internal pure returns (uint) {\\n        Exp memory product = mul_(a, scalar);\\n        return add_(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Checks if first Exp is less than second Exp.\\n     */\\n    function lessThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n        return left.mantissa < right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp <= right Exp.\\n     */\\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n        return left.mantissa <= right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp > right Exp.\\n     */\\n    function greaterThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n        return left.mantissa > right.mantissa;\\n    }\\n\\n    /**\\n     * @dev returns true if Exp is exactly zero\\n     */\\n    function isZeroExp(Exp memory value) internal pure returns (bool) {\\n        return value.mantissa == 0;\\n    }\\n\\n    function safe224(uint n, string memory errorMessage) internal pure returns (uint224) {\\n        require(n < 2 ** 224, errorMessage);\\n        return uint224(n);\\n    }\\n\\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2 ** 32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function add_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: add_(a.mantissa, b.mantissa) });\\n    }\\n\\n    function add_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({ mantissa: add_(a.mantissa, b.mantissa) });\\n    }\\n\\n    function add_(uint a, uint b) internal pure returns (uint) {\\n        return add_(a, b, \\\"addition overflow\\\");\\n    }\\n\\n    function add_(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: sub_(a.mantissa, b.mantissa) });\\n    }\\n\\n    function sub_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({ mantissa: sub_(a.mantissa, b.mantissa) });\\n    }\\n\\n    function sub_(uint a, uint b) internal pure returns (uint) {\\n        return sub_(a, b, \\\"subtraction underflow\\\");\\n    }\\n\\n    function sub_(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function mul_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: mul_(a.mantissa, b.mantissa) / expScale });\\n    }\\n\\n    function mul_(Exp memory a, uint b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: mul_(a.mantissa, b) });\\n    }\\n\\n    function mul_(uint a, Exp memory b) internal pure returns (uint) {\\n        return mul_(a, b.mantissa) / expScale;\\n    }\\n\\n    function mul_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({ mantissa: mul_(a.mantissa, b.mantissa) / doubleScale });\\n    }\\n\\n    function mul_(Double memory a, uint b) internal pure returns (Double memory) {\\n        return Double({ mantissa: mul_(a.mantissa, b) });\\n    }\\n\\n    function mul_(uint a, Double memory b) internal pure returns (uint) {\\n        return mul_(a, b.mantissa) / doubleScale;\\n    }\\n\\n    function mul_(uint a, uint b) internal pure returns (uint) {\\n        return mul_(a, b, \\\"multiplication overflow\\\");\\n    }\\n\\n    function mul_(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        uint c = a * b;\\n        require(c / a == b, errorMessage);\\n        return c;\\n    }\\n\\n    function div_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: div_(mul_(a.mantissa, expScale), b.mantissa) });\\n    }\\n\\n    function div_(Exp memory a, uint b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: div_(a.mantissa, b) });\\n    }\\n\\n    function div_(uint a, Exp memory b) internal pure returns (uint) {\\n        return div_(mul_(a, expScale), b.mantissa);\\n    }\\n\\n    function div_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({ mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa) });\\n    }\\n\\n    function div_(Double memory a, uint b) internal pure returns (Double memory) {\\n        return Double({ mantissa: div_(a.mantissa, b) });\\n    }\\n\\n    function div_(uint a, Double memory b) internal pure returns (uint) {\\n        return div_(mul_(a, doubleScale), b.mantissa);\\n    }\\n\\n    function div_(uint a, uint b) internal pure returns (uint) {\\n        return div_(a, b, \\\"divide by zero\\\");\\n    }\\n\\n    function div_(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    function fraction(uint a, uint b) internal pure returns (Double memory) {\\n        return Double({ mantissa: div_(mul_(a, doubleScale), b) });\\n    }\\n}\\n\",\"keccak256\":\"0xce75802a56763fb96b2046b374127f080a425cfe3634670767ec040ccb6ea7e0\",\"license\":\"BSD-3-Clause\"},\"contracts/external/IProtocolShareReserve.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.25;\\n\\ninterface IProtocolShareReserve {\\n    enum IncomeType {\\n        SPREAD,\\n        LIQUIDATION,\\n        FLASHLOAN\\n    }\\n\\n    function updateAssetsState(address comptroller, address asset, IncomeType incomeType) external;\\n}\\n\",\"keccak256\":\"0x01b2f2afbc3fa148f93d4563fa06e0639899b04599f3d95a3df79eaff79db137\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600e575f80fd5b506149008061001c5f395ff3fe608060405234801561000f575f80fd5b50600436106103f6575f3560e01c80637dc0d1d011610216578063c7ee005e1161012a578063e336b3db116100b4578063eabe7d9111610084578063eabe7d9114610a32578063ead1a8a014610a45578063f445d70314610a58578063f851a44014610a85578063fa6331d814610a97575f80fd5b8063e336b3db146109d6578063e37d4b79146109df578063e85a296014610a16578063e875544614610a29575f80fd5b8063d4b1fe58116100fa578063d4b1fe5814610968578063da3d454c1461097b578063dce154491461098e578063dcfbc0c7146109a1578063e0f6123d146109b4575f80fd5b8063c7ee005e14610928578063d02f73511461093b578063d3270f991461094e578063d463654c14610961575f80fd5b8063b2eafc39116101ab578063bdcdc2581161017b578063bdcdc258146108bb578063bec04f72146108ce578063bf32442d146108d7578063c5b4db55146108e8578063c5f956af14610915575f80fd5b8063b2eafc391461081b578063b8324c7c1461082e578063bb82aa5e14610889578063bbb8864a1461089c575f80fd5b806394b2294b116101e657806394b2294b146107cc57806396c99064146107d55780639bb27d62146107f5578063a657e57914610808575f80fd5b80637dc0d1d0146107655780638a7dc165146107785780638c1ac18a146107975780639254f5e5146107b9575f80fd5b80634a5844321161030d5780635dd3fc9d116102a25780636d35bf91116102725780636d35bf91146106e4578063719f701b146106f7578063737690991461070057806376551383146107405780637d172bd514610752575f80fd5b80635dd3fc9d1461069f5780635ec88c79146106665780635fc7e71e146106be5780636a56947e146106d1575f80fd5b806351dff989116102dd57806351dff98914610653578063528a174c1461066657806352d84d1e146106795780635c7786051461068c575f80fd5b80634a584432146105e05780634d99c776146105ff5780634e79238f146106125780634ef4c3e114610640575f80fd5b806324a3d6221161038e5780634088c73e1161035e5780634088c73e1461057057806341a18d2c1461057d57806341c728b9146105a7578063425fad58146105ba57806347ef3b3b146105cd575f80fd5b806324a3d622146104f8578063258c19c21461050b578063267822471461053e5780632bc7e29e14610551575f80fd5b806310b98338116103c957806310b98338146104685780631ededc91146104a557806321af4569146104ba57806324008a62146104e5575f80fd5b806302c3bcbb146103fa57806304ef9d581461042c57806308e0225c146104355780630db4b4e51461045f575b5f80fd5b610419610408366004613fa4565b60276020525f908152604090205481565b6040519081526020015b60405180910390f35b61041960225481565b610419610443366004613fbf565b601360209081525f928352604080842090915290825290205481565b610419601d5481565b610495610476366004613fbf565b602c60209081525f928352604080842090915290825290205460ff1681565b6040519015158152602001610423565b6104b86104b3366004613ff6565b610aa0565b005b601e546104cd906001600160a01b031681565b6040516001600160a01b039091168152602001610423565b6104196104f336600461404d565b610b18565b600a546104cd906001600160a01b031681565b61049561051936600461409b565b603960209081525f938452604080852082529284528284209052825290205460ff1681565b6001546104cd906001600160a01b031681565b61041961055f366004613fa4565b60166020525f908152604090205481565b6018546104959060ff1681565b61041961058b366004613fbf565b601260209081525f928352604080842090915290825290205481565b6104b86105b53660046140e3565b610bcf565b6018546104959062010000900460ff1681565b6104b86105db366004614126565b610c46565b6104196105ee366004613fa4565b601f6020525f908152604090205481565b61041961060d3660046141a6565b610d1e565b6106256106203660046140e3565b610d3f565b60408051938452602084019290925290820152606001610423565b61041961064e3660046141c0565b610d79565b6104b86106613660046140e3565b610f51565b610625610674366004613fa4565b610f9d565b6104cd6106873660046141fe565b610fb7565b6104b861069a3660046141c0565b610fdf565b6104196106ad366004613fa4565b602b6020525f908152604090205481565b6104196106cc366004614215565b611055565b6104b86106df36600461404d565b6112a5565b6104b86106f2366004614215565b611347565b610419601c5481565b61072861070e366004613fa4565b60356020525f90815260409020546001600160601b031681565b6040516001600160601b039091168152602001610423565b60185461049590610100900460ff1681565b601b546104cd906001600160a01b031681565b6004546104cd906001600160a01b031681565b610419610786366004613fa4565b60146020525f908152604090205481565b6104956107a5366004613fa4565b602d6020525f908152604090205460ff1681565b6015546104cd906001600160a01b031681565b61041960075481565b6107e86107e3366004614275565b6113e9565b60405161042391906142bc565b6025546104cd906001600160a01b031681565b603754610728906001600160601b031681565b6020546104cd906001600160a01b031681565b61086561083c366004613fa4565b60106020525f90815260409020546001600160e01b03811690600160e01b900463ffffffff1682565b604080516001600160e01b03909316835263ffffffff909116602083015201610423565b6002546104cd906001600160a01b031681565b6104196108aa366004613fa4565b602a6020525f908152604090205481565b6104196108c936600461404d565b611484565b61041960175481565b6033546001600160a01b03166104cd565b6108fd6a0c097ce7bc90715b34b9f160241b81565b6040516001600160e01b039091168152602001610423565b6021546104cd906001600160a01b031681565b6031546104cd906001600160a01b031681565b610419610949366004614215565b6114d0565b6026546104cd906001600160a01b031681565b6107285f81565b6104b8610976366004614354565b611659565b6104196109893660046141c0565b611a0b565b6104cd61099c366004614446565b611d7a565b6003546104cd906001600160a01b031681565b6104956109c2366004613fa4565b60386020525f908152604090205460ff1681565b61041960065481565b6108656109ed366004613fa4565b60116020525f90815260409020546001600160e01b03811690600160e01b900463ffffffff1682565b610495610a24366004614470565b611dae565b61041960055481565b610419610a403660046141c0565b611df2565b6104b8610a5336600461449f565b611e3e565b610495610a66366004613fbf565b603260209081525f928352604080842090915290825290205460ff1681565b5f546104cd906001600160a01b031681565b610419601a5481565b6031546001600160a01b031615610b11576031546040516367994e8b60e11b81526001600160a01b039091169063cf329d1690610ae39086908990600401614532565b5f604051808303815f87803b158015610afa575f80fd5b505af1158015610b0c573d5f803e3d5ffd5b505050505b5050505050565b5f610b21611f33565b610b2c856003611f83565b610b3d610b3886611fd1565b611ff2565b5f6040518060200160405280876001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b85573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ba9919061454c565b90529050610bb7868261203a565b610bc28685836121d1565b5f9150505b949350505050565b6031546001600160a01b031615610c40576031546040516367994e8b60e11b81526001600160a01b039091169063cf329d1690610c129086908890600401614532565b5f604051808303815f87803b158015610c29575f80fd5b505af1158015610c3b573d5f803e3d5ffd5b505050505b50505050565b6031546001600160a01b031615610d16576031546040516367994e8b60e11b81526001600160a01b039091169063cf329d1690610c899086908a90600401614532565b5f604051808303815f87803b158015610ca0575f80fd5b505af1158015610cb2573d5f803e3d5ffd5b50506031546040516367994e8b60e11b81526001600160a01b03909116925063cf329d169150610ce89087908a90600401614532565b5f604051808303815f87803b158015610cff575f80fd5b505af1158015610d11573d5f803e3d5ffd5b505050505b505050505050565b6001600160a01b031960a083901b166001600160a01b038216175b92915050565b5f805f805f80610d528a8a8a8a5f612355565b925092509250826014811115610d6a57610d6a614563565b9a919950975095505050505050565b5f610d82611f33565b610d8c845f611f83565b610d98610b3885611fd1565b6001600160a01b0384165f9081526027602052604081205490819003610dfe5760405162461bcd60e51b815260206004820152601660248201527506d61726b657420737570706c792063617020697320360541b60448201526064015b60405180910390fd5b5f856001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e3b573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e5f919061454c565b90505f6040518060200160405280886001600160a01b031663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ea9573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ecd919061454c565b905290505f610edd828488612402565b905083811115610f2f5760405162461bcd60e51b815260206004820152601960248201527f6d61726b657420737570706c79206361702072656163686564000000000000006044820152606401610df5565b610f3888612422565b610f42888861258f565b5f9450505050505b9392505050565b80151580610f5d575081155b610bcf5760405162461bcd60e51b815260206004820152601160248201527072656465656d546f6b656e73207a65726f60781b6044820152606401610df5565b5f805f610faa845f61272d565b9250925092509193909250565b600d8181548110610fc6575f80fd5b5f918252602090912001546001600160a01b0316905081565b6031546001600160a01b031615611050576031546040516367994e8b60e11b81526001600160a01b039091169063cf329d16906110229085908790600401614532565b5f604051808303815f87803b158015611039575f80fd5b505af115801561104b573d5f803e3d5ffd5b505050505b505050565b5f61105e611f33565b611069866005611f83565b6025546001600160a01b03161580159061109157506025546001600160a01b03858116911614155b1561109e5750600161129c565b6110aa610b3886611fd1565b6015545f906001600160a01b0388811691161461113c576110cd610b3888611fd1565b6040516395dd919360e01b81526001600160a01b0385811660048301528816906395dd919390602401602060405180830381865afa158015611111573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611135919061454c565b90506111ab565b601554604051633c617c9160e11b81526001600160a01b038681166004830152909116906378c2f92290602401602060405180830381865afa158015611184573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111a8919061454c565b90505b6001600160a01b0387165f908152602d602052604090205460ff16806111f557506001600160a01b038085165f908152603260209081526040808320938b168352929052205460ff165b15611213578083111561120d5760115b91505061129c565b5f611205565b5f80611223865f805f6001612355565b9193509091505f905082601481111561123e5761123e614563565b1461125f5781601481111561125557611255614563565b935050505061129c565b805f0361126d576003611255565b611287604051806020016040528060055481525084612765565b851115611295576011611255565b5f93505050505b95945050505050565b6031546001600160a01b031615610c40576031546040516367994e8b60e11b81526001600160a01b039091169063cf329d16906112e89086908890600401614532565b5f604051808303815f87803b1580156112ff575f80fd5b505af1158015611311573d5f803e3d5ffd5b50506031546040516367994e8b60e11b81526001600160a01b03909116925063cf329d169150610c129085908890600401614532565b6031546001600160a01b031615610b11576031546040516367994e8b60e11b81526001600160a01b039091169063cf329d169061138a9085908990600401614532565b5f604051808303815f87803b1580156113a1575f80fd5b505af11580156113b3573d5f803e3d5ffd5b50506031546040516367994e8b60e11b81526001600160a01b03909116925063cf329d169150610ae39086908990600401614532565b60366020525f908152604090208054819061140390614577565b80601f016020809104026020016040519081016040528092919081815260200182805461142f90614577565b801561147a5780601f106114515761010080835404028352916020019161147a565b820191905f5260205f20905b81548152906001019060200180831161145d57829003601f168201915b5050505050905081565b5f61148d611f33565b611498856006611f83565b5f6114a486868561277c565b905080156114b3579050610bc7565b6114bc86612422565b6114c6868661258f565b610bc2868561258f565b5f6114d9611f33565b6114e4866004611f83565b5f60095f6114f189612815565b81526020019081526020015f20905061150981611ff2565b6001600160a01b0384165f90815260028201602052604090205460ff16611531576013611205565b6015546001600160a01b0387811691161461155257611552610b3887611fd1565b856001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561158e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906115b291906145af565b6001600160a01b0316876001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115f7573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061161b91906145af565b6001600160a01b031614611630576002611205565b61163987612422565b611643878561258f565b61164d878661258f565b5f979650505050505050565b5f5b8881101561178d57898982818110611675576116756145ca565b905060200201602081019061168a9190613fa4565b6001600160a01b031663ae3fcb1f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116c5573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116e991906145de565b61172d5760405162461bcd60e51b8152602060048201526015602482015274119b185cda131bd85b881b9bdd08195b98589b1959605a1b6044820152606401610df5565b87878281811061173f5761173f6145ca565b905060200201355f036117855760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b6044820152606401610df5565b60010161165b565b506117978a612820565b6117a083612820565b87861415806117af5750878414155b806117b8575087155b156118055760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420666c6173684c6f616e20706172616d7300000000000000006044820152606401610df5565b6118738b8a8a808060200260200160405190810160405280939291908181526020018383602002808284375f9201919091525050604080516020808c0282810182019093528b82529093508b92508a9182918501908490808284375f9201919091525089925061286e915050565b6001600160a01b038b165f9081526038602052604090205460ff166118ed5760405162461bcd60e51b815260206004820152602a60248201527f466c617368206c6f616e206e6f7420617574686f72697a656420666f722074686044820152691a5cc81858d8dbdd5b9d60b21b6064820152608401610df5565b6119be8a8a8a808060200260200160405190810160405280939291908181526020018383602002808284375f9201919091525050604080516020808e0282810182019093528d82529093508d92508c9182918501908490808284375f9201919091525050604080516020808d0282810182019093528c82529093508c92508b9182918501908490808284375f9201919091525050604080516020601f8b018190048102820181019092528981528b9350915089908990819084018382808284375f920191909152506129f392505050565b507f785e5057f6e5f2e298f8dce2755a6ef29f9dd8a0f82a8b5cad101ea5ef803f048a8a8a8a8a6040516119f69594939291906145fd565b60405180910390a15050505050505050505050565b5f611a14611f33565b611a1f846002611f83565b611a2b610b3885611fd1565b611a358385612c14565b6001600160a01b0384165f908152601f602052604081205490819003611a965760405162461bcd60e51b815260206004820152601660248201527506d61726b657420626f72726f772063617020697320360541b6044820152606401610df5565b611a9f85611fd1565b6001600160a01b0385165f908152600291909101602052604090205460ff16611b5457336001600160a01b03861614611b125760405162461bcd60e51b815260206004820152601560248201527439b2b73232b91036bab9ba103132903b2a37b5b2b760591b6044820152606401610df5565b5f611b1d8686612c7a565b90505f816014811115611b3257611b32614563565b14611b5257806014811115611b4957611b49614563565b92505050610f4a565b505b6004805460405163fc57d4df60e01b81526001600160a01b038881169382019390935291169063fc57d4df90602401602060405180830381865afa158015611b9e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611bc2919061454c565b5f03611bd257600d915050610f4a565b5f611c3c866001600160a01b03166347bd37186040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c12573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611c36919061454c565b85612d5d565b905081811115611c8e5760405162461bcd60e51b815260206004820152601960248201527f6d61726b657420626f72726f77206361702072656163686564000000000000006044820152606401610df5565b5f80611c9d87895f895f612355565b9193509091505f9050826014811115611cb857611cb8614563565b14611cda57816014811115611ccf57611ccf614563565b945050505050610f4a565b8015611ce7576004611ccf565b5f60405180602001604052808a6001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d2f573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611d53919061454c565b90529050611d61898261203a565b611d6c8989836121d1565b5f9998505050505050505050565b6008602052815f5260405f208181548110611d93575f80fd5b5f918252602090912001546001600160a01b03169150829050565b6001600160a01b0382165f90815260296020526040812081836008811115611dd857611dd8614563565b815260208101919091526040015f205460ff169392505050565b5f611dfb611f33565b611e06846001611f83565b5f611e1285858561277c565b90508015611e21579050610f4a565b611e2a85612422565b611e34858561258f565b5f95945050505050565b611e46612d92565b848381148015611e5557508082145b611e915760405162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a59081a5b9c1d5d609a1b6044820152606401610df5565b5f5b81811015610c3b57611eca888883818110611eb057611eb06145ca565b9050602002016020810190611ec59190613fa4565b612820565b611f2b888883818110611edf57611edf6145ca565b9050602002016020810190611ef49190613fa4565b878784818110611f0657611f066145ca565b90506020020135868685818110611f1f57611f1f6145ca565b90506020020135612ddc565b600101611e93565b60185462010000900460ff1615611f815760405162461bcd60e51b81526020600482015260126024820152711c1c9bdd1bd8dbdb081a5cc81c185d5cd95960721b6044820152606401610df5565b565b611f8d8282611dae565b15611fcd5760405162461bcd60e51b815260206004820152601060248201526f1858dd1a5bdb881a5cc81c185d5cd95960821b6044820152606401610df5565b5050565b5f60095f611fde84612815565b81526020019081526020015f209050919050565b805460ff166120375760405162461bcd60e51b81526020600482015260116024820152701b585c9ad95d081b9bdd081b1a5cdd1959607a1b6044820152606401610df5565b50565b6001600160a01b0382165f908152601160209081526040808320602a9092528220549091612066612f56565b83549091505f906120879063ffffffff80851691600160e01b900416612f8f565b9050801580159061209757508215155b156121a6575f612106876001600160a01b03166347bd37186040518163ffffffff1660e01b8152600401602060405180830381865afa1580156120dc573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612100919061454c565b87612fc8565b90505f6121138386612fe5565b90505f825f036121315760405180602001604052805f81525061213b565b61213b8284613026565b604080516020810190915288546001600160e01b03168152909150612184906121649083613069565b516040805180820190915260038152620c8c8d60ea1b6020820152613092565b6001600160e01b0316600160e01b63ffffffff87160217875550610d16915050565b8015610d1657835463ffffffff8316600160e01b026001600160e01b03909116178455505050505050565b601b546001600160a01b0316156121ea576121ea6130c0565b6001600160a01b038381165f9081526011602090815260408083205460138352818420948716845293909152902080546001600160e01b0390921690819055908015801561224657506a0c097ce7bc90715b34b9f160241b8210155b1561225c57506a0c097ce7bc90715b34b9f160241b5b5f60405180602001604052806122728585612f8f565b90526040516395dd919360e01b81526001600160a01b0387811660048301529192505f916122cb916122c5918a16906395dd919390602401602060405180830381865afa1580156120dc573d5f803e3d5ffd5b83613232565b6001600160a01b0387165f908152601460205260409020549091506122f09082612d5d565b6001600160a01b038781165f818152601460209081526040918290209490945580518581529384018890529092918a16917f837bdc11fca9f17ce44167944475225a205279b17e88c791c3b1f66f354668fb910160405180910390a350505050505050565b602654604051637bd48c1f60e11b81525f91829182918291829182916001600160a01b039091169063f7a9183e9061239b9030908f908f908f908f908f9060040161468a565b606060405180830381865afa1580156123b6573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906123da91906146d9565b9250925092508260148111156123f2576123f2614563565b9b919a5098509650505050505050565b5f8061240e8585613259565b905061129c61241c8261327f565b84612d5d565b6001600160a01b0381165f908152601060209081526040808320602b909252822054909161244e612f56565b83549091505f9061246f9063ffffffff80851691600160e01b900416612f8f565b9050801580159061247f57508215155b15612565575f856001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124c1573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906124e5919061454c565b90505f6124f28386612fe5565b90505f825f036125105760405180602001604052805f81525061251a565b61251a8284613026565b604080516020810190915288546001600160e01b03168152909150612543906121649083613069565b6001600160e01b0316600160e01b63ffffffff87160217875550610b11915050565b8015610b1157835463ffffffff8316600160e01b026001600160e01b039091161784555050505050565b601b546001600160a01b0316156125a8576125a86130c0565b6001600160a01b038281165f9081526010602090815260408083205460128352818420948616845293909152902080546001600160e01b0390921690819055908015801561260457506a0c097ce7bc90715b34b9f160241b8210155b1561261a57506a0c097ce7bc90715b34b9f160241b5b5f60405180602001604052806126308585612f8f565b90526040516370a0823160e01b81526001600160a01b0386811660048301529192505f916126a491908816906370a0823190602401602060405180830381865afa158015612680573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906122c5919061454c565b6001600160a01b0386165f908152601460205260409020549091506126c99082612d5d565b6001600160a01b038681165f818152601460209081526040918290209490945580518581529384018890529092918916917ffa9d964d891991c113b49e3db1932abd6c67263d387119707aafdd6c4010a3a9910160405180910390a3505050505050565b5f805f805f80612740885f805f8b612355565b92509250925082601481111561275857612758614563565b9891975095509350505050565b5f806127718484613259565b9050610bc78161327f565b5f612789610b3885611fd1565b61279284611fd1565b6001600160a01b0384165f908152600291909101602052604090205460ff166127bc57505f610f4a565b5f806127cb8587865f80612355565b9193509091505f90508260148111156127e6576127e6614563565b146127fd57816014811115611b4957611b49614563565b801561280a576004611b49565b5f9695505050505050565b5f610d395f83610d1e565b6001600160a01b0381166120375760405162461bcd60e51b815260206004820152601560248201527463616e2774206265207a65726f206164647265737360581b6044820152606401610df5565b836001600160a01b0316816001600160a01b031614612987575f5b8351811015612985578281815181106128a4576128a46145ca565b602002602001015160010361297d576001600160a01b0382165f90815260396020526040812085519091908690849081106128e1576128e16145ca565b6020908102919091018101516001600160a01b0390811683528282019390935260409182015f908120938916815292905290205460ff1661297d5760405162461bcd60e51b815260206004820152603060248201527f53656e646572206e6f7420617574686f72697a656420746f2075736520666c6160448201526f39b43637b0b71037b7103132b430b63360811b6064820152608401610df5565b600101612889565b505b5f5b8251811015610b115760018382815181106129a6576129a66145ca565b602002602001015111156129eb5760405162461bcd60e51b815260206004820152600c60248201526b496e76616c6964206d6f646560a01b6044820152606401610df5565b600101612989565b612a2c6040518060c001604052806060815260200160608152602001606081526020016060815260200160608152602001606081525090565b855167ffffffffffffffff811115612a4657612a46614704565b604051908082528060200260200182016040528015612a6f578160200160208202803683370190505b508152855167ffffffffffffffff811115612a8c57612a8c614704565b604051908082528060200260200182016040528015612ab5578160200160208202803683370190505b506020820152855167ffffffffffffffff811115612ad557612ad5614704565b604051908082528060200260200182016040528015612afe578160200160208202803683370190505b506040820152855167ffffffffffffffff811115612b1e57612b1e614704565b604051908082528060200260200182016040528015612b47578160200160208202803683370190505b506060820152855167ffffffffffffffff811115612b6757612b67614704565b604051908082528060200260200182016040528015612b90578160200160208202803683370190505b506080820152855167ffffffffffffffff811115612bb057612bb0614704565b604051908082528060200260200182016040528015612bd9578160200160208202803683370190505b5060a0820152612beb87878784613296565b612bfc8787878460400151866134c5565b612c0a878787878786613585565b9695505050505050565b6001600160a01b0382165f90815260356020526040812054612c3f906001600160601b031683610d1e565b5f81815260096020526040902060060154909150600160601b900460ff16611050576040516305b80c7960e41b815260040160405180910390fd5b5f612c86836007611f83565b5f60095f612c9386612815565b81526020019081526020015f209050612cab81611ff2565b6001600160a01b0383165f90815260028201602052604090205460ff1615612cd6575f915050610d39565b6001600160a01b038084165f8181526002840160209081526040808320805460ff191660019081179091556008835281842080549182018155845291832090910180549489166001600160a01b031990951685179055519192917f3ab23ab0d51cccc0c3085aec51f99228625aa1a922b3a8ca89a26b0f2027a1a59190a3505f9392505050565b5f610f4a8383604051806040016040528060118152602001706164646974696f6e206f766572666c6f7760781b8152506137d4565b5f546001600160a01b03163314611f815760405162461bcd60e51b815260206004820152600e60248201526d37b7363c9030b236b4b71031b0b760911b6044820152606401610df5565b612de8610b3884611fd1565b6001600160a01b0383165f908152602b60205260409020548214612e6457612e0f83612422565b6001600160a01b0383165f818152602b602052604090819020849055517fa9ff26899e4982e7634afa9f70115dcfb61a17d6e8cdd91aa837671d0ff40ba690612e5b9085815260200190565b60405180910390a25b6001600160a01b0383165f908152602a60205260409020548114611050575f6040518060200160405280856001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612eca573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612eee919061454c565b90529050612efc848261203a565b6001600160a01b0384165f818152602a602052604090819020849055517f0c62c1bc89ec4c40dccb4d21543e782c5ba43897c0075d108d8964181ea3c51b90612f489085815260200190565b60405180910390a250505050565b5f612f8a4360405180604001604052806011815260200170626c6f636b2023203e203332206269747360781b81525061380d565b905090565b5f610f4a8383604051806040016040528060158152602001747375627472616374696f6e20756e646572666c6f7760581b815250613834565b5f610f4a612fde84670de0b6b3a7640000612fe5565b8351613862565b5f610f4a83836040518060400160405280601781526020017f6d756c7469706c69636174696f6e206f766572666c6f77000000000000000000815250613894565b60408051602081019091525f8152604051806020016040528061306061305a866a0c097ce7bc90715b34b9f160241b612fe5565b85613862565b90529392505050565b60408051602081019091525f81526040518060200160405280613060855f0151855f0151612d5d565b5f81600160e01b84106130b85760405162461bcd60e51b8152600401610df591906142bc565b509192915050565b601c5415806130d05750601c5443105b156130d757565b6033546040516370a0823160e01b81523060048201526001600160a01b03909116905f9082906370a0823190602401602060405180830381865afa158015613121573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190613145919061454c565b9050805f03613152575050565b5f8061316043601c54612f8f565b90505f61316f601a5483612fe5565b905080841061318057809250613184565b8392505b601d54831015613195575050505050565b43601c55601b546131b3906001600160a01b038781169116856138e4565b6040518381527ff6d4b8f74d85a6e2d7a50225957b8a6cfec69ad92f5905627260541aa0a5565d9060200160405180910390a1601b5f9054906101000a90046001600160a01b03166001600160a01b031663faa1809e6040518163ffffffff1660e01b81526004015f604051808303815f87803b158015610afa575f80fd5b5f6a0c097ce7bc90715b34b9f160241b61324f84845f0151612fe5565b610f4a919061472c565b60408051602081019091525f81526040518060200160405280613060855f015185612fe5565b80515f90610d3990670de0b6b3a76400009061472c565b5f5b8351811015610b11578381815181106132b3576132b36145ca565b60200260200101516001600160a01b03166371507cd58483815181106132db576132db6145ca565b60200260200101516040518263ffffffff1660e01b815260040161330191815260200190565b6040805180830381865afa15801561331b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061333f919061474b565b8351805184908110613353576133536145ca565b6020026020010184602001518481518110613370576133706145ca565b602002602001018281525082815250505081602001518181518110613397576133976145ca565b6020026020010151825f015182815181106133b4576133b46145ca565b60200260200101516133c6919061476d565b826040015182815181106133dc576133dc6145ca565b6020026020010181815250508381815181106133fa576133fa6145ca565b60200260200101516001600160a01b031663dd5f608586858481518110613423576134236145ca565b60200260200101516040518363ffffffff1660e01b815260040161345c9291906001600160a01b03929092168252602082015260400190565b6020604051808303815f875af1158015613478573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061349c919061454c565b826060015182815181106134b2576134b26145ca565b6020908102919091010152600101613298565b604051632483d72160e21b81526001600160a01b0386169063920f5c84906134f990879087908790339088906004016147ba565b6020604051808303815f875af1158015613515573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061353991906145de565b610b115760405162461bcd60e51b815260206004820152601860248201527f4578656375746520666c6173684c6f616e206661696c656400000000000000006044820152606401610df5565b5f5b855181101561104b578381815181106135a2576135a26145ca565b60200260200101515f036136d2576136468682815181106135c5576135c56145ca565b6020026020010151888784815181106135e0576135e06145ca565b6020026020010151856040015185815181106135fe576135fe6145ca565b6020026020010151865f0151868151811061361b5761361b6145ca565b602002602001015187606001518781518110613639576136396145ca565b6020026020010151613936565b8160400151818151811061365c5761365c6145ca565b6020026020010151858281518110613676576136766145ca565b6020026020010151613688919061476d565b8260800151828151811061369e5761369e6145ca565b6020026020010181815250505f8260a0015182815181106136c1576136c16145ca565b6020026020010181815250506137cc565b8381815181106136e4576136e46145ca565b60200260200101516001036137cc57613789868281518110613708576137086145ca565b602002602001015184878481518110613723576137236145ca565b602002602001015185604001518581518110613741576137416145ca565b6020026020010151865f0151868151811061375e5761375e6145ca565b60200260200101518760600151878151811061377c5761377c6145ca565b6020026020010151613bcd565b8360800151838151811061379f5761379f6145ca565b602002602001018460a0015184815181106137bc576137bc6145ca565b6020908102919091010191909152525b600101613587565b5f806137e0848661476d565b905082858210156138045760405162461bcd60e51b8152600401610df591906142bc565b50949350505050565b5f8164010000000084106130b85760405162461bcd60e51b8152600401610df591906142bc565b5f81848411156138575760405162461bcd60e51b8152600401610df591906142bc565b50610bc78385614854565b5f610f4a83836040518060400160405280600e81526020016d646976696465206279207a65726f60901b815250613d65565b5f8315806138a0575082155b156138ac57505f610f4a565b5f6138b78486614867565b9050836138c4868361472c565b1483906138045760405162461bcd60e51b8152600401610df591906142bc565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611050908490613d90565b604051639bf829a760e01b81526001600160a01b038681166004830152602482018690526044820185905260648201839052871690639bf829a7906084015f604051808303815f87803b15801561398b575f80fd5b505af115801561399d573d5f803e3d5ffd5b50505050856001600160a01b031663dd5f6085876001600160a01b031663e9a44fd96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156139ec573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190613a1091906145af565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018590526044016020604051808303815f875af1158015613a5a573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190613a7e919061454c565b50856001600160a01b031663e9a44fd96040518163ffffffff1660e01b8152600401602060405180830381865afa158015613abb573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190613adf91906145af565b6001600160a01b03166316faecec876001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613b29573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190613b4d91906145af565b886001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015613b89573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190613bad91906145af565b60026040518463ffffffff1660e01b8152600401610ce89392919061487e565b5f808781613bdb878961476d565b90505f826001600160a01b031663a6afed956040518163ffffffff1660e01b81526004016020604051808303815f875af1158015613c1b573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190613c3f919061454c565b90508015613c8f5760405162461bcd60e51b815260206004820152601960248201527f4661696c656420746f2061636372756520696e746572657374000000000000006044820152606401610df5565b60405163d310dce560e01b81526001600160a01b038b81166004830152602482018490525f919085169063d310dce5906044016020604051808303815f875af1158015613cde573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190613d02919061454c565b90508015613d525760405162461bcd60e51b815260206004820152601e60248201527f4661696c656420746f20637265617465206465627420706f736974696f6e00006044820152606401610df5565b505f9b919a509098505050505050505050565b5f8183613d855760405162461bcd60e51b8152600401610df591906142bc565b50610bc7838561472c565b5f613de4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613e639092919063ffffffff16565b905080515f1480613e04575080806020019051810190613e0491906145de565b6110505760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610df5565b6060610bc784845f85855f80866001600160a01b03168587604051613e8891906148b4565b5f6040518083038185875af1925050503d805f8114613ec2576040519150601f19603f3d011682016040523d82523d5f602084013e613ec7565b606091505b5091509150613ed887838387613ee3565b979650505050505050565b60608315613f515782515f03613f4a576001600160a01b0385163b613f4a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610df5565b5081610bc7565b610bc78383815115613f665781518083602001fd5b8060405162461bcd60e51b8152600401610df591906142bc565b6001600160a01b0381168114612037575f80fd5b8035613f9f81613f80565b919050565b5f60208284031215613fb4575f80fd5b8135610f4a81613f80565b5f8060408385031215613fd0575f80fd5b8235613fdb81613f80565b91506020830135613feb81613f80565b809150509250929050565b5f805f805f60a0868803121561400a575f80fd5b853561401581613f80565b9450602086013561402581613f80565b9350604086013561403581613f80565b94979396509394606081013594506080013592915050565b5f805f8060808587031215614060575f80fd5b843561406b81613f80565b9350602085013561407b81613f80565b9250604085013561408b81613f80565b9396929550929360600135925050565b5f805f606084860312156140ad575f80fd5b83356140b881613f80565b925060208401356140c881613f80565b915060408401356140d881613f80565b809150509250925092565b5f805f80608085870312156140f6575f80fd5b843561410181613f80565b9350602085013561411181613f80565b93969395505050506040820135916060013590565b5f805f805f8060c0878903121561413b575f80fd5b863561414681613f80565b9550602087013561415681613f80565b9450604087013561416681613f80565b9350606087013561417681613f80565b9598949750929560808101359460a0909101359350915050565b80356001600160601b0381168114613f9f575f80fd5b5f80604083850312156141b7575f80fd5b613fdb83614190565b5f805f606084860312156141d2575f80fd5b83356141dd81613f80565b925060208401356141ed81613f80565b929592945050506040919091013590565b5f6020828403121561420e575f80fd5b5035919050565b5f805f805f60a08688031215614229575f80fd5b853561423481613f80565b9450602086013561424481613f80565b9350604086013561425481613f80565b9250606086013561426481613f80565b949793965091946080013592915050565b5f60208284031215614285575f80fd5b610f4a82614190565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f610f4a602083018461428e565b5f8083601f8401126142de575f80fd5b50813567ffffffffffffffff8111156142f5575f80fd5b6020830191508360208260051b850101111561430f575f80fd5b9250929050565b5f8083601f840112614326575f80fd5b50813567ffffffffffffffff81111561433d575f80fd5b60208301915083602082850101111561430f575f80fd5b5f805f805f805f805f805f60e08c8e03121561436e575f80fd5b6143778c613f94565b9a5061438560208d01613f94565b995067ffffffffffffffff8060408e013511156143a0575f80fd5b6143b08e60408f01358f016142ce565b909a50985060608d01358110156143c5575f80fd5b6143d58e60608f01358f016142ce565b909850965060808d01358110156143ea575f80fd5b6143fa8e60808f01358f016142ce565b909650945061440b60a08e01613f94565b93508060c08e0135111561441d575f80fd5b5061442e8d60c08e01358e01614316565b81935080925050509295989b509295989b9093969950565b5f8060408385031215614457575f80fd5b823561446281613f80565b946020939093013593505050565b5f8060408385031215614481575f80fd5b823561448c81613f80565b9150602083013560098110613feb575f80fd5b5f805f805f80606087890312156144b4575f80fd5b863567ffffffffffffffff808211156144cb575f80fd5b6144d78a838b016142ce565b909850965060208901359150808211156144ef575f80fd5b6144fb8a838b016142ce565b90965094506040890135915080821115614513575f80fd5b5061452089828a016142ce565b979a9699509497509295939492505050565b6001600160a01b0392831681529116602082015260400190565b5f6020828403121561455c575f80fd5b5051919050565b634e487b7160e01b5f52602160045260245ffd5b600181811c9082168061458b57607f821691505b6020821081036145a957634e487b7160e01b5f52602260045260245ffd5b50919050565b5f602082840312156145bf575f80fd5b8151610f4a81613f80565b634e487b7160e01b5f52603260045260245ffd5b5f602082840312156145ee575f80fd5b81518015158114610f4a575f80fd5b6001600160a01b038681168252606060208084018290529083018690525f91879160808501845b8981101561464b57843561463781613f80565b841682529382019390820190600101614624565b5085810360408701528681526001600160fb1b0387111561466a575f80fd5b8660051b9350838860208301379092016020019998505050505050505050565b6001600160a01b038781168252868116602083015285166040820152606081018490526080810183905260c08101600283106146c8576146c8614563565b8260a0830152979650505050505050565b5f805f606084860312156146eb575f80fd5b8351925060208401519150604084015190509250925092565b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b5f8261474657634e487b7160e01b5f52601260045260245ffd5b500490565b5f806040838503121561475c575f80fd5b505080516020909101519092909150565b80820180821115610d3957610d39614718565b5f815180845260208085019450602084015f5b838110156147af57815187529582019590820190600101614793565b509495945050505050565b60a080825286519082018190525f9060209060c0840190828a01845b828110156147fb5781516001600160a01b0316845292840192908401906001016147d6565b50505083810360208501526148108189614780565b91505082810360408401526148258187614780565b6001600160a01b038616606085015283810360808501529050614848818561428e565b98975050505050505050565b81810381811115610d3957610d39614718565b8082028115828204841417610d3957610d39614718565b6001600160a01b0384811682528316602082015260608101600383106148a6576148a6614563565b826040830152949350505050565b5f82518060208501845e5f92019182525091905056fea2646970667358221220ded107e26a0459c0bc2a8e54886a14aca964ca12f347b7852ab538296207416564736f6c63430008190033",
  "deployedBytecode": "0x608060405234801561000f575f80fd5b50600436106103f6575f3560e01c80637dc0d1d011610216578063c7ee005e1161012a578063e336b3db116100b4578063eabe7d9111610084578063eabe7d9114610a32578063ead1a8a014610a45578063f445d70314610a58578063f851a44014610a85578063fa6331d814610a97575f80fd5b8063e336b3db146109d6578063e37d4b79146109df578063e85a296014610a16578063e875544614610a29575f80fd5b8063d4b1fe58116100fa578063d4b1fe5814610968578063da3d454c1461097b578063dce154491461098e578063dcfbc0c7146109a1578063e0f6123d146109b4575f80fd5b8063c7ee005e14610928578063d02f73511461093b578063d3270f991461094e578063d463654c14610961575f80fd5b8063b2eafc39116101ab578063bdcdc2581161017b578063bdcdc258146108bb578063bec04f72146108ce578063bf32442d146108d7578063c5b4db55146108e8578063c5f956af14610915575f80fd5b8063b2eafc391461081b578063b8324c7c1461082e578063bb82aa5e14610889578063bbb8864a1461089c575f80fd5b806394b2294b116101e657806394b2294b146107cc57806396c99064146107d55780639bb27d62146107f5578063a657e57914610808575f80fd5b80637dc0d1d0146107655780638a7dc165146107785780638c1ac18a146107975780639254f5e5146107b9575f80fd5b80634a5844321161030d5780635dd3fc9d116102a25780636d35bf91116102725780636d35bf91146106e4578063719f701b146106f7578063737690991461070057806376551383146107405780637d172bd514610752575f80fd5b80635dd3fc9d1461069f5780635ec88c79146106665780635fc7e71e146106be5780636a56947e146106d1575f80fd5b806351dff989116102dd57806351dff98914610653578063528a174c1461066657806352d84d1e146106795780635c7786051461068c575f80fd5b80634a584432146105e05780634d99c776146105ff5780634e79238f146106125780634ef4c3e114610640575f80fd5b806324a3d6221161038e5780634088c73e1161035e5780634088c73e1461057057806341a18d2c1461057d57806341c728b9146105a7578063425fad58146105ba57806347ef3b3b146105cd575f80fd5b806324a3d622146104f8578063258c19c21461050b578063267822471461053e5780632bc7e29e14610551575f80fd5b806310b98338116103c957806310b98338146104685780631ededc91146104a557806321af4569146104ba57806324008a62146104e5575f80fd5b806302c3bcbb146103fa57806304ef9d581461042c57806308e0225c146104355780630db4b4e51461045f575b5f80fd5b610419610408366004613fa4565b60276020525f908152604090205481565b6040519081526020015b60405180910390f35b61041960225481565b610419610443366004613fbf565b601360209081525f928352604080842090915290825290205481565b610419601d5481565b610495610476366004613fbf565b602c60209081525f928352604080842090915290825290205460ff1681565b6040519015158152602001610423565b6104b86104b3366004613ff6565b610aa0565b005b601e546104cd906001600160a01b031681565b6040516001600160a01b039091168152602001610423565b6104196104f336600461404d565b610b18565b600a546104cd906001600160a01b031681565b61049561051936600461409b565b603960209081525f938452604080852082529284528284209052825290205460ff1681565b6001546104cd906001600160a01b031681565b61041961055f366004613fa4565b60166020525f908152604090205481565b6018546104959060ff1681565b61041961058b366004613fbf565b601260209081525f928352604080842090915290825290205481565b6104b86105b53660046140e3565b610bcf565b6018546104959062010000900460ff1681565b6104b86105db366004614126565b610c46565b6104196105ee366004613fa4565b601f6020525f908152604090205481565b61041961060d3660046141a6565b610d1e565b6106256106203660046140e3565b610d3f565b60408051938452602084019290925290820152606001610423565b61041961064e3660046141c0565b610d79565b6104b86106613660046140e3565b610f51565b610625610674366004613fa4565b610f9d565b6104cd6106873660046141fe565b610fb7565b6104b861069a3660046141c0565b610fdf565b6104196106ad366004613fa4565b602b6020525f908152604090205481565b6104196106cc366004614215565b611055565b6104b86106df36600461404d565b6112a5565b6104b86106f2366004614215565b611347565b610419601c5481565b61072861070e366004613fa4565b60356020525f90815260409020546001600160601b031681565b6040516001600160601b039091168152602001610423565b60185461049590610100900460ff1681565b601b546104cd906001600160a01b031681565b6004546104cd906001600160a01b031681565b610419610786366004613fa4565b60146020525f908152604090205481565b6104956107a5366004613fa4565b602d6020525f908152604090205460ff1681565b6015546104cd906001600160a01b031681565b61041960075481565b6107e86107e3366004614275565b6113e9565b60405161042391906142bc565b6025546104cd906001600160a01b031681565b603754610728906001600160601b031681565b6020546104cd906001600160a01b031681565b61086561083c366004613fa4565b60106020525f90815260409020546001600160e01b03811690600160e01b900463ffffffff1682565b604080516001600160e01b03909316835263ffffffff909116602083015201610423565b6002546104cd906001600160a01b031681565b6104196108aa366004613fa4565b602a6020525f908152604090205481565b6104196108c936600461404d565b611484565b61041960175481565b6033546001600160a01b03166104cd565b6108fd6a0c097ce7bc90715b34b9f160241b81565b6040516001600160e01b039091168152602001610423565b6021546104cd906001600160a01b031681565b6031546104cd906001600160a01b031681565b610419610949366004614215565b6114d0565b6026546104cd906001600160a01b031681565b6107285f81565b6104b8610976366004614354565b611659565b6104196109893660046141c0565b611a0b565b6104cd61099c366004614446565b611d7a565b6003546104cd906001600160a01b031681565b6104956109c2366004613fa4565b60386020525f908152604090205460ff1681565b61041960065481565b6108656109ed366004613fa4565b60116020525f90815260409020546001600160e01b03811690600160e01b900463ffffffff1682565b610495610a24366004614470565b611dae565b61041960055481565b610419610a403660046141c0565b611df2565b6104b8610a5336600461449f565b611e3e565b610495610a66366004613fbf565b603260209081525f928352604080842090915290825290205460ff1681565b5f546104cd906001600160a01b031681565b610419601a5481565b6031546001600160a01b031615610b11576031546040516367994e8b60e11b81526001600160a01b039091169063cf329d1690610ae39086908990600401614532565b5f604051808303815f87803b158015610afa575f80fd5b505af1158015610b0c573d5f803e3d5ffd5b505050505b5050505050565b5f610b21611f33565b610b2c856003611f83565b610b3d610b3886611fd1565b611ff2565b5f6040518060200160405280876001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b85573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ba9919061454c565b90529050610bb7868261203a565b610bc28685836121d1565b5f9150505b949350505050565b6031546001600160a01b031615610c40576031546040516367994e8b60e11b81526001600160a01b039091169063cf329d1690610c129086908890600401614532565b5f604051808303815f87803b158015610c29575f80fd5b505af1158015610c3b573d5f803e3d5ffd5b505050505b50505050565b6031546001600160a01b031615610d16576031546040516367994e8b60e11b81526001600160a01b039091169063cf329d1690610c899086908a90600401614532565b5f604051808303815f87803b158015610ca0575f80fd5b505af1158015610cb2573d5f803e3d5ffd5b50506031546040516367994e8b60e11b81526001600160a01b03909116925063cf329d169150610ce89087908a90600401614532565b5f604051808303815f87803b158015610cff575f80fd5b505af1158015610d11573d5f803e3d5ffd5b505050505b505050505050565b6001600160a01b031960a083901b166001600160a01b038216175b92915050565b5f805f805f80610d528a8a8a8a5f612355565b925092509250826014811115610d6a57610d6a614563565b9a919950975095505050505050565b5f610d82611f33565b610d8c845f611f83565b610d98610b3885611fd1565b6001600160a01b0384165f9081526027602052604081205490819003610dfe5760405162461bcd60e51b815260206004820152601660248201527506d61726b657420737570706c792063617020697320360541b60448201526064015b60405180910390fd5b5f856001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e3b573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e5f919061454c565b90505f6040518060200160405280886001600160a01b031663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ea9573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ecd919061454c565b905290505f610edd828488612402565b905083811115610f2f5760405162461bcd60e51b815260206004820152601960248201527f6d61726b657420737570706c79206361702072656163686564000000000000006044820152606401610df5565b610f3888612422565b610f42888861258f565b5f9450505050505b9392505050565b80151580610f5d575081155b610bcf5760405162461bcd60e51b815260206004820152601160248201527072656465656d546f6b656e73207a65726f60781b6044820152606401610df5565b5f805f610faa845f61272d565b9250925092509193909250565b600d8181548110610fc6575f80fd5b5f918252602090912001546001600160a01b0316905081565b6031546001600160a01b031615611050576031546040516367994e8b60e11b81526001600160a01b039091169063cf329d16906110229085908790600401614532565b5f604051808303815f87803b158015611039575f80fd5b505af115801561104b573d5f803e3d5ffd5b505050505b505050565b5f61105e611f33565b611069866005611f83565b6025546001600160a01b03161580159061109157506025546001600160a01b03858116911614155b1561109e5750600161129c565b6110aa610b3886611fd1565b6015545f906001600160a01b0388811691161461113c576110cd610b3888611fd1565b6040516395dd919360e01b81526001600160a01b0385811660048301528816906395dd919390602401602060405180830381865afa158015611111573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611135919061454c565b90506111ab565b601554604051633c617c9160e11b81526001600160a01b038681166004830152909116906378c2f92290602401602060405180830381865afa158015611184573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111a8919061454c565b90505b6001600160a01b0387165f908152602d602052604090205460ff16806111f557506001600160a01b038085165f908152603260209081526040808320938b168352929052205460ff165b15611213578083111561120d5760115b91505061129c565b5f611205565b5f80611223865f805f6001612355565b9193509091505f905082601481111561123e5761123e614563565b1461125f5781601481111561125557611255614563565b935050505061129c565b805f0361126d576003611255565b611287604051806020016040528060055481525084612765565b851115611295576011611255565b5f93505050505b95945050505050565b6031546001600160a01b031615610c40576031546040516367994e8b60e11b81526001600160a01b039091169063cf329d16906112e89086908890600401614532565b5f604051808303815f87803b1580156112ff575f80fd5b505af1158015611311573d5f803e3d5ffd5b50506031546040516367994e8b60e11b81526001600160a01b03909116925063cf329d169150610c129085908890600401614532565b6031546001600160a01b031615610b11576031546040516367994e8b60e11b81526001600160a01b039091169063cf329d169061138a9085908990600401614532565b5f604051808303815f87803b1580156113a1575f80fd5b505af11580156113b3573d5f803e3d5ffd5b50506031546040516367994e8b60e11b81526001600160a01b03909116925063cf329d169150610ae39086908990600401614532565b60366020525f908152604090208054819061140390614577565b80601f016020809104026020016040519081016040528092919081815260200182805461142f90614577565b801561147a5780601f106114515761010080835404028352916020019161147a565b820191905f5260205f20905b81548152906001019060200180831161145d57829003601f168201915b5050505050905081565b5f61148d611f33565b611498856006611f83565b5f6114a486868561277c565b905080156114b3579050610bc7565b6114bc86612422565b6114c6868661258f565b610bc2868561258f565b5f6114d9611f33565b6114e4866004611f83565b5f60095f6114f189612815565b81526020019081526020015f20905061150981611ff2565b6001600160a01b0384165f90815260028201602052604090205460ff16611531576013611205565b6015546001600160a01b0387811691161461155257611552610b3887611fd1565b856001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561158e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906115b291906145af565b6001600160a01b0316876001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115f7573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061161b91906145af565b6001600160a01b031614611630576002611205565b61163987612422565b611643878561258f565b61164d878661258f565b5f979650505050505050565b5f5b8881101561178d57898982818110611675576116756145ca565b905060200201602081019061168a9190613fa4565b6001600160a01b031663ae3fcb1f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116c5573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116e991906145de565b61172d5760405162461bcd60e51b8152602060048201526015602482015274119b185cda131bd85b881b9bdd08195b98589b1959605a1b6044820152606401610df5565b87878281811061173f5761173f6145ca565b905060200201355f036117855760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b6044820152606401610df5565b60010161165b565b506117978a612820565b6117a083612820565b87861415806117af5750878414155b806117b8575087155b156118055760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420666c6173684c6f616e20706172616d7300000000000000006044820152606401610df5565b6118738b8a8a808060200260200160405190810160405280939291908181526020018383602002808284375f9201919091525050604080516020808c0282810182019093528b82529093508b92508a9182918501908490808284375f9201919091525089925061286e915050565b6001600160a01b038b165f9081526038602052604090205460ff166118ed5760405162461bcd60e51b815260206004820152602a60248201527f466c617368206c6f616e206e6f7420617574686f72697a656420666f722074686044820152691a5cc81858d8dbdd5b9d60b21b6064820152608401610df5565b6119be8a8a8a808060200260200160405190810160405280939291908181526020018383602002808284375f9201919091525050604080516020808e0282810182019093528d82529093508d92508c9182918501908490808284375f9201919091525050604080516020808d0282810182019093528c82529093508c92508b9182918501908490808284375f9201919091525050604080516020601f8b018190048102820181019092528981528b9350915089908990819084018382808284375f920191909152506129f392505050565b507f785e5057f6e5f2e298f8dce2755a6ef29f9dd8a0f82a8b5cad101ea5ef803f048a8a8a8a8a6040516119f69594939291906145fd565b60405180910390a15050505050505050505050565b5f611a14611f33565b611a1f846002611f83565b611a2b610b3885611fd1565b611a358385612c14565b6001600160a01b0384165f908152601f602052604081205490819003611a965760405162461bcd60e51b815260206004820152601660248201527506d61726b657420626f72726f772063617020697320360541b6044820152606401610df5565b611a9f85611fd1565b6001600160a01b0385165f908152600291909101602052604090205460ff16611b5457336001600160a01b03861614611b125760405162461bcd60e51b815260206004820152601560248201527439b2b73232b91036bab9ba103132903b2a37b5b2b760591b6044820152606401610df5565b5f611b1d8686612c7a565b90505f816014811115611b3257611b32614563565b14611b5257806014811115611b4957611b49614563565b92505050610f4a565b505b6004805460405163fc57d4df60e01b81526001600160a01b038881169382019390935291169063fc57d4df90602401602060405180830381865afa158015611b9e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611bc2919061454c565b5f03611bd257600d915050610f4a565b5f611c3c866001600160a01b03166347bd37186040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c12573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611c36919061454c565b85612d5d565b905081811115611c8e5760405162461bcd60e51b815260206004820152601960248201527f6d61726b657420626f72726f77206361702072656163686564000000000000006044820152606401610df5565b5f80611c9d87895f895f612355565b9193509091505f9050826014811115611cb857611cb8614563565b14611cda57816014811115611ccf57611ccf614563565b945050505050610f4a565b8015611ce7576004611ccf565b5f60405180602001604052808a6001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d2f573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611d53919061454c565b90529050611d61898261203a565b611d6c8989836121d1565b5f9998505050505050505050565b6008602052815f5260405f208181548110611d93575f80fd5b5f918252602090912001546001600160a01b03169150829050565b6001600160a01b0382165f90815260296020526040812081836008811115611dd857611dd8614563565b815260208101919091526040015f205460ff169392505050565b5f611dfb611f33565b611e06846001611f83565b5f611e1285858561277c565b90508015611e21579050610f4a565b611e2a85612422565b611e34858561258f565b5f95945050505050565b611e46612d92565b848381148015611e5557508082145b611e915760405162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a59081a5b9c1d5d609a1b6044820152606401610df5565b5f5b81811015610c3b57611eca888883818110611eb057611eb06145ca565b9050602002016020810190611ec59190613fa4565b612820565b611f2b888883818110611edf57611edf6145ca565b9050602002016020810190611ef49190613fa4565b878784818110611f0657611f066145ca565b90506020020135868685818110611f1f57611f1f6145ca565b90506020020135612ddc565b600101611e93565b60185462010000900460ff1615611f815760405162461bcd60e51b81526020600482015260126024820152711c1c9bdd1bd8dbdb081a5cc81c185d5cd95960721b6044820152606401610df5565b565b611f8d8282611dae565b15611fcd5760405162461bcd60e51b815260206004820152601060248201526f1858dd1a5bdb881a5cc81c185d5cd95960821b6044820152606401610df5565b5050565b5f60095f611fde84612815565b81526020019081526020015f209050919050565b805460ff166120375760405162461bcd60e51b81526020600482015260116024820152701b585c9ad95d081b9bdd081b1a5cdd1959607a1b6044820152606401610df5565b50565b6001600160a01b0382165f908152601160209081526040808320602a9092528220549091612066612f56565b83549091505f906120879063ffffffff80851691600160e01b900416612f8f565b9050801580159061209757508215155b156121a6575f612106876001600160a01b03166347bd37186040518163ffffffff1660e01b8152600401602060405180830381865afa1580156120dc573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612100919061454c565b87612fc8565b90505f6121138386612fe5565b90505f825f036121315760405180602001604052805f81525061213b565b61213b8284613026565b604080516020810190915288546001600160e01b03168152909150612184906121649083613069565b516040805180820190915260038152620c8c8d60ea1b6020820152613092565b6001600160e01b0316600160e01b63ffffffff87160217875550610d16915050565b8015610d1657835463ffffffff8316600160e01b026001600160e01b03909116178455505050505050565b601b546001600160a01b0316156121ea576121ea6130c0565b6001600160a01b038381165f9081526011602090815260408083205460138352818420948716845293909152902080546001600160e01b0390921690819055908015801561224657506a0c097ce7bc90715b34b9f160241b8210155b1561225c57506a0c097ce7bc90715b34b9f160241b5b5f60405180602001604052806122728585612f8f565b90526040516395dd919360e01b81526001600160a01b0387811660048301529192505f916122cb916122c5918a16906395dd919390602401602060405180830381865afa1580156120dc573d5f803e3d5ffd5b83613232565b6001600160a01b0387165f908152601460205260409020549091506122f09082612d5d565b6001600160a01b038781165f818152601460209081526040918290209490945580518581529384018890529092918a16917f837bdc11fca9f17ce44167944475225a205279b17e88c791c3b1f66f354668fb910160405180910390a350505050505050565b602654604051637bd48c1f60e11b81525f91829182918291829182916001600160a01b039091169063f7a9183e9061239b9030908f908f908f908f908f9060040161468a565b606060405180830381865afa1580156123b6573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906123da91906146d9565b9250925092508260148111156123f2576123f2614563565b9b919a5098509650505050505050565b5f8061240e8585613259565b905061129c61241c8261327f565b84612d5d565b6001600160a01b0381165f908152601060209081526040808320602b909252822054909161244e612f56565b83549091505f9061246f9063ffffffff80851691600160e01b900416612f8f565b9050801580159061247f57508215155b15612565575f856001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124c1573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906124e5919061454c565b90505f6124f28386612fe5565b90505f825f036125105760405180602001604052805f81525061251a565b61251a8284613026565b604080516020810190915288546001600160e01b03168152909150612543906121649083613069565b6001600160e01b0316600160e01b63ffffffff87160217875550610b11915050565b8015610b1157835463ffffffff8316600160e01b026001600160e01b039091161784555050505050565b601b546001600160a01b0316156125a8576125a86130c0565b6001600160a01b038281165f9081526010602090815260408083205460128352818420948616845293909152902080546001600160e01b0390921690819055908015801561260457506a0c097ce7bc90715b34b9f160241b8210155b1561261a57506a0c097ce7bc90715b34b9f160241b5b5f60405180602001604052806126308585612f8f565b90526040516370a0823160e01b81526001600160a01b0386811660048301529192505f916126a491908816906370a0823190602401602060405180830381865afa158015612680573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906122c5919061454c565b6001600160a01b0386165f908152601460205260409020549091506126c99082612d5d565b6001600160a01b038681165f818152601460209081526040918290209490945580518581529384018890529092918916917ffa9d964d891991c113b49e3db1932abd6c67263d387119707aafdd6c4010a3a9910160405180910390a3505050505050565b5f805f805f80612740885f805f8b612355565b92509250925082601481111561275857612758614563565b9891975095509350505050565b5f806127718484613259565b9050610bc78161327f565b5f612789610b3885611fd1565b61279284611fd1565b6001600160a01b0384165f908152600291909101602052604090205460ff166127bc57505f610f4a565b5f806127cb8587865f80612355565b9193509091505f90508260148111156127e6576127e6614563565b146127fd57816014811115611b4957611b49614563565b801561280a576004611b49565b5f9695505050505050565b5f610d395f83610d1e565b6001600160a01b0381166120375760405162461bcd60e51b815260206004820152601560248201527463616e2774206265207a65726f206164647265737360581b6044820152606401610df5565b836001600160a01b0316816001600160a01b031614612987575f5b8351811015612985578281815181106128a4576128a46145ca565b602002602001015160010361297d576001600160a01b0382165f90815260396020526040812085519091908690849081106128e1576128e16145ca565b6020908102919091018101516001600160a01b0390811683528282019390935260409182015f908120938916815292905290205460ff1661297d5760405162461bcd60e51b815260206004820152603060248201527f53656e646572206e6f7420617574686f72697a656420746f2075736520666c6160448201526f39b43637b0b71037b7103132b430b63360811b6064820152608401610df5565b600101612889565b505b5f5b8251811015610b115760018382815181106129a6576129a66145ca565b602002602001015111156129eb5760405162461bcd60e51b815260206004820152600c60248201526b496e76616c6964206d6f646560a01b6044820152606401610df5565b600101612989565b612a2c6040518060c001604052806060815260200160608152602001606081526020016060815260200160608152602001606081525090565b855167ffffffffffffffff811115612a4657612a46614704565b604051908082528060200260200182016040528015612a6f578160200160208202803683370190505b508152855167ffffffffffffffff811115612a8c57612a8c614704565b604051908082528060200260200182016040528015612ab5578160200160208202803683370190505b506020820152855167ffffffffffffffff811115612ad557612ad5614704565b604051908082528060200260200182016040528015612afe578160200160208202803683370190505b506040820152855167ffffffffffffffff811115612b1e57612b1e614704565b604051908082528060200260200182016040528015612b47578160200160208202803683370190505b506060820152855167ffffffffffffffff811115612b6757612b67614704565b604051908082528060200260200182016040528015612b90578160200160208202803683370190505b506080820152855167ffffffffffffffff811115612bb057612bb0614704565b604051908082528060200260200182016040528015612bd9578160200160208202803683370190505b5060a0820152612beb87878784613296565b612bfc8787878460400151866134c5565b612c0a878787878786613585565b9695505050505050565b6001600160a01b0382165f90815260356020526040812054612c3f906001600160601b031683610d1e565b5f81815260096020526040902060060154909150600160601b900460ff16611050576040516305b80c7960e41b815260040160405180910390fd5b5f612c86836007611f83565b5f60095f612c9386612815565b81526020019081526020015f209050612cab81611ff2565b6001600160a01b0383165f90815260028201602052604090205460ff1615612cd6575f915050610d39565b6001600160a01b038084165f8181526002840160209081526040808320805460ff191660019081179091556008835281842080549182018155845291832090910180549489166001600160a01b031990951685179055519192917f3ab23ab0d51cccc0c3085aec51f99228625aa1a922b3a8ca89a26b0f2027a1a59190a3505f9392505050565b5f610f4a8383604051806040016040528060118152602001706164646974696f6e206f766572666c6f7760781b8152506137d4565b5f546001600160a01b03163314611f815760405162461bcd60e51b815260206004820152600e60248201526d37b7363c9030b236b4b71031b0b760911b6044820152606401610df5565b612de8610b3884611fd1565b6001600160a01b0383165f908152602b60205260409020548214612e6457612e0f83612422565b6001600160a01b0383165f818152602b602052604090819020849055517fa9ff26899e4982e7634afa9f70115dcfb61a17d6e8cdd91aa837671d0ff40ba690612e5b9085815260200190565b60405180910390a25b6001600160a01b0383165f908152602a60205260409020548114611050575f6040518060200160405280856001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612eca573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612eee919061454c565b90529050612efc848261203a565b6001600160a01b0384165f818152602a602052604090819020849055517f0c62c1bc89ec4c40dccb4d21543e782c5ba43897c0075d108d8964181ea3c51b90612f489085815260200190565b60405180910390a250505050565b5f612f8a4360405180604001604052806011815260200170626c6f636b2023203e203332206269747360781b81525061380d565b905090565b5f610f4a8383604051806040016040528060158152602001747375627472616374696f6e20756e646572666c6f7760581b815250613834565b5f610f4a612fde84670de0b6b3a7640000612fe5565b8351613862565b5f610f4a83836040518060400160405280601781526020017f6d756c7469706c69636174696f6e206f766572666c6f77000000000000000000815250613894565b60408051602081019091525f8152604051806020016040528061306061305a866a0c097ce7bc90715b34b9f160241b612fe5565b85613862565b90529392505050565b60408051602081019091525f81526040518060200160405280613060855f0151855f0151612d5d565b5f81600160e01b84106130b85760405162461bcd60e51b8152600401610df591906142bc565b509192915050565b601c5415806130d05750601c5443105b156130d757565b6033546040516370a0823160e01b81523060048201526001600160a01b03909116905f9082906370a0823190602401602060405180830381865afa158015613121573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190613145919061454c565b9050805f03613152575050565b5f8061316043601c54612f8f565b90505f61316f601a5483612fe5565b905080841061318057809250613184565b8392505b601d54831015613195575050505050565b43601c55601b546131b3906001600160a01b038781169116856138e4565b6040518381527ff6d4b8f74d85a6e2d7a50225957b8a6cfec69ad92f5905627260541aa0a5565d9060200160405180910390a1601b5f9054906101000a90046001600160a01b03166001600160a01b031663faa1809e6040518163ffffffff1660e01b81526004015f604051808303815f87803b158015610afa575f80fd5b5f6a0c097ce7bc90715b34b9f160241b61324f84845f0151612fe5565b610f4a919061472c565b60408051602081019091525f81526040518060200160405280613060855f015185612fe5565b80515f90610d3990670de0b6b3a76400009061472c565b5f5b8351811015610b11578381815181106132b3576132b36145ca565b60200260200101516001600160a01b03166371507cd58483815181106132db576132db6145ca565b60200260200101516040518263ffffffff1660e01b815260040161330191815260200190565b6040805180830381865afa15801561331b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061333f919061474b565b8351805184908110613353576133536145ca565b6020026020010184602001518481518110613370576133706145ca565b602002602001018281525082815250505081602001518181518110613397576133976145ca565b6020026020010151825f015182815181106133b4576133b46145ca565b60200260200101516133c6919061476d565b826040015182815181106133dc576133dc6145ca565b6020026020010181815250508381815181106133fa576133fa6145ca565b60200260200101516001600160a01b031663dd5f608586858481518110613423576134236145ca565b60200260200101516040518363ffffffff1660e01b815260040161345c9291906001600160a01b03929092168252602082015260400190565b6020604051808303815f875af1158015613478573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061349c919061454c565b826060015182815181106134b2576134b26145ca565b6020908102919091010152600101613298565b604051632483d72160e21b81526001600160a01b0386169063920f5c84906134f990879087908790339088906004016147ba565b6020604051808303815f875af1158015613515573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061353991906145de565b610b115760405162461bcd60e51b815260206004820152601860248201527f4578656375746520666c6173684c6f616e206661696c656400000000000000006044820152606401610df5565b5f5b855181101561104b578381815181106135a2576135a26145ca565b60200260200101515f036136d2576136468682815181106135c5576135c56145ca565b6020026020010151888784815181106135e0576135e06145ca565b6020026020010151856040015185815181106135fe576135fe6145ca565b6020026020010151865f0151868151811061361b5761361b6145ca565b602002602001015187606001518781518110613639576136396145ca565b6020026020010151613936565b8160400151818151811061365c5761365c6145ca565b6020026020010151858281518110613676576136766145ca565b6020026020010151613688919061476d565b8260800151828151811061369e5761369e6145ca565b6020026020010181815250505f8260a0015182815181106136c1576136c16145ca565b6020026020010181815250506137cc565b8381815181106136e4576136e46145ca565b60200260200101516001036137cc57613789868281518110613708576137086145ca565b602002602001015184878481518110613723576137236145ca565b602002602001015185604001518581518110613741576137416145ca565b6020026020010151865f0151868151811061375e5761375e6145ca565b60200260200101518760600151878151811061377c5761377c6145ca565b6020026020010151613bcd565b8360800151838151811061379f5761379f6145ca565b602002602001018460a0015184815181106137bc576137bc6145ca565b6020908102919091010191909152525b600101613587565b5f806137e0848661476d565b905082858210156138045760405162461bcd60e51b8152600401610df591906142bc565b50949350505050565b5f8164010000000084106130b85760405162461bcd60e51b8152600401610df591906142bc565b5f81848411156138575760405162461bcd60e51b8152600401610df591906142bc565b50610bc78385614854565b5f610f4a83836040518060400160405280600e81526020016d646976696465206279207a65726f60901b815250613d65565b5f8315806138a0575082155b156138ac57505f610f4a565b5f6138b78486614867565b9050836138c4868361472c565b1483906138045760405162461bcd60e51b8152600401610df591906142bc565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611050908490613d90565b604051639bf829a760e01b81526001600160a01b038681166004830152602482018690526044820185905260648201839052871690639bf829a7906084015f604051808303815f87803b15801561398b575f80fd5b505af115801561399d573d5f803e3d5ffd5b50505050856001600160a01b031663dd5f6085876001600160a01b031663e9a44fd96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156139ec573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190613a1091906145af565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018590526044016020604051808303815f875af1158015613a5a573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190613a7e919061454c565b50856001600160a01b031663e9a44fd96040518163ffffffff1660e01b8152600401602060405180830381865afa158015613abb573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190613adf91906145af565b6001600160a01b03166316faecec876001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613b29573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190613b4d91906145af565b886001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015613b89573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190613bad91906145af565b60026040518463ffffffff1660e01b8152600401610ce89392919061487e565b5f808781613bdb878961476d565b90505f826001600160a01b031663a6afed956040518163ffffffff1660e01b81526004016020604051808303815f875af1158015613c1b573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190613c3f919061454c565b90508015613c8f5760405162461bcd60e51b815260206004820152601960248201527f4661696c656420746f2061636372756520696e746572657374000000000000006044820152606401610df5565b60405163d310dce560e01b81526001600160a01b038b81166004830152602482018490525f919085169063d310dce5906044016020604051808303815f875af1158015613cde573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190613d02919061454c565b90508015613d525760405162461bcd60e51b815260206004820152601e60248201527f4661696c656420746f20637265617465206465627420706f736974696f6e00006044820152606401610df5565b505f9b919a509098505050505050505050565b5f8183613d855760405162461bcd60e51b8152600401610df591906142bc565b50610bc7838561472c565b5f613de4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613e639092919063ffffffff16565b905080515f1480613e04575080806020019051810190613e0491906145de565b6110505760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610df5565b6060610bc784845f85855f80866001600160a01b03168587604051613e8891906148b4565b5f6040518083038185875af1925050503d805f8114613ec2576040519150601f19603f3d011682016040523d82523d5f602084013e613ec7565b606091505b5091509150613ed887838387613ee3565b979650505050505050565b60608315613f515782515f03613f4a576001600160a01b0385163b613f4a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610df5565b5081610bc7565b610bc78383815115613f665781518083602001fd5b8060405162461bcd60e51b8152600401610df591906142bc565b6001600160a01b0381168114612037575f80fd5b8035613f9f81613f80565b919050565b5f60208284031215613fb4575f80fd5b8135610f4a81613f80565b5f8060408385031215613fd0575f80fd5b8235613fdb81613f80565b91506020830135613feb81613f80565b809150509250929050565b5f805f805f60a0868803121561400a575f80fd5b853561401581613f80565b9450602086013561402581613f80565b9350604086013561403581613f80565b94979396509394606081013594506080013592915050565b5f805f8060808587031215614060575f80fd5b843561406b81613f80565b9350602085013561407b81613f80565b9250604085013561408b81613f80565b9396929550929360600135925050565b5f805f606084860312156140ad575f80fd5b83356140b881613f80565b925060208401356140c881613f80565b915060408401356140d881613f80565b809150509250925092565b5f805f80608085870312156140f6575f80fd5b843561410181613f80565b9350602085013561411181613f80565b93969395505050506040820135916060013590565b5f805f805f8060c0878903121561413b575f80fd5b863561414681613f80565b9550602087013561415681613f80565b9450604087013561416681613f80565b9350606087013561417681613f80565b9598949750929560808101359460a0909101359350915050565b80356001600160601b0381168114613f9f575f80fd5b5f80604083850312156141b7575f80fd5b613fdb83614190565b5f805f606084860312156141d2575f80fd5b83356141dd81613f80565b925060208401356141ed81613f80565b929592945050506040919091013590565b5f6020828403121561420e575f80fd5b5035919050565b5f805f805f60a08688031215614229575f80fd5b853561423481613f80565b9450602086013561424481613f80565b9350604086013561425481613f80565b9250606086013561426481613f80565b949793965091946080013592915050565b5f60208284031215614285575f80fd5b610f4a82614190565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f610f4a602083018461428e565b5f8083601f8401126142de575f80fd5b50813567ffffffffffffffff8111156142f5575f80fd5b6020830191508360208260051b850101111561430f575f80fd5b9250929050565b5f8083601f840112614326575f80fd5b50813567ffffffffffffffff81111561433d575f80fd5b60208301915083602082850101111561430f575f80fd5b5f805f805f805f805f805f60e08c8e03121561436e575f80fd5b6143778c613f94565b9a5061438560208d01613f94565b995067ffffffffffffffff8060408e013511156143a0575f80fd5b6143b08e60408f01358f016142ce565b909a50985060608d01358110156143c5575f80fd5b6143d58e60608f01358f016142ce565b909850965060808d01358110156143ea575f80fd5b6143fa8e60808f01358f016142ce565b909650945061440b60a08e01613f94565b93508060c08e0135111561441d575f80fd5b5061442e8d60c08e01358e01614316565b81935080925050509295989b509295989b9093969950565b5f8060408385031215614457575f80fd5b823561446281613f80565b946020939093013593505050565b5f8060408385031215614481575f80fd5b823561448c81613f80565b9150602083013560098110613feb575f80fd5b5f805f805f80606087890312156144b4575f80fd5b863567ffffffffffffffff808211156144cb575f80fd5b6144d78a838b016142ce565b909850965060208901359150808211156144ef575f80fd5b6144fb8a838b016142ce565b90965094506040890135915080821115614513575f80fd5b5061452089828a016142ce565b979a9699509497509295939492505050565b6001600160a01b0392831681529116602082015260400190565b5f6020828403121561455c575f80fd5b5051919050565b634e487b7160e01b5f52602160045260245ffd5b600181811c9082168061458b57607f821691505b6020821081036145a957634e487b7160e01b5f52602260045260245ffd5b50919050565b5f602082840312156145bf575f80fd5b8151610f4a81613f80565b634e487b7160e01b5f52603260045260245ffd5b5f602082840312156145ee575f80fd5b81518015158114610f4a575f80fd5b6001600160a01b038681168252606060208084018290529083018690525f91879160808501845b8981101561464b57843561463781613f80565b841682529382019390820190600101614624565b5085810360408701528681526001600160fb1b0387111561466a575f80fd5b8660051b9350838860208301379092016020019998505050505050505050565b6001600160a01b038781168252868116602083015285166040820152606081018490526080810183905260c08101600283106146c8576146c8614563565b8260a0830152979650505050505050565b5f805f606084860312156146eb575f80fd5b8351925060208401519150604084015190509250925092565b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b5f8261474657634e487b7160e01b5f52601260045260245ffd5b500490565b5f806040838503121561475c575f80fd5b505080516020909101519092909150565b80820180821115610d3957610d39614718565b5f815180845260208085019450602084015f5b838110156147af57815187529582019590820190600101614793565b509495945050505050565b60a080825286519082018190525f9060209060c0840190828a01845b828110156147fb5781516001600160a01b0316845292840192908401906001016147d6565b50505083810360208501526148108189614780565b91505082810360408401526148258187614780565b6001600160a01b038616606085015283810360808501529050614848818561428e565b98975050505050505050565b81810381811115610d3957610d39614718565b8082028115828204841417610d3957610d39614718565b6001600160a01b0384811682528316602082015260608101600383106148a6576148a6614563565b826040830152949350505050565b5f82518060208501845e5f92019182525091905056fea2646970667358221220ded107e26a0459c0bc2a8e54886a14aca964ca12f347b7852ab538296207416564736f6c63430008190033",
  "devdoc": {
    "author": "Venus",
    "details": "This facet contains all the hooks used while transferring the assets",
    "events": {
      "Failure(uint256,uint256,uint256)": {
        "details": "`error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary contract-specific code that enables us to report opaque error codes from upgradeable contracts.*"
      }
    },
    "kind": "dev",
    "methods": {
      "_setVenusSpeeds(address[],uint256[],uint256[])": {
        "details": "Allows the contract admin to set XVS speed for a market",
        "params": {
          "borrowSpeeds": "New XVS speed for borrow",
          "supplySpeeds": "New XVS speed for supply",
          "vTokens": "The market whose XVS speed to update"
        }
      },
      "actionPaused(address,uint8)": {
        "params": {
          "action": "Action id",
          "market": "vToken address"
        }
      },
      "borrowAllowed(address,address,uint256)": {
        "params": {
          "borrowAmount": "The amount of underlying the account would borrow",
          "borrower": "The account which would borrow the asset",
          "vToken": "The market to verify the borrow against"
        },
        "returns": {
          "_0": "0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
        }
      },
      "borrowVerify(address,address,uint256)": {
        "params": {
          "borrowAmount": "The amount of the underlying asset requested to borrow",
          "borrower": "The address borrowing the underlying",
          "vToken": "Asset whose underlying is being borrowed"
        }
      },
      "executeFlashLoan(address,address,address[],uint256[],uint256[],address,bytes)": {
        "details": "Transfer the specified assets to the receiver contract and handles repayment based on modes.      Mode 0: Classic flash loan - must repay everything or revert      Mode 1: Can create debt position for unpaid amounts",
        "params": {
          "initiator": "The address initiating the flash loan",
          "modes": "How each borrowed asset is handled if not repaid immediately (0: flash loan, 1: debt position)",
          "onBehalfOf": "The address for whom debt positions will be opened (if mode = 1)",
          "param": "The bytes passed in the executeOperation call",
          "receiver": "The address of the contract that will receive the flashLoan and execute the operation",
          "underlyingAmounts": "The amounts of each underlying asset to be loaned",
          "vTokens": "The addresses of the vToken assets to be loaned"
        }
      },
      "getAccountLiquidity(address)": {
        "params": {
          "account": "The account get liquidity for"
        },
        "returns": {
          "_0": "(possible error code (semi-opaque), account liquidity in excess of collateral requirements,          account shortfall below collateral requirements)"
        }
      },
      "getBorrowingPower(address)": {
        "params": {
          "account": "The account get liquidity for"
        },
        "returns": {
          "_0": "(possible error code (semi-opaque), account liquidity in excess of collateral requirements,          account shortfall below collateral requirements)"
        }
      },
      "getHypotheticalAccountLiquidity(address,address,uint256,uint256)": {
        "params": {
          "account": "The account to determine liquidity for",
          "borrowAmount": "The amount of underlying to hypothetically borrow",
          "redeemTokens": "The number of tokens to hypothetically redeem",
          "vTokenModify": "The market to hypothetically redeem/borrow in"
        },
        "returns": {
          "_0": "(possible error code (semi-opaque), hypothetical account liquidity in excess of collateral requirements,          hypothetical account shortfall below collateral requirements)"
        }
      },
      "getPoolMarketIndex(uint96,address)": {
        "details": "Computes a unique key for a (poolId, market) pair used in the `_poolMarkets` mapping. - For the core pool (`poolId == 0`), this results in the address being left-padded to 32 bytes,   maintaining backward compatibility with legacy mappings. - For other pools, packs the `poolId` and `market` address into a single `bytes32` key,   The first 96 bits are used for the `poolId`, and the remaining 160 bits for the `market` address.",
        "params": {
          "poolId": "The ID of the pool.",
          "vToken": "The address of the market (vToken)."
        },
        "returns": {
          "_0": "A `bytes32` key that uniquely represents the (poolId, market) pair."
        }
      },
      "getXVSAddress()": {
        "returns": {
          "_0": "The address of XVS token"
        }
      },
      "liquidateBorrowAllowed(address,address,address,address,uint256)": {
        "params": {
          "borrower": "The address of the borrower",
          "liquidator": "The address repaying the borrow and seizing the collateral",
          "repayAmount": "The amount of underlying being repaid",
          "vTokenBorrowed": "Asset which was borrowed by the borrower",
          "vTokenCollateral": "Asset which was used as collateral and will be seized"
        }
      },
      "liquidateBorrowVerify(address,address,address,address,uint256,uint256)": {
        "params": {
          "actualRepayAmount": "The amount of underlying being repaid",
          "borrower": "The address of the borrower",
          "liquidator": "The address repaying the borrow and seizing the collateral",
          "seizeTokens": "The amount of collateral token that will be seized",
          "vTokenBorrowed": "Asset which was borrowed by the borrower",
          "vTokenCollateral": "Asset which was used as collateral and will be seized"
        }
      },
      "mintAllowed(address,address,uint256)": {
        "params": {
          "mintAmount": "The amount of underlying being supplied to the market in exchange for tokens",
          "minter": "The account which would get the minted tokens",
          "vToken": "The market to verify the mint against"
        },
        "returns": {
          "_0": "0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
        }
      },
      "mintVerify(address,address,uint256,uint256)": {
        "params": {
          "actualMintAmount": "The amount of the underlying asset being minted",
          "mintTokens": "The number of tokens being minted",
          "minter": "The address minting the tokens",
          "vToken": "Asset being minted"
        }
      },
      "redeemAllowed(address,address,uint256)": {
        "params": {
          "redeemTokens": "The number of vTokens to exchange for the underlying asset in the market",
          "redeemer": "The account which would redeem the tokens",
          "vToken": "The market to verify the redeem against"
        },
        "returns": {
          "_0": "0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
        }
      },
      "redeemVerify(address,address,uint256,uint256)": {
        "params": {
          "redeemAmount": "The amount of the underlying asset being redeemed",
          "redeemTokens": "The number of tokens being redeemed",
          "redeemer": "The address redeeming the tokens",
          "vToken": "Asset being redeemed"
        }
      },
      "repayBorrowAllowed(address,address,address,uint256)": {
        "params": {
          "borrower": "The account which borrowed the asset",
          "payer": "The account which would repay the asset",
          "repayAmount": "The amount of the underlying asset the account would repay",
          "vToken": "The market to verify the repay against"
        },
        "returns": {
          "_0": "0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
        }
      },
      "repayBorrowVerify(address,address,address,uint256,uint256)": {
        "params": {
          "actualRepayAmount": "The amount of underlying being repaid",
          "borrower": "The address of the borrower",
          "payer": "The address repaying the borrow",
          "vToken": "Asset being repaid"
        }
      },
      "seizeAllowed(address,address,address,address,uint256)": {
        "params": {
          "borrower": "The address of the borrower",
          "liquidator": "The address repaying the borrow and seizing the collateral",
          "seizeTokens": "The number of collateral tokens to seize",
          "vTokenBorrowed": "Asset which was borrowed by the borrower",
          "vTokenCollateral": "Asset which was used as collateral and will be seized"
        }
      },
      "seizeVerify(address,address,address,address,uint256)": {
        "params": {
          "borrower": "The address of the borrower",
          "liquidator": "The address repaying the borrow and seizing the collateral",
          "seizeTokens": "The number of collateral tokens to seize",
          "vTokenBorrowed": "Asset which was borrowed by the borrower",
          "vTokenCollateral": "Asset which was used as collateral and will be seized"
        }
      },
      "transferAllowed(address,address,address,uint256)": {
        "params": {
          "dst": "The account which receives the tokens",
          "src": "The account which sources the tokens",
          "transferTokens": "The number of vTokens to transfer",
          "vToken": "The market to verify the transfer against"
        },
        "returns": {
          "_0": "0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
        }
      },
      "transferVerify(address,address,address,uint256)": {
        "params": {
          "dst": "The account which receives the tokens",
          "src": "The account which sources the tokens",
          "transferTokens": "The number of vTokens to transfer",
          "vToken": "Asset being transferred"
        }
      }
    },
    "title": "PolicyFacet",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AlreadyInSelectedPool()": [
        {
          "notice": "Thrown when You are already in the selected pool."
        }
      ],
      "ArrayLengthMismatch()": [
        {
          "notice": "Thrown when input array lengths do not match"
        }
      ],
      "BorrowNotAllowedInPool()": [
        {
          "notice": "Thrown when borrowing is not allowed in the selected pool for a given market."
        }
      ],
      "CorePoolModificationNotAllowed()": [
        {
          "notice": "Thrown when trying to modify the core pool (poolId == 0)"
        }
      ],
      "EmptyPoolLabel()": [
        {
          "notice": "Thrown when the pool label is empty"
        }
      ],
      "IncompatibleBorrowedAssets()": [
        {
          "notice": "Thrown when One or more of your assets are not compatible with the selected pool."
        }
      ],
      "InvalidWeightingStrategy(uint8)": [
        {
          "notice": "Thrown when an invalid weighting strategy is provided"
        }
      ],
      "LiquidityCheckFailed(uint256,uint256)": [
        {
          "notice": "Thrown when Switching to this pool would fail the liquidity check or lead to liquidation."
        }
      ],
      "MarketAlreadyListed(uint96,address)": [
        {
          "notice": "Thrown when a vToken is already listed in the specified pool"
        }
      ],
      "MarketConfigNotFound()": [
        {
          "notice": "Thrown when market is not set in the _poolMarkets mapping"
        }
      ],
      "MarketNotListedInCorePool()": [
        {
          "notice": "Thrown when market trying to add in a pool is not listed in the core pool"
        }
      ],
      "PoolDoesNotExist(uint96)": [
        {
          "notice": "Thrown when a given pool ID does not exist"
        }
      ],
      "PoolMarketNotFound(uint96,address)": [
        {
          "notice": "Thrown when trying to remove a market that is not listed in the given pool."
        }
      ]
    },
    "events": {
      "DistributedBorrowerVenus(address,address,uint256,uint256)": {
        "notice": "Emitted when XVS is distributed to a borrower"
      },
      "DistributedSupplierVenus(address,address,uint256,uint256)": {
        "notice": "Emitted when XVS is distributed to a supplier"
      },
      "DistributedVAIVaultVenus(uint256)": {
        "notice": "Emitted when XVS is distributed to VAI Vault"
      },
      "MarketEntered(address,address)": {
        "notice": "Emitted when an account enters a market"
      },
      "VenusBorrowSpeedUpdated(address,uint256)": {
        "notice": "Emitted when a new borrow-side XVS speed is calculated for a market"
      },
      "VenusSupplySpeedUpdated(address,uint256)": {
        "notice": "Emitted when a new supply-side XVS speed is calculated for a market"
      }
    },
    "kind": "user",
    "methods": {
      "_setVenusSpeeds(address[],uint256[],uint256[])": {
        "notice": "Set XVS speed for a single market"
      },
      "accountAssets(address,uint256)": {
        "notice": "Per-account mapping of \"assets you are in\", capped by maxAssets"
      },
      "actionPaused(address,uint8)": {
        "notice": "Checks if a certain action is paused on a market"
      },
      "admin()": {
        "notice": "Administrator for this contract"
      },
      "allMarkets(uint256)": {
        "notice": "A list of all markets"
      },
      "approvedDelegates(address,address)": {
        "notice": "Whether the delegate is allowed to borrow or redeem on behalf of the user"
      },
      "authorizedFlashLoan(address)": {
        "notice": "Mapping of accounts authorized to execute flash loans"
      },
      "borrowAllowed(address,address,uint256)": {
        "notice": "Checks if the account should be allowed to borrow the underlying asset of the given market"
      },
      "borrowCapGuardian()": {
        "notice": "The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market."
      },
      "borrowCaps(address)": {
        "notice": "Borrow caps enforced by borrowAllowed for each vToken address."
      },
      "borrowVerify(address,address,uint256)": {
        "notice": "Validates borrow, accrues interest and updates score in prime. Reverts on rejection. May emit logs."
      },
      "closeFactorMantissa()": {
        "notice": "Multiplier used to calculate the maximum repayAmount when liquidating a borrow"
      },
      "comptrollerImplementation()": {
        "notice": "Active brains of Unitroller"
      },
      "delegateAuthorizationFlashloan(address,address,address)": {
        "notice": "Mapping to store delegate authorization for flash loans"
      },
      "executeFlashLoan(address,address,address[],uint256[],uint256[],address,bytes)": {
        "notice": "Executes a flashLoan operation with the specified assets, amounts, and modes."
      },
      "getAccountLiquidity(address)": {
        "notice": "Determine the current account liquidity wrt collateral requirements"
      },
      "getBorrowingPower(address)": {
        "notice": "Alias to getAccountLiquidity to support the Isolated Lending Comptroller Interface"
      },
      "getHypotheticalAccountLiquidity(address,address,uint256,uint256)": {
        "notice": "Determine what the account liquidity would be if the given amounts were redeemed/borrowed"
      },
      "getPoolMarketIndex(uint96,address)": {
        "notice": "Returns the market index for a given vToken"
      },
      "getXVSAddress()": {
        "notice": "Returns the XVS address"
      },
      "isForcedLiquidationEnabled(address)": {
        "notice": "Whether forced liquidation is enabled for all users borrowing in a certain market"
      },
      "isForcedLiquidationEnabledForUser(address,address)": {
        "notice": "Whether forced liquidation is enabled for the borrows of a user in a market"
      },
      "lastPoolId()": {
        "notice": "Counter used to generate unique pool IDs"
      },
      "liquidateBorrowAllowed(address,address,address,address,uint256)": {
        "notice": "Checks if the liquidation should be allowed to occur"
      },
      "liquidateBorrowVerify(address,address,address,address,uint256,uint256)": {
        "notice": "Validates liquidateBorrow, accrues interest and updates score in prime. Reverts on rejection. May emit logs."
      },
      "maxAssets()": {
        "notice": "Max number of assets a single account can participate in (borrow or use as collateral)"
      },
      "mintAllowed(address,address,uint256)": {
        "notice": "Checks if the account should be allowed to mint tokens in the given market"
      },
      "mintVAIGuardianPaused()": {
        "notice": "The Pause Guardian can pause certain actions as a safety mechanism."
      },
      "mintVerify(address,address,uint256,uint256)": {
        "notice": "Validates mint, accrues interest and updates score in prime. Reverts on rejection. May emit logs."
      },
      "mintedVAIs(address)": {
        "notice": "The minted VAI amount to each user"
      },
      "oldLiquidationIncentiveMantissa()": {
        "notice": "Multiplier representing the discount on collateral that a liquidator receives (deprecated)"
      },
      "oracle()": {
        "notice": "Oracle which gives the price of any given asset"
      },
      "pauseGuardian()": {
        "notice": "The Pause Guardian can pause certain actions as a safety mechanism."
      },
      "pendingAdmin()": {
        "notice": "Pending administrator for this contract"
      },
      "pendingComptrollerImplementation()": {
        "notice": "Pending brains of Unitroller"
      },
      "pools(uint96)": {
        "notice": "Mapping of pool ID to its corresponding metadata and configuration"
      },
      "prime()": {
        "notice": "Prime token address"
      },
      "protocolPaused()": {
        "notice": "Pause/Unpause whole protocol actions"
      },
      "redeemAllowed(address,address,uint256)": {
        "notice": "Checks if the account should be allowed to redeem tokens in the given market"
      },
      "redeemVerify(address,address,uint256,uint256)": {
        "notice": "Validates redeem, accrues interest and updates score in prime. Reverts on rejection. May emit logs."
      },
      "repayBorrowAllowed(address,address,address,uint256)": {
        "notice": "Checks if the account should be allowed to repay a borrow in the given market"
      },
      "repayBorrowVerify(address,address,address,uint256,uint256)": {
        "notice": "Validates repayBorrow, accrues interest and updates score in prime. Reverts on rejection. May emit logs."
      },
      "seizeAllowed(address,address,address,address,uint256)": {
        "notice": "Checks if the seizing of assets should be allowed to occur"
      },
      "seizeVerify(address,address,address,address,uint256)": {
        "notice": "Validates seize, accrues interest and updates score in prime. Reverts on rejection. May emit logs."
      },
      "supplyCaps(address)": {
        "notice": "Supply caps enforced by mintAllowed for each vToken address. Defaults to zero which corresponds to minting notAllowed"
      },
      "transferAllowed(address,address,address,uint256)": {
        "notice": "Checks if the account should be allowed to transfer tokens in the given market"
      },
      "transferVerify(address,address,address,uint256)": {
        "notice": "Validates transfer, accrues interest and updates score in prime. Reverts on rejection. May emit logs."
      },
      "treasuryAddress()": {
        "notice": "Treasury address"
      },
      "treasuryGuardian()": {
        "notice": "Treasury Guardian address"
      },
      "treasuryPercent()": {
        "notice": "Fee percent of accrued interest with decimal 18"
      },
      "userPoolId(address)": {
        "notice": "Tracks the selected pool for each user."
      },
      "vaiController()": {
        "notice": "The Address of VAIController"
      },
      "vaiMintRate()": {
        "notice": "VAI Mint Rate as a percentage"
      },
      "venusAccrued(address)": {
        "notice": "The XVS accrued but not yet transferred to each user"
      },
      "venusBorrowSpeeds(address)": {
        "notice": "The rate at which venus is distributed to the corresponding borrow market (per block)"
      },
      "venusBorrowState(address)": {
        "notice": "The Venus market borrow state for each market"
      },
      "venusBorrowerIndex(address,address)": {
        "notice": "The Venus borrow index for each market for each borrower as of the last time they accrued XVS"
      },
      "venusInitialIndex()": {
        "notice": "The initial Venus index for a market"
      },
      "venusSupplierIndex(address,address)": {
        "notice": "The Venus supply index for each market for each supplier as of the last time they accrued XVS"
      },
      "venusSupplySpeeds(address)": {
        "notice": "The rate at which venus is distributed to the corresponding supply market (per block)"
      },
      "venusSupplyState(address)": {
        "notice": "The Venus market supply state for each market"
      },
      "venusVAIVaultRate()": {
        "notice": "The rate at which the flywheel distributes XVS to VAI Vault, per block"
      }
    },
    "notice": "This facet contract contains all the external pre-hook functions related to vToken",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1640,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1643,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "pendingAdmin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1646,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "comptrollerImplementation",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1649,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "pendingComptrollerImplementation",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1656,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "oracle",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ResilientOracleInterface)967"
      },
      {
        "astId": 1659,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "closeFactorMantissa",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1662,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "oldLiquidationIncentiveMantissa",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1665,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "maxAssets",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1672,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "accountAssets",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_array(t_contract(VToken)17767)dyn_storage)"
      },
      {
        "astId": 1706,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "_poolMarkets",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_userDefinedValueType(PoolMarketId)11224,t_struct(Market)1699_storage)"
      },
      {
        "astId": 1709,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "pauseGuardian",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 1712,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "_mintGuardianPaused",
        "offset": 20,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 1715,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "_borrowGuardianPaused",
        "offset": 21,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 1718,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "transferGuardianPaused",
        "offset": 22,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 1721,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "seizeGuardianPaused",
        "offset": 23,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 1726,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "mintGuardianPaused",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1731,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "borrowGuardianPaused",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1743,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "allMarkets",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_contract(VToken)17767)dyn_storage"
      },
      {
        "astId": 1746,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "venusRate",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 1751,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "venusSpeeds",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1757,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "venusSupplyState",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_struct(VenusMarketState)1738_storage)"
      },
      {
        "astId": 1763,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "venusBorrowState",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_struct(VenusMarketState)1738_storage)"
      },
      {
        "astId": 1770,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "venusSupplierIndex",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1777,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "venusBorrowerIndex",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1782,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "venusAccrued",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1786,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "vaiController",
        "offset": 0,
        "slot": "21",
        "type": "t_contract(VAIControllerInterface)11664"
      },
      {
        "astId": 1791,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "mintedVAIs",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1794,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "vaiMintRate",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 1797,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "mintVAIGuardianPaused",
        "offset": 0,
        "slot": "24",
        "type": "t_bool"
      },
      {
        "astId": 1799,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "repayVAIGuardianPaused",
        "offset": 1,
        "slot": "24",
        "type": "t_bool"
      },
      {
        "astId": 1802,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "protocolPaused",
        "offset": 2,
        "slot": "24",
        "type": "t_bool"
      },
      {
        "astId": 1805,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "venusVAIRate",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 1811,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "venusVAIVaultRate",
        "offset": 0,
        "slot": "26",
        "type": "t_uint256"
      },
      {
        "astId": 1813,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "vaiVaultAddress",
        "offset": 0,
        "slot": "27",
        "type": "t_address"
      },
      {
        "astId": 1815,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "releaseStartBlock",
        "offset": 0,
        "slot": "28",
        "type": "t_uint256"
      },
      {
        "astId": 1817,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "minReleaseAmount",
        "offset": 0,
        "slot": "29",
        "type": "t_uint256"
      },
      {
        "astId": 1823,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "borrowCapGuardian",
        "offset": 0,
        "slot": "30",
        "type": "t_address"
      },
      {
        "astId": 1828,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "borrowCaps",
        "offset": 0,
        "slot": "31",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1834,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "treasuryGuardian",
        "offset": 0,
        "slot": "32",
        "type": "t_address"
      },
      {
        "astId": 1837,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "treasuryAddress",
        "offset": 0,
        "slot": "33",
        "type": "t_address"
      },
      {
        "astId": 1840,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "treasuryPercent",
        "offset": 0,
        "slot": "34",
        "type": "t_uint256"
      },
      {
        "astId": 1848,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "venusContributorSpeeds",
        "offset": 0,
        "slot": "35",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1853,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "lastContributorBlock",
        "offset": 0,
        "slot": "36",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1858,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "liquidatorContract",
        "offset": 0,
        "slot": "37",
        "type": "t_address"
      },
      {
        "astId": 1864,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "comptrollerLens",
        "offset": 0,
        "slot": "38",
        "type": "t_contract(ComptrollerLensInterface)1623"
      },
      {
        "astId": 1872,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "supplyCaps",
        "offset": 0,
        "slot": "39",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1878,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "accessControl",
        "offset": 0,
        "slot": "40",
        "type": "t_address"
      },
      {
        "astId": 1885,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "_actionPaused",
        "offset": 0,
        "slot": "41",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 1893,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "venusBorrowSpeeds",
        "offset": 0,
        "slot": "42",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1898,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "venusSupplySpeeds",
        "offset": 0,
        "slot": "43",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1908,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "approvedDelegates",
        "offset": 0,
        "slot": "44",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1916,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "isForcedLiquidationEnabled",
        "offset": 0,
        "slot": "45",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1935,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "_selectorToFacetAndPosition",
        "offset": 0,
        "slot": "46",
        "type": "t_mapping(t_bytes4,t_struct(FacetAddressAndPosition)1924_storage)"
      },
      {
        "astId": 1940,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "_facetFunctionSelectors",
        "offset": 0,
        "slot": "47",
        "type": "t_mapping(t_address,t_struct(FacetFunctionSelectors)1930_storage)"
      },
      {
        "astId": 1943,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "_facetAddresses",
        "offset": 0,
        "slot": "48",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1950,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "prime",
        "offset": 0,
        "slot": "49",
        "type": "t_contract(IPrime)11597"
      },
      {
        "astId": 1960,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "isForcedLiquidationEnabledForUser",
        "offset": 0,
        "slot": "50",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1966,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "xvs",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 1969,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "xvsVToken",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 1985,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "userPoolId",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_uint96)"
      },
      {
        "astId": 1991,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "pools",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_uint96,t_struct(PoolData)1980_storage)"
      },
      {
        "astId": 1994,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "lastPoolId",
        "offset": 0,
        "slot": "55",
        "type": "t_uint96"
      },
      {
        "astId": 1999,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "authorizedFlashLoan",
        "offset": 0,
        "slot": "56",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2027,
        "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
        "label": "delegateAuthorizationFlashloan",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_address,t_bool)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes4)dyn_storage": {
        "base": "t_bytes4",
        "encoding": "dynamic_array",
        "label": "bytes4[]",
        "numberOfBytes": "32"
      },
      "t_array(t_contract(VToken)17767)dyn_storage": {
        "base": "t_contract(VToken)17767",
        "encoding": "dynamic_array",
        "label": "contract VToken[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_contract(ComptrollerLensInterface)1623": {
        "encoding": "inplace",
        "label": "contract ComptrollerLensInterface",
        "numberOfBytes": "20"
      },
      "t_contract(IPrime)11597": {
        "encoding": "inplace",
        "label": "contract IPrime",
        "numberOfBytes": "20"
      },
      "t_contract(ResilientOracleInterface)967": {
        "encoding": "inplace",
        "label": "contract ResilientOracleInterface",
        "numberOfBytes": "20"
      },
      "t_contract(VAIControllerInterface)11664": {
        "encoding": "inplace",
        "label": "contract VAIControllerInterface",
        "numberOfBytes": "20"
      },
      "t_contract(VToken)17767": {
        "encoding": "inplace",
        "label": "contract VToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_contract(VToken)17767)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract VToken[])",
        "numberOfBytes": "32",
        "value": "t_array(t_contract(VToken)17767)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_address,t_bool)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(address => bool)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_struct(FacetFunctionSelectors)1930_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ComptrollerV13Storage.FacetFunctionSelectors)",
        "numberOfBytes": "32",
        "value": "t_struct(FacetFunctionSelectors)1930_storage"
      },
      "t_mapping(t_address,t_struct(VenusMarketState)1738_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ComptrollerV1Storage.VenusMarketState)",
        "numberOfBytes": "32",
        "value": "t_struct(VenusMarketState)1738_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint96)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint96)",
        "numberOfBytes": "32",
        "value": "t_uint96"
      },
      "t_mapping(t_bytes4,t_struct(FacetAddressAndPosition)1924_storage)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => struct ComptrollerV13Storage.FacetAddressAndPosition)",
        "numberOfBytes": "32",
        "value": "t_struct(FacetAddressAndPosition)1924_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint96,t_struct(PoolData)1980_storage)": {
        "encoding": "mapping",
        "key": "t_uint96",
        "label": "mapping(uint96 => struct ComptrollerV17Storage.PoolData)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolData)1980_storage"
      },
      "t_mapping(t_userDefinedValueType(PoolMarketId)11224,t_struct(Market)1699_storage)": {
        "encoding": "mapping",
        "key": "t_userDefinedValueType(PoolMarketId)11224",
        "label": "mapping(PoolMarketId => struct ComptrollerV1Storage.Market)",
        "numberOfBytes": "32",
        "value": "t_struct(Market)1699_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(FacetAddressAndPosition)1924_storage": {
        "encoding": "inplace",
        "label": "struct ComptrollerV13Storage.FacetAddressAndPosition",
        "members": [
          {
            "astId": 1921,
            "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
            "label": "facetAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1923,
            "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
            "label": "functionSelectorPosition",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(FacetFunctionSelectors)1930_storage": {
        "encoding": "inplace",
        "label": "struct ComptrollerV13Storage.FacetFunctionSelectors",
        "members": [
          {
            "astId": 1927,
            "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
            "label": "functionSelectors",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes4)dyn_storage"
          },
          {
            "astId": 1929,
            "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
            "label": "facetAddressPosition",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Market)1699_storage": {
        "encoding": "inplace",
        "label": "struct ComptrollerV1Storage.Market",
        "members": [
          {
            "astId": 1675,
            "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
            "label": "isListed",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1678,
            "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
            "label": "collateralFactorMantissa",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1683,
            "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
            "label": "accountMembership",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 1686,
            "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
            "label": "isVenus",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 1689,
            "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
            "label": "liquidationThresholdMantissa",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1692,
            "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
            "label": "liquidationIncentiveMantissa",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1695,
            "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
            "label": "poolId",
            "offset": 0,
            "slot": "6",
            "type": "t_uint96"
          },
          {
            "astId": 1698,
            "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
            "label": "isBorrowAllowed",
            "offset": 12,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(PoolData)1980_storage": {
        "encoding": "inplace",
        "label": "struct ComptrollerV17Storage.PoolData",
        "members": [
          {
            "astId": 1975,
            "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
            "label": "label",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1979,
            "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
            "label": "vTokens",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(VenusMarketState)1738_storage": {
        "encoding": "inplace",
        "label": "struct ComptrollerV1Storage.VenusMarketState",
        "members": [
          {
            "astId": 1734,
            "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
            "label": "index",
            "offset": 0,
            "slot": "0",
            "type": "t_uint224"
          },
          {
            "astId": 1737,
            "contract": "contracts/Comptroller/Diamond/facets/PolicyFacet.sol:PolicyFacet",
            "label": "block",
            "offset": 28,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      },
      "t_userDefinedValueType(PoolMarketId)11224": {
        "encoding": "inplace",
        "label": "PoolMarketId",
        "numberOfBytes": "32"
      }
    }
  }
}
