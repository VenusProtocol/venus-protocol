{
  "address": "0xA0Eef73F94DB337F08f34F9013bCAF8D392289A5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "baseCloseFactorMantissa_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "defaultCloseFactorMantissa_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetHealthFactor_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CollateralExceedsBorrowCapacity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidBaseCloseFactor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDefaultCloseFactor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTargetHealthFactor",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "MarketNotListed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "calledContract",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "methodSignature",
          "type": "string"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "DynamicCloseFactorEnabledSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "DynamicLiquidationIncentiveEnabledSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAccessControlManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAccessControlManager",
          "type": "address"
        }
      ],
      "name": "NewAccessControlManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accessControlManager",
      "outputs": [
        {
          "internalType": "contract IAccessControlManagerV8",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseCloseFactorMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "borrowBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wtAvg",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dynamicLiquidationIncentive",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxLiquidationIncentive",
          "type": "uint256"
        }
      ],
      "name": "calculateDynamicCloseFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "closeFactor",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "healthFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationThresholdAvg",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxLiquidationIncentiveMantissa",
          "type": "uint256"
        }
      ],
      "name": "calculateDynamicLiquidationIncentive",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "incentive",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultCloseFactorMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "dynamicCloseFactorEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "dynamicLiquidationIncentiveEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "accessControlManager_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "accessControlManager_",
          "type": "address"
        }
      ],
      "name": "setAccessControlManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setDynamicCloseFactorEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setDynamicLiquidationIncentiveEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetHealthFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9ca6c4c0c5b29c30ab298355d071eabae146eaee0626ceff1e073565f7b8088d",
  "receipt": {
    "to": null,
    "from": "0x33C6476F88eeA28D7E7900F759B4597704Ef95B7",
    "contractAddress": "0xA0Eef73F94DB337F08f34F9013bCAF8D392289A5",
    "transactionIndex": 0,
    "gasUsed": "846619",
    "logsBloom": "0x
    "blockHash": "0xb0ff6de717409aaa7d68f8e1fb2c93f59e5da3a0ac533f52c16a663e186a22b3",
    "transactionHash": "0x9ca6c4c0c5b29c30ab298355d071eabae146eaee0626ceff1e073565f7b8088d",
    "logs": [],
    "blockNumber": 64776644,
    "cumulativeGasUsed": "846619",
    "status": 1,
    "byzantium": true
  },
  "args": ["50000000000000000", "500000000000000000", "1100000000000000000"],
  "numDeployments": 1,
  "solcInputHash": "b399e251f37c023617074e75c68b227e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseCloseFactorMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defaultCloseFactorMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetHealthFactor_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CollateralExceedsBorrowCapacity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBaseCloseFactor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDefaultCloseFactor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTargetHealthFactor\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"MarketNotListed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"calledContract\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"methodSignature\",\"type\":\"string\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"DynamicCloseFactorEnabledSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"DynamicLiquidationIncentiveEnabledSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAccessControlManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAccessControlManager\",\"type\":\"address\"}],\"name\":\"NewAccessControlManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accessControlManager\",\"outputs\":[{\"internalType\":\"contract IAccessControlManagerV8\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseCloseFactorMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wtAvg\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dynamicLiquidationIncentive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLiquidationIncentive\",\"type\":\"uint256\"}],\"name\":\"calculateDynamicCloseFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"closeFactor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationThresholdAvg\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLiquidationIncentiveMantissa\",\"type\":\"uint256\"}],\"name\":\"calculateDynamicLiquidationIncentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"incentive\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultCloseFactorMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"dynamicCloseFactorEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"dynamicLiquidationIncentiveEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accessControlManager_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accessControlManager_\",\"type\":\"address\"}],\"name\":\"setAccessControlManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setDynamicCloseFactorEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setDynamicLiquidationIncentiveEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetHealthFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Venus\",\"details\":\"This contract provides functions to manage liquidations in the venus protocol. It calculates close factors, dynamic liquidation incentives, and the number of tokens to seize during liquidation. It also checks if a liquidation is toxic based on average liquidation threshold and health factor.\",\"errors\":{\"MarketNotListed(address)\":[{\"params\":{\"market\":\"The address of the market that is not listed.\"}}]},\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"calculateDynamicCloseFactor(address,uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"borrowBalance\":\"The borrow balance of the borrower\",\"dynamicLiquidationIncentive\":\"The dynamic liquidation incentive, scaled by 1e18\",\"maxLiquidationIncentive\":\"The maximum liquidation incentive allowed\",\"totalCollateral\":\"The total collateral available for liquidation\",\"wtAvg\":\"The weighted average of the collateral\"},\"returns\":{\"closeFactor\":\"The calculated close factor, scaled by 1e18\"}},\"calculateDynamicLiquidationIncentive(address,uint256,uint256,uint256)\":{\"params\":{\"healthFactor\":\"The health factor of the borrower\",\"liquidationThresholdAvg\":\"The average liquidation threshold of the collateral\",\"maxLiquidationIncentiveMantissa\":\"The maximum liquidation incentive allowed, scaled by 1e18\"},\"returns\":{\"incentive\":\"The calculated dynamic liquidation incentive, scaled by 1e18\"}},\"constructor\":{\"details\":\"Ensures that the provided addresses are non-zero and that the close factors and health factor are within valid ranges.      Reverts with `InvalidBaseCloseFactor` if `_baseCloseFactorMantissa` is invalid.      Reverts with `InvalidDefaultCloseFactor` if `_defaultCloseFactorMantissa` is invalid.      Reverts with `InvalidTargetHealthFactor` if `_targetHealthFactor` is invalid.\",\"params\":{\"baseCloseFactorMantissa_\":\"The base close factor, scaled by 1e18.\",\"defaultCloseFactorMantissa_\":\"The default close factor, scaled by 1e18.\",\"targetHealthFactor_\":\"The target health factor, scaled by 1e18.\"}},\"initialize(address)\":{\"params\":{\"accessControlManager_\":\"The address of the access control manager contract.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setAccessControlManager(address)\":{\"custom:access\":\"Only Governance\",\"custom:event\":\"Emits NewAccessControlManager event\",\"details\":\"Admin function to set address of AccessControlManager\",\"params\":{\"accessControlManager_\":\"The new address of the AccessControlManager\"}},\"setDynamicCloseFactorEnabled(address,bool)\":{\"custom:event\":\"DynamicCloseFactorEnabledSet\",\"params\":{\"enabled\":\"Boolean indicating whether the dynamic close factor should be enabled or disabled.\",\"market\":\"The address of the market to update.\"}},\"setDynamicLiquidationIncentiveEnabled(address,bool)\":{\"custom:event\":\"DynamicLiquidationIncentiveEnabledSet\",\"params\":{\"enabled\":\"Boolean indicating whether the dynamic liquidation incentive should be enabled or disabled.\",\"market\":\"The address of the market to update.\"}},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"}},\"stateVariables\":{\"dynamicCloseFactorEnabled\":{\"details\":\"Maps a market address to a boolean flag for dynamic close factor activation.\"},\"dynamicLiquidationIncentiveEnabled\":{\"details\":\"Maps a market address to a boolean flag for dynamic liquidation incentive activation.\"}},\"title\":\"LiquidationManager\",\"version\":1},\"userdoc\":{\"errors\":{\"CollateralExceedsBorrowCapacity()\":[{\"notice\":\"Error thrown when collateral exceeds borrow capacity\"}],\"InvalidBaseCloseFactor()\":[{\"notice\":\"Error thrown when the provided base close factor is invalid.\"}],\"InvalidDefaultCloseFactor()\":[{\"notice\":\"Error thrown when the provided default close factor is invalid.\"}],\"InvalidTargetHealthFactor()\":[{\"notice\":\"Error thrown when the provided target health factor is invalid.\"}],\"MarketNotListed(address)\":[{\"notice\":\"Error thrown when the specified market is not listed.\"}],\"Unauthorized(address,address,string)\":[{\"notice\":\"Thrown when the action is prohibited by AccessControlManager\"}]},\"events\":{\"DynamicCloseFactorEnabledSet(address,bool)\":{\"notice\":\"Emitted when the dynamic close factor is enabled or disabled for a market.\"},\"DynamicLiquidationIncentiveEnabledSet(address,bool)\":{\"notice\":\"Emitted when the dynamic liquidation incentive is enabled or disabled for a market.\"},\"NewAccessControlManager(address,address)\":{\"notice\":\"Emitted when access control manager contract address is changed\"}},\"kind\":\"user\",\"methods\":{\"accessControlManager()\":{\"notice\":\"Returns the address of the access control manager contract\"},\"baseCloseFactorMantissa()\":{\"notice\":\"Base close factor, scaled by 1e18 (e.g., 0.05e18 for 5%)\"},\"calculateDynamicCloseFactor(address,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Calculate the close factor for a liquidation\"},\"calculateDynamicLiquidationIncentive(address,uint256,uint256,uint256)\":{\"notice\":\"Calculate the dynamic liquidation incentive based on health factor and average liquidation threshold\"},\"constructor\":{\"notice\":\"Constructor for the LiquidationManager contract.\"},\"defaultCloseFactorMantissa()\":{\"notice\":\"Default close factor, scaled by 1e18 (e.g., 5e17 for 50%)\"},\"dynamicCloseFactorEnabled(address)\":{\"notice\":\"Indicates whether the dynamic close factor is enabled for a given market.\"},\"dynamicLiquidationIncentiveEnabled(address)\":{\"notice\":\"Indicates whether the dynamic liquidation incentive is enabled for a given market.\"},\"initialize(address)\":{\"notice\":\"Initializes the contract with the access control manager.\"},\"setAccessControlManager(address)\":{\"notice\":\"Sets the address of AccessControlManager\"},\"setDynamicCloseFactorEnabled(address,bool)\":{\"notice\":\"Enables or disables the dynamic close factor for a specific market.\"},\"setDynamicLiquidationIncentiveEnabled(address,bool)\":{\"notice\":\"Enables or disables the dynamic liquidation incentive for a specific market.\"},\"targetHealthFactor()\":{\"notice\":\"Target health factor, scaled by 1e18 (e.g., 1.5e18 for 1.5)\"}},\"notice\":\"This contract is designed to be used in conjunction with the venus protocol's liquidation process.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LiquidationManager.sol\":\"LiquidationManager\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9140dabc466abab21b48b72dbda26736b1183a310d0e677d3719d201df026510\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@venusprotocol/governance-contracts/contracts/Governance/AccessControlledV8.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\n\\nimport \\\"./IAccessControlManagerV8.sol\\\";\\n\\n/**\\n * @title AccessControlledV8\\n * @author Venus\\n * @notice This contract is helper between access control manager and actual contract. This contract further inherited by other contract (using solidity 0.8.13)\\n * to integrate access controlled mechanism. It provides initialise methods and verifying access methods.\\n */\\nabstract contract AccessControlledV8 is Initializable, Ownable2StepUpgradeable {\\n    /// @notice Access control manager contract\\n    IAccessControlManagerV8 private _accessControlManager;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n\\n    /// @notice Emitted when access control manager contract address is changed\\n    event NewAccessControlManager(address oldAccessControlManager, address newAccessControlManager);\\n\\n    /// @notice Thrown when the action is prohibited by AccessControlManager\\n    error Unauthorized(address sender, address calledContract, string methodSignature);\\n\\n    function __AccessControlled_init(address accessControlManager_) internal onlyInitializing {\\n        __Ownable2Step_init();\\n        __AccessControlled_init_unchained(accessControlManager_);\\n    }\\n\\n    function __AccessControlled_init_unchained(address accessControlManager_) internal onlyInitializing {\\n        _setAccessControlManager(accessControlManager_);\\n    }\\n\\n    /**\\n     * @notice Sets the address of AccessControlManager\\n     * @dev Admin function to set address of AccessControlManager\\n     * @param accessControlManager_ The new address of the AccessControlManager\\n     * @custom:event Emits NewAccessControlManager event\\n     * @custom:access Only Governance\\n     */\\n    function setAccessControlManager(address accessControlManager_) external onlyOwner {\\n        _setAccessControlManager(accessControlManager_);\\n    }\\n\\n    /**\\n     * @notice Returns the address of the access control manager contract\\n     */\\n    function accessControlManager() external view returns (IAccessControlManagerV8) {\\n        return _accessControlManager;\\n    }\\n\\n    /**\\n     * @dev Internal function to set address of AccessControlManager\\n     * @param accessControlManager_ The new address of the AccessControlManager\\n     */\\n    function _setAccessControlManager(address accessControlManager_) internal {\\n        require(address(accessControlManager_) != address(0), \\\"invalid acess control manager address\\\");\\n        address oldAccessControlManager = address(_accessControlManager);\\n        _accessControlManager = IAccessControlManagerV8(accessControlManager_);\\n        emit NewAccessControlManager(oldAccessControlManager, accessControlManager_);\\n    }\\n\\n    /**\\n     * @notice Reverts if the call is not allowed by AccessControlManager\\n     * @param signature Method signature\\n     */\\n    function _checkAccessAllowed(string memory signature) internal view {\\n        bool isAllowedToCall = _accessControlManager.isAllowedToCall(msg.sender, signature);\\n\\n        if (!isAllowedToCall) {\\n            revert Unauthorized(msg.sender, address(this), signature);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dcf283925f4dddc23ca0ee71d2cb96a9dd6e4cf08061b69fde1697ea39dc514\",\"license\":\"BSD-3-Clause\"},\"@venusprotocol/governance-contracts/contracts/Governance/IAccessControlManagerV8.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.25;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\n/**\\n * @title IAccessControlManagerV8\\n * @author Venus\\n * @notice Interface implemented by the `AccessControlManagerV8` contract.\\n */\\ninterface IAccessControlManagerV8 is IAccessControl {\\n    function giveCallPermission(address contractAddress, string calldata functionSig, address accountToPermit) external;\\n\\n    function revokeCallPermission(\\n        address contractAddress,\\n        string calldata functionSig,\\n        address accountToRevoke\\n    ) external;\\n\\n    function isAllowedToCall(address account, string calldata functionSig) external view returns (bool);\\n\\n    function hasPermission(\\n        address account,\\n        address contractAddress,\\n        string calldata functionSig\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xaa29b098440d0b3a131c5ecdf25ce548790c1b5ac7bf9b5c0264b6af6f7a1e0b\",\"license\":\"BSD-3-Clause\"},\"contracts/LiquidationManager.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.25;\\n\\nimport { ExponentialNoError } from \\\"./Utils/ExponentialNoError.sol\\\";\\nimport \\\"@venusprotocol/governance-contracts/contracts/Governance/AccessControlledV8.sol\\\";\\n\\n/**\\n * @title LiquidationManager\\n * @dev This contract provides functions to manage liquidations in the venus protocol.\\n * It calculates close factors, dynamic liquidation incentives, and the number of tokens to seize during liquidation.\\n * It also checks if a liquidation is toxic based on average liquidation threshold and health factor.\\n * @author Venus\\n * @notice This contract is designed to be used in conjunction with the venus protocol's liquidation process.\\n */\\ncontract LiquidationManager is AccessControlledV8, ExponentialNoError {\\n    /// @notice Base close factor, scaled by 1e18 (e.g., 0.05e18 for 5%)\\n    uint256 public immutable baseCloseFactorMantissa;\\n\\n    /// @notice Default close factor, scaled by 1e18 (e.g., 5e17 for 50%)\\n    uint256 public immutable defaultCloseFactorMantissa;\\n\\n    /// @notice Target health factor, scaled by 1e18 (e.g., 1.5e18 for 1.5)\\n    uint256 public immutable targetHealthFactor;\\n\\n    /// @notice Indicates whether the dynamic close factor is enabled for a given market.\\n    /// @dev Maps a market address to a boolean flag for dynamic close factor activation.\\n    mapping(address => bool) public dynamicCloseFactorEnabled;\\n\\n    /// @notice Indicates whether the dynamic liquidation incentive is enabled for a given market.\\n    /// @dev Maps a market address to a boolean flag for dynamic liquidation incentive activation.\\n    mapping(address => bool) public dynamicLiquidationIncentiveEnabled;\\n\\n    /// @notice Emitted when the dynamic close factor is enabled or disabled for a market.\\n    event DynamicCloseFactorEnabledSet(address indexed market, bool enabled);\\n\\n    /// @notice Emitted when the dynamic liquidation incentive is enabled or disabled for a market.\\n    event DynamicLiquidationIncentiveEnabledSet(address indexed market, bool enabled);\\n\\n    /**\\n     * @notice Error thrown when collateral exceeds borrow capacity\\n     */\\n    error CollateralExceedsBorrowCapacity();\\n\\n    /**\\n     * @notice Error thrown when the provided base close factor is invalid.\\n     */\\n    error InvalidBaseCloseFactor();\\n\\n    /**\\n     * @notice Error thrown when the provided default close factor is invalid.\\n     */\\n    error InvalidDefaultCloseFactor();\\n\\n    /**\\n     * @notice Error thrown when the provided target health factor is invalid.\\n     */\\n    error InvalidTargetHealthFactor();\\n\\n    /**\\n     * @notice Error thrown when the specified market is not listed.\\n     * @param market The address of the market that is not listed.\\n     */\\n    error MarketNotListed(address market);\\n\\n    /**\\n     * @notice Constructor for the LiquidationManager contract.\\n     * @param baseCloseFactorMantissa_ The base close factor, scaled by 1e18.\\n     * @param defaultCloseFactorMantissa_ The default close factor, scaled by 1e18.\\n     * @param targetHealthFactor_ The target health factor, scaled by 1e18.\\n     * @dev Ensures that the provided addresses are non-zero and that the close factors and health factor are within valid ranges.\\n     *      Reverts with `InvalidBaseCloseFactor` if `_baseCloseFactorMantissa` is invalid.\\n     *      Reverts with `InvalidDefaultCloseFactor` if `_defaultCloseFactorMantissa` is invalid.\\n     *      Reverts with `InvalidTargetHealthFactor` if `_targetHealthFactor` is invalid.\\n     */\\n    constructor(uint256 baseCloseFactorMantissa_, uint256 defaultCloseFactorMantissa_, uint256 targetHealthFactor_) {\\n        if (baseCloseFactorMantissa_ > mantissaOne || baseCloseFactorMantissa_ > defaultCloseFactorMantissa_) {\\n            revert InvalidBaseCloseFactor();\\n        }\\n        if (defaultCloseFactorMantissa_ > mantissaOne) {\\n            revert InvalidDefaultCloseFactor();\\n        }\\n        if (targetHealthFactor_ < mantissaOne) {\\n            revert InvalidTargetHealthFactor();\\n        }\\n\\n        baseCloseFactorMantissa = baseCloseFactorMantissa_;\\n        defaultCloseFactorMantissa = defaultCloseFactorMantissa_;\\n        targetHealthFactor = targetHealthFactor_;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract with the access control manager.\\n     * @param accessControlManager_ The address of the access control manager contract.\\n     */\\n    function initialize(address accessControlManager_) external initializer {\\n        __AccessControlled_init(accessControlManager_);\\n    }\\n\\n    /**\\n     * @notice Enables or disables the dynamic close factor for a specific market.\\n     * @param market The address of the market to update.\\n     * @param enabled Boolean indicating whether the dynamic close factor should be enabled or disabled.\\n     * @custom:event DynamicCloseFactorEnabledSet\\n     */\\n    function setDynamicCloseFactorEnabled(address market, bool enabled) external {\\n        _checkAccessAllowed(\\\"setDynamicCloseFactorEnabled(address,bool)\\\");\\n        dynamicCloseFactorEnabled[market] = enabled;\\n        emit DynamicCloseFactorEnabledSet(market, enabled);\\n    }\\n\\n    /**\\n     * @notice Enables or disables the dynamic liquidation incentive for a specific market.\\n     * @param market The address of the market to update.\\n     * @param enabled Boolean indicating whether the dynamic liquidation incentive should be enabled or disabled.\\n     * @custom:event DynamicLiquidationIncentiveEnabledSet\\n     */\\n    function setDynamicLiquidationIncentiveEnabled(address market, bool enabled) external {\\n        _checkAccessAllowed(\\\"setDynamicLiquidationIncentiveEnabled(address,bool)\\\");\\n        dynamicLiquidationIncentiveEnabled[market] = enabled;\\n        emit DynamicLiquidationIncentiveEnabledSet(market, enabled);\\n    }\\n\\n    /**\\n     * @notice Calculate the close factor for a liquidation\\n     * @param borrowBalance The borrow balance of the borrower\\n     * @param wtAvg The weighted average of the collateral\\n     * @param totalCollateral The total collateral available for liquidation\\n     * @param dynamicLiquidationIncentive The dynamic liquidation incentive, scaled by 1e18\\n     * @param maxLiquidationIncentive The maximum liquidation incentive allowed\\n     * @return closeFactor The calculated close factor, scaled by 1e18\\n     */\\n    function calculateDynamicCloseFactor(\\n        address market,\\n        uint256 borrowBalance,\\n        uint256 wtAvg,\\n        uint256 totalCollateral,\\n        uint256 dynamicLiquidationIncentive,\\n        uint256 maxLiquidationIncentive\\n    ) external view returns (uint256 closeFactor) {\\n        if (!dynamicCloseFactorEnabled[market]) {\\n            // Use default close factor if dynamic close factor is not enabled\\n            return defaultCloseFactorMantissa;\\n        }\\n\\n        if (dynamicLiquidationIncentive == maxLiquidationIncentive) {\\n            // Prevent underflow\\n            if (wtAvg * totalCollateral > borrowBalance * mantissaOne) {\\n                revert CollateralExceedsBorrowCapacity();\\n            }\\n\\n            uint256 numerator = (borrowBalance * targetHealthFactor - wtAvg * totalCollateral) / mantissaOne;\\n            uint256 denominator = borrowBalance *\\n                (targetHealthFactor - ((wtAvg * maxLiquidationIncentive) / mantissaOne));\\n\\n            uint256 dynamicCloseFactor = numerator / denominator;\\n            uint256 dynamicBaseCloseFactor = baseCloseFactorMantissa * (mantissaOne - dynamicCloseFactor);\\n            closeFactor = add_(dynamicCloseFactor, dynamicBaseCloseFactor);\\n            closeFactor = closeFactor > mantissaOne ? mantissaOne : closeFactor;\\n        } else {\\n            closeFactor = mantissaOne; // Liquidate 100% if unhealthy\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate the dynamic liquidation incentive based on health factor and average liquidation threshold\\n     * @param healthFactor The health factor of the borrower\\n     * @param liquidationThresholdAvg The average liquidation threshold of the collateral\\n     * @param maxLiquidationIncentiveMantissa The maximum liquidation incentive allowed, scaled by 1e18\\n     * @return incentive The calculated dynamic liquidation incentive, scaled by 1e18\\n     */\\n    function calculateDynamicLiquidationIncentive(\\n        address market,\\n        uint256 healthFactor,\\n        uint256 liquidationThresholdAvg,\\n        uint256 maxLiquidationIncentiveMantissa\\n    ) external view returns (uint256 incentive) {\\n        if (!dynamicLiquidationIncentiveEnabled[market]) {\\n            return maxLiquidationIncentiveMantissa;\\n        }\\n\\n        uint256 value = (healthFactor * mantissaOne) / liquidationThresholdAvg;\\n        return value > maxLiquidationIncentiveMantissa ? maxLiquidationIncentiveMantissa : value;\\n    }\\n}\\n\",\"keccak256\":\"0x60b7e37b9274800da3ea4b988a97f28246a9daa04b55f7b15978c728961e4508\",\"license\":\"BSD-3-Clause\"},\"contracts/Utils/ExponentialNoError.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract ExponentialNoError {\\n    uint internal constant expScale = 1e18;\\n    uint internal constant doubleScale = 1e36;\\n    uint internal constant halfExpScale = expScale / 2;\\n    uint internal constant mantissaOne = expScale;\\n\\n    struct Exp {\\n        uint mantissa;\\n    }\\n\\n    struct Double {\\n        uint mantissa;\\n    }\\n\\n    /**\\n     * @dev Truncates the given exp to a whole number value.\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n     */\\n    function truncate(Exp memory exp) internal pure returns (uint) {\\n        // Note: We are not using careful math here as we're performing a division that cannot fail\\n        return exp.mantissa / expScale;\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mul_ScalarTruncate(Exp memory a, uint scalar) internal pure returns (uint) {\\n        Exp memory product = mul_(a, scalar);\\n        return truncate(product);\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mul_ScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) internal pure returns (uint) {\\n        Exp memory product = mul_(a, scalar);\\n        return add_(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Checks if first Exp is less than second Exp.\\n     */\\n    function lessThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n        return left.mantissa < right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp <= right Exp.\\n     */\\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n        return left.mantissa <= right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp > right Exp.\\n     */\\n    function greaterThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n        return left.mantissa > right.mantissa;\\n    }\\n\\n    /**\\n     * @dev returns true if Exp is exactly zero\\n     */\\n    function isZeroExp(Exp memory value) internal pure returns (bool) {\\n        return value.mantissa == 0;\\n    }\\n\\n    function safe224(uint n, string memory errorMessage) internal pure returns (uint224) {\\n        require(n < 2 ** 224, errorMessage);\\n        return uint224(n);\\n    }\\n\\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2 ** 32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function add_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: add_(a.mantissa, b.mantissa) });\\n    }\\n\\n    function add_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({ mantissa: add_(a.mantissa, b.mantissa) });\\n    }\\n\\n    function add_(uint a, uint b) internal pure returns (uint) {\\n        return add_(a, b, \\\"addition overflow\\\");\\n    }\\n\\n    function add_(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: sub_(a.mantissa, b.mantissa) });\\n    }\\n\\n    function sub_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({ mantissa: sub_(a.mantissa, b.mantissa) });\\n    }\\n\\n    function sub_(uint a, uint b) internal pure returns (uint) {\\n        return sub_(a, b, \\\"subtraction underflow\\\");\\n    }\\n\\n    function sub_(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function mul_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: mul_(a.mantissa, b.mantissa) / expScale });\\n    }\\n\\n    function mul_(Exp memory a, uint b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: mul_(a.mantissa, b) });\\n    }\\n\\n    function mul_(uint a, Exp memory b) internal pure returns (uint) {\\n        return mul_(a, b.mantissa) / expScale;\\n    }\\n\\n    function mul_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({ mantissa: mul_(a.mantissa, b.mantissa) / doubleScale });\\n    }\\n\\n    function mul_(Double memory a, uint b) internal pure returns (Double memory) {\\n        return Double({ mantissa: mul_(a.mantissa, b) });\\n    }\\n\\n    function mul_(uint a, Double memory b) internal pure returns (uint) {\\n        return mul_(a, b.mantissa) / doubleScale;\\n    }\\n\\n    function mul_(uint a, uint b) internal pure returns (uint) {\\n        return mul_(a, b, \\\"multiplication overflow\\\");\\n    }\\n\\n    function mul_(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        uint c = a * b;\\n        require(c / a == b, errorMessage);\\n        return c;\\n    }\\n\\n    function div_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: div_(mul_(a.mantissa, expScale), b.mantissa) });\\n    }\\n\\n    function div_(Exp memory a, uint b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: div_(a.mantissa, b) });\\n    }\\n\\n    function div_(uint a, Exp memory b) internal pure returns (uint) {\\n        return div_(mul_(a, expScale), b.mantissa);\\n    }\\n\\n    function div_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({ mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa) });\\n    }\\n\\n    function div_(Double memory a, uint b) internal pure returns (Double memory) {\\n        return Double({ mantissa: div_(a.mantissa, b) });\\n    }\\n\\n    function div_(uint a, Double memory b) internal pure returns (uint) {\\n        return div_(mul_(a, doubleScale), b.mantissa);\\n    }\\n\\n    function div_(uint a, uint b) internal pure returns (uint) {\\n        return div_(a, b, \\\"divide by zero\\\");\\n    }\\n\\n    function div_(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    function fraction(uint a, uint b) internal pure returns (Double memory) {\\n        return Double({ mantissa: div_(mul_(a, doubleScale), b) });\\n    }\\n}\\n\",\"keccak256\":\"0xce75802a56763fb96b2046b374127f080a425cfe3634670767ec040ccb6ea7e0\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561000f575f80fd5b50604051610f7e380380610f7e83398101604081905261002e916100c4565b670de0b6b3a764000083118061004357508183115b156100615760405163064e6dc760e41b815260040160405180910390fd5b670de0b6b3a764000082111561008a5760405163cb619fd560e01b815260040160405180910390fd5b670de0b6b3a76400008110156100b35760405163361804a960e21b815260040160405180910390fd5b60809290925260a05260c0526100ef565b5f805f606084860312156100d6575f80fd5b8351925060208401519150604084015190509250925092565b60805160a05160c051610e496101355f395f818161015b015281816104e9015261054801525f8181610198015261046a01525f818161028f015261059e0152610e495ff3fe608060405234801561000f575f80fd5b5060043610610106575f3560e01c8063894b0fd61161009e578063b4cefb1e1161006e578063b4cefb1e14610253578063c4d66de814610266578063e30c397814610279578063e46b6d0a1461028a578063f2fde38b146102b1575f80fd5b8063894b0fd6146101e85780638da5cb5b1461020a5780639dbd19c71461022f578063b4a0bdf314610242575f80fd5b8063750142ab116100d9578063750142ab1461019357806379ba5097146101ba5780637d90d37a146101c257806384ba0c57146101d5575f80fd5b80630e32cb861461010a57806322556d431461011f578063254cf43914610156578063715018a61461018b575b5f80fd5b61011d610118366004610b6b565b6102c4565b005b61014161012d366004610b6b565b60ca6020525f908152604090205460ff1681565b60405190151581526020015b60405180910390f35b61017d7f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161014d565b61011d6102d8565b61017d7f000000000000000000000000000000000000000000000000000000000000000081565b61011d6102eb565b61017d6101d0366004610b84565b610367565b61011d6101e3366004610bc7565b6103c8565b6101416101f6366004610b6b565b60c96020525f908152604090205460ff1681565b6033546001600160a01b03165b6040516001600160a01b03909116815260200161014d565b61017d61023d366004610bfc565b610448565b6097546001600160a01b0316610217565b61011d610261366004610bc7565b61060f565b61011d610274366004610b6b565b610687565b6065546001600160a01b0316610217565b61017d7f000000000000000000000000000000000000000000000000000000000000000081565b61011d6102bf366004610b6b565b610795565b6102cc610806565b6102d581610860565b50565b6102e0610806565b6102e95f61091e565b565b60655433906001600160a01b0316811461035e5760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b60648201526084015b60405180910390fd5b6102d58161091e565b6001600160a01b0384165f90815260ca602052604081205460ff1661038d5750806103c0565b5f836103a1670de0b6b3a764000087610c56565b6103ab9190610c6d565b90508281116103ba57806103bc565b825b9150505b949350505050565b6103e9604051806060016040528060338152602001610db760339139610937565b6001600160a01b0382165f81815260ca6020908152604091829020805460ff191685151590811790915591519182527f3698b1bcd81ea2ecfc6c887e8019ee219e4957558a57ad4e8fd25f2bcacd8b6991015b60405180910390a25050565b6001600160a01b0386165f90815260c9602052604081205460ff1661048e57507f0000000000000000000000000000000000000000000000000000000000000000610605565b8183036105fa576104a7670de0b6b3a764000087610c56565b6104b18587610c56565b11156104d05760405163029df97960e11b815260040160405180910390fd5b5f670de0b6b3a76400006104e48688610c56565b61050e7f00000000000000000000000000000000000000000000000000000000000000008a610c56565b6105189190610c8c565b6105229190610c6d565b90505f670de0b6b3a76400006105388589610c56565b6105429190610c6d565b61056c907f0000000000000000000000000000000000000000000000000000000000000000610c8c565b6105769089610c56565b90505f6105838284610c6d565b90505f61059882670de0b6b3a7640000610c8c565b6105c2907f0000000000000000000000000000000000000000000000000000000000000000610c56565b90506105ce82826109ce565b9450670de0b6b3a764000085116105e557846105ef565b670de0b6b3a76400005b945050505050610605565b50670de0b6b3a76400005b9695505050505050565b6106306040518060600160405280602a8152602001610dea602a9139610937565b6001600160a01b0382165f81815260c96020908152604091829020805460ff191685151590811790915591519182527f3e854e8ee8ebcaef119dea646cd28bdd4f19f673d3855ce4865f9909c2acae60910161043c565b5f54610100900460ff16158080156106a557505f54600160ff909116105b806106be5750303b1580156106be57505f5460ff166001145b6107215760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610355565b5f805460ff191660011790558015610742575f805461ff0019166101001790555b61074b82610a0c565b8015610791575f805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15b5050565b61079d610806565b606580546001600160a01b0383166001600160a01b031990911681179091556107ce6033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6033546001600160a01b031633146102e95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610355565b6001600160a01b0381166108c45760405162461bcd60e51b815260206004820152602560248201527f696e76616c696420616365737320636f6e74726f6c206d616e61676572206164604482015264647265737360d81b6064820152608401610355565b609780546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f66fd58e82f7b31a2a5c30e0888f3093efe4e111b00cd2b0c31fe014601293aa09101610788565b606580546001600160a01b03191690556102d581610a43565b6097546040516318c5e8ab60e01b81525f916001600160a01b0316906318c5e8ab906109699033908690600401610ccd565b602060405180830381865afa158015610984573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109a89190610cf0565b90508061079157333083604051634a3fa29360e01b815260040161035593929190610d12565b5f610a038383604051806040016040528060118152602001706164646974696f6e206f766572666c6f7760781b815250610a94565b90505b92915050565b5f54610100900460ff16610a325760405162461bcd60e51b815260040161035590610d46565b610a3a610acd565b6102d581610afb565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b5f80610aa08486610d91565b90508285821015610ac45760405162461bcd60e51b81526004016103559190610da4565b50949350505050565b5f54610100900460ff16610af35760405162461bcd60e51b815260040161035590610d46565b6102e9610b21565b5f54610100900460ff166102cc5760405162461bcd60e51b815260040161035590610d46565b5f54610100900460ff16610b475760405162461bcd60e51b815260040161035590610d46565b6102e93361091e565b80356001600160a01b0381168114610b66575f80fd5b919050565b5f60208284031215610b7b575f80fd5b610a0382610b50565b5f805f8060808587031215610b97575f80fd5b610ba085610b50565b966020860135965060408601359560600135945092505050565b80151581146102d5575f80fd5b5f8060408385031215610bd8575f80fd5b610be183610b50565b91506020830135610bf181610bba565b809150509250929050565b5f805f805f8060c08789031215610c11575f80fd5b610c1a87610b50565b9860208801359850604088013597606081013597506080810135965060a00135945092505050565b634e487b7160e01b5f52601160045260245ffd5b8082028115828204841417610a0657610a06610c42565b5f82610c8757634e487b7160e01b5f52601260045260245ffd5b500490565b81810381811115610a0657610a06610c42565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b6001600160a01b03831681526040602082018190525f906103c090830184610c9f565b5f60208284031215610d00575f80fd5b8151610d0b81610bba565b9392505050565b6001600160a01b038481168252831660208201526060604082018190525f90610d3d90830184610c9f565b95945050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b80820180821115610a0657610a06610c42565b602081525f610a036020830184610c9f56fe73657444796e616d69634c69717569646174696f6e496e63656e74697665456e61626c656428616464726573732c626f6f6c2973657444796e616d6963436c6f7365466163746f72456e61626c656428616464726573732c626f6f6c29a264697066735822122095c32b5382f21087bce1a2205d21023457e55e5df36224084b66c51c313b051f64736f6c63430008190033",
  "deployedBytecode": "0x608060405234801561000f575f80fd5b5060043610610106575f3560e01c8063894b0fd61161009e578063b4cefb1e1161006e578063b4cefb1e14610253578063c4d66de814610266578063e30c397814610279578063e46b6d0a1461028a578063f2fde38b146102b1575f80fd5b8063894b0fd6146101e85780638da5cb5b1461020a5780639dbd19c71461022f578063b4a0bdf314610242575f80fd5b8063750142ab116100d9578063750142ab1461019357806379ba5097146101ba5780637d90d37a146101c257806384ba0c57146101d5575f80fd5b80630e32cb861461010a57806322556d431461011f578063254cf43914610156578063715018a61461018b575b5f80fd5b61011d610118366004610b6b565b6102c4565b005b61014161012d366004610b6b565b60ca6020525f908152604090205460ff1681565b60405190151581526020015b60405180910390f35b61017d7f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161014d565b61011d6102d8565b61017d7f000000000000000000000000000000000000000000000000000000000000000081565b61011d6102eb565b61017d6101d0366004610b84565b610367565b61011d6101e3366004610bc7565b6103c8565b6101416101f6366004610b6b565b60c96020525f908152604090205460ff1681565b6033546001600160a01b03165b6040516001600160a01b03909116815260200161014d565b61017d61023d366004610bfc565b610448565b6097546001600160a01b0316610217565b61011d610261366004610bc7565b61060f565b61011d610274366004610b6b565b610687565b6065546001600160a01b0316610217565b61017d7f000000000000000000000000000000000000000000000000000000000000000081565b61011d6102bf366004610b6b565b610795565b6102cc610806565b6102d581610860565b50565b6102e0610806565b6102e95f61091e565b565b60655433906001600160a01b0316811461035e5760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b60648201526084015b60405180910390fd5b6102d58161091e565b6001600160a01b0384165f90815260ca602052604081205460ff1661038d5750806103c0565b5f836103a1670de0b6b3a764000087610c56565b6103ab9190610c6d565b90508281116103ba57806103bc565b825b9150505b949350505050565b6103e9604051806060016040528060338152602001610db760339139610937565b6001600160a01b0382165f81815260ca6020908152604091829020805460ff191685151590811790915591519182527f3698b1bcd81ea2ecfc6c887e8019ee219e4957558a57ad4e8fd25f2bcacd8b6991015b60405180910390a25050565b6001600160a01b0386165f90815260c9602052604081205460ff1661048e57507f0000000000000000000000000000000000000000000000000000000000000000610605565b8183036105fa576104a7670de0b6b3a764000087610c56565b6104b18587610c56565b11156104d05760405163029df97960e11b815260040160405180910390fd5b5f670de0b6b3a76400006104e48688610c56565b61050e7f00000000000000000000000000000000000000000000000000000000000000008a610c56565b6105189190610c8c565b6105229190610c6d565b90505f670de0b6b3a76400006105388589610c56565b6105429190610c6d565b61056c907f0000000000000000000000000000000000000000000000000000000000000000610c8c565b6105769089610c56565b90505f6105838284610c6d565b90505f61059882670de0b6b3a7640000610c8c565b6105c2907f0000000000000000000000000000000000000000000000000000000000000000610c56565b90506105ce82826109ce565b9450670de0b6b3a764000085116105e557846105ef565b670de0b6b3a76400005b945050505050610605565b50670de0b6b3a76400005b9695505050505050565b6106306040518060600160405280602a8152602001610dea602a9139610937565b6001600160a01b0382165f81815260c96020908152604091829020805460ff191685151590811790915591519182527f3e854e8ee8ebcaef119dea646cd28bdd4f19f673d3855ce4865f9909c2acae60910161043c565b5f54610100900460ff16158080156106a557505f54600160ff909116105b806106be5750303b1580156106be57505f5460ff166001145b6107215760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610355565b5f805460ff191660011790558015610742575f805461ff0019166101001790555b61074b82610a0c565b8015610791575f805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15b5050565b61079d610806565b606580546001600160a01b0383166001600160a01b031990911681179091556107ce6033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6033546001600160a01b031633146102e95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610355565b6001600160a01b0381166108c45760405162461bcd60e51b815260206004820152602560248201527f696e76616c696420616365737320636f6e74726f6c206d616e61676572206164604482015264647265737360d81b6064820152608401610355565b609780546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f66fd58e82f7b31a2a5c30e0888f3093efe4e111b00cd2b0c31fe014601293aa09101610788565b606580546001600160a01b03191690556102d581610a43565b6097546040516318c5e8ab60e01b81525f916001600160a01b0316906318c5e8ab906109699033908690600401610ccd565b602060405180830381865afa158015610984573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109a89190610cf0565b90508061079157333083604051634a3fa29360e01b815260040161035593929190610d12565b5f610a038383604051806040016040528060118152602001706164646974696f6e206f766572666c6f7760781b815250610a94565b90505b92915050565b5f54610100900460ff16610a325760405162461bcd60e51b815260040161035590610d46565b610a3a610acd565b6102d581610afb565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b5f80610aa08486610d91565b90508285821015610ac45760405162461bcd60e51b81526004016103559190610da4565b50949350505050565b5f54610100900460ff16610af35760405162461bcd60e51b815260040161035590610d46565b6102e9610b21565b5f54610100900460ff166102cc5760405162461bcd60e51b815260040161035590610d46565b5f54610100900460ff16610b475760405162461bcd60e51b815260040161035590610d46565b6102e93361091e565b80356001600160a01b0381168114610b66575f80fd5b919050565b5f60208284031215610b7b575f80fd5b610a0382610b50565b5f805f8060808587031215610b97575f80fd5b610ba085610b50565b966020860135965060408601359560600135945092505050565b80151581146102d5575f80fd5b5f8060408385031215610bd8575f80fd5b610be183610b50565b91506020830135610bf181610bba565b809150509250929050565b5f805f805f8060c08789031215610c11575f80fd5b610c1a87610b50565b9860208801359850604088013597606081013597506080810135965060a00135945092505050565b634e487b7160e01b5f52601160045260245ffd5b8082028115828204841417610a0657610a06610c42565b5f82610c8757634e487b7160e01b5f52601260045260245ffd5b500490565b81810381811115610a0657610a06610c42565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b6001600160a01b03831681526040602082018190525f906103c090830184610c9f565b5f60208284031215610d00575f80fd5b8151610d0b81610bba565b9392505050565b6001600160a01b038481168252831660208201526060604082018190525f90610d3d90830184610c9f565b95945050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b80820180821115610a0657610a06610c42565b602081525f610a036020830184610c9f56fe73657444796e616d69634c69717569646174696f6e496e63656e74697665456e61626c656428616464726573732c626f6f6c2973657444796e616d6963436c6f7365466163746f72456e61626c656428616464726573732c626f6f6c29a264697066735822122095c32b5382f21087bce1a2205d21023457e55e5df36224084b66c51c313b051f64736f6c63430008190033",
  "devdoc": {
    "author": "Venus",
    "details": "This contract provides functions to manage liquidations in the venus protocol. It calculates close factors, dynamic liquidation incentives, and the number of tokens to seize during liquidation. It also checks if a liquidation is toxic based on average liquidation threshold and health factor.",
    "errors": {
      "MarketNotListed(address)": [
        {
          "params": {
            "market": "The address of the market that is not listed."
          }
        }
      ]
    },
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "calculateDynamicCloseFactor(address,uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "borrowBalance": "The borrow balance of the borrower",
          "dynamicLiquidationIncentive": "The dynamic liquidation incentive, scaled by 1e18",
          "maxLiquidationIncentive": "The maximum liquidation incentive allowed",
          "totalCollateral": "The total collateral available for liquidation",
          "wtAvg": "The weighted average of the collateral"
        },
        "returns": {
          "closeFactor": "The calculated close factor, scaled by 1e18"
        }
      },
      "calculateDynamicLiquidationIncentive(address,uint256,uint256,uint256)": {
        "params": {
          "healthFactor": "The health factor of the borrower",
          "liquidationThresholdAvg": "The average liquidation threshold of the collateral",
          "maxLiquidationIncentiveMantissa": "The maximum liquidation incentive allowed, scaled by 1e18"
        },
        "returns": {
          "incentive": "The calculated dynamic liquidation incentive, scaled by 1e18"
        }
      },
      "constructor": {
        "details": "Ensures that the provided addresses are non-zero and that the close factors and health factor are within valid ranges.      Reverts with `InvalidBaseCloseFactor` if `_baseCloseFactorMantissa` is invalid.      Reverts with `InvalidDefaultCloseFactor` if `_defaultCloseFactorMantissa` is invalid.      Reverts with `InvalidTargetHealthFactor` if `_targetHealthFactor` is invalid.",
        "params": {
          "baseCloseFactorMantissa_": "The base close factor, scaled by 1e18.",
          "defaultCloseFactorMantissa_": "The default close factor, scaled by 1e18.",
          "targetHealthFactor_": "The target health factor, scaled by 1e18."
        }
      },
      "initialize(address)": {
        "params": {
          "accessControlManager_": "The address of the access control manager contract."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setAccessControlManager(address)": {
        "custom:access": "Only Governance",
        "custom:event": "Emits NewAccessControlManager event",
        "details": "Admin function to set address of AccessControlManager",
        "params": {
          "accessControlManager_": "The new address of the AccessControlManager"
        }
      },
      "setDynamicCloseFactorEnabled(address,bool)": {
        "custom:event": "DynamicCloseFactorEnabledSet",
        "params": {
          "enabled": "Boolean indicating whether the dynamic close factor should be enabled or disabled.",
          "market": "The address of the market to update."
        }
      },
      "setDynamicLiquidationIncentiveEnabled(address,bool)": {
        "custom:event": "DynamicLiquidationIncentiveEnabledSet",
        "params": {
          "enabled": "Boolean indicating whether the dynamic liquidation incentive should be enabled or disabled.",
          "market": "The address of the market to update."
        }
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "dynamicCloseFactorEnabled": {
        "details": "Maps a market address to a boolean flag for dynamic close factor activation."
      },
      "dynamicLiquidationIncentiveEnabled": {
        "details": "Maps a market address to a boolean flag for dynamic liquidation incentive activation."
      }
    },
    "title": "LiquidationManager",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "CollateralExceedsBorrowCapacity()": [
        {
          "notice": "Error thrown when collateral exceeds borrow capacity"
        }
      ],
      "InvalidBaseCloseFactor()": [
        {
          "notice": "Error thrown when the provided base close factor is invalid."
        }
      ],
      "InvalidDefaultCloseFactor()": [
        {
          "notice": "Error thrown when the provided default close factor is invalid."
        }
      ],
      "InvalidTargetHealthFactor()": [
        {
          "notice": "Error thrown when the provided target health factor is invalid."
        }
      ],
      "MarketNotListed(address)": [
        {
          "notice": "Error thrown when the specified market is not listed."
        }
      ],
      "Unauthorized(address,address,string)": [
        {
          "notice": "Thrown when the action is prohibited by AccessControlManager"
        }
      ]
    },
    "events": {
      "DynamicCloseFactorEnabledSet(address,bool)": {
        "notice": "Emitted when the dynamic close factor is enabled or disabled for a market."
      },
      "DynamicLiquidationIncentiveEnabledSet(address,bool)": {
        "notice": "Emitted when the dynamic liquidation incentive is enabled or disabled for a market."
      },
      "NewAccessControlManager(address,address)": {
        "notice": "Emitted when access control manager contract address is changed"
      }
    },
    "kind": "user",
    "methods": {
      "accessControlManager()": {
        "notice": "Returns the address of the access control manager contract"
      },
      "baseCloseFactorMantissa()": {
        "notice": "Base close factor, scaled by 1e18 (e.g., 0.05e18 for 5%)"
      },
      "calculateDynamicCloseFactor(address,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Calculate the close factor for a liquidation"
      },
      "calculateDynamicLiquidationIncentive(address,uint256,uint256,uint256)": {
        "notice": "Calculate the dynamic liquidation incentive based on health factor and average liquidation threshold"
      },
      "constructor": {
        "notice": "Constructor for the LiquidationManager contract."
      },
      "defaultCloseFactorMantissa()": {
        "notice": "Default close factor, scaled by 1e18 (e.g., 5e17 for 50%)"
      },
      "dynamicCloseFactorEnabled(address)": {
        "notice": "Indicates whether the dynamic close factor is enabled for a given market."
      },
      "dynamicLiquidationIncentiveEnabled(address)": {
        "notice": "Indicates whether the dynamic liquidation incentive is enabled for a given market."
      },
      "initialize(address)": {
        "notice": "Initializes the contract with the access control manager."
      },
      "setAccessControlManager(address)": {
        "notice": "Sets the address of AccessControlManager"
      },
      "setDynamicCloseFactorEnabled(address,bool)": {
        "notice": "Enables or disables the dynamic close factor for a specific market."
      },
      "setDynamicLiquidationIncentiveEnabled(address,bool)": {
        "notice": "Enables or disables the dynamic liquidation incentive for a specific market."
      },
      "targetHealthFactor()": {
        "notice": "Target health factor, scaled by 1e18 (e.g., 1.5e18 for 1.5)"
      }
    },
    "notice": "This contract is designed to be used in conjunction with the venus protocol's liquidation process.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 246,
        "contract": "contracts/LiquidationManager.sol:LiquidationManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 249,
        "contract": "contracts/LiquidationManager.sol:LiquidationManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1516,
        "contract": "contracts/LiquidationManager.sol:LiquidationManager",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 118,
        "contract": "contracts/LiquidationManager.sol:LiquidationManager",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 238,
        "contract": "contracts/LiquidationManager.sol:LiquidationManager",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11,
        "contract": "contracts/LiquidationManager.sol:LiquidationManager",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 105,
        "contract": "contracts/LiquidationManager.sol:LiquidationManager",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5863,
        "contract": "contracts/LiquidationManager.sol:LiquidationManager",
        "label": "_accessControlManager",
        "offset": 0,
        "slot": "151",
        "type": "t_contract(IAccessControlManagerV8)6048"
      },
      {
        "astId": 5868,
        "contract": "contracts/LiquidationManager.sol:LiquidationManager",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 24093,
        "contract": "contracts/LiquidationManager.sol:LiquidationManager",
        "label": "dynamicCloseFactorEnabled",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 24098,
        "contract": "contracts/LiquidationManager.sol:LiquidationManager",
        "label": "dynamicLiquidationIncentiveEnabled",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAccessControlManagerV8)6048": {
        "encoding": "inplace",
        "label": "contract IAccessControlManagerV8",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
