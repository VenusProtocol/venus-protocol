{
  "address": "0xa6624EcbcA3328Dc7b5741db0Cd0c2f2653f2608",
  "abi": [
    {
      "inputs": [],
      "name": "AlreadyInSelectedPool",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ArrayLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BorrowNotAllowedInPool",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyPoolLabel",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExecuteFlashLoanFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedToCreateDebtPosition",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FlashLoanNotEnabled",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "poolId",
          "type": "uint96"
        }
      ],
      "name": "InactivePool",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncompatibleBorrowedAssets",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFlashLoanParams",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidMode",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidOperationForCorePool",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "enum WeightFunction",
          "name": "strategy",
          "type": "uint8"
        }
      ],
      "name": "InvalidWeightingStrategy",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "errorCode",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shortfall",
          "type": "uint256"
        }
      ],
      "name": "LiquidityCheckFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "poolId",
          "type": "uint96"
        },
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        }
      ],
      "name": "MarketAlreadyListed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MarketConfigNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MarketNotListedInCorePool",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoAssetsRequested",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAnApprovedDelegate",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "repaid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughRepayment",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "poolId",
          "type": "uint96"
        }
      ],
      "name": "PoolDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "poolId",
          "type": "uint96"
        },
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        }
      ],
      "name": "PoolMarketNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "SenderNotAuthorizedForFlashLoan",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract VToken",
          "name": "vToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "enum Action",
          "name": "action",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "pauseState",
          "type": "bool"
        }
      ],
      "name": "ActionPausedMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "ActionProtocolPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint96",
          "name": "poolId",
          "type": "uint96"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "oldStatus",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newStatus",
          "type": "bool"
        }
      ],
      "name": "BorrowAllowedUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DistributedVAIVaultVenus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "error",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "info",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "detail",
          "type": "uint256"
        }
      ],
      "name": "Failure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "isWhitelisted",
          "type": "bool"
        }
      ],
      "name": "IsAccountFlashLoanWhitelisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        }
      ],
      "name": "IsForcedLiquidationEnabledForUserUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        }
      ],
      "name": "IsForcedLiquidationEnabledUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract VToken",
          "name": "vToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MarketEntered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAccessControlAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAccessControlAddress",
          "type": "address"
        }
      ],
      "name": "NewAccessControl",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract VToken",
          "name": "vToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBorrowCap",
          "type": "uint256"
        }
      ],
      "name": "NewBorrowCap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCloseFactorMantissa",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCloseFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "NewCloseFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint96",
          "name": "poolId",
          "type": "uint96"
        },
        {
          "indexed": true,
          "internalType": "contract VToken",
          "name": "vToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCollateralFactorMantissa",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCollateralFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "NewCollateralFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldComptrollerLens",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newComptrollerLens",
          "type": "address"
        }
      ],
      "name": "NewComptrollerLens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint96",
          "name": "poolId",
          "type": "uint96"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldLiquidationIncentiveMantissa",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLiquidationIncentiveMantissa",
          "type": "uint256"
        }
      ],
      "name": "NewLiquidationIncentive",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint96",
          "name": "poolId",
          "type": "uint96"
        },
        {
          "indexed": true,
          "internalType": "contract VToken",
          "name": "vToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldLiquidationThresholdMantissa",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLiquidationThresholdMantissa",
          "type": "uint256"
        }
      ],
      "name": "NewLiquidationThreshold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldLiquidatorContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newLiquidatorContract",
          "type": "address"
        }
      ],
      "name": "NewLiquidatorContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldPauseGuardian",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPauseGuardian",
          "type": "address"
        }
      ],
      "name": "NewPauseGuardian",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract ResilientOracleInterface",
          "name": "oldPriceOracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract ResilientOracleInterface",
          "name": "newPriceOracle",
          "type": "address"
        }
      ],
      "name": "NewPriceOracle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IPrime",
          "name": "oldPrimeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IPrime",
          "name": "newPrimeToken",
          "type": "address"
        }
      ],
      "name": "NewPrimeToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract VToken",
          "name": "vToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSupplyCap",
          "type": "uint256"
        }
      ],
      "name": "NewSupplyCap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldTreasuryAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTreasuryAddress",
          "type": "address"
        }
      ],
      "name": "NewTreasuryAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldTreasuryGuardian",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTreasuryGuardian",
          "type": "address"
        }
      ],
      "name": "NewTreasuryGuardian",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldTreasuryPercent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTreasuryPercent",
          "type": "uint256"
        }
      ],
      "name": "NewTreasuryPercent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract VAIControllerInterface",
          "name": "oldVAIController",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract VAIControllerInterface",
          "name": "newVAIController",
          "type": "address"
        }
      ],
      "name": "NewVAIController",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldVAIMintRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newVAIMintRate",
          "type": "uint256"
        }
      ],
      "name": "NewVAIMintRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "releaseStartBlock_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "releaseInterval_",
          "type": "uint256"
        }
      ],
      "name": "NewVAIVaultInfo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldVenusVAIVaultRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newVenusVAIVaultRate",
          "type": "uint256"
        }
      ],
      "name": "NewVenusVAIVaultRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldXVS",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newXVS",
          "type": "address"
        }
      ],
      "name": "NewXVSToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldXVSVToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newXVSVToken",
          "type": "address"
        }
      ],
      "name": "NewXVSVToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint96",
          "name": "poolId",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "oldStatus",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newStatus",
          "type": "bool"
        }
      ],
      "name": "PoolActiveStatusUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint96",
          "name": "poolId",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "oldStatus",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newStatus",
          "type": "bool"
        }
      ],
      "name": "PoolFallbackStatusUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint96",
          "name": "poolId",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "oldLabel",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newLabel",
          "type": "string"
        }
      ],
      "name": "PoolLabelUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAccessControlAddress",
          "type": "address"
        }
      ],
      "name": "_setAccessControl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "markets_",
          "type": "address[]"
        },
        {
          "internalType": "enum Action[]",
          "name": "actions_",
          "type": "uint8[]"
        },
        {
          "internalType": "bool",
          "name": "paused_",
          "type": "bool"
        }
      ],
      "name": "_setActionsPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCloseFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "_setCloseFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ComptrollerLensInterface",
          "name": "comptrollerLens_",
          "type": "address"
        }
      ],
      "name": "_setComptrollerLens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        }
      ],
      "name": "_setForcedLiquidation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        }
      ],
      "name": "_setForcedLiquidationForUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newLiquidatorContract_",
          "type": "address"
        }
      ],
      "name": "_setLiquidatorContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract VToken[]",
          "name": "vTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "newBorrowCaps",
          "type": "uint256[]"
        }
      ],
      "name": "_setMarketBorrowCaps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract VToken[]",
          "name": "vTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "newSupplyCaps",
          "type": "uint256[]"
        }
      ],
      "name": "_setMarketSupplyCaps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPauseGuardian",
          "type": "address"
        }
      ],
      "name": "_setPauseGuardian",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ResilientOracleInterface",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "_setPriceOracle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPrime",
          "name": "_prime",
          "type": "address"
        }
      ],
      "name": "_setPrimeToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "_setProtocolPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newTreasuryGuardian",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newTreasuryAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newTreasuryPercent",
          "type": "uint256"
        }
      ],
      "name": "_setTreasuryData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract VAIControllerInterface",
          "name": "vaiController_",
          "type": "address"
        }
      ],
      "name": "_setVAIController",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newVAIMintRate",
          "type": "uint256"
        }
      ],
      "name": "_setVAIMintRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "releaseStartBlock_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minReleaseAmount_",
          "type": "uint256"
        }
      ],
      "name": "_setVAIVaultInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "venusVAIVaultRate_",
          "type": "uint256"
        }
      ],
      "name": "_setVenusVAIVaultRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "xvs_",
          "type": "address"
        }
      ],
      "name": "_setXVSToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "xvsVToken_",
          "type": "address"
        }
      ],
      "name": "_setXVSVToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "accountAssets",
      "outputs": [
        {
          "internalType": "contract VToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "enum Action",
          "name": "action",
          "type": "uint8"
        }
      ],
      "name": "actionPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allMarkets",
      "outputs": [
        {
          "internalType": "contract VToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvedDelegates",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "authorizedFlashLoan",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowCapGuardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowCaps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeFactorMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comptrollerImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comptrollerLens",
      "outputs": [
        {
          "internalType": "contract ComptrollerLensInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "corePoolId",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "poolId",
          "type": "uint96"
        },
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        }
      ],
      "name": "getPoolMarketIndex",
      "outputs": [
        {
          "internalType": "PoolMarketId",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getXVSAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isForcedLiquidationEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "isForcedLiquidationEnabledForUser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastPoolId",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidatorContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minReleaseAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintVAIGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mintedVAIs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract ResilientOracleInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseGuardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingComptrollerImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "string",
          "name": "label",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "allowCorePoolFallback",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prime",
      "outputs": [
        {
          "internalType": "contract IPrime",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "releaseStartBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "repayVAIGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "markets_",
          "type": "address[]"
        },
        {
          "internalType": "enum Action[]",
          "name": "actions_",
          "type": "uint8[]"
        },
        {
          "internalType": "bool",
          "name": "paused_",
          "type": "bool"
        }
      ],
      "name": "setActionsPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "poolId",
          "type": "uint96"
        },
        {
          "internalType": "bool",
          "name": "allowFallback",
          "type": "bool"
        }
      ],
      "name": "setAllowCorePoolFallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCloseFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "setCloseFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract VToken",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newCollateralFactorMantissa",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newLiquidationThresholdMantissa",
          "type": "uint256"
        }
      ],
      "name": "setCollateralFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "poolId",
          "type": "uint96"
        },
        {
          "internalType": "contract VToken",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newCollateralFactorMantissa",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newLiquidationThresholdMantissa",
          "type": "uint256"
        }
      ],
      "name": "setCollateralFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        }
      ],
      "name": "setForcedLiquidation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "poolId",
          "type": "uint96"
        },
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "borrowAllowed",
          "type": "bool"
        }
      ],
      "name": "setIsBorrowAllowed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "poolId",
          "type": "uint96"
        },
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newLiquidationIncentiveMantissa",
          "type": "uint256"
        }
      ],
      "name": "setLiquidationIncentive",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newLiquidationIncentiveMantissa",
          "type": "uint256"
        }
      ],
      "name": "setLiquidationIncentive",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract VToken[]",
          "name": "vTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "newBorrowCaps",
          "type": "uint256[]"
        }
      ],
      "name": "setMarketBorrowCaps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract VToken[]",
          "name": "vTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "newSupplyCaps",
          "type": "uint256[]"
        }
      ],
      "name": "setMarketSupplyCaps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setMintedVAIOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "poolId",
          "type": "uint96"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "setPoolActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "poolId",
          "type": "uint96"
        },
        {
          "internalType": "string",
          "name": "newLabel",
          "type": "string"
        }
      ],
      "name": "setPoolLabel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ResilientOracleInterface",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "setPriceOracle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPrime",
          "name": "_prime",
          "type": "address"
        }
      ],
      "name": "setPrimeToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isWhiteListed",
          "type": "bool"
        }
      ],
      "name": "setWhiteListFlashLoanAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "supplyCaps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryGuardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userPoolId",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaiController",
      "outputs": [
        {
          "internalType": "contract VAIControllerInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaiMintRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaiVaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "venusAccrued",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "venusBorrowSpeeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "venusBorrowState",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "index",
          "type": "uint224"
        },
        {
          "internalType": "uint32",
          "name": "block",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "venusBorrowerIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "venusInitialIndex",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "",
          "type": "uint224"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "venusSupplierIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "venusSupplySpeeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "venusSupplyState",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "index",
          "type": "uint224"
        },
        {
          "internalType": "uint32",
          "name": "block",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "venusVAIVaultRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe3dd95706c523725b11576c89ceaf8e4209711c131ba3cf8ec41347580c2ddc9",
  "receipt": {
    "to": null,
    "from": "0x33C6476F88eeA28D7E7900F759B4597704Ef95B7",
    "contractAddress": "0xa6624EcbcA3328Dc7b5741db0Cd0c2f2653f2608",
    "transactionIndex": 0,
    "gasUsed": "3338827",
    "logsBloom": "0x
    "blockHash": "0xc92ba7459a9b3d6bbfb34f3bd01df7e61ea135383e793884227909971e1fe03d",
    "transactionHash": "0xe3dd95706c523725b11576c89ceaf8e4209711c131ba3cf8ec41347580c2ddc9",
    "logs": [],
    "blockNumber": 67069854,
    "cumulativeGasUsed": "3338827",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 8,
  "solcInputHash": "e3b23a295799a47b8935e365d2c4321d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyInSelectedPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ArrayLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BorrowNotAllowedInPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyPoolLabel\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExecuteFlashLoanFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedToCreateDebtPosition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FlashLoanNotEnabled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"poolId\",\"type\":\"uint96\"}],\"name\":\"InactivePool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncompatibleBorrowedAssets\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFlashLoanParams\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOperationForCorePool\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum WeightFunction\",\"name\":\"strategy\",\"type\":\"uint8\"}],\"name\":\"InvalidWeightingStrategy\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shortfall\",\"type\":\"uint256\"}],\"name\":\"LiquidityCheckFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"poolId\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"}],\"name\":\"MarketAlreadyListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MarketConfigNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MarketNotListedInCorePool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoAssetsRequested\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAnApprovedDelegate\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"repaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"NotEnoughRepayment\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"poolId\",\"type\":\"uint96\"}],\"name\":\"PoolDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"poolId\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"}],\"name\":\"PoolMarketNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SenderNotAuthorizedForFlashLoan\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract VToken\",\"name\":\"vToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum Action\",\"name\":\"action\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"pauseState\",\"type\":\"bool\"}],\"name\":\"ActionPausedMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"ActionProtocolPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint96\",\"name\":\"poolId\",\"type\":\"uint96\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"BorrowAllowedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DistributedVAIVaultVenus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"error\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"detail\",\"type\":\"uint256\"}],\"name\":\"Failure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"name\":\"IsAccountFlashLoanWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"IsForcedLiquidationEnabledForUserUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"IsForcedLiquidationEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract VToken\",\"name\":\"vToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MarketEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAccessControlAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAccessControlAddress\",\"type\":\"address\"}],\"name\":\"NewAccessControl\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract VToken\",\"name\":\"vToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBorrowCap\",\"type\":\"uint256\"}],\"name\":\"NewBorrowCap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCloseFactorMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCloseFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"NewCloseFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint96\",\"name\":\"poolId\",\"type\":\"uint96\"},{\"indexed\":true,\"internalType\":\"contract VToken\",\"name\":\"vToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCollateralFactorMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCollateralFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"NewCollateralFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldComptrollerLens\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newComptrollerLens\",\"type\":\"address\"}],\"name\":\"NewComptrollerLens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint96\",\"name\":\"poolId\",\"type\":\"uint96\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLiquidationIncentiveMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLiquidationIncentiveMantissa\",\"type\":\"uint256\"}],\"name\":\"NewLiquidationIncentive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint96\",\"name\":\"poolId\",\"type\":\"uint96\"},{\"indexed\":true,\"internalType\":\"contract VToken\",\"name\":\"vToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLiquidationThresholdMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLiquidationThresholdMantissa\",\"type\":\"uint256\"}],\"name\":\"NewLiquidationThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldLiquidatorContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLiquidatorContract\",\"type\":\"address\"}],\"name\":\"NewLiquidatorContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPauseGuardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPauseGuardian\",\"type\":\"address\"}],\"name\":\"NewPauseGuardian\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ResilientOracleInterface\",\"name\":\"oldPriceOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ResilientOracleInterface\",\"name\":\"newPriceOracle\",\"type\":\"address\"}],\"name\":\"NewPriceOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IPrime\",\"name\":\"oldPrimeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IPrime\",\"name\":\"newPrimeToken\",\"type\":\"address\"}],\"name\":\"NewPrimeToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract VToken\",\"name\":\"vToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSupplyCap\",\"type\":\"uint256\"}],\"name\":\"NewSupplyCap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTreasuryAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasuryAddress\",\"type\":\"address\"}],\"name\":\"NewTreasuryAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTreasuryGuardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasuryGuardian\",\"type\":\"address\"}],\"name\":\"NewTreasuryGuardian\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTreasuryPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTreasuryPercent\",\"type\":\"uint256\"}],\"name\":\"NewTreasuryPercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract VAIControllerInterface\",\"name\":\"oldVAIController\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract VAIControllerInterface\",\"name\":\"newVAIController\",\"type\":\"address\"}],\"name\":\"NewVAIController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldVAIMintRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVAIMintRate\",\"type\":\"uint256\"}],\"name\":\"NewVAIMintRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseStartBlock_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseInterval_\",\"type\":\"uint256\"}],\"name\":\"NewVAIVaultInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldVenusVAIVaultRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVenusVAIVaultRate\",\"type\":\"uint256\"}],\"name\":\"NewVenusVAIVaultRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldXVS\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newXVS\",\"type\":\"address\"}],\"name\":\"NewXVSToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldXVSVToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newXVSVToken\",\"type\":\"address\"}],\"name\":\"NewXVSVToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint96\",\"name\":\"poolId\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"PoolActiveStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint96\",\"name\":\"poolId\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"PoolFallbackStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint96\",\"name\":\"poolId\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldLabel\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newLabel\",\"type\":\"string\"}],\"name\":\"PoolLabelUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAccessControlAddress\",\"type\":\"address\"}],\"name\":\"_setAccessControl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"markets_\",\"type\":\"address[]\"},{\"internalType\":\"enum Action[]\",\"name\":\"actions_\",\"type\":\"uint8[]\"},{\"internalType\":\"bool\",\"name\":\"paused_\",\"type\":\"bool\"}],\"name\":\"_setActionsPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCloseFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"_setCloseFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ComptrollerLensInterface\",\"name\":\"comptrollerLens_\",\"type\":\"address\"}],\"name\":\"_setComptrollerLens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"_setForcedLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"_setForcedLiquidationForUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLiquidatorContract_\",\"type\":\"address\"}],\"name\":\"_setLiquidatorContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract VToken[]\",\"name\":\"vTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newBorrowCaps\",\"type\":\"uint256[]\"}],\"name\":\"_setMarketBorrowCaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract VToken[]\",\"name\":\"vTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newSupplyCaps\",\"type\":\"uint256[]\"}],\"name\":\"_setMarketSupplyCaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPauseGuardian\",\"type\":\"address\"}],\"name\":\"_setPauseGuardian\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ResilientOracleInterface\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"_setPriceOracle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPrime\",\"name\":\"_prime\",\"type\":\"address\"}],\"name\":\"_setPrimeToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setProtocolPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTreasuryGuardian\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newTreasuryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newTreasuryPercent\",\"type\":\"uint256\"}],\"name\":\"_setTreasuryData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract VAIControllerInterface\",\"name\":\"vaiController_\",\"type\":\"address\"}],\"name\":\"_setVAIController\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newVAIMintRate\",\"type\":\"uint256\"}],\"name\":\"_setVAIMintRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"releaseStartBlock_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReleaseAmount_\",\"type\":\"uint256\"}],\"name\":\"_setVAIVaultInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"venusVAIVaultRate_\",\"type\":\"uint256\"}],\"name\":\"_setVenusVAIVaultRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"xvs_\",\"type\":\"address\"}],\"name\":\"_setXVSToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"xvsVToken_\",\"type\":\"address\"}],\"name\":\"_setXVSVToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accountAssets\",\"outputs\":[{\"internalType\":\"contract VToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"enum Action\",\"name\":\"action\",\"type\":\"uint8\"}],\"name\":\"actionPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allMarkets\",\"outputs\":[{\"internalType\":\"contract VToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedDelegates\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedFlashLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowCapGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowCaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeFactorMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptrollerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptrollerLens\",\"outputs\":[{\"internalType\":\"contract ComptrollerLensInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"corePoolId\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"poolId\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"}],\"name\":\"getPoolMarketIndex\",\"outputs\":[{\"internalType\":\"PoolMarketId\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getXVSAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isForcedLiquidationEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"isForcedLiquidationEnabledForUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPoolId\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidatorContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minReleaseAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintVAIGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintedVAIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract ResilientOracleInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingComptrollerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowCorePoolFallback\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prime\",\"outputs\":[{\"internalType\":\"contract IPrime\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repayVAIGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"markets_\",\"type\":\"address[]\"},{\"internalType\":\"enum Action[]\",\"name\":\"actions_\",\"type\":\"uint8[]\"},{\"internalType\":\"bool\",\"name\":\"paused_\",\"type\":\"bool\"}],\"name\":\"setActionsPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"poolId\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"allowFallback\",\"type\":\"bool\"}],\"name\":\"setAllowCorePoolFallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCloseFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"setCloseFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract VToken\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newCollateralFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newLiquidationThresholdMantissa\",\"type\":\"uint256\"}],\"name\":\"setCollateralFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"poolId\",\"type\":\"uint96\"},{\"internalType\":\"contract VToken\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newCollateralFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newLiquidationThresholdMantissa\",\"type\":\"uint256\"}],\"name\":\"setCollateralFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setForcedLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"poolId\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"borrowAllowed\",\"type\":\"bool\"}],\"name\":\"setIsBorrowAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"poolId\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newLiquidationIncentiveMantissa\",\"type\":\"uint256\"}],\"name\":\"setLiquidationIncentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newLiquidationIncentiveMantissa\",\"type\":\"uint256\"}],\"name\":\"setLiquidationIncentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract VToken[]\",\"name\":\"vTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newBorrowCaps\",\"type\":\"uint256[]\"}],\"name\":\"setMarketBorrowCaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract VToken[]\",\"name\":\"vTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newSupplyCaps\",\"type\":\"uint256[]\"}],\"name\":\"setMarketSupplyCaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMintedVAIOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"poolId\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"setPoolActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"poolId\",\"type\":\"uint96\"},{\"internalType\":\"string\",\"name\":\"newLabel\",\"type\":\"string\"}],\"name\":\"setPoolLabel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ResilientOracleInterface\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"setPriceOracle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPrime\",\"name\":\"_prime\",\"type\":\"address\"}],\"name\":\"setPrimeToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isWhiteListed\",\"type\":\"bool\"}],\"name\":\"setWhiteListFlashLoanAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supplyCaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPoolId\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaiController\",\"outputs\":[{\"internalType\":\"contract VAIControllerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaiMintRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaiVaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"venusAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"venusBorrowSpeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"venusBorrowState\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"index\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"block\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"venusBorrowerIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"venusInitialIndex\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"\",\"type\":\"uint224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"venusSupplierIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"venusSupplySpeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"venusSupplyState\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"index\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"block\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"venusVAIVaultRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Venus\",\"details\":\"This facet contains all the setters for the states\",\"events\":{\"Failure(uint256,uint256,uint256)\":{\"details\":\"`error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary contract-specific code that enables us to report opaque error codes from upgradeable contracts.*\"}},\"kind\":\"dev\",\"methods\":{\"_setAccessControl(address)\":{\"details\":\"Allows the contract admin to set the address of access control of this contract\",\"params\":{\"newAccessControlAddress\":\"New address for the access control\"},\"returns\":{\"_0\":\"uint256 0=success, otherwise will revert\"}},\"_setActionsPaused(address[],uint8[],bool)\":{\"details\":\"Allows a privileged role to pause/unpause the protocol action state\",\"params\":{\"actions_\":\"List of action ids to pause/unpause\",\"markets_\":\"Markets to pause/unpause the actions on\",\"paused_\":\"The new paused state (true=paused, false=unpaused)\"}},\"_setCloseFactor(uint256)\":{\"details\":\"Allows the contract admin to set the closeFactor used to liquidate borrows\",\"params\":{\"newCloseFactorMantissa\":\"New close factor, scaled by 1e18\"},\"returns\":{\"_0\":\"uint256 0=success, otherwise will revert\"}},\"_setComptrollerLens(address)\":{\"details\":\"Set ComptrollerLens contract address\",\"params\":{\"comptrollerLens_\":\"The new ComptrollerLens contract address to be set\"},\"returns\":{\"_0\":\"uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"_setForcedLiquidation(address,bool)\":{\"details\":\"Allows a privileged role to set enable/disable forced liquidations\",\"params\":{\"enable\":\"Whether to enable forced liquidations\",\"vTokenBorrowed\":\"Borrowed vToken\"}},\"_setForcedLiquidationForUser(address,address,bool)\":{\"params\":{\"borrower\":\"The address of the borrower\",\"enable\":\"Whether to enable forced liquidations\",\"vTokenBorrowed\":\"Borrowed vToken\"}},\"_setLiquidatorContract(address)\":{\"details\":\"Allows the contract admin to update the address of liquidator contract\",\"params\":{\"newLiquidatorContract_\":\"The new address of the liquidator contract\"}},\"_setMarketBorrowCaps(address[],uint256[])\":{\"details\":\"Allows a privileged role to set the borrowing cap for a vToken market. A borrow cap of 0 corresponds to Borrow not allowed\",\"params\":{\"newBorrowCaps\":\"The new borrow cap values in underlying to be set. A value of 0 corresponds to Borrow not allowed\",\"vTokens\":\"The addresses of the markets (tokens) to change the borrow caps for\"}},\"_setMarketSupplyCaps(address[],uint256[])\":{\"details\":\"Allows a privileged role to set the supply cap for a vToken. A supply cap of 0 corresponds to Minting NotAllowed\",\"params\":{\"newSupplyCaps\":\"The new supply cap values in underlying to be set. A value of 0 corresponds to Minting NotAllowed\",\"vTokens\":\"The addresses of the markets (tokens) to change the supply caps for\"}},\"_setPauseGuardian(address)\":{\"details\":\"Allows the contract admin to change the Pause Guardian\",\"params\":{\"newPauseGuardian\":\"The address of the new Pause Guardian\"},\"returns\":{\"_0\":\"uint256 0=success, otherwise a failure. (See enum Error for details)\"}},\"_setPriceOracle(address)\":{\"details\":\"Allows the contract admin to set a new price oracle used by the Comptroller\",\"params\":{\"newOracle\":\"The new price oracle to set\"},\"returns\":{\"_0\":\"uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"_setPrimeToken(address)\":{\"params\":{\"_prime\":\"The new prime token contract to be set\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"_setProtocolPaused(bool)\":{\"details\":\"Allows a privileged role to pause/unpause protocol\",\"params\":{\"state\":\"The new state (true=paused, false=unpaused)\"},\"returns\":{\"_0\":\"bool The updated state of the protocol\"}},\"_setTreasuryData(address,address,uint256)\":{\"params\":{\"newTreasuryAddress\":\"The new address of the treasury to be set\",\"newTreasuryGuardian\":\"The new address of the treasury guardian to be set\",\"newTreasuryPercent\":\"The new treasury percent to be set\"},\"returns\":{\"_0\":\"uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"_setVAIController(address)\":{\"details\":\"Admin function to set a new VAI controller\",\"returns\":{\"_0\":\"uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"_setVAIMintRate(uint256)\":{\"params\":{\"newVAIMintRate\":\"The new VAI mint rate to be set\"},\"returns\":{\"_0\":\"uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"_setVAIVaultInfo(address,uint256,uint256)\":{\"params\":{\"minReleaseAmount_\":\"The minimum release amount to VAI Vault\",\"releaseStartBlock_\":\"The start block of release to VAI Vault\",\"vault_\":\"The address of the VAI Vault\"}},\"_setVenusVAIVaultRate(uint256)\":{\"params\":{\"venusVAIVaultRate_\":\"The amount of XVS wei per block to distribute to VAI Vault\"}},\"_setXVSToken(address)\":{\"params\":{\"xvs_\":\"The address of the XVS token\"}},\"_setXVSVToken(address)\":{\"params\":{\"xvsVToken_\":\"The address of the XVS vToken\"}},\"actionPaused(address,uint8)\":{\"params\":{\"action\":\"Action id\",\"market\":\"vToken address\"}},\"getPoolMarketIndex(uint96,address)\":{\"details\":\"Computes a unique key for a (poolId, market) pair used in the `_poolMarkets` mapping - For the core pool (`poolId == 0`), this results in the address being left-padded to 32 bytes,   maintaining backward compatibility with legacy mappings - For other pools, packs the `poolId` and `market` address into a single `bytes32` key,   The first 96 bits are used for the `poolId`, and the remaining 160 bits for the `market` address\",\"params\":{\"poolId\":\"The ID of the pool\",\"vToken\":\"The address of the market (vToken)\"},\"returns\":{\"_0\":\"PoolMarketId The `bytes32` key that uniquely represents the (poolId, vToken) pair\"}},\"getXVSAddress()\":{\"returns\":{\"_0\":\"The address of XVS token\"}},\"setActionsPaused(address[],uint8[],bool)\":{\"params\":{\"actions_\":\"List of action ids to pause/unpause\",\"markets_\":\"Markets to pause/unpause the actions on\",\"paused_\":\"The new paused state (true=paused, false=unpaused)\"}},\"setAllowCorePoolFallback(uint96,bool)\":{\"custom:error\":\"InvalidOperationForCorePool Reverts when attempting to call pool-specific methods on the Core Pool.PoolDoesNotExist Reverts if the target pool ID does not exist.\",\"custom:event\":\"PoolFallbackStatusUpdated Emitted after the pool fallback flag is updated.\",\"params\":{\"allowFallback\":\"True to allow fallback to Core Pool, false to disable.\",\"poolId\":\"ID of the pool to update.\"}},\"setCloseFactor(uint256)\":{\"params\":{\"newCloseFactorMantissa\":\"New close factor, scaled by 1e18\"},\"returns\":{\"_0\":\"uint256 0=success, otherwise will revert\"}},\"setCollateralFactor(address,uint256,uint256)\":{\"params\":{\"newCollateralFactorMantissa\":\"The new collateral factor, scaled by 1e18\",\"newLiquidationThresholdMantissa\":\"The new liquidation threshold, scaled by 1e18\",\"vToken\":\"The market to set the factor on\"},\"returns\":{\"_0\":\"uint256 0=success, otherwise a failure. (See ErrorReporter for details)\"}},\"setCollateralFactor(uint96,address,uint256,uint256)\":{\"params\":{\"newCollateralFactorMantissa\":\"The new collateral factor, scaled by 1e18\",\"newLiquidationThresholdMantissa\":\"The new liquidation threshold, scaled by 1e18\",\"poolId\":\"The ID of the pool.\",\"vToken\":\"The market to set the factor on\"},\"returns\":{\"_0\":\"uint256 0=success, otherwise a failure. (See ErrorReporter for details)\"}},\"setForcedLiquidation(address,bool)\":{\"params\":{\"enable\":\"Whether to enable forced liquidations\",\"vTokenBorrowed\":\"Borrowed vToken\"}},\"setIsBorrowAllowed(uint96,address,bool)\":{\"custom:error\":\"PoolDoesNotExist Reverts if the pool ID is invalid.MarketConfigNotFound Reverts if the market is not listed in the pool.\",\"custom:event\":\"BorrowAllowedUpdated Emitted after the borrow permission for a market is updated.\",\"params\":{\"borrowAllowed\":\"The new borrow allowed status.\",\"poolId\":\"The ID of the pool.\",\"vToken\":\"The address of the market (vToken).\"}},\"setLiquidationIncentive(address,uint256)\":{\"params\":{\"newLiquidationIncentiveMantissa\":\"New liquidationIncentive scaled by 1e18\",\"vToken\":\"The market to set the liquidationIncentive for\"},\"returns\":{\"_0\":\"uint256 0=success, otherwise a failure. (See ErrorReporter for details)\"}},\"setLiquidationIncentive(uint96,address,uint256)\":{\"params\":{\"newLiquidationIncentiveMantissa\":\"New liquidationIncentive scaled by 1e18\",\"poolId\":\"The ID of the pool.\",\"vToken\":\"The market to set the liquidationIncentive for\"},\"returns\":{\"_0\":\"uint256 0=success, otherwise a failure. (See ErrorReporter for details)\"}},\"setMarketBorrowCaps(address[],uint256[])\":{\"params\":{\"newBorrowCaps\":\"The new borrow cap values in underlying to be set. A value of 0 corresponds to Borrow not allowed\",\"vTokens\":\"The addresses of the markets (tokens) to change the borrow caps for\"}},\"setMarketSupplyCaps(address[],uint256[])\":{\"params\":{\"newSupplyCaps\":\"The new supply cap values in underlying to be set. A value of 0 corresponds to Minting NotAllowed\",\"vTokens\":\"The addresses of the markets (tokens) to change the supply caps for\"}},\"setMintedVAIOf(address,uint256)\":{\"params\":{\"amount\":\"The amount of VAI to set to the account\",\"owner\":\"The address of the account to set\"},\"returns\":{\"_0\":\"The number of minted VAI by `owner`\"}},\"setPoolActive(uint96,bool)\":{\"custom:error\":\"InvalidOperationForCorePool Reverts when attempting to call pool-specific methods on the Core Pool.PoolDoesNotExist Reverts if the target pool ID does not exist.\",\"custom:event\":\"PoolActiveStatusUpdated Emitted after the pool active status is updated.\",\"params\":{\"active\":\"true to enable, false to disable\",\"poolId\":\"id of the pool to update\"}},\"setPoolLabel(uint96,string)\":{\"custom:error\":\"InvalidOperationForCorePool Reverts when attempting to call pool-specific methods on the Core PoolPoolDoesNotExist Reverts if the target pool ID does not existEmptyPoolLabel Reverts if the provided label is an empty string\",\"custom:event\":\"PoolLabelUpdated Emitted after the pool label is updated\",\"params\":{\"newLabel\":\"The new label for the pool\",\"poolId\":\"ID of the pool to update\"}},\"setPriceOracle(address)\":{\"params\":{\"newOracle\":\"The new price oracle to set\"},\"returns\":{\"_0\":\"uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"setPrimeToken(address)\":{\"params\":{\"_prime\":\"The new prime token contract to be set\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"setWhiteListFlashLoanAccount(address,bool)\":{\"params\":{\"_isWhiteListed\":\"True to whitelist the account for flash loans, false to remove from whitelist\",\"account\":\"The account to authorize for flash loans\"}}},\"title\":\"SetterFacet\",\"version\":1},\"userdoc\":{\"errors\":{\"AlreadyInSelectedPool()\":[{\"notice\":\"Thrown when You are already in the selected pool.\"}],\"ArrayLengthMismatch()\":[{\"notice\":\"Thrown when input array lengths do not match\"}],\"BorrowNotAllowedInPool()\":[{\"notice\":\"Thrown when borrowing is not allowed in the selected pool for a given market.\"}],\"EmptyPoolLabel()\":[{\"notice\":\"Thrown when the pool label is empty\"}],\"InactivePool(uint96)\":[{\"notice\":\"Thrown when attempting to interact with an inactive pool\"}],\"IncompatibleBorrowedAssets()\":[{\"notice\":\"Thrown when One or more of your assets are not compatible with the selected pool.\"}],\"InvalidOperationForCorePool()\":[{\"notice\":\"Thrown when trying to call pool-specific methods on the Core Pool\"}],\"InvalidWeightingStrategy(uint8)\":[{\"notice\":\"Thrown when an invalid weighting strategy is provided\"}],\"LiquidityCheckFailed(uint256,uint256)\":[{\"notice\":\"Thrown when Switching to this pool would fail the liquidity check or lead to liquidation.\"}],\"MarketAlreadyListed(uint96,address)\":[{\"notice\":\"Thrown when a vToken is already listed in the specified pool\"}],\"MarketConfigNotFound()\":[{\"notice\":\"Thrown when market is not set in the _poolMarkets mapping\"}],\"MarketNotListedInCorePool()\":[{\"notice\":\"Thrown when market trying to add in a pool is not listed in the core pool\"}],\"NotEnoughRepayment(uint256,uint256)\":[{\"notice\":\"Thrown when repayment amount is insufficient to cover the fee\"}],\"PoolDoesNotExist(uint96)\":[{\"notice\":\"Thrown when a given pool ID does not exist\"}],\"PoolMarketNotFound(uint96,address)\":[{\"notice\":\"Thrown when trying to remove a market that is not listed in the given pool.\"}]},\"events\":{\"ActionPausedMarket(address,uint8,bool)\":{\"notice\":\"Emitted when an action is paused on a market\"},\"ActionProtocolPaused(bool)\":{\"notice\":\"Emitted when protocol state is changed by admin\"},\"BorrowAllowedUpdated(uint96,address,bool,bool)\":{\"notice\":\"Emitted when the borrowAllowed flag is updated for a market\"},\"DistributedVAIVaultVenus(uint256)\":{\"notice\":\"Emitted when XVS is distributed to VAI Vault\"},\"IsAccountFlashLoanWhitelisted(address,bool)\":{\"notice\":\"Emitted when an account's flash loan whitelist status is updated\"},\"IsForcedLiquidationEnabledForUserUpdated(address,address,bool)\":{\"notice\":\"Emitted when forced liquidation is enabled or disabled for a user borrowing in a market\"},\"IsForcedLiquidationEnabledUpdated(address,bool)\":{\"notice\":\"Emitted when forced liquidation is enabled or disabled for all users in a market\"},\"MarketEntered(address,address)\":{\"notice\":\"Emitted when an account enters a market\"},\"NewAccessControl(address,address)\":{\"notice\":\"Emitted when access control address is changed by admin\"},\"NewBorrowCap(address,uint256)\":{\"notice\":\"Emitted when borrow cap for a vToken is changed\"},\"NewCloseFactor(uint256,uint256)\":{\"notice\":\"Emitted when close factor is changed by admin\"},\"NewCollateralFactor(uint96,address,uint256,uint256)\":{\"notice\":\"Emitted when a collateral factor for a market in a pool is changed by admin\"},\"NewComptrollerLens(address,address)\":{\"notice\":\"Emitted when ComptrollerLens address is changed\"},\"NewLiquidationIncentive(uint96,address,uint256,uint256)\":{\"notice\":\"Emitted when liquidation incentive for a market in a pool is changed by admin\"},\"NewLiquidationThreshold(uint96,address,uint256,uint256)\":{\"notice\":\"Emitted when liquidation threshold for a market in a pool is changed by admin\"},\"NewLiquidatorContract(address,address)\":{\"notice\":\"Emitted when liquidator adress is changed\"},\"NewPauseGuardian(address,address)\":{\"notice\":\"Emitted when pause guardian is changed\"},\"NewPriceOracle(address,address)\":{\"notice\":\"Emitted when price oracle is changed\"},\"NewPrimeToken(address,address)\":{\"notice\":\"Emitted when prime token contract address is changed\"},\"NewSupplyCap(address,uint256)\":{\"notice\":\"Emitted when supply cap for a vToken is changed\"},\"NewTreasuryAddress(address,address)\":{\"notice\":\"Emitted when treasury address is changed\"},\"NewTreasuryGuardian(address,address)\":{\"notice\":\"Emitted when treasury guardian is changed\"},\"NewTreasuryPercent(uint256,uint256)\":{\"notice\":\"Emitted when treasury percent is changed\"},\"NewVAIController(address,address)\":{\"notice\":\"Emitted when VAIController is changed\"},\"NewVAIMintRate(uint256,uint256)\":{\"notice\":\"Emitted when VAI mint rate is changed by admin\"},\"NewVAIVaultInfo(address,uint256,uint256)\":{\"notice\":\"Emitted when VAI Vault info is changed\"},\"NewVenusVAIVaultRate(uint256,uint256)\":{\"notice\":\"Emitted when Venus VAI Vault rate is changed\"},\"NewXVSToken(address,address)\":{\"notice\":\"Emitted when XVS token address is changed\"},\"NewXVSVToken(address,address)\":{\"notice\":\"Emitted when XVS vToken address is changed\"},\"PoolActiveStatusUpdated(uint96,bool,bool)\":{\"notice\":\"Emitted when pool active status updated\"},\"PoolFallbackStatusUpdated(uint96,bool,bool)\":{\"notice\":\"Emitted when pool Fallback status is updated\"},\"PoolLabelUpdated(uint96,string,string)\":{\"notice\":\"Emitted when pool label is updated\"}},\"kind\":\"user\",\"methods\":{\"_setAccessControl(address)\":{\"notice\":\"Sets the address of the access control of this contract\"},\"_setActionsPaused(address[],uint8[],bool)\":{\"notice\":\"Pause/unpause certain actions\"},\"_setCloseFactor(uint256)\":{\"notice\":\"Sets the closeFactor used when liquidating borrows\"},\"_setForcedLiquidation(address,bool)\":{\"notice\":\"Enables forced liquidations for a market. If forced liquidation is enabled, borrows in the market may be liquidated regardless of the account liquidity\"},\"_setForcedLiquidationForUser(address,address,bool)\":{\"notice\":\"Enables forced liquidations for user's borrows in a certain market. If forced liquidation is enabled, user's borrows in the market may be liquidated regardless of the account liquidity. Forced liquidation may be enabled for a user even if it is not enabled for the entire market.\"},\"_setLiquidatorContract(address)\":{\"notice\":\"Update the address of the liquidator contract\"},\"_setMarketBorrowCaps(address[],uint256[])\":{\"notice\":\"Set the given borrow caps for the given vToken market Borrowing that brings total borrows to or above borrow cap will revert\"},\"_setMarketSupplyCaps(address[],uint256[])\":{\"notice\":\"Set the given supply caps for the given vToken market Supply that brings total Supply to or above supply cap will revert\"},\"_setPauseGuardian(address)\":{\"notice\":\"Admin function to change the Pause Guardian\"},\"_setPriceOracle(address)\":{\"notice\":\"Sets a new price oracle for the comptroller\"},\"_setPrimeToken(address)\":{\"notice\":\"Sets the prime token contract for the comptroller\"},\"_setProtocolPaused(bool)\":{\"notice\":\"Set whole protocol pause/unpause state\"},\"_setTreasuryData(address,address,uint256)\":{\"notice\":\"Set the treasury data.\"},\"_setVAIController(address)\":{\"notice\":\"Sets a new VAI controller\"},\"_setVAIMintRate(uint256)\":{\"notice\":\"Set the VAI mint rate\"},\"_setVAIVaultInfo(address,uint256,uint256)\":{\"notice\":\"Set the VAI Vault infos\"},\"_setVenusVAIVaultRate(uint256)\":{\"notice\":\"Set the amount of XVS distributed per block to VAI Vault\"},\"_setXVSToken(address)\":{\"notice\":\"Set the address of the XVS token\"},\"_setXVSVToken(address)\":{\"notice\":\"Set the address of the XVS vToken\"},\"accountAssets(address,uint256)\":{\"notice\":\"Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\"},\"actionPaused(address,uint8)\":{\"notice\":\"Checks if a certain action is paused on a market\"},\"admin()\":{\"notice\":\"Administrator for this contract\"},\"allMarkets(uint256)\":{\"notice\":\"A list of all markets\"},\"approvedDelegates(address,address)\":{\"notice\":\"Whether the delegate is allowed to borrow or redeem on behalf of the user\"},\"authorizedFlashLoan(address)\":{\"notice\":\"Mapping of accounts authorized to execute flash loans\"},\"borrowCapGuardian()\":{\"notice\":\"The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\"},\"borrowCaps(address)\":{\"notice\":\"Borrow caps enforced by borrowAllowed for each vToken address.\"},\"closeFactorMantissa()\":{\"notice\":\"Multiplier used to calculate the maximum repayAmount when liquidating a borrow\"},\"comptrollerImplementation()\":{\"notice\":\"Active brains of Unitroller\"},\"getPoolMarketIndex(uint96,address)\":{\"notice\":\"Returns the unique market index for the given poolId and vToken pair\"},\"getXVSAddress()\":{\"notice\":\"Returns the XVS address\"},\"isForcedLiquidationEnabled(address)\":{\"notice\":\"Whether forced liquidation is enabled for all users borrowing in a certain market\"},\"isForcedLiquidationEnabledForUser(address,address)\":{\"notice\":\"Whether forced liquidation is enabled for the borrows of a user in a market\"},\"lastPoolId()\":{\"notice\":\"Counter used to generate unique pool IDs\"},\"maxAssets()\":{\"notice\":\"Max number of assets a single account can participate in (borrow or use as collateral)\"},\"mintVAIGuardianPaused()\":{\"notice\":\"The Pause Guardian can pause certain actions as a safety mechanism.\"},\"mintedVAIs(address)\":{\"notice\":\"The minted VAI amount to each user\"},\"oracle()\":{\"notice\":\"Oracle which gives the price of any given asset\"},\"pauseGuardian()\":{\"notice\":\"The Pause Guardian can pause certain actions as a safety mechanism.\"},\"pendingAdmin()\":{\"notice\":\"Pending administrator for this contract\"},\"pendingComptrollerImplementation()\":{\"notice\":\"Pending brains of Unitroller\"},\"pools(uint96)\":{\"notice\":\"Mapping of pool ID to its corresponding metadata and configuration\"},\"prime()\":{\"notice\":\"Prime token address\"},\"protocolPaused()\":{\"notice\":\"Pause/Unpause whole protocol actions\"},\"setActionsPaused(address[],uint8[],bool)\":{\"notice\":\"Alias to _setActionsPaused to support the Isolated Lending Comptroller Interface\"},\"setAllowCorePoolFallback(uint96,bool)\":{\"notice\":\"Updates the `allowCorePoolFallback` flag for a specific pool (excluding the Core Pool).\"},\"setCloseFactor(uint256)\":{\"notice\":\"Alias to _setCloseFactor to support the Isolated Lending Comptroller Interface\"},\"setCollateralFactor(address,uint256,uint256)\":{\"notice\":\"Sets the collateral factor and liquidation threshold for a market in the Core Pool only.\"},\"setCollateralFactor(uint96,address,uint256,uint256)\":{\"notice\":\"Sets the collateral factor and liquidation threshold for a market in the specified pool.\"},\"setForcedLiquidation(address,bool)\":{\"notice\":\"Alias to _setForcedLiquidation to support the Isolated Lending Comptroller Interface\"},\"setIsBorrowAllowed(uint96,address,bool)\":{\"notice\":\"Updates the `isBorrowAllowed` flag for a market in a pool.\"},\"setLiquidationIncentive(address,uint256)\":{\"notice\":\"Sets the liquidation incentive for a market in the Core Pool only.\"},\"setLiquidationIncentive(uint96,address,uint256)\":{\"notice\":\"Sets the liquidation incentive for a market in the specified pool.\"},\"setMarketBorrowCaps(address[],uint256[])\":{\"notice\":\"Alias to _setMarketBorrowCaps to support the Isolated Lending Comptroller Interface\"},\"setMarketSupplyCaps(address[],uint256[])\":{\"notice\":\"Alias to _setMarketSupplyCaps to support the Isolated Lending Comptroller Interface\"},\"setMintedVAIOf(address,uint256)\":{\"notice\":\"Set the minted VAI amount of the `owner`\"},\"setPoolActive(uint96,bool)\":{\"notice\":\"updates active status for a specific pool (excluding the Core Pool)\"},\"setPoolLabel(uint96,string)\":{\"notice\":\"Updates the label for a specific pool (excluding the Core Pool)\"},\"setPriceOracle(address)\":{\"notice\":\"Alias to _setPriceOracle to support the Isolated Lending Comptroller Interface\"},\"setPrimeToken(address)\":{\"notice\":\"Alias to _setPrimeToken to support the Isolated Lending Comptroller Interface\"},\"setWhiteListFlashLoanAccount(address,bool)\":{\"notice\":\"Adds/Removes an account to the flash loan whitelist\"},\"supplyCaps(address)\":{\"notice\":\"Supply caps enforced by mintAllowed for each vToken address. Defaults to zero which corresponds to minting notAllowed\"},\"treasuryAddress()\":{\"notice\":\"Treasury address\"},\"treasuryGuardian()\":{\"notice\":\"Treasury Guardian address\"},\"treasuryPercent()\":{\"notice\":\"Fee percent of accrued interest with decimal 18\"},\"userPoolId(address)\":{\"notice\":\"Tracks the selected pool for each user\"},\"vaiController()\":{\"notice\":\"The Address of VAIController\"},\"vaiMintRate()\":{\"notice\":\"VAI Mint Rate as a percentage\"},\"venusAccrued(address)\":{\"notice\":\"The XVS accrued but not yet transferred to each user\"},\"venusBorrowSpeeds(address)\":{\"notice\":\"The rate at which venus is distributed to the corresponding borrow market (per block)\"},\"venusBorrowState(address)\":{\"notice\":\"The Venus market borrow state for each market\"},\"venusBorrowerIndex(address,address)\":{\"notice\":\"The Venus borrow index for each market for each borrower as of the last time they accrued XVS\"},\"venusInitialIndex()\":{\"notice\":\"The initial Venus index for a market\"},\"venusSupplierIndex(address,address)\":{\"notice\":\"The Venus supply index for each market for each supplier as of the last time they accrued XVS\"},\"venusSupplySpeeds(address)\":{\"notice\":\"The rate at which venus is distributed to the corresponding supply market (per block)\"},\"venusSupplyState(address)\":{\"notice\":\"The Venus market supply state for each market\"},\"venusVAIVaultRate()\":{\"notice\":\"The rate at which the flywheel distributes XVS to VAI Vault, per block\"}},\"notice\":\"This facet contract contains all the configurational setter functions\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Comptroller/Diamond/facets/SetterFacet.sol\":\"SetterFacet\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@venusprotocol/governance-contracts/contracts/Governance/IAccessControlManagerV8.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.25;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\n/**\\n * @title IAccessControlManagerV8\\n * @author Venus\\n * @notice Interface implemented by the `AccessControlManagerV8` contract.\\n */\\ninterface IAccessControlManagerV8 is IAccessControl {\\n    function giveCallPermission(address contractAddress, string calldata functionSig, address accountToPermit) external;\\n\\n    function revokeCallPermission(\\n        address contractAddress,\\n        string calldata functionSig,\\n        address accountToRevoke\\n    ) external;\\n\\n    function isAllowedToCall(address account, string calldata functionSig) external view returns (bool);\\n\\n    function hasPermission(\\n        address account,\\n        address contractAddress,\\n        string calldata functionSig\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xaa29b098440d0b3a131c5ecdf25ce548790c1b5ac7bf9b5c0264b6af6f7a1e0b\",\"license\":\"BSD-3-Clause\"},\"@venusprotocol/oracle/contracts/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.25;\\n\\ninterface OracleInterface {\\n    function getPrice(address asset) external view returns (uint256);\\n}\\n\\ninterface ResilientOracleInterface is OracleInterface {\\n    function updatePrice(address vToken) external;\\n\\n    function updateAssetPrice(address asset) external;\\n\\n    function getUnderlyingPrice(address vToken) external view returns (uint256);\\n}\\n\\ninterface TwapInterface is OracleInterface {\\n    function updateTwap(address asset) external returns (uint256);\\n}\\n\\ninterface BoundValidatorInterface {\\n    function validatePriceWithAnchorPrice(\\n        address asset,\\n        uint256 reporterPrice,\\n        uint256 anchorPrice\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2432799b0d824fc701beb4c30146e912b9aeecf77b5c1635dde6c5fbe6bfc3a7\",\"license\":\"BSD-3-Clause\"},\"contracts/Comptroller/ComptrollerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.25;\\n\\nimport { ResilientOracleInterface } from \\\"@venusprotocol/oracle/contracts/interfaces/OracleInterface.sol\\\";\\n\\nimport { VToken } from \\\"../Tokens/VTokens/VToken.sol\\\";\\nimport { VAIControllerInterface } from \\\"../Tokens/VAI/VAIControllerInterface.sol\\\";\\nimport { WeightFunction } from \\\"./Diamond/interfaces/IFacetBase.sol\\\";\\n\\nenum Action {\\n    MINT,\\n    REDEEM,\\n    BORROW,\\n    REPAY,\\n    SEIZE,\\n    LIQUIDATE,\\n    TRANSFER,\\n    ENTER_MARKET,\\n    EXIT_MARKET\\n}\\n\\ninterface ComptrollerInterface {\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\n    function isComptroller() external pure returns (bool);\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata vTokens) external returns (uint[] memory);\\n\\n    function exitMarket(address vToken) external returns (uint);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(address vToken, address minter, uint mintAmount) external returns (uint);\\n\\n    function mintVerify(address vToken, address minter, uint mintAmount, uint mintTokens) external;\\n\\n    function redeemAllowed(address vToken, address redeemer, uint redeemTokens) external returns (uint);\\n\\n    function redeemVerify(address vToken, address redeemer, uint redeemAmount, uint redeemTokens) external;\\n\\n    function borrowAllowed(address vToken, address borrower, uint borrowAmount) external returns (uint);\\n\\n    function borrowVerify(address vToken, address borrower, uint borrowAmount) external;\\n\\n    function executeFlashLoan(\\n        address payable onBehalf,\\n        address payable receiver,\\n        VToken[] calldata vTokens,\\n        uint256[] calldata amounts,\\n        bytes calldata param\\n    ) external;\\n\\n    function repayBorrowAllowed(\\n        address vToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount\\n    ) external returns (uint);\\n\\n    function repayBorrowVerify(\\n        address vToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount,\\n        uint borrowerIndex\\n    ) external;\\n\\n    function liquidateBorrowAllowed(\\n        address vTokenBorrowed,\\n        address vTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount\\n    ) external returns (uint);\\n\\n    function liquidateBorrowVerify(\\n        address vTokenBorrowed,\\n        address vTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        uint seizeTokens\\n    ) external;\\n\\n    function seizeAllowed(\\n        address vTokenCollateral,\\n        address vTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens\\n    ) external returns (uint);\\n\\n    function seizeVerify(\\n        address vTokenCollateral,\\n        address vTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens\\n    ) external;\\n\\n    function transferAllowed(address vToken, address src, address dst, uint transferTokens) external returns (uint);\\n\\n    function transferVerify(address vToken, address src, address dst, uint transferTokens) external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address vTokenBorrowed,\\n        address vTokenCollateral,\\n        uint repayAmount\\n    ) external view returns (uint, uint);\\n\\n    function liquidateCalculateSeizeTokens(\\n        address borrower,\\n        address vTokenBorrowed,\\n        address vTokenCollateral,\\n        uint repayAmount\\n    ) external view returns (uint, uint);\\n\\n    function setMintedVAIOf(address owner, uint amount) external returns (uint);\\n\\n    function liquidateVAICalculateSeizeTokens(\\n        address vTokenCollateral,\\n        uint repayAmount\\n    ) external view returns (uint, uint);\\n\\n    function getXVSAddress() external view returns (address);\\n\\n    function markets(address) external view returns (bool, uint, bool, uint, uint, uint96, bool);\\n\\n    function oracle() external view returns (ResilientOracleInterface);\\n\\n    function getAccountLiquidity(address) external view returns (uint, uint, uint);\\n\\n    function getAssetsIn(address) external view returns (VToken[] memory);\\n\\n    function claimVenus(address) external;\\n\\n    function venusAccrued(address) external view returns (uint);\\n\\n    function venusSupplySpeeds(address) external view returns (uint);\\n\\n    function venusBorrowSpeeds(address) external view returns (uint);\\n\\n    function getAllMarkets() external view returns (VToken[] memory);\\n\\n    function venusSupplierIndex(address, address) external view returns (uint);\\n\\n    function venusInitialIndex() external view returns (uint224);\\n\\n    function venusBorrowerIndex(address, address) external view returns (uint);\\n\\n    function venusBorrowState(address) external view returns (uint224, uint32);\\n\\n    function venusSupplyState(address) external view returns (uint224, uint32);\\n\\n    function approvedDelegates(address borrower, address delegate) external view returns (bool);\\n\\n    function vaiController() external view returns (VAIControllerInterface);\\n\\n    function protocolPaused() external view returns (bool);\\n\\n    function actionPaused(address market, Action action) external view returns (bool);\\n\\n    function mintedVAIs(address user) external view returns (uint);\\n\\n    function vaiMintRate() external view returns (uint);\\n\\n    function authorizedFlashLoan(address account) external view returns (bool);\\n\\n    function userPoolId(address account) external view returns (uint96);\\n\\n    function getLiquidationIncentive(address vToken) external view returns (uint256);\\n\\n    function getEffectiveLiquidationIncentive(address account, address vToken) external view returns (uint256);\\n\\n    function getEffectiveLtvFactor(\\n        address account,\\n        address vToken,\\n        WeightFunction weightingStrategy\\n    ) external view returns (uint256);\\n\\n    function lastPoolId() external view returns (uint96);\\n\\n    function corePoolId() external pure returns (uint96);\\n\\n    function pools(\\n        uint96 poolId\\n    ) external view returns (string memory label, bool isActive, bool allowCorePoolFallback);\\n\\n    function getPoolVTokens(uint96 poolId) external view returns (address[] memory);\\n\\n    function poolMarkets(\\n        uint96 poolId,\\n        address vToken\\n    )\\n        external\\n        view\\n        returns (\\n            bool isListed,\\n            uint256 collateralFactorMantissa,\\n            bool isVenus,\\n            uint256 liquidationThresholdMantissa,\\n            uint256 liquidationIncentiveMantissa,\\n            uint96 marketPoolId,\\n            bool isBorrowAllowed\\n        );\\n}\\n\\ninterface IVAIVault {\\n    function updatePendingRewards() external;\\n}\\n\\ninterface IComptroller {\\n    /*** Treasury Data ***/\\n    function treasuryAddress() external view returns (address);\\n\\n    function treasuryPercent() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x430cccbdeeb4e9f892c1c7ac1883e915da1fd9569530880e044dc8d581bb139d\",\"license\":\"BSD-3-Clause\"},\"contracts/Comptroller/ComptrollerLensInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.25;\\n\\nimport { VToken } from \\\"../Tokens/VTokens/VToken.sol\\\";\\nimport { WeightFunction } from \\\"./Diamond/interfaces/IFacetBase.sol\\\";\\n\\ninterface ComptrollerLensInterface {\\n    function liquidateCalculateSeizeTokens(\\n        address comptroller,\\n        address vTokenBorrowed,\\n        address vTokenCollateral,\\n        uint actualRepayAmount\\n    ) external view returns (uint, uint);\\n\\n    function liquidateCalculateSeizeTokens(\\n        address borrower,\\n        address comptroller,\\n        address vTokenBorrowed,\\n        address vTokenCollateral,\\n        uint actualRepayAmount\\n    ) external view returns (uint, uint);\\n\\n    function liquidateVAICalculateSeizeTokens(\\n        address comptroller,\\n        address vTokenCollateral,\\n        uint actualRepayAmount\\n    ) external view returns (uint, uint);\\n\\n    function getHypotheticalAccountLiquidity(\\n        address comptroller,\\n        address account,\\n        VToken vTokenModify,\\n        uint redeemTokens,\\n        uint borrowAmount,\\n        WeightFunction weightingStrategy\\n    ) external view returns (uint, uint, uint);\\n}\\n\",\"keccak256\":\"0x5613ff839f6aed74491f3248723c6c3d73e39fc9ec3ac5b2db5e605f14a89ac0\",\"license\":\"BSD-3-Clause\"},\"contracts/Comptroller/ComptrollerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.25;\\n\\nimport { ResilientOracleInterface } from \\\"@venusprotocol/oracle/contracts/interfaces/OracleInterface.sol\\\";\\nimport { PoolMarketId } from \\\"./Types/PoolMarketId.sol\\\";\\n\\nimport { VToken } from \\\"../Tokens/VTokens/VToken.sol\\\";\\nimport { VAIControllerInterface } from \\\"../Tokens/VAI/VAIControllerInterface.sol\\\";\\nimport { ComptrollerLensInterface } from \\\"./ComptrollerLensInterface.sol\\\";\\nimport { IPrime } from \\\"../Tokens/Prime/IPrime.sol\\\";\\n\\ncontract UnitrollerAdminStorage {\\n    /**\\n     * @notice Administrator for this contract\\n     */\\n    address public admin;\\n\\n    /**\\n     * @notice Pending administrator for this contract\\n     */\\n    address public pendingAdmin;\\n\\n    /**\\n     * @notice Active brains of Unitroller\\n     */\\n    address public comptrollerImplementation;\\n\\n    /**\\n     * @notice Pending brains of Unitroller\\n     */\\n    address public pendingComptrollerImplementation;\\n}\\n\\ncontract ComptrollerV1Storage is UnitrollerAdminStorage {\\n    /**\\n     * @notice Oracle which gives the price of any given asset\\n     */\\n    ResilientOracleInterface public oracle;\\n\\n    /**\\n     * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\\n     */\\n    uint256 public closeFactorMantissa;\\n\\n    /**\\n     * @notice Multiplier representing the discount on collateral that a liquidator receives (deprecated)\\n     */\\n    uint256 private _oldLiquidationIncentiveMantissa;\\n\\n    /**\\n     * @notice Max number of assets a single account can participate in (borrow or use as collateral)\\n     */\\n    uint256 public maxAssets;\\n\\n    /**\\n     * @notice Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\\n     */\\n    mapping(address => VToken[]) public accountAssets;\\n\\n    struct Market {\\n        /// @notice Whether or not this market is listed\\n        bool isListed;\\n        /**\\n         * @notice Multiplier representing the most one can borrow against their collateral in this market.\\n         *  For instance, 0.9 to allow borrowing 90% of collateral value.\\n         *  Must be between 0 and 1, and stored as a mantissa.\\n         */\\n        uint256 collateralFactorMantissa;\\n        /// @notice Per-market mapping of \\\"accounts in this asset\\\" (used for Core Pool only)\\n        mapping(address => bool) accountMembership;\\n        /// @notice Whether or not this market receives XVS\\n        bool isVenus;\\n        /**\\n         * @notice Multiplier representing the collateralization after which the borrow is eligible\\n         * for liquidation. For instance, 0.8 liquidate when the borrow is 80% of collateral\\n         * value. Must be between 0 and collateral factor, stored as a mantissa.\\n         */\\n        uint256 liquidationThresholdMantissa;\\n        /// @notice discount on collateral that a liquidator receives when liquidating a borrow in this market\\n        uint256 liquidationIncentiveMantissa;\\n        /// @notice The pool ID this market is associated with, Used to support pools/emodes\\n        uint96 poolId;\\n        /// @notice Flag  to restrict borrowing in certain pools/emodes.\\n        bool isBorrowAllowed;\\n    }\\n\\n    /**\\n     * @notice Mapping of PoolMarketId -> Market metadata\\n     * Underlying key layout: First 12 bytes (96 bits) represent the poolId, last 20 bytes the vToken address\\n     */\\n    mapping(PoolMarketId => Market) internal _poolMarkets;\\n\\n    /**\\n     * @notice The Pause Guardian can pause certain actions as a safety mechanism.\\n     */\\n    address public pauseGuardian;\\n\\n    /// @notice Whether minting is paused (deprecated, superseded by actionPaused)\\n    bool private _mintGuardianPaused;\\n    /// @notice Whether borrowing is paused (deprecated, superseded by actionPaused)\\n    bool private _borrowGuardianPaused;\\n    /// @notice Whether borrowing is paused (deprecated, superseded by actionPaused)\\n    bool internal transferGuardianPaused;\\n    /// @notice Whether borrowing is paused (deprecated, superseded by actionPaused)\\n    bool internal seizeGuardianPaused;\\n    /// @notice Whether borrowing is paused (deprecated, superseded by actionPaused)\\n    mapping(address => bool) internal mintGuardianPaused;\\n    /// @notice Whether borrowing is paused (deprecated, superseded by actionPaused)\\n    mapping(address => bool) internal borrowGuardianPaused;\\n\\n    struct VenusMarketState {\\n        /// @notice The market's last updated venusBorrowIndex or venusSupplyIndex\\n        uint224 index;\\n        /// @notice The block number the index was last updated at\\n        uint32 block;\\n    }\\n\\n    /// @notice A list of all markets\\n    VToken[] public allMarkets;\\n\\n    /// @notice The rate at which the flywheel distributes XVS, per block\\n    uint256 internal venusRate;\\n\\n    /// @notice The portion of venusRate that each market currently receives\\n    mapping(address => uint256) internal venusSpeeds;\\n\\n    /// @notice The Venus market supply state for each market\\n    mapping(address => VenusMarketState) public venusSupplyState;\\n\\n    /// @notice The Venus market borrow state for each market\\n    mapping(address => VenusMarketState) public venusBorrowState;\\n\\n    /// @notice The Venus supply index for each market for each supplier as of the last time they accrued XVS\\n    mapping(address => mapping(address => uint256)) public venusSupplierIndex;\\n\\n    /// @notice The Venus borrow index for each market for each borrower as of the last time they accrued XVS\\n    mapping(address => mapping(address => uint256)) public venusBorrowerIndex;\\n\\n    /// @notice The XVS accrued but not yet transferred to each user\\n    mapping(address => uint256) public venusAccrued;\\n\\n    /// @notice The Address of VAIController\\n    VAIControllerInterface public vaiController;\\n\\n    /// @notice The minted VAI amount to each user\\n    mapping(address => uint256) public mintedVAIs;\\n\\n    /// @notice VAI Mint Rate as a percentage\\n    uint256 public vaiMintRate;\\n\\n    /**\\n     * @notice The Pause Guardian can pause certain actions as a safety mechanism.\\n     */\\n    bool public mintVAIGuardianPaused;\\n    bool public repayVAIGuardianPaused;\\n\\n    /**\\n     * @notice Pause/Unpause whole protocol actions\\n     */\\n    bool public protocolPaused;\\n\\n    /// @notice The rate at which the flywheel distributes XVS to VAI Minters, per block (deprecated)\\n    uint256 private venusVAIRate;\\n}\\n\\ncontract ComptrollerV2Storage is ComptrollerV1Storage {\\n    /// @notice The rate at which the flywheel distributes XVS to VAI Vault, per block\\n    uint256 public venusVAIVaultRate;\\n\\n    // address of VAI Vault\\n    address public vaiVaultAddress;\\n\\n    // start block of release to VAI Vault\\n    uint256 public releaseStartBlock;\\n\\n    // minimum release amount to VAI Vault\\n    uint256 public minReleaseAmount;\\n}\\n\\ncontract ComptrollerV3Storage is ComptrollerV2Storage {\\n    /// @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\\n    address public borrowCapGuardian;\\n\\n    /// @notice Borrow caps enforced by borrowAllowed for each vToken address.\\n    mapping(address => uint256) public borrowCaps;\\n}\\n\\ncontract ComptrollerV4Storage is ComptrollerV3Storage {\\n    /// @notice Treasury Guardian address\\n    address public treasuryGuardian;\\n\\n    /// @notice Treasury address\\n    address public treasuryAddress;\\n\\n    /// @notice Fee percent of accrued interest with decimal 18\\n    uint256 public treasuryPercent;\\n}\\n\\ncontract ComptrollerV5Storage is ComptrollerV4Storage {\\n    /// @notice The portion of XVS that each contributor receives per block (deprecated)\\n    mapping(address => uint256) private venusContributorSpeeds;\\n\\n    /// @notice Last block at which a contributor's XVS rewards have been allocated (deprecated)\\n    mapping(address => uint256) private lastContributorBlock;\\n}\\n\\ncontract ComptrollerV6Storage is ComptrollerV5Storage {\\n    address public liquidatorContract;\\n}\\n\\ncontract ComptrollerV7Storage is ComptrollerV6Storage {\\n    ComptrollerLensInterface public comptrollerLens;\\n}\\n\\ncontract ComptrollerV8Storage is ComptrollerV7Storage {\\n    /// @notice Supply caps enforced by mintAllowed for each vToken address. Defaults to zero which corresponds to minting notAllowed\\n    mapping(address => uint256) public supplyCaps;\\n}\\n\\ncontract ComptrollerV9Storage is ComptrollerV8Storage {\\n    /// @notice AccessControlManager address\\n    address internal accessControl;\\n\\n    /// @notice True if a certain action is paused on a certain market\\n    mapping(address => mapping(uint256 => bool)) internal _actionPaused;\\n}\\n\\ncontract ComptrollerV10Storage is ComptrollerV9Storage {\\n    /// @notice The rate at which venus is distributed to the corresponding borrow market (per block)\\n    mapping(address => uint256) public venusBorrowSpeeds;\\n\\n    /// @notice The rate at which venus is distributed to the corresponding supply market (per block)\\n    mapping(address => uint256) public venusSupplySpeeds;\\n}\\n\\ncontract ComptrollerV11Storage is ComptrollerV10Storage {\\n    /// @notice Whether the delegate is allowed to borrow or redeem on behalf of the user\\n    //mapping(address user => mapping (address delegate => bool approved)) public approvedDelegates;\\n    mapping(address => mapping(address => bool)) public approvedDelegates;\\n}\\n\\ncontract ComptrollerV12Storage is ComptrollerV11Storage {\\n    /// @notice Whether forced liquidation is enabled for all users borrowing in a certain market\\n    mapping(address => bool) public isForcedLiquidationEnabled;\\n}\\n\\ncontract ComptrollerV13Storage is ComptrollerV12Storage {\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in _facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in _facetAddresses array\\n    }\\n\\n    mapping(bytes4 => FacetAddressAndPosition) internal _selectorToFacetAndPosition;\\n    // maps facet addresses to function selectors\\n    mapping(address => FacetFunctionSelectors) internal _facetFunctionSelectors;\\n    // facet addresses\\n    address[] internal _facetAddresses;\\n}\\n\\ncontract ComptrollerV14Storage is ComptrollerV13Storage {\\n    /// @notice Prime token address\\n    IPrime public prime;\\n}\\n\\ncontract ComptrollerV15Storage is ComptrollerV14Storage {\\n    /// @notice Whether forced liquidation is enabled for the borrows of a user in a market\\n    mapping(address user => mapping(address market => bool)) public isForcedLiquidationEnabledForUser;\\n}\\n\\ncontract ComptrollerV16Storage is ComptrollerV15Storage {\\n    /// @notice The XVS token contract address\\n    address internal xvs;\\n\\n    /// @notice The XVS vToken contract address\\n    address internal xvsVToken;\\n}\\n\\ncontract ComptrollerV17Storage is ComptrollerV16Storage {\\n    struct PoolData {\\n        /// @notice label for the pool\\n        string label;\\n        /// @notice List of vToken addresses associated with this pool\\n        address[] vTokens;\\n        /**\\n         * @notice Whether the pool is active and can be entered. If set to false,\\n         * new entries are disabled and existing accounts fall back to core pool values\\n         */\\n        bool isActive;\\n        /**\\n         * @notice Whether core pool risk factors can be used as fallback when the market\\n         * is not configured in the specific pool, falls back when set to true\\n         */\\n        bool allowCorePoolFallback;\\n    }\\n\\n    /**\\n     * @notice Tracks the selected pool for each user\\n     * @dev\\n     * - The mapping stores the pool ID (`uint96`) that each user (`address`) is currently in\\n     * - A value of `0` represents the default core pool (legacy behavior)\\n     */\\n    mapping(address => uint96) public userPoolId;\\n\\n    /**\\n     * @notice Mapping of pool ID to its corresponding metadata and configuration\\n     * @dev Pool IDs are unique and incremented via `lastPoolId` when a new pool is created\\n     *      Not updated for the Core Pool (`poolId = 0`)\\n     */\\n    mapping(uint96 => PoolData) public pools;\\n\\n    /**\\n     * @notice Counter used to generate unique pool IDs\\n     * @dev Increments each time a pool is created; `poolId = 0` is reserved for the core pool\\n     */\\n    uint96 public lastPoolId;\\n}\\n\\ncontract ComptrollerV18Storage is ComptrollerV17Storage {\\n    struct FlashLoanData {\\n        uint256[] totalFees;\\n        uint256[] protocolFees;\\n        uint256[] actualRepayments;\\n        uint256[] remainingDebts;\\n    }\\n\\n    /// @notice Mapping of accounts authorized to execute flash loans\\n    mapping(address => bool) public authorizedFlashLoan;\\n}\\n\",\"keccak256\":\"0x97ac1cfaf70f9932256765ee559922cd2a8c63b5990d6521f50f5a95de2719df\",\"license\":\"BSD-3-Clause\"},\"contracts/Comptroller/Diamond/facets/FacetBase.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.25;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IAccessControlManagerV8 } from \\\"@venusprotocol/governance-contracts/contracts/Governance/IAccessControlManagerV8.sol\\\";\\n\\nimport { VToken } from \\\"../../../Tokens/VTokens/VToken.sol\\\";\\nimport { ComptrollerErrorReporter } from \\\"../../../Utils/ErrorReporter.sol\\\";\\nimport { ExponentialNoError } from \\\"../../../Utils/ExponentialNoError.sol\\\";\\nimport { IVAIVault, Action } from \\\"../../../Comptroller/ComptrollerInterface.sol\\\";\\nimport { ComptrollerV18Storage } from \\\"../../../Comptroller/ComptrollerStorage.sol\\\";\\nimport { PoolMarketId } from \\\"../../../Comptroller/Types/PoolMarketId.sol\\\";\\nimport { IFacetBase, WeightFunction } from \\\"../interfaces/IFacetBase.sol\\\";\\n\\n/**\\n * @title FacetBase\\n * @author Venus\\n * @notice This facet contract contains functions related to access and checks\\n */\\ncontract FacetBase is IFacetBase, ComptrollerV18Storage, ExponentialNoError, ComptrollerErrorReporter {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice The initial Venus index for a market\\n    uint224 public constant venusInitialIndex = 1e36;\\n    // poolId for core Pool\\n    uint96 public constant corePoolId = 0;\\n    // closeFactorMantissa must be strictly greater than this value\\n    uint256 internal constant closeFactorMinMantissa = 0.05e18; // 0.05\\n    // closeFactorMantissa must not exceed this value\\n    uint256 internal constant closeFactorMaxMantissa = 0.9e18; // 0.9\\n\\n    /// @notice Emitted when an account enters a market\\n    event MarketEntered(VToken indexed vToken, address indexed account);\\n\\n    /// @notice Emitted when XVS is distributed to VAI Vault\\n    event DistributedVAIVaultVenus(uint256 amount);\\n\\n    /// @notice Reverts if the protocol is paused\\n    function checkProtocolPauseState() internal view {\\n        require(!protocolPaused, \\\"protocol is paused\\\");\\n    }\\n\\n    /// @notice Reverts if a certain action is paused on a market\\n    function checkActionPauseState(address market, Action action) internal view {\\n        require(!actionPaused(market, action), \\\"action is paused\\\");\\n    }\\n\\n    /// @notice Reverts if the caller is not admin\\n    function ensureAdmin() internal view {\\n        require(msg.sender == admin, \\\"only admin can\\\");\\n    }\\n\\n    /// @notice Checks the passed address is nonzero\\n    function ensureNonzeroAddress(address someone) internal pure {\\n        require(someone != address(0), \\\"can't be zero address\\\");\\n    }\\n\\n    /// @notice Reverts if the market is not listed\\n    function ensureListed(Market storage market) internal view {\\n        require(market.isListed, \\\"market not listed\\\");\\n    }\\n\\n    /// @notice Reverts if the caller is neither admin nor the passed address\\n    function ensureAdminOr(address privilegedAddress) internal view {\\n        require(msg.sender == admin || msg.sender == privilegedAddress, \\\"access denied\\\");\\n    }\\n\\n    /// @notice Checks the caller is allowed to call the specified fuction\\n    function ensureAllowed(string memory functionSig) internal view {\\n        require(IAccessControlManagerV8(accessControl).isAllowedToCall(msg.sender, functionSig), \\\"access denied\\\");\\n    }\\n\\n    /**\\n     * @notice Checks if a certain action is paused on a market\\n     * @param action Action id\\n     * @param market vToken address\\n     */\\n    function actionPaused(address market, Action action) public view returns (bool) {\\n        return _actionPaused[market][uint256(action)];\\n    }\\n\\n    /**\\n     * @notice Get the latest block number\\n     */\\n    function getBlockNumber() internal view virtual returns (uint256) {\\n        return block.number;\\n    }\\n\\n    /**\\n     * @notice Get the latest block number with the safe32 check\\n     */\\n    function getBlockNumberAsUint32() internal view returns (uint32) {\\n        return safe32(getBlockNumber(), \\\"block # > 32 bits\\\");\\n    }\\n\\n    /**\\n     * @notice Transfer XVS to VAI Vault\\n     */\\n    function releaseToVault() internal {\\n        if (releaseStartBlock == 0 || getBlockNumber() < releaseStartBlock) {\\n            return;\\n        }\\n\\n        IERC20 xvs_ = IERC20(xvs);\\n\\n        uint256 xvsBalance = xvs_.balanceOf(address(this));\\n        if (xvsBalance == 0) {\\n            return;\\n        }\\n\\n        uint256 actualAmount;\\n        uint256 deltaBlocks = sub_(getBlockNumber(), releaseStartBlock);\\n        // releaseAmount = venusVAIVaultRate * deltaBlocks\\n        uint256 releaseAmount_ = mul_(venusVAIVaultRate, deltaBlocks);\\n\\n        if (xvsBalance >= releaseAmount_) {\\n            actualAmount = releaseAmount_;\\n        } else {\\n            actualAmount = xvsBalance;\\n        }\\n\\n        if (actualAmount < minReleaseAmount) {\\n            return;\\n        }\\n\\n        releaseStartBlock = getBlockNumber();\\n\\n        xvs_.safeTransfer(vaiVaultAddress, actualAmount);\\n        emit DistributedVAIVaultVenus(actualAmount);\\n\\n        IVAIVault(vaiVaultAddress).updatePendingRewards();\\n    }\\n\\n    /**\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\n     * @param vTokenModify The market to hypothetically redeem/borrow in\\n     * @param account The account to determine liquidity for\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\n     * @param weightingStrategy The weighting strategy to use:\\n     *                          - `WeightFunction.USE_COLLATERAL_FACTOR` to use collateral factor\\n     *                          - `WeightFunction.USE_LIQUIDATION_THRESHOLD` to use liquidation threshold\\n     * @dev Note that we calculate the exchangeRateStored for each collateral vToken using stored data,\\n     *  without calculating accumulated interest.\\n     * @return (possible error code,\\n                hypothetical account liquidity in excess of collateral requirements,\\n     *          hypothetical account shortfall below collateral requirements)\\n     */\\n    function getHypotheticalAccountLiquidityInternal(\\n        address account,\\n        VToken vTokenModify,\\n        uint256 redeemTokens,\\n        uint256 borrowAmount,\\n        WeightFunction weightingStrategy\\n    ) internal view returns (Error, uint256, uint256) {\\n        (uint256 err, uint256 liquidity, uint256 shortfall) = comptrollerLens.getHypotheticalAccountLiquidity(\\n            address(this),\\n            account,\\n            vTokenModify,\\n            redeemTokens,\\n            borrowAmount,\\n            weightingStrategy\\n        );\\n        return (Error(err), liquidity, shortfall);\\n    }\\n\\n    /**\\n     * @notice Add the market to the borrower's \\\"assets in\\\" for liquidity calculations\\n     * @param vToken The market to enter\\n     * @param borrower The address of the account to modify\\n     * @return Success indicator for whether the market was entered\\n     */\\n    function addToMarketInternal(VToken vToken, address borrower) internal returns (Error) {\\n        checkActionPauseState(address(vToken), Action.ENTER_MARKET);\\n        Market storage marketToJoin = getCorePoolMarket(address(vToken));\\n        ensureListed(marketToJoin);\\n        if (marketToJoin.accountMembership[borrower]) {\\n            // already joined\\n            return Error.NO_ERROR;\\n        }\\n        // survived the gauntlet, add to list\\n        // NOTE: we store these somewhat redundantly as a significant optimization\\n        //  this avoids having to iterate through the list for the most common use cases\\n        //  that is, only when we need to perform liquidity checks\\n        //  and not whenever we want to check if an account is in a particular market\\n        marketToJoin.accountMembership[borrower] = true;\\n        accountAssets[borrower].push(vToken);\\n\\n        emit MarketEntered(vToken, borrower);\\n\\n        return Error.NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Checks for the user is allowed to redeem tokens\\n     * @param vToken Address of the market\\n     * @param redeemer Address of the user\\n     * @param redeemTokens Amount of tokens to redeem\\n     * @return Success indicator for redeem is allowed or not\\n     */\\n    function redeemAllowedInternal(\\n        address vToken,\\n        address redeemer,\\n        uint256 redeemTokens\\n    ) internal view returns (uint256) {\\n        ensureListed(getCorePoolMarket(vToken));\\n        /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */\\n        if (!getCorePoolMarket(vToken).accountMembership[redeemer]) {\\n            return uint256(Error.NO_ERROR);\\n        }\\n        /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\\n        (Error err, , uint256 shortfall) = getHypotheticalAccountLiquidityInternal(\\n            redeemer,\\n            VToken(vToken),\\n            redeemTokens,\\n            0,\\n            WeightFunction.USE_COLLATERAL_FACTOR\\n        );\\n        if (err != Error.NO_ERROR) {\\n            return uint256(err);\\n        }\\n        if (shortfall != 0) {\\n            return uint256(Error.INSUFFICIENT_LIQUIDITY);\\n        }\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Returns the XVS address\\n     * @return The address of XVS token\\n     */\\n    function getXVSAddress() external view returns (address) {\\n        return xvs;\\n    }\\n\\n    /**\\n     * @notice Returns the unique market index for the given poolId and vToken pair\\n     * @dev Computes a unique key for a (poolId, market) pair used in the `_poolMarkets` mapping\\n     * - For the core pool (`poolId == 0`), this results in the address being left-padded to 32 bytes,\\n     *   maintaining backward compatibility with legacy mappings\\n     * - For other pools, packs the `poolId` and `market` address into a single `bytes32` key,\\n     *   The first 96 bits are used for the `poolId`, and the remaining 160 bits for the `market` address\\n     * @param poolId The ID of the pool\\n     * @param vToken The address of the market (vToken)\\n     * @return PoolMarketId The `bytes32` key that uniquely represents the (poolId, vToken) pair\\n     */\\n    function getPoolMarketIndex(uint96 poolId, address vToken) public pure returns (PoolMarketId) {\\n        return PoolMarketId.wrap(bytes32((uint256(poolId) << 160) | uint160(vToken)));\\n    }\\n\\n    /**\\n     * @dev Returns the Market struct for the given vToken in the Core Pool (`poolId = 0`)\\n     * @param vToken The vToken address for which the market details are requested\\n     * @return market The Market struct corresponding to the (corePoolId, vToken) pair\\n     */\\n    function getCorePoolMarket(address vToken) internal view returns (Market storage) {\\n        return _poolMarkets[getPoolMarketIndex(corePoolId, address(vToken))];\\n    }\\n\\n    /**\\n     * @notice Determine the current account liquidity wrt collateral requirements\\n     * @param account The account to get liquidity for\\n     * @param weightingStrategy The weighting strategy to use:\\n     *                          - `WeightFunction.USE_COLLATERAL_FACTOR` to use collateral factor\\n     *                          - `WeightFunction.USE_LIQUIDATION_THRESHOLD` to use liquidation threshold\\n     * @return (possible error code (semi-opaque),\\n     * account liquidity in excess of collateral requirements,\\n     * account shortfall below collateral requirements)\\n     */\\n    function _getAccountLiquidity(\\n        address account,\\n        WeightFunction weightingStrategy\\n    ) internal view returns (uint256, uint256, uint256) {\\n        (Error err, uint256 liquidity, uint256 shortfall) = getHypotheticalAccountLiquidityInternal(\\n            account,\\n            VToken(address(0)),\\n            0,\\n            0,\\n            weightingStrategy\\n        );\\n\\n        return (uint256(err), liquidity, shortfall);\\n    }\\n}\\n\",\"keccak256\":\"0x8debfe2e7a5c6cea3cd0330963e6a28caf4e5ec30a207edce00d72499652ec88\",\"license\":\"BSD-3-Clause\"},\"contracts/Comptroller/Diamond/facets/SetterFacet.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.25;\\n\\nimport { ResilientOracleInterface } from \\\"@venusprotocol/oracle/contracts/interfaces/OracleInterface.sol\\\";\\n\\nimport { VToken } from \\\"../../../Tokens/VTokens/VToken.sol\\\";\\nimport { Action } from \\\"../../ComptrollerInterface.sol\\\";\\nimport { ComptrollerLensInterface } from \\\"../../ComptrollerLensInterface.sol\\\";\\nimport { VAIControllerInterface } from \\\"../../../Tokens/VAI/VAIControllerInterface.sol\\\";\\nimport { IPrime } from \\\"../../../Tokens/Prime/IPrime.sol\\\";\\nimport { ISetterFacet } from \\\"../interfaces/ISetterFacet.sol\\\";\\nimport { FacetBase } from \\\"./FacetBase.sol\\\";\\nimport { PoolMarketId } from \\\"../../../Comptroller/Types/PoolMarketId.sol\\\";\\n\\n/**\\n * @title SetterFacet\\n * @author Venus\\n * @dev This facet contains all the setters for the states\\n * @notice This facet contract contains all the configurational setter functions\\n */\\ncontract SetterFacet is ISetterFacet, FacetBase {\\n    /// @notice Emitted when close factor is changed by admin\\n    event NewCloseFactor(uint256 oldCloseFactorMantissa, uint256 newCloseFactorMantissa);\\n\\n    /// @notice Emitted when a collateral factor for a market in a pool is changed by admin\\n    event NewCollateralFactor(\\n        uint96 indexed poolId,\\n        VToken indexed vToken,\\n        uint256 oldCollateralFactorMantissa,\\n        uint256 newCollateralFactorMantissa\\n    );\\n\\n    /// @notice Emitted when liquidation incentive for a market in a pool is changed by admin\\n    event NewLiquidationIncentive(\\n        uint96 indexed poolId,\\n        address indexed vToken,\\n        uint256 oldLiquidationIncentiveMantissa,\\n        uint256 newLiquidationIncentiveMantissa\\n    );\\n\\n    /// @notice Emitted when price oracle is changed\\n    event NewPriceOracle(ResilientOracleInterface oldPriceOracle, ResilientOracleInterface newPriceOracle);\\n\\n    /// @notice Emitted when borrow cap for a vToken is changed\\n    event NewBorrowCap(VToken indexed vToken, uint256 newBorrowCap);\\n\\n    /// @notice Emitted when VAIController is changed\\n    event NewVAIController(VAIControllerInterface oldVAIController, VAIControllerInterface newVAIController);\\n\\n    /// @notice Emitted when VAI mint rate is changed by admin\\n    event NewVAIMintRate(uint256 oldVAIMintRate, uint256 newVAIMintRate);\\n\\n    /// @notice Emitted when protocol state is changed by admin\\n    event ActionProtocolPaused(bool state);\\n\\n    /// @notice Emitted when treasury guardian is changed\\n    event NewTreasuryGuardian(address oldTreasuryGuardian, address newTreasuryGuardian);\\n\\n    /// @notice Emitted when treasury address is changed\\n    event NewTreasuryAddress(address oldTreasuryAddress, address newTreasuryAddress);\\n\\n    /// @notice Emitted when treasury percent is changed\\n    event NewTreasuryPercent(uint256 oldTreasuryPercent, uint256 newTreasuryPercent);\\n\\n    /// @notice Emitted when liquidator adress is changed\\n    event NewLiquidatorContract(address oldLiquidatorContract, address newLiquidatorContract);\\n\\n    /// @notice Emitted when ComptrollerLens address is changed\\n    event NewComptrollerLens(address oldComptrollerLens, address newComptrollerLens);\\n\\n    /// @notice Emitted when supply cap for a vToken is changed\\n    event NewSupplyCap(VToken indexed vToken, uint256 newSupplyCap);\\n\\n    /// @notice Emitted when access control address is changed by admin\\n    event NewAccessControl(address oldAccessControlAddress, address newAccessControlAddress);\\n\\n    /// @notice Emitted when pause guardian is changed\\n    event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\\n\\n    /// @notice Emitted when an action is paused on a market\\n    event ActionPausedMarket(VToken indexed vToken, Action indexed action, bool pauseState);\\n\\n    /// @notice Emitted when VAI Vault info is changed\\n    event NewVAIVaultInfo(address indexed vault_, uint256 releaseStartBlock_, uint256 releaseInterval_);\\n\\n    /// @notice Emitted when Venus VAI Vault rate is changed\\n    event NewVenusVAIVaultRate(uint256 oldVenusVAIVaultRate, uint256 newVenusVAIVaultRate);\\n\\n    /// @notice Emitted when prime token contract address is changed\\n    event NewPrimeToken(IPrime oldPrimeToken, IPrime newPrimeToken);\\n\\n    /// @notice Emitted when forced liquidation is enabled or disabled for all users in a market\\n    event IsForcedLiquidationEnabledUpdated(address indexed vToken, bool enable);\\n\\n    /// @notice Emitted when forced liquidation is enabled or disabled for a user borrowing in a market\\n    event IsForcedLiquidationEnabledForUserUpdated(address indexed borrower, address indexed vToken, bool enable);\\n\\n    /// @notice Emitted when XVS token address is changed\\n    event NewXVSToken(address indexed oldXVS, address indexed newXVS);\\n\\n    /// @notice Emitted when XVS vToken address is changed\\n    event NewXVSVToken(address indexed oldXVSVToken, address indexed newXVSVToken);\\n\\n    /// @notice Emitted when an account's flash loan whitelist status is updated\\n    event IsAccountFlashLoanWhitelisted(address indexed account, bool indexed isWhitelisted);\\n\\n    /// @notice Emitted when liquidation threshold for a market in a pool is changed by admin\\n    event NewLiquidationThreshold(\\n        uint96 indexed poolId,\\n        VToken indexed vToken,\\n        uint256 oldLiquidationThresholdMantissa,\\n        uint256 newLiquidationThresholdMantissa\\n    );\\n\\n    /// @notice Emitted when the borrowAllowed flag is updated for a market\\n    event BorrowAllowedUpdated(uint96 indexed poolId, address indexed market, bool oldStatus, bool newStatus);\\n\\n    /// @notice Emitted when pool active status updated\\n    event PoolActiveStatusUpdated(uint96 indexed poolId, bool oldStatus, bool newStatus);\\n\\n    /// @notice Emitted when pool label is updated\\n    event PoolLabelUpdated(uint96 indexed poolId, string oldLabel, string newLabel);\\n\\n    /// @notice Emitted when pool Fallback status is updated\\n    event PoolFallbackStatusUpdated(uint96 indexed poolId, bool oldStatus, bool newStatus);\\n\\n    /**\\n     * @notice Compare two addresses to ensure they are different\\n     * @param oldAddress The original address to compare\\n     * @param newAddress The new address to compare\\n     */\\n    modifier compareAddress(address oldAddress, address newAddress) {\\n        require(oldAddress != newAddress, \\\"old address is same as new address\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Compare two values to ensure they are different\\n     * @param oldValue The original value to compare\\n     * @param newValue The new value to compare\\n     */\\n    modifier compareValue(uint256 oldValue, uint256 newValue) {\\n        require(oldValue != newValue, \\\"old value is same as new value\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Alias to _setPriceOracle to support the Isolated Lending Comptroller Interface\\n     * @param newOracle The new price oracle to set\\n     * @return uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function setPriceOracle(ResilientOracleInterface newOracle) external returns (uint256) {\\n        return __setPriceOracle(newOracle);\\n    }\\n\\n    /**\\n     * @notice Sets a new price oracle for the comptroller\\n     * @dev Allows the contract admin to set a new price oracle used by the Comptroller\\n     * @param newOracle The new price oracle to set\\n     * @return uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setPriceOracle(ResilientOracleInterface newOracle) external returns (uint256) {\\n        return __setPriceOracle(newOracle);\\n    }\\n\\n    /**\\n     * @notice Alias to _setCloseFactor to support the Isolated Lending Comptroller Interface\\n     * @param newCloseFactorMantissa New close factor, scaled by 1e18\\n     * @return uint256 0=success, otherwise will revert\\n     */\\n    function setCloseFactor(uint256 newCloseFactorMantissa) external returns (uint256) {\\n        return __setCloseFactor(newCloseFactorMantissa);\\n    }\\n\\n    /**\\n     * @notice Sets the closeFactor used when liquidating borrows\\n     * @dev Allows the contract admin to set the closeFactor used to liquidate borrows\\n     * @param newCloseFactorMantissa New close factor, scaled by 1e18\\n     * @return uint256 0=success, otherwise will revert\\n     */\\n    function _setCloseFactor(uint256 newCloseFactorMantissa) external returns (uint256) {\\n        return __setCloseFactor(newCloseFactorMantissa);\\n    }\\n\\n    /**\\n     * @notice Sets the address of the access control of this contract\\n     * @dev Allows the contract admin to set the address of access control of this contract\\n     * @param newAccessControlAddress New address for the access control\\n     * @return uint256 0=success, otherwise will revert\\n     */\\n    function _setAccessControl(\\n        address newAccessControlAddress\\n    ) external compareAddress(accessControl, newAccessControlAddress) returns (uint256) {\\n        // Check caller is admin\\n        ensureAdmin();\\n        ensureNonzeroAddress(newAccessControlAddress);\\n\\n        address oldAccessControlAddress = accessControl;\\n\\n        accessControl = newAccessControlAddress;\\n        emit NewAccessControl(oldAccessControlAddress, newAccessControlAddress);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets the collateral factor and liquidation threshold for a market in the Core Pool only.\\n     * @param vToken The market to set the factor on\\n     * @param newCollateralFactorMantissa The new collateral factor, scaled by 1e18\\n     * @param newLiquidationThresholdMantissa The new liquidation threshold, scaled by 1e18\\n     * @return uint256 0=success, otherwise a failure. (See ErrorReporter for details)\\n     */\\n    function setCollateralFactor(\\n        VToken vToken,\\n        uint256 newCollateralFactorMantissa,\\n        uint256 newLiquidationThresholdMantissa\\n    ) external returns (uint256) {\\n        ensureAllowed(\\\"setCollateralFactor(address,uint256,uint256)\\\");\\n        return __setCollateralFactor(corePoolId, vToken, newCollateralFactorMantissa, newLiquidationThresholdMantissa);\\n    }\\n\\n    /**\\n     * @notice Sets the liquidation incentive for a market in the Core Pool only.\\n     * @param vToken The market to set the liquidationIncentive for\\n     * @param newLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18\\n     * @return uint256 0=success, otherwise a failure. (See ErrorReporter for details)\\n     */\\n    function setLiquidationIncentive(\\n        address vToken,\\n        uint256 newLiquidationIncentiveMantissa\\n    ) external returns (uint256) {\\n        ensureAllowed(\\\"setLiquidationIncentive(address,uint256)\\\");\\n        return __setLiquidationIncentive(corePoolId, vToken, newLiquidationIncentiveMantissa);\\n    }\\n\\n    /**\\n     * @notice Sets the collateral factor and liquidation threshold for a market in the specified pool.\\n     * @param poolId The ID of the pool.\\n     * @param vToken The market to set the factor on\\n     * @param newCollateralFactorMantissa The new collateral factor, scaled by 1e18\\n     * @param newLiquidationThresholdMantissa The new liquidation threshold, scaled by 1e18\\n     * @return uint256 0=success, otherwise a failure. (See ErrorReporter for details)\\n     */\\n    function setCollateralFactor(\\n        uint96 poolId,\\n        VToken vToken,\\n        uint256 newCollateralFactorMantissa,\\n        uint256 newLiquidationThresholdMantissa\\n    ) external returns (uint256) {\\n        ensureAllowed(\\\"setCollateralFactor(uint96,address,uint256,uint256)\\\");\\n        return __setCollateralFactor(poolId, vToken, newCollateralFactorMantissa, newLiquidationThresholdMantissa);\\n    }\\n\\n    /**\\n     * @notice Sets the liquidation incentive for a market in the specified pool.\\n     * @param poolId The ID of the pool.\\n     * @param vToken The market to set the liquidationIncentive for\\n     * @param newLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18\\n     * @return uint256 0=success, otherwise a failure. (See ErrorReporter for details)\\n     */\\n    function setLiquidationIncentive(\\n        uint96 poolId,\\n        address vToken,\\n        uint256 newLiquidationIncentiveMantissa\\n    ) external returns (uint256) {\\n        ensureAllowed(\\\"setLiquidationIncentive(uint96,address,uint256)\\\");\\n        return __setLiquidationIncentive(poolId, vToken, newLiquidationIncentiveMantissa);\\n    }\\n\\n    /**\\n     * @notice Update the address of the liquidator contract\\n     * @dev Allows the contract admin to update the address of liquidator contract\\n     * @param newLiquidatorContract_ The new address of the liquidator contract\\n     */\\n    function _setLiquidatorContract(\\n        address newLiquidatorContract_\\n    ) external compareAddress(liquidatorContract, newLiquidatorContract_) {\\n        // Check caller is admin\\n        ensureAdmin();\\n        ensureNonzeroAddress(newLiquidatorContract_);\\n        address oldLiquidatorContract = liquidatorContract;\\n        liquidatorContract = newLiquidatorContract_;\\n        emit NewLiquidatorContract(oldLiquidatorContract, newLiquidatorContract_);\\n    }\\n\\n    /**\\n     * @notice Admin function to change the Pause Guardian\\n     * @dev Allows the contract admin to change the Pause Guardian\\n     * @param newPauseGuardian The address of the new Pause Guardian\\n     * @return uint256 0=success, otherwise a failure. (See enum Error for details)\\n     */\\n    function _setPauseGuardian(\\n        address newPauseGuardian\\n    ) external compareAddress(pauseGuardian, newPauseGuardian) returns (uint256) {\\n        ensureAdmin();\\n        ensureNonzeroAddress(newPauseGuardian);\\n\\n        // Save current value for inclusion in log\\n        address oldPauseGuardian = pauseGuardian;\\n        // Store pauseGuardian with value newPauseGuardian\\n        pauseGuardian = newPauseGuardian;\\n\\n        // Emit NewPauseGuardian(OldPauseGuardian, NewPauseGuardian)\\n        emit NewPauseGuardian(oldPauseGuardian, newPauseGuardian);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Alias to _setMarketBorrowCaps to support the Isolated Lending Comptroller Interface\\n     * @param vTokens The addresses of the markets (tokens) to change the borrow caps for\\n     * @param newBorrowCaps The new borrow cap values in underlying to be set. A value of 0 corresponds to Borrow not allowed\\n     */\\n    function setMarketBorrowCaps(VToken[] calldata vTokens, uint256[] calldata newBorrowCaps) external {\\n        __setMarketBorrowCaps(vTokens, newBorrowCaps);\\n    }\\n\\n    /**\\n     * @notice Set the given borrow caps for the given vToken market Borrowing that brings total borrows to or above borrow cap will revert\\n     * @dev Allows a privileged role to set the borrowing cap for a vToken market. A borrow cap of 0 corresponds to Borrow not allowed\\n     * @param vTokens The addresses of the markets (tokens) to change the borrow caps for\\n     * @param newBorrowCaps The new borrow cap values in underlying to be set. A value of 0 corresponds to Borrow not allowed\\n     */\\n    function _setMarketBorrowCaps(VToken[] calldata vTokens, uint256[] calldata newBorrowCaps) external {\\n        __setMarketBorrowCaps(vTokens, newBorrowCaps);\\n    }\\n\\n    /**\\n     * @notice Alias to _setMarketSupplyCaps to support the Isolated Lending Comptroller Interface\\n     * @param vTokens The addresses of the markets (tokens) to change the supply caps for\\n     * @param newSupplyCaps The new supply cap values in underlying to be set. A value of 0 corresponds to Minting NotAllowed\\n     */\\n    function setMarketSupplyCaps(VToken[] calldata vTokens, uint256[] calldata newSupplyCaps) external {\\n        __setMarketSupplyCaps(vTokens, newSupplyCaps);\\n    }\\n\\n    /**\\n     * @notice Set the given supply caps for the given vToken market Supply that brings total Supply to or above supply cap will revert\\n     * @dev Allows a privileged role to set the supply cap for a vToken. A supply cap of 0 corresponds to Minting NotAllowed\\n     * @param vTokens The addresses of the markets (tokens) to change the supply caps for\\n     * @param newSupplyCaps The new supply cap values in underlying to be set. A value of 0 corresponds to Minting NotAllowed\\n     */\\n    function _setMarketSupplyCaps(VToken[] calldata vTokens, uint256[] calldata newSupplyCaps) external {\\n        __setMarketSupplyCaps(vTokens, newSupplyCaps);\\n    }\\n\\n    /**\\n     * @notice Set whole protocol pause/unpause state\\n     * @dev Allows a privileged role to pause/unpause protocol\\n     * @param state The new state (true=paused, false=unpaused)\\n     * @return bool The updated state of the protocol\\n     */\\n    function _setProtocolPaused(bool state) external returns (bool) {\\n        ensureAllowed(\\\"_setProtocolPaused(bool)\\\");\\n\\n        protocolPaused = state;\\n        emit ActionProtocolPaused(state);\\n        return state;\\n    }\\n\\n    /**\\n     * @notice Alias to _setActionsPaused to support the Isolated Lending Comptroller Interface\\n     * @param markets_ Markets to pause/unpause the actions on\\n     * @param actions_ List of action ids to pause/unpause\\n     * @param paused_ The new paused state (true=paused, false=unpaused)\\n     */\\n    function setActionsPaused(address[] calldata markets_, Action[] calldata actions_, bool paused_) external {\\n        __setActionsPaused(markets_, actions_, paused_);\\n    }\\n\\n    /**\\n     * @notice Pause/unpause certain actions\\n     * @dev Allows a privileged role to pause/unpause the protocol action state\\n     * @param markets_ Markets to pause/unpause the actions on\\n     * @param actions_ List of action ids to pause/unpause\\n     * @param paused_ The new paused state (true=paused, false=unpaused)\\n     */\\n    function _setActionsPaused(address[] calldata markets_, Action[] calldata actions_, bool paused_) external {\\n        __setActionsPaused(markets_, actions_, paused_);\\n    }\\n\\n    /**\\n     * @dev Pause/unpause an action on a market\\n     * @param market Market to pause/unpause the action on\\n     * @param action Action id to pause/unpause\\n     * @param paused The new paused state (true=paused, false=unpaused)\\n     */\\n    function setActionPausedInternal(address market, Action action, bool paused) internal {\\n        ensureListed(getCorePoolMarket(market));\\n        _actionPaused[market][uint256(action)] = paused;\\n        emit ActionPausedMarket(VToken(market), action, paused);\\n    }\\n\\n    /**\\n     * @notice Sets a new VAI controller\\n     * @dev Admin function to set a new VAI controller\\n     * @return uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setVAIController(\\n        VAIControllerInterface vaiController_\\n    ) external compareAddress(address(vaiController), address(vaiController_)) returns (uint256) {\\n        // Check caller is admin\\n        ensureAdmin();\\n        ensureNonzeroAddress(address(vaiController_));\\n\\n        VAIControllerInterface oldVaiController = vaiController;\\n        vaiController = vaiController_;\\n        emit NewVAIController(oldVaiController, vaiController_);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Set the VAI mint rate\\n     * @param newVAIMintRate The new VAI mint rate to be set\\n     * @return uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setVAIMintRate(\\n        uint256 newVAIMintRate\\n    ) external compareValue(vaiMintRate, newVAIMintRate) returns (uint256) {\\n        // Check caller is admin\\n        ensureAdmin();\\n        uint256 oldVAIMintRate = vaiMintRate;\\n        vaiMintRate = newVAIMintRate;\\n        emit NewVAIMintRate(oldVAIMintRate, newVAIMintRate);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Set the minted VAI amount of the `owner`\\n     * @param owner The address of the account to set\\n     * @param amount The amount of VAI to set to the account\\n     * @return The number of minted VAI by `owner`\\n     */\\n    function setMintedVAIOf(address owner, uint256 amount) external returns (uint256) {\\n        checkProtocolPauseState();\\n\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        require(!mintVAIGuardianPaused && !repayVAIGuardianPaused, \\\"VAI is paused\\\");\\n        // Check caller is vaiController\\n        if (msg.sender != address(vaiController)) {\\n            return fail(Error.REJECTION, FailureInfo.SET_MINTED_VAI_REJECTION);\\n        }\\n        mintedVAIs[owner] = amount;\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Set the treasury data.\\n     * @param newTreasuryGuardian The new address of the treasury guardian to be set\\n     * @param newTreasuryAddress The new address of the treasury to be set\\n     * @param newTreasuryPercent The new treasury percent to be set\\n     * @return uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setTreasuryData(\\n        address newTreasuryGuardian,\\n        address newTreasuryAddress,\\n        uint256 newTreasuryPercent\\n    ) external returns (uint256) {\\n        // Check caller is admin\\n        ensureAdminOr(treasuryGuardian);\\n\\n        require(newTreasuryPercent < 1e18, \\\"percent >= 100%\\\");\\n        ensureNonzeroAddress(newTreasuryGuardian);\\n        ensureNonzeroAddress(newTreasuryAddress);\\n\\n        address oldTreasuryGuardian = treasuryGuardian;\\n        address oldTreasuryAddress = treasuryAddress;\\n        uint256 oldTreasuryPercent = treasuryPercent;\\n\\n        treasuryGuardian = newTreasuryGuardian;\\n        treasuryAddress = newTreasuryAddress;\\n        treasuryPercent = newTreasuryPercent;\\n\\n        emit NewTreasuryGuardian(oldTreasuryGuardian, newTreasuryGuardian);\\n        emit NewTreasuryAddress(oldTreasuryAddress, newTreasuryAddress);\\n        emit NewTreasuryPercent(oldTreasuryPercent, newTreasuryPercent);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /*** Venus Distribution ***/\\n\\n    /**\\n     * @dev Set ComptrollerLens contract address\\n     * @param comptrollerLens_ The new ComptrollerLens contract address to be set\\n     * @return uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setComptrollerLens(\\n        ComptrollerLensInterface comptrollerLens_\\n    ) external virtual compareAddress(address(comptrollerLens), address(comptrollerLens_)) returns (uint256) {\\n        ensureAdmin();\\n        ensureNonzeroAddress(address(comptrollerLens_));\\n        address oldComptrollerLens = address(comptrollerLens);\\n        comptrollerLens = comptrollerLens_;\\n        emit NewComptrollerLens(oldComptrollerLens, address(comptrollerLens));\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Set the amount of XVS distributed per block to VAI Vault\\n     * @param venusVAIVaultRate_ The amount of XVS wei per block to distribute to VAI Vault\\n     */\\n    function _setVenusVAIVaultRate(\\n        uint256 venusVAIVaultRate_\\n    ) external compareValue(venusVAIVaultRate, venusVAIVaultRate_) {\\n        ensureAdmin();\\n        if (vaiVaultAddress != address(0)) {\\n            releaseToVault();\\n        }\\n        uint256 oldVenusVAIVaultRate = venusVAIVaultRate;\\n        venusVAIVaultRate = venusVAIVaultRate_;\\n        emit NewVenusVAIVaultRate(oldVenusVAIVaultRate, venusVAIVaultRate_);\\n    }\\n\\n    /**\\n     * @notice Set the VAI Vault infos\\n     * @param vault_ The address of the VAI Vault\\n     * @param releaseStartBlock_ The start block of release to VAI Vault\\n     * @param minReleaseAmount_ The minimum release amount to VAI Vault\\n     */\\n    function _setVAIVaultInfo(\\n        address vault_,\\n        uint256 releaseStartBlock_,\\n        uint256 minReleaseAmount_\\n    ) external compareAddress(vaiVaultAddress, vault_) {\\n        ensureAdmin();\\n        ensureNonzeroAddress(vault_);\\n        if (vaiVaultAddress != address(0)) {\\n            releaseToVault();\\n        }\\n\\n        vaiVaultAddress = vault_;\\n        releaseStartBlock = releaseStartBlock_;\\n        minReleaseAmount = minReleaseAmount_;\\n        emit NewVAIVaultInfo(vault_, releaseStartBlock_, minReleaseAmount_);\\n    }\\n\\n    /**\\n     * @notice Alias to _setPrimeToken to support the Isolated Lending Comptroller Interface\\n     * @param _prime The new prime token contract to be set\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function setPrimeToken(IPrime _prime) external returns (uint256) {\\n        return __setPrimeToken(_prime);\\n    }\\n\\n    /**\\n     * @notice Sets the prime token contract for the comptroller\\n     * @param _prime The new prime token contract to be set\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setPrimeToken(IPrime _prime) external returns (uint256) {\\n        return __setPrimeToken(_prime);\\n    }\\n\\n    /**\\n     * @notice Alias to _setForcedLiquidation to support the Isolated Lending Comptroller Interface\\n     * @param vTokenBorrowed Borrowed vToken\\n     * @param enable Whether to enable forced liquidations\\n     */\\n    function setForcedLiquidation(address vTokenBorrowed, bool enable) external {\\n        __setForcedLiquidation(vTokenBorrowed, enable);\\n    }\\n\\n    /** @notice Enables forced liquidations for a market. If forced liquidation is enabled,\\n     * borrows in the market may be liquidated regardless of the account liquidity\\n     * @dev Allows a privileged role to set enable/disable forced liquidations\\n     * @param vTokenBorrowed Borrowed vToken\\n     * @param enable Whether to enable forced liquidations\\n     */\\n    function _setForcedLiquidation(address vTokenBorrowed, bool enable) external {\\n        __setForcedLiquidation(vTokenBorrowed, enable);\\n    }\\n\\n    /**\\n     * @notice Enables forced liquidations for user's borrows in a certain market. If forced\\n     * liquidation is enabled, user's borrows in the market may be liquidated regardless of\\n     * the account liquidity. Forced liquidation may be enabled for a user even if it is not\\n     * enabled for the entire market.\\n     * @param borrower The address of the borrower\\n     * @param vTokenBorrowed Borrowed vToken\\n     * @param enable Whether to enable forced liquidations\\n     */\\n    function _setForcedLiquidationForUser(address borrower, address vTokenBorrowed, bool enable) external {\\n        ensureAllowed(\\\"_setForcedLiquidationForUser(address,address,bool)\\\");\\n        if (vTokenBorrowed != address(vaiController)) {\\n            ensureListed(getCorePoolMarket(vTokenBorrowed));\\n        }\\n        isForcedLiquidationEnabledForUser[borrower][vTokenBorrowed] = enable;\\n        emit IsForcedLiquidationEnabledForUserUpdated(borrower, vTokenBorrowed, enable);\\n    }\\n\\n    /**\\n     * @notice Set the address of the XVS token\\n     * @param xvs_ The address of the XVS token\\n     */\\n    function _setXVSToken(address xvs_) external {\\n        ensureAdmin();\\n        ensureNonzeroAddress(xvs_);\\n\\n        emit NewXVSToken(xvs, xvs_);\\n        xvs = xvs_;\\n    }\\n\\n    /**\\n     * @notice Set the address of the XVS vToken\\n     * @param xvsVToken_ The address of the XVS vToken\\n     */\\n    function _setXVSVToken(address xvsVToken_) external {\\n        ensureAdmin();\\n        ensureNonzeroAddress(xvsVToken_);\\n\\n        address underlying = VToken(xvsVToken_).underlying();\\n        require(underlying == xvs, \\\"invalid xvs vtoken address\\\");\\n\\n        emit NewXVSVToken(xvsVToken, xvsVToken_);\\n        xvsVToken = xvsVToken_;\\n    }\\n\\n    /**\\n     * @notice Adds/Removes an account to the flash loan whitelist\\n     * @param account The account to authorize for flash loans\\n     * @param _isWhiteListed True to whitelist the account for flash loans, false to remove from whitelist\\n     */\\n    function setWhiteListFlashLoanAccount(address account, bool _isWhiteListed) external {\\n        ensureAllowed(\\\"setWhiteListFlashLoanAccount(address,bool)\\\");\\n        ensureNonzeroAddress(account);\\n\\n        authorizedFlashLoan[account] = _isWhiteListed;\\n        emit IsAccountFlashLoanWhitelisted(account, _isWhiteListed);\\n    }\\n\\n    /**\\n     * @notice Updates the label for a specific pool (excluding the Core Pool)\\n     * @param poolId ID of the pool to update\\n     * @param newLabel The new label for the pool\\n     * @custom:error InvalidOperationForCorePool Reverts when attempting to call pool-specific methods on the Core Pool\\n     * @custom:error PoolDoesNotExist Reverts if the target pool ID does not exist\\n     * @custom:error EmptyPoolLabel Reverts if the provided label is an empty string\\n     * @custom:event PoolLabelUpdated Emitted after the pool label is updated\\n     */\\n    function setPoolLabel(uint96 poolId, string calldata newLabel) external {\\n        ensureAllowed(\\\"setPoolLabel(uint96,string)\\\");\\n\\n        if (poolId > lastPoolId) revert PoolDoesNotExist(poolId);\\n        if (poolId == corePoolId) revert InvalidOperationForCorePool();\\n        if (bytes(newLabel).length == 0) revert EmptyPoolLabel();\\n\\n        PoolData storage pool = pools[poolId];\\n\\n        if (keccak256(bytes(pool.label)) == keccak256(bytes(newLabel))) {\\n            return;\\n        }\\n\\n        emit PoolLabelUpdated(poolId, pool.label, newLabel);\\n        pool.label = newLabel;\\n    }\\n\\n    /**\\n     * @notice updates active status for a specific pool (excluding the Core Pool)\\n     * @param poolId id of the pool to update\\n     * @param active true to enable, false to disable\\n     * @custom:error InvalidOperationForCorePool Reverts when attempting to call pool-specific methods on the Core Pool.\\n     * @custom:error PoolDoesNotExist Reverts if the target pool ID does not exist.\\n     * @custom:event PoolActiveStatusUpdated Emitted after the pool active status is updated.\\n     */\\n    function setPoolActive(uint96 poolId, bool active) external {\\n        ensureAllowed(\\\"setPoolActive(uint96,bool)\\\");\\n\\n        if (poolId > lastPoolId) revert PoolDoesNotExist(poolId);\\n        if (poolId == corePoolId) revert InvalidOperationForCorePool();\\n\\n        PoolData storage pool = pools[poolId];\\n\\n        if (pool.isActive == active) {\\n            return;\\n        }\\n\\n        emit PoolActiveStatusUpdated(poolId, pool.isActive, active);\\n        pool.isActive = active;\\n    }\\n\\n    /**\\n     * @notice Updates the `allowCorePoolFallback` flag for a specific pool (excluding the Core Pool).\\n     * @param poolId ID of the pool to update.\\n     * @param allowFallback True to allow fallback to Core Pool, false to disable.\\n     * @custom:error InvalidOperationForCorePool Reverts when attempting to call pool-specific methods on the Core Pool.\\n     * @custom:error PoolDoesNotExist Reverts if the target pool ID does not exist.\\n     * @custom:event PoolFallbackStatusUpdated Emitted after the pool fallback flag is updated.\\n     */\\n    function setAllowCorePoolFallback(uint96 poolId, bool allowFallback) external {\\n        ensureAllowed(\\\"setAllowCorePoolFallback(uint96,bool)\\\");\\n\\n        if (poolId > lastPoolId) revert PoolDoesNotExist(poolId);\\n        if (poolId == corePoolId) revert InvalidOperationForCorePool();\\n\\n        PoolData storage pool = pools[poolId];\\n\\n        if (pool.allowCorePoolFallback == allowFallback) {\\n            return;\\n        }\\n\\n        emit PoolFallbackStatusUpdated(poolId, pool.allowCorePoolFallback, allowFallback);\\n        pool.allowCorePoolFallback = allowFallback;\\n    }\\n\\n    /**\\n     * @notice Updates the `isBorrowAllowed` flag for a market in a pool.\\n     * @param poolId The ID of the pool.\\n     * @param vToken The address of the market (vToken).\\n     * @param borrowAllowed The new borrow allowed status.\\n     * @custom:error PoolDoesNotExist Reverts if the pool ID is invalid.\\n     * @custom:error MarketConfigNotFound Reverts if the market is not listed in the pool.\\n     * @custom:event BorrowAllowedUpdated Emitted after the borrow permission for a market is updated.\\n     */\\n    function setIsBorrowAllowed(uint96 poolId, address vToken, bool borrowAllowed) external {\\n        ensureAllowed(\\\"setIsBorrowAllowed(uint96,address,bool)\\\");\\n\\n        if (poolId > lastPoolId) revert PoolDoesNotExist(poolId);\\n\\n        PoolMarketId index = getPoolMarketIndex(poolId, vToken);\\n        Market storage m = _poolMarkets[index];\\n\\n        if (!m.isListed) {\\n            revert MarketConfigNotFound();\\n        }\\n\\n        if (m.isBorrowAllowed == borrowAllowed) {\\n            return;\\n        }\\n\\n        emit BorrowAllowedUpdated(poolId, vToken, m.isBorrowAllowed, borrowAllowed);\\n        m.isBorrowAllowed = borrowAllowed;\\n    }\\n\\n    /**\\n     * @dev Updates the valid price oracle. Used by _setPriceOracle and setPriceOracle\\n     * @param newOracle The new price oracle to be set\\n     * @return uint256 0=success, otherwise reverted\\n     */\\n    function __setPriceOracle(\\n        ResilientOracleInterface newOracle\\n    ) internal compareAddress(address(oracle), address(newOracle)) returns (uint256) {\\n        // Check caller is admin\\n        ensureAdmin();\\n        ensureNonzeroAddress(address(newOracle));\\n\\n        // Track the old oracle for the comptroller\\n        ResilientOracleInterface oldOracle = oracle;\\n\\n        // Set comptroller's oracle to newOracle\\n        oracle = newOracle;\\n\\n        // Emit NewPriceOracle(oldOracle, newOracle)\\n        emit NewPriceOracle(oldOracle, newOracle);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @dev Updates the close factor. Used by _setCloseFactor and setCloseFactor\\n     * @param newCloseFactorMantissa The new close factor to be set\\n     * @return uint256 0=success, otherwise reverted\\n     */\\n    function __setCloseFactor(\\n        uint256 newCloseFactorMantissa\\n    ) internal compareValue(closeFactorMantissa, newCloseFactorMantissa) returns (uint256) {\\n        // Check caller is admin\\n        ensureAdmin();\\n\\n        Exp memory newCloseFactorExp = Exp({ mantissa: newCloseFactorMantissa });\\n\\n        //-- Check close factor <= 0.9\\n        Exp memory highLimit = Exp({ mantissa: closeFactorMaxMantissa });\\n        //-- Check close factor >= 0.05\\n        Exp memory lowLimit = Exp({ mantissa: closeFactorMinMantissa });\\n\\n        if (lessThanExp(highLimit, newCloseFactorExp) || greaterThanExp(lowLimit, newCloseFactorExp)) {\\n            return fail(Error.INVALID_CLOSE_FACTOR, FailureInfo.SET_CLOSE_FACTOR_VALIDATION);\\n        }\\n\\n        uint256 oldCloseFactorMantissa = closeFactorMantissa;\\n        closeFactorMantissa = newCloseFactorMantissa;\\n        emit NewCloseFactor(oldCloseFactorMantissa, newCloseFactorMantissa);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @dev Updates the collateral factor and the liquidation threshold. Used by setCollateralFactor\\n     * @param poolId The ID of the pool.\\n     * @param vToken The market to set the factor on\\n     * @param newCollateralFactorMantissa The new collateral factor to be set\\n     * @param newLiquidationThresholdMantissa The new liquidation threshold to be set\\n     * @return uint256 0=success, otherwise reverted\\n     */\\n    function __setCollateralFactor(\\n        uint96 poolId,\\n        VToken vToken,\\n        uint256 newCollateralFactorMantissa,\\n        uint256 newLiquidationThresholdMantissa\\n    ) internal returns (uint256) {\\n        ensureNonzeroAddress(address(vToken));\\n\\n        // Check if pool exists\\n        if (poolId > lastPoolId) revert PoolDoesNotExist(poolId);\\n\\n        // Verify market is listed in the pool\\n        Market storage market = _poolMarkets[getPoolMarketIndex(poolId, address(vToken))];\\n        ensureListed(market);\\n\\n        //-- Check collateral factor <= 1\\n        if (newCollateralFactorMantissa > mantissaOne) {\\n            return fail(Error.INVALID_COLLATERAL_FACTOR, FailureInfo.SET_COLLATERAL_FACTOR_VALIDATION);\\n        }\\n\\n        // If collateral factor != 0, fail if price == 0\\n        if (newCollateralFactorMantissa != 0 && oracle.getUnderlyingPrice(address(vToken)) == 0) {\\n            return fail(Error.PRICE_ERROR, FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE);\\n        }\\n\\n        // Ensure that liquidation threshold <= 1\\n        if (newLiquidationThresholdMantissa > mantissaOne) {\\n            return fail(Error.INVALID_LIQUIDATION_THRESHOLD, FailureInfo.SET_LIQUIDATION_THRESHOLD_VALIDATION);\\n        }\\n\\n        // Ensure that liquidation threshold >= CF\\n        if (newLiquidationThresholdMantissa < newCollateralFactorMantissa) {\\n            return\\n                fail(\\n                    Error.INVALID_LIQUIDATION_THRESHOLD,\\n                    FailureInfo.COLLATERAL_FACTOR_GREATER_THAN_LIQUIDATION_THRESHOLD\\n                );\\n        }\\n\\n        // Set market's collateral factor to new collateral factor, remember old value\\n        uint256 oldCollateralFactorMantissa = market.collateralFactorMantissa;\\n        if (newCollateralFactorMantissa != oldCollateralFactorMantissa) {\\n            market.collateralFactorMantissa = newCollateralFactorMantissa;\\n\\n            // Emit event with poolId, asset, old collateral factor, and new collateral factor\\n            emit NewCollateralFactor(poolId, vToken, oldCollateralFactorMantissa, newCollateralFactorMantissa);\\n        }\\n\\n        uint256 oldLiquidationThresholdMantissa = market.liquidationThresholdMantissa;\\n        if (newLiquidationThresholdMantissa != oldLiquidationThresholdMantissa) {\\n            market.liquidationThresholdMantissa = newLiquidationThresholdMantissa;\\n\\n            emit NewLiquidationThreshold(\\n                poolId,\\n                vToken,\\n                oldLiquidationThresholdMantissa,\\n                newLiquidationThresholdMantissa\\n            );\\n        }\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @dev Updates the liquidation incentive. Used by setLiquidationIncentive\\n     * @param poolId The ID of the pool.\\n     * @param vToken The market to set the Incentive for\\n     * @param newLiquidationIncentiveMantissa The new liquidation incentive to be set\\n     * @return uint256 0=success, otherwise reverted\\n     */\\n    function __setLiquidationIncentive(\\n        uint96 poolId,\\n        address vToken,\\n        uint256 newLiquidationIncentiveMantissa\\n    )\\n        internal\\n        compareValue(\\n            _poolMarkets[getPoolMarketIndex(poolId, vToken)].liquidationIncentiveMantissa,\\n            newLiquidationIncentiveMantissa\\n        )\\n        returns (uint256)\\n    {\\n        // Check if pool exists\\n        if (poolId > lastPoolId) revert PoolDoesNotExist(poolId);\\n\\n        // Verify market is listed in the pool\\n        Market storage market = _poolMarkets[getPoolMarketIndex(poolId, vToken)];\\n        ensureListed(market);\\n\\n        require(newLiquidationIncentiveMantissa >= mantissaOne, \\\"incentive < 1e18\\\");\\n\\n        emit NewLiquidationIncentive(\\n            poolId,\\n            vToken,\\n            market.liquidationIncentiveMantissa,\\n            newLiquidationIncentiveMantissa\\n        );\\n\\n        // Set liquidation incentive to new incentive\\n        market.liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @dev Updates the borrow caps. Used by _setMarketBorrowCaps and setMarketBorrowCaps\\n     * @param vTokens The markets to set the borrow caps on\\n     * @param newBorrowCaps The new borrow caps to be set\\n     */\\n    function __setMarketBorrowCaps(VToken[] memory vTokens, uint256[] memory newBorrowCaps) internal {\\n        ensureAllowed(\\\"_setMarketBorrowCaps(address[],uint256[])\\\");\\n\\n        uint256 numMarkets = vTokens.length;\\n        uint256 numBorrowCaps = newBorrowCaps.length;\\n\\n        require(numMarkets != 0 && numMarkets == numBorrowCaps, \\\"invalid input\\\");\\n\\n        for (uint256 i; i < numMarkets; ++i) {\\n            borrowCaps[address(vTokens[i])] = newBorrowCaps[i];\\n            emit NewBorrowCap(vTokens[i], newBorrowCaps[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates the supply caps. Used by _setMarketSupplyCaps and setMarketSupplyCaps\\n     * @param vTokens The markets to set the supply caps on\\n     * @param newSupplyCaps The new supply caps to be set\\n     */\\n    function __setMarketSupplyCaps(VToken[] memory vTokens, uint256[] memory newSupplyCaps) internal {\\n        ensureAllowed(\\\"_setMarketSupplyCaps(address[],uint256[])\\\");\\n\\n        uint256 numMarkets = vTokens.length;\\n        uint256 numSupplyCaps = newSupplyCaps.length;\\n\\n        require(numMarkets != 0 && numMarkets == numSupplyCaps, \\\"invalid input\\\");\\n\\n        for (uint256 i; i < numMarkets; ++i) {\\n            supplyCaps[address(vTokens[i])] = newSupplyCaps[i];\\n            emit NewSupplyCap(vTokens[i], newSupplyCaps[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates the prime token. Used by _setPrimeToken and setPrimeToken\\n     * @param _prime The new prime token to be set\\n     * @return uint256 0=success, otherwise reverted\\n     */\\n    function __setPrimeToken(IPrime _prime) internal returns (uint) {\\n        ensureAdmin();\\n        ensureNonzeroAddress(address(_prime));\\n\\n        IPrime oldPrime = prime;\\n        prime = _prime;\\n        emit NewPrimeToken(oldPrime, _prime);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @dev Updates the forced liquidation. Used by _setForcedLiquidation and setForcedLiquidation\\n     * @param vTokenBorrowed The market to set the forced liquidation on\\n     * @param enable Whether to enable forced liquidations\\n     */\\n    function __setForcedLiquidation(address vTokenBorrowed, bool enable) internal {\\n        ensureAllowed(\\\"_setForcedLiquidation(address,bool)\\\");\\n        if (vTokenBorrowed != address(vaiController)) {\\n            ensureListed(getCorePoolMarket(vTokenBorrowed));\\n        }\\n        isForcedLiquidationEnabled[vTokenBorrowed] = enable;\\n        emit IsForcedLiquidationEnabledUpdated(vTokenBorrowed, enable);\\n    }\\n\\n    /**\\n     * @dev Updates the actions paused. Used by _setActionsPaused and setActionsPaused\\n     * @param markets_ The markets to set the actions paused on\\n     * @param actions_ The actions to set the paused state on\\n     * @param paused_ The new paused state to be set\\n     */\\n    function __setActionsPaused(address[] memory markets_, Action[] memory actions_, bool paused_) internal {\\n        ensureAllowed(\\\"_setActionsPaused(address[],uint8[],bool)\\\");\\n\\n        uint256 numMarkets = markets_.length;\\n        uint256 numActions = actions_.length;\\n        for (uint256 marketIdx; marketIdx < numMarkets; ++marketIdx) {\\n            for (uint256 actionIdx; actionIdx < numActions; ++actionIdx) {\\n                setActionPausedInternal(markets_[marketIdx], actions_[actionIdx], paused_);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaeb377fc10cdaabfacceec996fe66f111ac6396b7f9bd9aa1afb7907cb62db7f\",\"license\":\"BSD-3-Clause\"},\"contracts/Comptroller/Diamond/interfaces/IFacetBase.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.25;\\n\\nimport { Action } from \\\"../../../Comptroller/ComptrollerInterface.sol\\\";\\nimport { PoolMarketId } from \\\"../../../Comptroller/Types/PoolMarketId.sol\\\";\\n\\nenum WeightFunction {\\n    /// @notice Use the collateral factor of the asset for weighting\\n    USE_COLLATERAL_FACTOR,\\n    /// @notice Use the liquidation threshold of the asset for weighting\\n    USE_LIQUIDATION_THRESHOLD\\n}\\n\\ninterface IFacetBase {\\n    /**\\n     * @notice The initial XVS rewards index for a market\\n     */\\n    function venusInitialIndex() external pure returns (uint224);\\n\\n    /**\\n     * @notice Checks if a certain action is paused on a market\\n     * @param action Action id\\n     * @param market vToken address\\n     */\\n    function actionPaused(address market, Action action) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the XVS address\\n     * @return The address of XVS token\\n     */\\n    function getXVSAddress() external view returns (address);\\n\\n    function getPoolMarketIndex(uint96 poolId, address vToken) external pure returns (PoolMarketId);\\n\\n    function corePoolId() external pure returns (uint96);\\n}\\n\",\"keccak256\":\"0x454a2e213a5f54fbe7991193b78ae23406234f465c9806f75ee7bf2fe6d1531c\",\"license\":\"BSD-3-Clause\"},\"contracts/Comptroller/Diamond/interfaces/ISetterFacet.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.25;\\n\\nimport { ResilientOracleInterface } from \\\"@venusprotocol/oracle/contracts/interfaces/OracleInterface.sol\\\";\\nimport { VToken } from \\\"../../../Tokens/VTokens/VToken.sol\\\";\\nimport { Action } from \\\"../../ComptrollerInterface.sol\\\";\\nimport { VAIControllerInterface } from \\\"../../../Tokens/VAI/VAIControllerInterface.sol\\\";\\nimport { ComptrollerLensInterface } from \\\"../../../Comptroller/ComptrollerLensInterface.sol\\\";\\nimport { IPrime } from \\\"../../../Tokens/Prime/IPrime.sol\\\";\\n\\ninterface ISetterFacet {\\n    function setPriceOracle(ResilientOracleInterface newOracle) external returns (uint256);\\n\\n    function _setPriceOracle(ResilientOracleInterface newOracle) external returns (uint256);\\n\\n    function setCloseFactor(uint256 newCloseFactorMantissa) external returns (uint256);\\n\\n    function _setCloseFactor(uint256 newCloseFactorMantissa) external returns (uint256);\\n\\n    function _setAccessControl(address newAccessControlAddress) external returns (uint256);\\n\\n    function setCollateralFactor(\\n        VToken vToken,\\n        uint256 newCollateralFactorMantissa,\\n        uint256 newLiquidationThresholdMantissa\\n    ) external returns (uint256);\\n\\n    function setCollateralFactor(\\n        uint96 poolId,\\n        VToken vToken,\\n        uint256 newCollateralFactorMantissa,\\n        uint256 newLiquidationThresholdMantissa\\n    ) external returns (uint256);\\n\\n    function setLiquidationIncentive(\\n        address vToken,\\n        uint256 newLiquidationIncentiveMantissa\\n    ) external returns (uint256);\\n\\n    function setLiquidationIncentive(\\n        uint96 poolId,\\n        address vToken,\\n        uint256 newLiquidationIncentiveMantissa\\n    ) external returns (uint256);\\n\\n    function _setLiquidatorContract(address newLiquidatorContract_) external;\\n\\n    function _setPauseGuardian(address newPauseGuardian) external returns (uint256);\\n\\n    function setMarketBorrowCaps(VToken[] calldata vTokens, uint256[] calldata newBorrowCaps) external;\\n\\n    function _setMarketBorrowCaps(VToken[] calldata vTokens, uint256[] calldata newBorrowCaps) external;\\n\\n    function setMarketSupplyCaps(VToken[] calldata vTokens, uint256[] calldata newSupplyCaps) external;\\n\\n    function _setMarketSupplyCaps(VToken[] calldata vTokens, uint256[] calldata newSupplyCaps) external;\\n\\n    function _setProtocolPaused(bool state) external returns (bool);\\n\\n    function setActionsPaused(address[] calldata markets, Action[] calldata actions, bool paused) external;\\n\\n    function _setActionsPaused(address[] calldata markets, Action[] calldata actions, bool paused) external;\\n\\n    function _setVAIController(VAIControllerInterface vaiController_) external returns (uint256);\\n\\n    function _setVAIMintRate(uint256 newVAIMintRate) external returns (uint256);\\n\\n    function setMintedVAIOf(address owner, uint256 amount) external returns (uint256);\\n\\n    function _setTreasuryData(\\n        address newTreasuryGuardian,\\n        address newTreasuryAddress,\\n        uint256 newTreasuryPercent\\n    ) external returns (uint256);\\n\\n    function _setComptrollerLens(ComptrollerLensInterface comptrollerLens_) external returns (uint256);\\n\\n    function _setVenusVAIVaultRate(uint256 venusVAIVaultRate_) external;\\n\\n    function _setVAIVaultInfo(address vault_, uint256 releaseStartBlock_, uint256 minReleaseAmount_) external;\\n\\n    function _setForcedLiquidation(address vToken, bool enable) external;\\n\\n    function setPrimeToken(IPrime _prime) external returns (uint256);\\n\\n    function _setPrimeToken(IPrime _prime) external returns (uint);\\n\\n    function setForcedLiquidation(address vTokenBorrowed, bool enable) external;\\n\\n    function _setForcedLiquidationForUser(address borrower, address vTokenBorrowed, bool enable) external;\\n\\n    function _setXVSToken(address xvs_) external;\\n\\n    function _setXVSVToken(address xvsVToken_) external;\\n\\n    function setWhiteListFlashLoanAccount(address account, bool _isWhiteListed) external;\\n\\n    function setIsBorrowAllowed(uint96 poolId, address vToken, bool borrowAllowed) external;\\n\\n    function setPoolActive(uint96 poolId, bool active) external;\\n\\n    function setPoolLabel(uint96 poolId, string calldata newLabel) external;\\n\\n    function setAllowCorePoolFallback(uint96 poolId, bool allowFallback) external;\\n}\\n\",\"keccak256\":\"0xbd1628a053e7f19e8028f6fb2bcf585c926219bcc86e34a59c9707bfa7a85b6f\",\"license\":\"BSD-3-Clause\"},\"contracts/Comptroller/Types/PoolMarketId.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.25;\\n\\n/// @notice Strongly-typed identifier for pool markets mapping keys\\n/// @dev Underlying storage is bytes32: first 12 bytes (96 bits) = poolId, last 20 bytes = vToken address\\ntype PoolMarketId is bytes32;\\n\\n \",\"keccak256\":\"0xf68bde30ddd6f8bf08194b493991c2a2ebd3814972f93a804beb9b366004cbe3\",\"license\":\"BSD-3-Clause\"},\"contracts/FlashLoan/interfaces/IFlashLoanSimpleReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\n/// @title IFlashLoanSimpleReceiver\\n/// @notice Interface for flashLoan receiver contract, which execute custom logic with flash-borrowed asset.\\n/// @dev This interface defines the method that must be implemented by any contract wishing to interact with the flashLoan system.\\n///      Contracts must ensure they have the means to repay both the flashLoan amount and the associated premium (fee).\\ninterface IFlashLoanSimpleReceiver {\\n    /**\\n     * @notice Executes an operation after receiving the flash-borrowed asset\\n     * @dev Ensure that the contract can return the debt + premium, e.g., has\\n     *      enough funds to repay and has to transfer the debt + premium to the VToken\\n     * @param asset The address of the flash-borrowed asset\\n     * @param amount The amount of the flash-borrowed asset\\n     * @param premium The premium (fee) associated with flash-borrowed asset\\n     * @param onBehalf The address of the user whose debt position will be used for the flashLoan.\\n     * @param param The byte-encoded param passed when initiating the flashLoan\\n     * @return True if the execution of the operation succeeds, false otherwise\\n     */\\n    function executeOperation(\\n        address asset,\\n        uint256 amount,\\n        uint256 premium,\\n        address onBehalf,\\n        bytes calldata param\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe3a0a1b978316e4b8d101680f03b8369a9ea50b307d99d40ec9e2c374fb8fa5f\",\"license\":\"BSD-3-Clause\"},\"contracts/InterestRateModels/InterestRateModelV8.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\n/**\\n * @title Venus's InterestRateModelV8 Interface\\n * @author Venus\\n */\\nabstract contract InterestRateModelV8 {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    bool public constant isInterestRateModel = true;\\n\\n    /**\\n     * @notice Calculates the current borrow interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amnount of reserves the market has\\n     * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getBorrowRate(uint256 cash, uint256 borrows, uint256 reserves) external view virtual returns (uint256);\\n\\n    /**\\n     * @notice Calculates the current supply interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amnount of reserves the market has\\n     * @param reserveFactorMantissa The current reserve factor the market has\\n     * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getSupplyRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves,\\n        uint256 reserveFactorMantissa\\n    ) external view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x4d5595e761d50a1431c34b39e72dde6c09b0ebccdbe8c5c4e12c8a2ac7b796e1\",\"license\":\"BSD-3-Clause\"},\"contracts/Tokens/Prime/IPrime.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\n/**\\n * @title IPrime\\n * @author Venus\\n * @notice Interface for Prime Token\\n */\\ninterface IPrime {\\n    /**\\n     * @notice Executed by XVSVault whenever user's XVSVault balance changes\\n     * @param user the account address whose balance was updated\\n     */\\n    function xvsUpdated(address user) external;\\n\\n    /**\\n     * @notice accrues interest and updates score for an user for a specific market\\n     * @param user the account address for which to accrue interest and update score\\n     * @param market the market for which to accrue interest and update score\\n     */\\n    function accrueInterestAndUpdateScore(address user, address market) external;\\n\\n    /**\\n     * @notice Distributes income from market since last distribution\\n     * @param vToken the market for which to distribute the income\\n     */\\n    function accrueInterest(address vToken) external;\\n\\n    /**\\n     * @notice Returns if user is a prime holder\\n     * @param isPrimeHolder returns if the user is a prime holder\\n     */\\n    function isUserPrimeHolder(address user) external view returns (bool isPrimeHolder);\\n}\\n\",\"keccak256\":\"0x566ad76b73bfe08c37ec0b06a6e3006171a47e00711270aae92356dbefc6ee73\",\"license\":\"BSD-3-Clause\"},\"contracts/Tokens/VAI/VAIControllerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.25;\\n\\nimport { VTokenInterface } from \\\"../VTokens/VTokenInterfaces.sol\\\";\\n\\ninterface VAIControllerInterface {\\n    function mintVAI(uint256 mintVAIAmount) external returns (uint256);\\n\\n    function repayVAI(uint256 amount) external returns (uint256, uint256);\\n\\n    function repayVAIBehalf(address borrower, uint256 amount) external returns (uint256, uint256);\\n\\n    function liquidateVAI(\\n        address borrower,\\n        uint256 repayAmount,\\n        VTokenInterface vTokenCollateral\\n    ) external returns (uint256, uint256);\\n\\n    function getMintableVAI(address minter) external view returns (uint256, uint256);\\n\\n    function getVAIAddress() external view returns (address);\\n\\n    function getVAIRepayAmount(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x69d2f9e13b7fbf0a29885048503642372d9ba3d37f2427d4b9cffb87eddd925b\",\"license\":\"BSD-3-Clause\"},\"contracts/Tokens/VTokens/VToken.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.25;\\n\\nimport { IAccessControlManagerV8 } from \\\"@venusprotocol/governance-contracts/contracts/Governance/IAccessControlManagerV8.sol\\\";\\nimport { IProtocolShareReserve } from \\\"../../external/IProtocolShareReserve.sol\\\";\\nimport { ComptrollerInterface, IComptroller } from \\\"../../Comptroller/ComptrollerInterface.sol\\\";\\nimport { TokenErrorReporter } from \\\"../../Utils/ErrorReporter.sol\\\";\\nimport { Exponential } from \\\"../../Utils/Exponential.sol\\\";\\nimport { InterestRateModelV8 } from \\\"../../InterestRateModels/InterestRateModelV8.sol\\\";\\nimport { VTokenInterface } from \\\"./VTokenInterfaces.sol\\\";\\nimport { IFlashLoanSimpleReceiver } from \\\"../../FlashLoan/interfaces/IFlashLoanSimpleReceiver.sol\\\";\\n\\n/**\\n * @title Venus's vToken Contract\\n * @notice Abstract base for vTokens\\n * @author Venus\\n */\\nabstract contract VToken is VTokenInterface, Exponential, TokenErrorReporter {\\n    struct MintLocalVars {\\n        MathError mathErr;\\n        uint exchangeRateMantissa;\\n        uint mintTokens;\\n        uint totalSupplyNew;\\n        uint accountTokensNew;\\n        uint actualMintAmount;\\n    }\\n\\n    struct RedeemLocalVars {\\n        MathError mathErr;\\n        uint exchangeRateMantissa;\\n        uint redeemTokens;\\n        uint redeemAmount;\\n        uint totalSupplyNew;\\n        uint accountTokensNew;\\n    }\\n\\n    struct BorrowLocalVars {\\n        MathError mathErr;\\n        uint accountBorrows;\\n        uint accountBorrowsNew;\\n        uint totalBorrowsNew;\\n    }\\n\\n    struct RepayBorrowLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint repayAmount;\\n        uint borrowerIndex;\\n        uint accountBorrows;\\n        uint accountBorrowsNew;\\n        uint totalBorrowsNew;\\n        uint actualRepayAmount;\\n    }\\n\\n    /*** Reentrancy Guard ***/\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     */\\n    modifier nonReentrant() {\\n        require(_notEntered, \\\"re-entered\\\");\\n        _notEntered = false;\\n        _;\\n        _notEntered = true; // get a gas-refund post-Istanbul\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    // @custom:event Emits Transfer event\\n    function transfer(address dst, uint256 amount) external override nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, msg.sender, dst, amount) == uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    // @custom:event Emits Transfer event\\n    function transferFrom(address src, address dst, uint256 amount) external override nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, src, dst, amount) == uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (type(uint256).max means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    // @custom:event Emits Approval event on successful approve\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\n        transferAllowances[msg.sender][spender] = amount;\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the underlying balance of the `owner`\\n     * @dev This also accrues interest in a transaction\\n     * @param owner The address of the account to query\\n     * @return The amount of underlying owned by `owner`\\n     */\\n    function balanceOfUnderlying(address owner) external override returns (uint) {\\n        Exp memory exchangeRate = Exp({ mantissa: exchangeRateCurrent() });\\n        (MathError mErr, uint balance) = mulScalarTruncate(exchangeRate, accountTokens[owner]);\\n        ensureNoMathError(mErr);\\n        return balance;\\n    }\\n\\n    /**\\n     * @notice Returns the current total borrows plus accrued interest\\n     * @return The total borrows with interest\\n     */\\n    function totalBorrowsCurrent() external override nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return totalBorrows;\\n    }\\n\\n    /**\\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\\n     * @param account The address whose balance should be calculated after updating borrowIndex\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceCurrent(address account) external override nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return borrowBalanceStored(account);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Will fail unless called by another vToken during the process of liquidation.\\n     *  Its absolutely critical to use msg.sender as the borrowed vToken and not a parameter.\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of vTokens to seize\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits Transfer event\\n    function seize(\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens\\n    ) external override nonReentrant returns (uint) {\\n        return seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\n    }\\n\\n    /**\\n     * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n     * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n     * @param newPendingAdmin New pending admin.\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits NewPendingAdmin event with old and new admin addresses\\n    function _setPendingAdmin(address payable newPendingAdmin) external override returns (uint) {\\n        // Check caller = admin\\n        ensureAdmin(msg.sender);\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n     * @dev Admin function for pending admin to accept role and update admin\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits NewAdmin event on successful acceptance\\n    // @custom:event Emits NewPendingAdmin event with null new pending admin\\n    function _acceptAdmin() external override returns (uint) {\\n        // Check caller is pendingAdmin\\n        if (msg.sender != pendingAdmin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\\n        }\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = payable(address(0));\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice accrues interest and sets a new reserve factor for the protocol using `_setReserveFactorFresh`\\n     * @dev Governor function to accrue interest and set a new reserve factor\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits NewReserveFactor event\\n    function _setReserveFactor(uint newReserveFactorMantissa_) external override nonReentrant returns (uint) {\\n        ensureAllowed(\\\"_setReserveFactor(uint256)\\\");\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors.\\n            return fail(Error(error), FailureInfo.SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED);\\n        }\\n\\n        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\\n        return _setReserveFactorFresh(newReserveFactorMantissa_);\\n    }\\n\\n    /**\\n     * @notice Sets the address of the access control manager of this contract\\n     * @dev Admin function to set the access control address\\n     * @param newAccessControlManagerAddress New address for the access control\\n     * @return uint 0=success, otherwise will revert\\n     */\\n    function setAccessControlManager(address newAccessControlManagerAddress) external returns (uint) {\\n        // Check caller is admin\\n        ensureAdmin(msg.sender);\\n\\n        ensureNonZeroAddress(newAccessControlManagerAddress);\\n\\n        emit NewAccessControlManager(accessControlManager, newAccessControlManagerAddress);\\n        accessControlManager = newAccessControlManagerAddress;\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring to protocol share reserve\\n     * @param reduceAmount_ Amount of reduction to reserves\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits ReservesReduced event\\n    function _reduceReserves(uint reduceAmount_) external virtual override nonReentrant returns (uint) {\\n        ensureAllowed(\\\"_reduceReserves(uint256)\\\");\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors.\\n            return fail(Error(error), FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED);\\n        }\\n\\n        // If reserves were reduced in accrueInterest\\n        if (reduceReservesBlockNumber == block.number) return (uint(Error.NO_ERROR));\\n        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n        return _reduceReservesFresh(reduceAmount_);\\n    }\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return The number of tokens allowed to be spent (type(uint256).max means infinite)\\n     */\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\n        return transferAllowances[owner][spender];\\n    }\\n\\n    /**\\n     * @notice Get the token balance of the `owner`\\n     * @param owner The address of the account to query\\n     * @return The number of tokens owned by `owner`\\n     */\\n    function balanceOf(address owner) external view override returns (uint256) {\\n        return accountTokens[owner];\\n    }\\n\\n    /**\\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\\n     * @dev This is used by comptroller to more efficiently perform liquidity checks.\\n     * @param account Address of the account to snapshot\\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\n     */\\n    function getAccountSnapshot(address account) external view override returns (uint, uint, uint, uint) {\\n        uint borrowBalance;\\n        uint exchangeRateMantissa;\\n\\n        MathError mErr;\\n\\n        (mErr, borrowBalance) = borrowBalanceStoredInternal(account);\\n        if (mErr != MathError.NO_ERROR) {\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\n        }\\n\\n        (mErr, exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (mErr != MathError.NO_ERROR) {\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\n        }\\n\\n        return (uint(Error.NO_ERROR), accountTokens[account], borrowBalance, exchangeRateMantissa);\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block supply interest rate for this vToken\\n     * @return The supply interest rate per block, scaled by 1e18\\n     */\\n    function supplyRatePerBlock() external view override returns (uint) {\\n        return interestRateModel.getSupplyRate(getCashPrior(), totalBorrows, totalReserves, reserveFactorMantissa);\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block borrow interest rate for this vToken\\n     * @return The borrow interest rate per block, scaled by 1e18\\n     */\\n    function borrowRatePerBlock() external view override returns (uint) {\\n        return interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, totalReserves);\\n    }\\n\\n    /**\\n     * @notice Get cash balance of this vToken in the underlying asset\\n     * @return The quantity of underlying asset owned by this contract\\n     */\\n    function getCash() external view override returns (uint) {\\n        return getCashPrior();\\n    }\\n\\n    /**\\n     * @notice Governance function to set new threshold of block difference after which funds will be sent to the protocol share reserve\\n     * @param newReduceReservesBlockDelta_ block difference value\\n     */\\n    function setReduceReservesBlockDelta(uint256 newReduceReservesBlockDelta_) external {\\n        require(newReduceReservesBlockDelta_ > 0, \\\"Invalid Input\\\");\\n        ensureAllowed(\\\"setReduceReservesBlockDelta(uint256)\\\");\\n        emit NewReduceReservesBlockDelta(reduceReservesBlockDelta, newReduceReservesBlockDelta_);\\n        reduceReservesBlockDelta = newReduceReservesBlockDelta_;\\n    }\\n\\n    /**\\n     * @notice Sets protocol share reserve contract address\\n     * @param protcolShareReserve_ The address of protocol share reserve contract\\n     */\\n    function setProtocolShareReserve(address payable protcolShareReserve_) external {\\n        // Check caller is admin\\n        ensureAdmin(msg.sender);\\n        ensureNonZeroAddress(protcolShareReserve_);\\n        emit NewProtocolShareReserve(protocolShareReserve, protcolShareReserve_);\\n        protocolShareReserve = protcolShareReserve_;\\n    }\\n\\n    /**\\n     * @notice Transfers the underlying asset to the specified address.\\n     * @dev Can only be called by the Comptroller contract. This function performs the actual transfer of the underlying\\n     *      asset by calling the `doTransferOut` internal function.\\n     *      - The caller must be the Comptroller contract.\\n     *      - If the `to` address is not the protocol share reserve, the flashLoanAmount is incremented by the amount transferred out.\\n     * @param to The address to which the underlying asset is to be transferred.\\n     * @param amount The amount of the underlying asset to transfer.\\n     * @custom:error InvalidComptroller is thrown if the caller is not the Comptroller.\\n     * @custom:event Emits TransferOutUnderlyingFlashLoan event on successful transfer of amount to receiver\\n     */\\n\\n    function transferOutUnderlyingFlashLoan(address payable to, uint256 amount) external nonReentrant {\\n        if (msg.sender != address(comptroller)) {\\n            revert InvalidComptroller();\\n        }\\n\\n        if (flashLoanAmount > 0) {\\n            revert FlashLoanAlreadyActive();\\n        }\\n        flashLoanAmount = amount;\\n        doTransferOut(to, amount);\\n        emit TransferOutUnderlyingFlashLoan(underlying, to, amount);\\n    }\\n\\n    /**\\n     * @notice Transfers the underlying asset from the specified address.\\n     * @dev Can only be called by the Comptroller contract. This function performs the actual transfer of the underlying\\n     *      asset by calling the `doTransferIn` internal function.\\n     *      - The caller must be the Comptroller contract.\\n     * @param from The address from which the underlying asset is to be transferred.\\n     * @param amountRepaid The amount of the underlying asset to transfer.\\n     * @param protocolFee The protocol fee amount to be transferred to the protocol share reserve.\\n     * @return actualAmountTransferred The actual amount transferred in.\\n     * @custom:error InvalidComptroller is thrown if the caller is not the Comptroller.\\n     * @custom:event Emits TransferInUnderlyingFlashLoan event on successful transfer of amount from the receiver to the vToken\\n     */\\n    function transferInUnderlyingFlashLoan(\\n        address payable from,\\n        uint256 amountRepaid,\\n        uint256 protocolFee\\n    ) external nonReentrant returns (uint256) {\\n        if (msg.sender != address(comptroller)) {\\n            revert InvalidComptroller();\\n        }\\n\\n        uint256 actualAmountTransferred = doTransferIn(from, amountRepaid);\\n\\n        // Transfer protocol fee to protocol share reserve\\n        doTransferOut(protocolShareReserve, protocolFee);\\n\\n        IProtocolShareReserve(protocolShareReserve).updateAssetsState(\\n            address(comptroller),\\n            underlying,\\n            IProtocolShareReserve.IncomeType.FLASHLOAN\\n        );\\n        flashLoanAmount = 0;\\n\\n        emit TransferInUnderlyingFlashLoan(underlying, from, actualAmountTransferred);\\n        return actualAmountTransferred;\\n    }\\n\\n    /**\\n     * @notice Executes a flashLoan operation.\\n     * @dev Transfers the amount to the receiver contract and ensures that the total repayment (amount + fee)\\n     *      is returned by the receiver contract after the operation. The function performs checks to ensure the validity\\n     *      of parameters, that flashLoan is enabled for the given asset, and that the total repayment is sufficient.\\n     *      Reverts on invalid parameters, disabled flashLoans, or insufficient repayment.\\n     *      requirements\\n     *      - The `receiver` address must not be the zero address.\\n     *      - FlashLoans must be enabled for the asset.\\n     *      - The `receiver` contract must repay the loan with the appropriate fee.\\n     * @param receiver The address of the contract that will receive the flashLoan and execute the operation.\\n     * @param amount The amount of asset to be loaned.\\n     * @param param Additional encoded parameters passed with the flash loan.\\n     * @custom:error FlashLoanNotEnabled is thrown if flash loans are disabled for the asset.\\n     * @custom:error SenderNotAuthorized is thrown if the 'msg.sender' is not authorized to execute flash loan.\\n     * @custom:error ExecuteFlashLoanFailed is thrown if the receiver contract fails to execute the operation.\\n     * @custom:error InsufficientRepayment is thrown if the repayment (amount + fee) is insufficient after the operation.\\n     * @custom:event Emits FlashLoanExecuted event on success\\n     */\\n    function executeFlashLoan(\\n        address payable receiver,\\n        uint256 amount,\\n        bytes calldata param\\n    ) external nonReentrant returns (uint256) {\\n        if (!isFlashLoanEnabled) {\\n            revert FlashLoanNotEnabled();\\n        }\\n\\n        ensureNonZeroAddress(receiver);\\n\\n        // Check if the caller is authorized to execute flash loans\\n        if (!comptroller.authorizedFlashLoan(msg.sender)) {\\n            revert SenderNotAuthorized(msg.sender);\\n        }\\n\\n        // Tracks the flashLoan amount before transferring amount to the receiver\\n        flashLoanAmount += amount;\\n\\n        // Transfer the underlying asset to the receiver\\n        doTransferOut(receiver, amount);\\n\\n        uint256 balanceBefore = getCashPrior();\\n        (uint256 totalFee, uint256 protocolFee) = calculateFlashLoanFee(amount);\\n        uint256 repayAmount = amount + totalFee;\\n\\n        // Call the execute operation on receiver contract\\n        if (!IFlashLoanSimpleReceiver(receiver).executeOperation(underlying, amount, totalFee, msg.sender, param)) {\\n            revert ExecuteFlashLoanFailed();\\n        }\\n\\n        doTransferIn(receiver, repayAmount);\\n        flashLoanAmount -= amount;\\n\\n        if ((getCashPrior() - balanceBefore) < repayAmount) revert InsufficientRepayment();\\n\\n        // Transfer protocol fee to protocol share reserve\\n        doTransferOut(protocolShareReserve, protocolFee);\\n\\n        IProtocolShareReserve(protocolShareReserve).updateAssetsState(\\n            address(comptroller),\\n            underlying,\\n            IProtocolShareReserve.IncomeType.FLASHLOAN\\n        );\\n\\n        emit FlashLoanExecuted(receiver, underlying, amount);\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets flash loan status for the market\\n     * @param enabled True to enable flash loans, false to disable\\n     * @custom:access Only Governance\\n     * @custom:event Emits FlashLoanStatusChanged event on success\\n     */\\n    function setFlashLoanEnabled(bool enabled) external returns (uint256) {\\n        ensureAllowed(\\\"setFlashLoanEnabled(bool)\\\");\\n\\n        if (isFlashLoanEnabled != enabled) {\\n            emit FlashLoanStatusChanged(isFlashLoanEnabled, enabled);\\n            isFlashLoanEnabled = enabled;\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Update flashLoan fee mantissa\\n     * @param flashLoanFeeMantissa_  FlashLoan fee, scaled by 1e18\\n     * @param flashLoanProtocolShare_ FlashLoan protocol fee share, transferred to protocol share reserve\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     * @custom:access Only Governance\\n     * @custom:event Emits FlashLoanFeeUpdated event on success\\n     */\\n    function setFlashLoanFeeMantissa(\\n        uint256 flashLoanFeeMantissa_,\\n        uint256 flashLoanProtocolShare_\\n    ) external returns (uint256) {\\n        // update the signature\\n        ensureAllowed(\\\"setFlashLoanFeeMantissa(uint256,uint256)\\\");\\n\\n        emit FlashLoanFeeUpdated(\\n            flashLoanFeeMantissa,\\n            flashLoanFeeMantissa_,\\n            flashLoanProtocolShareMantissa,\\n            flashLoanProtocolShare_\\n        );\\n        flashLoanFeeMantissa = flashLoanFeeMantissa_;\\n        flashLoanProtocolShareMantissa = flashLoanProtocolShare_;\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Initialize the money market\\n     * @param comptroller_ The address of the Comptroller\\n     * @param interestRateModel_ The address of the interest rate model\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n     * @param name_ EIP-20 name of this token\\n     * @param symbol_ EIP-20 symbol of this token\\n     * @param decimals_ EIP-20 decimal precision of this token\\n     */\\n    function initialize(\\n        ComptrollerInterface comptroller_,\\n        InterestRateModelV8 interestRateModel_,\\n        uint initialExchangeRateMantissa_,\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) public {\\n        ensureAdmin(msg.sender);\\n        require(\\n            accrualBlockNumber == 0 && borrowIndex == 0 && (initialExchangeRateMantissa_ > 0),\\n            \\\"market may only be initialized once\\\"\\n        );\\n\\n        // Set initial exchange rate\\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\\n\\n        // Set the comptroller\\n        uint ComptrollerErr = _setComptroller(comptroller_);\\n\\n        // Initialize block number and borrow index (block number mocks depend on comptroller being set)\\n        accrualBlockNumber = block.number;\\n        borrowIndex = mantissaOne;\\n\\n        // Set the interest rate model (depends on block number / borrow index)\\n        uint InterestModelErr = _setInterestRateModelFresh(interestRateModel_);\\n        require(\\n            (ComptrollerErr == uint(Error.NO_ERROR)) && (InterestModelErr == uint(Error.NO_ERROR)),\\n            \\\"comptroller or interest model initialization failed\\\"\\n        );\\n\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = decimals_;\\n\\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @notice Accrue interest then return the up-to-date exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateCurrent() public override nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return exchangeRateStored();\\n    }\\n\\n    /**\\n     * @notice Applies accrued interest to total borrows and reserves\\n     * @dev This calculates interest accrued from the last checkpointed block\\n     * up to the current block and writes new checkpoint to storage and\\n     * reduce spread reserves to protocol share reserve\\n     * if currentBlock - reduceReservesBlockNumber >= blockDelta\\n     */\\n    // @custom:event Emits AccrueInterest event\\n    function accrueInterest() public virtual override returns (uint) {\\n        /* Remember the initial block number */\\n        uint currentBlockNumber = block.number;\\n        uint accrualBlockNumberPrior = accrualBlockNumber;\\n\\n        /* Short-circuit accumulating 0 interest */\\n        if (accrualBlockNumberPrior == currentBlockNumber) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        /* Read the previous values out of storage */\\n        uint cashPrior = getCashPrior();\\n        uint borrowsPrior = totalBorrows;\\n        uint reservesPrior = totalReserves;\\n        uint borrowIndexPrior = borrowIndex;\\n\\n        /* Calculate the current borrow interest rate */\\n        uint borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior, borrowsPrior, reservesPrior);\\n        require(borrowRateMantissa <= borrowRateMaxMantissa, \\\"borrow rate is absurdly high\\\");\\n\\n        /* Calculate the number of blocks elapsed since the last accrual */\\n        (MathError mathErr, uint blockDelta) = subUInt(currentBlockNumber, accrualBlockNumberPrior);\\n        ensureNoMathError(mathErr);\\n\\n        /*\\n         * Calculate the interest accumulated into borrows and reserves and the new index:\\n         *  simpleInterestFactor = borrowRate * blockDelta\\n         *  interestAccumulated = simpleInterestFactor * totalBorrows\\n         *  totalBorrowsNew = interestAccumulated + totalBorrows\\n         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\\n         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\\n         */\\n\\n        Exp memory simpleInterestFactor;\\n        uint interestAccumulated;\\n        uint totalBorrowsNew;\\n        uint totalReservesNew;\\n        uint borrowIndexNew;\\n\\n        (mathErr, simpleInterestFactor) = mulScalar(Exp({ mantissa: borrowRateMantissa }), blockDelta);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\\n                    uint(mathErr)\\n                );\\n        }\\n\\n        (mathErr, interestAccumulated) = mulScalarTruncate(simpleInterestFactor, borrowsPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\\n                    uint(mathErr)\\n                );\\n        }\\n\\n        (mathErr, totalBorrowsNew) = addUInt(interestAccumulated, borrowsPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\\n                    uint(mathErr)\\n                );\\n        }\\n\\n        (mathErr, totalReservesNew) = mulScalarTruncateAddUInt(\\n            Exp({ mantissa: reserveFactorMantissa }),\\n            interestAccumulated,\\n            reservesPrior\\n        );\\n        if (mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\\n                    uint(mathErr)\\n                );\\n        }\\n\\n        (mathErr, borrowIndexNew) = mulScalarTruncateAddUInt(simpleInterestFactor, borrowIndexPrior, borrowIndexPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\\n                    uint(mathErr)\\n                );\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accrualBlockNumber = currentBlockNumber;\\n        borrowIndex = borrowIndexNew;\\n        totalBorrows = totalBorrowsNew;\\n        totalReserves = totalReservesNew;\\n\\n        (mathErr, blockDelta) = subUInt(currentBlockNumber, reduceReservesBlockNumber);\\n        ensureNoMathError(mathErr);\\n        if (blockDelta >= reduceReservesBlockDelta) {\\n            reduceReservesBlockNumber = currentBlockNumber;\\n            if (cashPrior < totalReservesNew) {\\n                _reduceReservesFresh(cashPrior);\\n            } else {\\n                _reduceReservesFresh(totalReservesNew);\\n            }\\n        }\\n\\n        /* We emit an AccrueInterest event */\\n        emit AccrueInterest(cashPrior, interestAccumulated, borrowIndexNew, totalBorrowsNew);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets a new comptroller for the market\\n     * @dev Admin function to set a new comptroller\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits NewComptroller event\\n    function _setComptroller(ComptrollerInterface newComptroller) public override returns (uint) {\\n        // Check caller is admin\\n        ensureAdmin(msg.sender);\\n\\n        // Ensure invoke comptroller.isComptroller() returns true\\n        require(newComptroller.isComptroller(), \\\"marker method returned false\\\");\\n\\n        // Emit NewComptroller(oldComptroller, newComptroller)\\n        emit NewComptroller(comptroller, newComptroller);\\n\\n        // Set market's comptroller to newComptroller\\n        comptroller = newComptroller;\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and updates the interest rate model using _setInterestRateModelFresh\\n     * @dev Governance function to accrue interest and update the interest rate model\\n     * @param newInterestRateModel_ The new interest rate model to use\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function _setInterestRateModel(InterestRateModelV8 newInterestRateModel_) public override returns (uint) {\\n        ensureAllowed(\\\"_setInterestRateModel(address)\\\");\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors.\\n            return fail(Error(error), FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED);\\n        }\\n\\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\\n        return _setInterestRateModelFresh(newInterestRateModel_);\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the VToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStored() public view override returns (uint) {\\n        (MathError err, uint result) = exchangeRateStoredInternal();\\n        ensureNoMathError(err);\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceStored(address account) public view override returns (uint) {\\n        (MathError err, uint result) = borrowBalanceStoredInternal(account);\\n        ensureNoMathError(err);\\n        return result;\\n    }\\n\\n    /**\\n     * @notice open a debt position for the borrower\\n     * @dev This function checks if the borrow is allowed, accrues interest, and updates the borrower's balance.\\n     *      It also emits a Borrow event and calls the comptroller's borrowVerify function.\\n     *      It reverts if the borrow is not allowed, if the market's block number is not current, or if the protocol has insufficient cash.\\n     * @param borrower The address of the borrower\\n     * @param borrowAmount The amount of underlying asset to borrow\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     * @custom:error InvalidComptroller is thrown if the caller is not the Comptroller.\\n     */\\n    function borrowDebtPosition(address borrower, uint borrowAmount) external override returns (uint256) {\\n        // Reverts if the caller is not the comptroller\\n        if (msg.sender != address(comptroller)) {\\n            revert InvalidComptroller();\\n        }\\n\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors.\\n            return fail(Error(error), FailureInfo.BORROW_ACCRUE_INTEREST_FAILED);\\n        }\\n\\n        // borrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return borrowFresh(borrower, payable(address(0)), borrowAmount, false);\\n    }\\n\\n    /**\\n     * @notice Calculates the total fee and protocol fee for a flash loan..\\n     * @param amount The amount of the flash loan.\\n     * @return totalFee The total fee for the flash loan.\\n     * @return protocolFee The portion of the total fee allocated to the protocol.\\n     */\\n    function calculateFlashLoanFee(uint256 amount) public view returns (uint256, uint256) {\\n        MathError mErr;\\n        uint256 totalFee;\\n        uint256 protocolFee;\\n\\n        (mErr, totalFee) = mulScalarTruncate(Exp({ mantissa: amount }), flashLoanFeeMantissa);\\n        ensureNoMathError(mErr);\\n\\n        (mErr, protocolFee) = mulScalarTruncate(Exp({ mantissa: totalFee }), flashLoanProtocolShareMantissa);\\n        ensureNoMathError(mErr);\\n\\n        return (totalFee, protocolFee);\\n    }\\n\\n    /**\\n     * @notice Transfers `tokens` tokens from `src` to `dst` by `spender`\\n     * @dev Called by both `transfer` and `transferFrom` internally\\n     * @param spender The address of the account performing the transfer\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param tokens The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferTokens(address spender, address src, address dst, uint tokens) internal returns (uint) {\\n        /* Fail if transfer not allowed */\\n        uint allowed = comptroller.transferAllowed(address(this), src, dst, tokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.TRANSFER_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Do not allow self-transfers */\\n        if (src == dst) {\\n            return fail(Error.BAD_INPUT, FailureInfo.TRANSFER_NOT_ALLOWED);\\n        }\\n\\n        /* Get the allowance, infinite for the account owner */\\n        uint startingAllowance = 0;\\n        if (spender == src) {\\n            startingAllowance = type(uint256).max;\\n        } else {\\n            startingAllowance = transferAllowances[src][spender];\\n        }\\n\\n        /* Do the calculations, checking for {under,over}flow */\\n        MathError mathErr;\\n        uint allowanceNew;\\n        uint srvTokensNew;\\n        uint dstTokensNew;\\n\\n        (mathErr, allowanceNew) = subUInt(startingAllowance, tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ALLOWED);\\n        }\\n\\n        (mathErr, srvTokensNew) = subUInt(accountTokens[src], tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ENOUGH);\\n        }\\n\\n        (mathErr, dstTokensNew) = addUInt(accountTokens[dst], tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_TOO_MUCH);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        accountTokens[src] = srvTokensNew;\\n        accountTokens[dst] = dstTokensNew;\\n\\n        /* Eat some of the allowance (if necessary) */\\n        if (startingAllowance != type(uint256).max) {\\n            transferAllowances[src][spender] = allowanceNew;\\n        }\\n\\n        /* We emit a Transfer event */\\n        emit Transfer(src, dst, tokens);\\n\\n        comptroller.transferVerify(address(this), src, dst, tokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receives vTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintInternal(uint mintAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted mint failed\\n            return (fail(Error(error), FailureInfo.MINT_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n\\n        // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\n        return mintFresh(msg.sender, mintAmount);\\n    }\\n\\n    /**\\n     * @notice User supplies assets into the market and receives vTokens in exchange\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param minter The address of the account which is supplying the assets\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintFresh(address minter, uint mintAmount) internal returns (uint, uint) {\\n        /* Fail if mint not allowed */\\n        uint allowed = comptroller.mintAllowed(address(this), minter, mintAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != block.number) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK), 0);\\n        }\\n\\n        MintLocalVars memory vars;\\n\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr)), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         *  We call `doTransferIn` for the minter and the mintAmount.\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\n         *  side-effects occurred. The function returns the amount actually transferred,\\n         *  in case of a fee. On success, the vToken holds an additional `actualMintAmount`\\n         *  of cash.\\n         */\\n        vars.actualMintAmount = doTransferIn(minter, mintAmount);\\n\\n        /*\\n         * We get the current exchange rate and calculate the number of vTokens to be minted:\\n         *  mintTokens = actualMintAmount / exchangeRate\\n         */\\n\\n        (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(\\n            vars.actualMintAmount,\\n            Exp({ mantissa: vars.exchangeRateMantissa })\\n        );\\n        ensureNoMathError(vars.mathErr);\\n\\n        /*\\n         * We calculate the new total supply of vTokens and minter token balance, checking for overflow:\\n         *  totalSupplyNew = totalSupply + mintTokens\\n         *  accountTokensNew = accountTokens[minter] + mintTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = addUInt(totalSupply, vars.mintTokens);\\n        ensureNoMathError(vars.mathErr);\\n        (vars.mathErr, vars.accountTokensNew) = addUInt(accountTokens[minter], vars.mintTokens);\\n        ensureNoMathError(vars.mathErr);\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[minter] = vars.accountTokensNew;\\n\\n        /* We emit a Mint event, and a Transfer event */\\n        emit Mint(minter, vars.actualMintAmount, vars.mintTokens, vars.accountTokensNew);\\n        emit Transfer(address(this), minter, vars.mintTokens);\\n\\n        /* We call the defense and prime accrue interest hook */\\n        comptroller.mintVerify(address(this), minter, vars.actualMintAmount, vars.mintTokens);\\n\\n        return (uint(Error.NO_ERROR), vars.actualMintAmount);\\n    }\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receiver receives vTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param receiver The address of the account which is receiving the vTokens\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintBehalfInternal(address receiver, uint mintAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted mintBehalf failed\\n            return (fail(Error(error), FailureInfo.MINT_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n\\n        // mintBehalfFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\n        return mintBehalfFresh(msg.sender, receiver, mintAmount);\\n    }\\n\\n    /**\\n     * @notice Payer supplies assets into the market and receiver receives vTokens in exchange\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param payer The address of the account which is paying the underlying token\\n     * @param receiver The address of the account which is receiving vToken\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintBehalfFresh(address payer, address receiver, uint mintAmount) internal returns (uint, uint) {\\n        ensureNonZeroAddress(receiver);\\n        /* Fail if mint not allowed */\\n        uint allowed = comptroller.mintAllowed(address(this), receiver, mintAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != block.number) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK), 0);\\n        }\\n\\n        MintLocalVars memory vars;\\n\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr)), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         *  We call `doTransferIn` for the payer and the mintAmount.\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\n         *  side-effects occurred. The function returns the amount actually transferred,\\n         *  in case of a fee. On success, the vToken holds an additional `actualMintAmount`\\n         *  of cash.\\n         */\\n        vars.actualMintAmount = doTransferIn(payer, mintAmount);\\n\\n        /*\\n         * We get the current exchange rate and calculate the number of vTokens to be minted:\\n         *  mintTokens = actualMintAmount / exchangeRate\\n         */\\n\\n        (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(\\n            vars.actualMintAmount,\\n            Exp({ mantissa: vars.exchangeRateMantissa })\\n        );\\n        ensureNoMathError(vars.mathErr);\\n\\n        /*\\n         * We calculate the new total supply of vTokens and receiver token balance, checking for overflow:\\n         *  totalSupplyNew = totalSupply + mintTokens\\n         *  accountTokensNew = accountTokens[receiver] + mintTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = addUInt(totalSupply, vars.mintTokens);\\n        ensureNoMathError(vars.mathErr);\\n\\n        (vars.mathErr, vars.accountTokensNew) = addUInt(accountTokens[receiver], vars.mintTokens);\\n        ensureNoMathError(vars.mathErr);\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[receiver] = vars.accountTokensNew;\\n\\n        /* We emit a MintBehalf event, and a Transfer event */\\n        emit MintBehalf(payer, receiver, vars.actualMintAmount, vars.mintTokens, vars.accountTokensNew);\\n        emit Transfer(address(this), receiver, vars.mintTokens);\\n\\n        /* We call the defense and prime accrue interest hook */\\n        comptroller.mintVerify(address(this), receiver, vars.actualMintAmount, vars.mintTokens);\\n\\n        return (uint(Error.NO_ERROR), vars.actualMintAmount);\\n    }\\n\\n    /**\\n     * @notice Redeemer redeems vTokens in exchange for the underlying assets, transferred to the receiver. Redeemer and receiver can be the same\\n     *   address, or different addresses if the receiver was previously approved by the redeemer as a valid delegate (see MarketFacet.updateDelegate)\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemer The address of the account which is redeeming the tokens\\n     * @param receiver The receiver of the tokens\\n     * @param redeemTokens The number of vTokens to redeem into underlying\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function redeemInternal(\\n        address redeemer,\\n        address payable receiver,\\n        uint redeemTokens\\n    ) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n        }\\n\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(redeemer, receiver, redeemTokens, 0);\\n    }\\n\\n    /**\\n     * @notice Sender redeems underlying assets on behalf of some other address. This function is only available\\n     *   for senders, explicitly marked as delegates of the supplier using `comptroller.updateDelegate`\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemer The address of the account which is redeeming the tokens\\n     * @param receiver The receiver of the tokens, if called by a delegate\\n     * @param redeemAmount The amount of underlying to receive from redeeming vTokens\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function redeemUnderlyingInternal(\\n        address redeemer,\\n        address payable receiver,\\n        uint redeemAmount\\n    ) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n        }\\n\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(redeemer, receiver, 0, redeemAmount);\\n    }\\n\\n    /**\\n     * @notice Redeemer redeems vTokens in exchange for the underlying assets, transferred to the receiver. Redeemer and receiver can be the same\\n     *   address, or different addresses if the receiver was previously approved by the redeemer as a valid delegate (see MarketFacet.updateDelegate)\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param redeemer The address of the account which is redeeming the tokens\\n     * @param receiver The receiver of the tokens\\n     * @param redeemTokensIn The number of vTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @param redeemAmountIn The number of underlying tokens to receive from redeeming vTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // solhint-disable-next-line code-complexity\\n    function redeemFresh(\\n        address redeemer,\\n        address payable receiver,\\n        uint redeemTokensIn,\\n        uint redeemAmountIn\\n    ) internal returns (uint) {\\n        require(redeemTokensIn == 0 || redeemAmountIn == 0, \\\"one of redeemTokensIn or redeemAmountIn must be zero\\\");\\n\\n        RedeemLocalVars memory vars;\\n\\n        /* exchangeRate = invoke Exchange Rate Stored() */\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        ensureNoMathError(vars.mathErr);\\n\\n        /* If redeemTokensIn > 0: */\\n        if (redeemTokensIn > 0) {\\n            /*\\n             * We calculate the exchange rate and the amount of underlying to be redeemed:\\n             *  redeemTokens = redeemTokensIn\\n             *  redeemAmount = redeemTokensIn x exchangeRateCurrent\\n             */\\n            vars.redeemTokens = redeemTokensIn;\\n\\n            (vars.mathErr, vars.redeemAmount) = mulScalarTruncate(\\n                Exp({ mantissa: vars.exchangeRateMantissa }),\\n                redeemTokensIn\\n            );\\n            ensureNoMathError(vars.mathErr);\\n        } else {\\n            /*\\n             * We get the current exchange rate and calculate the amount to be redeemed:\\n             *  redeemTokens = redeemAmountIn / exchangeRate\\n             *  redeemAmount = redeemAmountIn\\n             */\\n\\n            (vars.mathErr, vars.redeemTokens) = divScalarByExpTruncate(\\n                redeemAmountIn,\\n                Exp({ mantissa: vars.exchangeRateMantissa })\\n            );\\n            ensureNoMathError(vars.mathErr);\\n\\n            vars.redeemAmount = redeemAmountIn;\\n        }\\n\\n        /* Fail if redeem not allowed */\\n        uint allowed = comptroller.redeemAllowed(address(this), redeemer, vars.redeemTokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REDEEM_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != block.number) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDEEM_FRESHNESS_CHECK);\\n        }\\n\\n        /*\\n         * We calculate the new total supply and redeemer balance, checking for underflow:\\n         *  totalSupplyNew = totalSupply - redeemTokens\\n         *  accountTokensNew = accountTokens[redeemer] - redeemTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = subUInt(totalSupply, vars.redeemTokens);\\n        ensureNoMathError(vars.mathErr);\\n\\n        (vars.mathErr, vars.accountTokensNew) = subUInt(accountTokens[redeemer], vars.redeemTokens);\\n        ensureNoMathError(vars.mathErr);\\n\\n        /* Fail gracefully if protocol has insufficient cash */\\n        if (getCashPrior() < vars.redeemAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDEEM_CASH_NOT_AVAILABLE);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[redeemer] = vars.accountTokensNew;\\n\\n        /*\\n         * We invoke doTransferOut for the receiver and the redeemAmount.\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\n         *  On success, the vToken has redeemAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n\\n        uint feeAmount;\\n        uint remainedAmount;\\n        if (IComptroller(address(comptroller)).treasuryPercent() != 0) {\\n            (vars.mathErr, feeAmount) = mulUInt(\\n                vars.redeemAmount,\\n                IComptroller(address(comptroller)).treasuryPercent()\\n            );\\n            ensureNoMathError(vars.mathErr);\\n\\n            (vars.mathErr, feeAmount) = divUInt(feeAmount, 1e18);\\n            ensureNoMathError(vars.mathErr);\\n\\n            (vars.mathErr, remainedAmount) = subUInt(vars.redeemAmount, feeAmount);\\n            ensureNoMathError(vars.mathErr);\\n\\n            address payable treasuryAddress = payable(IComptroller(address(comptroller)).treasuryAddress());\\n            doTransferOut(treasuryAddress, feeAmount);\\n\\n            emit RedeemFee(redeemer, feeAmount, vars.redeemTokens);\\n        } else {\\n            remainedAmount = vars.redeemAmount;\\n        }\\n\\n        doTransferOut(receiver, remainedAmount);\\n\\n        /* We emit a Transfer event, and a Redeem event */\\n        emit Transfer(redeemer, address(this), vars.redeemTokens);\\n        emit Redeem(redeemer, remainedAmount, vars.redeemTokens, vars.accountTokensNew);\\n\\n        /* We call the defense and prime accrue interest hook */\\n        comptroller.redeemVerify(address(this), redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Receiver gets the borrow on behalf of the borrower address\\n     * @param borrower The borrower, on behalf of whom to borrow\\n     * @param receiver The account that would receive the funds (can be the same as the borrower)\\n     * @param borrowAmount The amount of the underlying asset to borrow\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function borrowInternal(\\n        address borrower,\\n        address payable receiver,\\n        uint borrowAmount\\n    ) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return fail(Error(error), FailureInfo.BORROW_ACCRUE_INTEREST_FAILED);\\n        }\\n\\n        // borrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return borrowFresh(borrower, receiver, borrowAmount, true);\\n    }\\n\\n    /**\\n     * @notice Receiver gets the borrow on behalf of the borrower address, controls whether to do the transfer\\n     * @dev Before calling this function, ensure that the interest has been accrued\\n     * @param borrower The borrower, on behalf of whom to borrow\\n     * @param receiver The account that would receive the funds (can be the same as the borrower)\\n     * @param borrowAmount The amount of the underlying asset to borrow\\n     * @param shouldTransfer Whether to call doTransferOut for the receiver\\n     * @return uint Returns 0 on success, otherwise revert (see ErrorReporter.sol for details).\\n     */\\n    function borrowFresh(\\n        address borrower,\\n        address payable receiver,\\n        uint borrowAmount,\\n        bool shouldTransfer\\n    ) internal returns (uint) {\\n        /* Revert if borrow not allowed */\\n        uint allowed = comptroller.borrowAllowed(address(this), borrower, borrowAmount);\\n\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.BORROW_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != block.number) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.BORROW_FRESHNESS_CHECK);\\n        }\\n\\n        /* Revert if protocol has insufficient underlying cash */\\n        if (shouldTransfer && getCashPrior() < borrowAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.BORROW_CASH_NOT_AVAILABLE);\\n        }\\n\\n        BorrowLocalVars memory vars;\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on overflow:\\n         *  accountBorrowsNew = accountBorrows + borrowAmount\\n         *  totalBorrowsNew = totalBorrows + borrowAmount\\n         */\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n        ensureNoMathError(vars.mathErr);\\n\\n        (vars.mathErr, vars.accountBorrowsNew) = addUInt(vars.accountBorrows, borrowAmount);\\n        ensureNoMathError(vars.mathErr);\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = addUInt(totalBorrows, borrowAmount);\\n        ensureNoMathError(vars.mathErr);\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        if (shouldTransfer) {\\n            /*\\n             * We invoke doTransferOut for the receiver and the borrowAmount.\\n             *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\n             *  On success, the vToken borrowAmount less of cash.\\n             *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n             */\\n            doTransferOut(receiver, borrowAmount);\\n        }\\n\\n        /* We emit a Borrow event */\\n        emit Borrow(borrower, borrowAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense and prime accrue interest hook */\\n        comptroller.borrowVerify(address(this), borrower, borrowAmount);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender repays their own borrow\\n     * @param repayAmount The amount to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowInternal(uint repayAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.REPAY_BORROW_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        return repayBorrowFresh(msg.sender, msg.sender, repayAmount);\\n    }\\n\\n    /**\\n     * @notice Sender repays a borrow belonging to another borrowing account\\n     * @param borrower The account with the debt being payed off\\n     * @param repayAmount The amount to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowBehalfInternal(address borrower, uint repayAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.REPAY_BEHALF_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        return repayBorrowFresh(msg.sender, borrower, repayAmount);\\n    }\\n\\n    /**\\n     * @notice Borrows are repaid by another user (possibly the borrower).\\n     * @param payer The account paying off the borrow\\n     * @param borrower The account with the debt being payed off\\n     * @param repayAmount The amount of undelrying tokens being returned\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowFresh(address payer, address borrower, uint repayAmount) internal returns (uint, uint) {\\n        /* Fail if repayBorrow not allowed */\\n        uint allowed = comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount);\\n        if (allowed != 0) {\\n            return (\\n                failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION, allowed),\\n                0\\n            );\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != block.number) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.REPAY_BORROW_FRESHNESS_CHECK), 0);\\n        }\\n\\n        RepayBorrowLocalVars memory vars;\\n\\n        /* We remember the original borrowerIndex for verification purposes */\\n        vars.borrowerIndex = accountBorrows[borrower].interestIndex;\\n\\n        /* We fetch the amount the borrower owes, with accumulated interest */\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n        ensureNoMathError(vars.mathErr);\\n\\n        /* If repayAmount == type(uint256).max, repayAmount = accountBorrows */\\n        if (repayAmount == type(uint256).max) {\\n            vars.repayAmount = vars.accountBorrows;\\n        } else {\\n            vars.repayAmount = repayAmount;\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the payer and the repayAmount\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\n         *  On success, the vToken holds an additional repayAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *   it returns the amount actually transferred, in case of a fee.\\n         */\\n        vars.actualRepayAmount = doTransferIn(payer, vars.repayAmount);\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on underflow:\\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\\n         */\\n        (vars.mathErr, vars.accountBorrowsNew) = subUInt(vars.accountBorrows, vars.actualRepayAmount);\\n        ensureNoMathError(vars.mathErr);\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = subUInt(totalBorrows, vars.actualRepayAmount);\\n        ensureNoMathError(vars.mathErr);\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /* We emit a RepayBorrow event */\\n        emit RepayBorrow(payer, borrower, vars.actualRepayAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense and prime accrue interest hook */\\n        comptroller.repayBorrowVerify(address(this), payer, borrower, vars.actualRepayAmount, vars.borrowerIndex);\\n\\n        return (uint(Error.NO_ERROR), vars.actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice The sender liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this vToken to be liquidated\\n     * @param vTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateBorrowInternal(\\n        address borrower,\\n        uint repayAmount,\\n        VTokenInterface vTokenCollateral\\n    ) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED), 0);\\n        }\\n\\n        error = vTokenCollateral.accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED), 0);\\n        }\\n\\n        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return liquidateBorrowFresh(msg.sender, borrower, repayAmount, vTokenCollateral);\\n    }\\n\\n    /**\\n     * @notice The liquidator liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this vToken to be liquidated\\n     * @param liquidator The address repaying the borrow and seizing collateral\\n     * @param vTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    // solhint-disable-next-line code-complexity\\n    function liquidateBorrowFresh(\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        VTokenInterface vTokenCollateral\\n    ) internal returns (uint, uint) {\\n        /* Fail if liquidate not allowed */\\n        uint allowed = comptroller.liquidateBorrowAllowed(\\n            address(this),\\n            address(vTokenCollateral),\\n            liquidator,\\n            borrower,\\n            repayAmount\\n        );\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != block.number) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_FRESHNESS_CHECK), 0);\\n        }\\n\\n        /* Verify vTokenCollateral market's block number equals current block number */\\n        if (vTokenCollateral.accrualBlockNumber() != block.number) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK), 0);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            return (fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER), 0);\\n        }\\n\\n        /* Fail if repayAmount = 0 */\\n        if (repayAmount == 0) {\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO), 0);\\n        }\\n\\n        /* Fail if repayAmount = type(uint256).max */\\n        if (repayAmount == type(uint256).max) {\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX), 0);\\n        }\\n\\n        /* Fail if repayBorrow fails */\\n        uint err;\\n        uint actualRepayAmount;\\n        (err, actualRepayAmount) = repayBorrowFresh(liquidator, borrower, repayAmount);\\n        if (err != uint(Error.NO_ERROR)) {\\n            return (fail(Error(err), FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We calculate the number of collateral tokens that will be seized */\\n        (, uint seizeTokens) = comptroller.liquidateCalculateSeizeTokens(\\n            borrower,\\n            address(this),\\n            address(vTokenCollateral),\\n            actualRepayAmount\\n        );\\n\\n        require(\\n            (err == uint(Error.NO_ERROR)) && (vTokenCollateral.balanceOf(borrower) >= seizeTokens),\\n            \\\"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED or LIQUIDATE_SEIZE_TOO_MUCH\\\"\\n        );\\n\\n        // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\n        if (address(vTokenCollateral) == address(this)) {\\n            err = seizeInternal(address(this), liquidator, borrower, seizeTokens);\\n        } else {\\n            err = vTokenCollateral.seize(liquidator, borrower, seizeTokens);\\n        }\\n\\n        /* Revert if seize tokens fails (since we cannot be sure of side effects) */\\n        require(err == uint(Error.NO_ERROR), \\\"token seizure failed\\\");\\n\\n        /* We emit a LiquidateBorrow event */\\n        emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, address(vTokenCollateral), seizeTokens);\\n\\n        /* We call the defense and prime accrue interest hook */\\n        comptroller.liquidateBorrowVerify(\\n            address(this),\\n            address(vTokenCollateral),\\n            liquidator,\\n            borrower,\\n            actualRepayAmount,\\n            seizeTokens\\n        );\\n\\n        return (uint(Error.NO_ERROR), actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another vToken.\\n     *  Its absolutely critical to use msg.sender as the seizer vToken and not a parameter.\\n     * @param seizerToken The contract seizing the collateral (i.e. borrowed vToken)\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of vTokens to seize\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function seizeInternal(\\n        address seizerToken,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens\\n    ) internal returns (uint) {\\n        /* Fail if seize not allowed */\\n        uint allowed = comptroller.seizeAllowed(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_SEIZE_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            return fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER);\\n        }\\n\\n        MathError mathErr;\\n        uint borrowerTokensNew;\\n        uint liquidatorTokensNew;\\n\\n        /*\\n         * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\\n         *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\\n         *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\\n         */\\n        (mathErr, borrowerTokensNew) = subUInt(accountTokens[borrower], seizeTokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, liquidatorTokensNew) = addUInt(accountTokens[liquidator], seizeTokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED, uint(mathErr));\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accountTokens[borrower] = borrowerTokensNew;\\n        accountTokens[liquidator] = liquidatorTokensNew;\\n\\n        /* Emit a Transfer event */\\n        emit Transfer(borrower, liquidator, seizeTokens);\\n\\n        /* We call the defense and prime accrue interest hook */\\n        comptroller.seizeVerify(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets a new reserve factor for the protocol (requires fresh interest accrual)\\n     * @dev Governance function to set a new reserve factor\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function _setReserveFactorFresh(uint newReserveFactorMantissa) internal returns (uint) {\\n        // Verify market's block number equals current block number\\n        if (accrualBlockNumber != block.number) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK);\\n        }\\n\\n        // Check newReserveFactor \\u2264 maxReserveFactor\\n        if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\\n            return fail(Error.BAD_INPUT, FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);\\n        }\\n\\n        uint oldReserveFactorMantissa = reserveFactorMantissa;\\n        reserveFactorMantissa = newReserveFactorMantissa;\\n\\n        emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and adds reserves by transferring from `msg.sender`\\n     * @param addAmount Amount of addition to reserves\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function _addReservesInternal(uint addAmount) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\n            return fail(Error(error), FailureInfo.ADD_RESERVES_ACCRUE_INTEREST_FAILED);\\n        }\\n\\n        // _addReservesFresh emits reserve-addition-specific logs on errors, so we don't need to.\\n        (error, ) = _addReservesFresh(addAmount);\\n        return error;\\n    }\\n\\n    /**\\n     * @notice Add reserves by transferring from caller\\n     * @dev Requires fresh interest accrual\\n     * @param addAmount Amount of addition to reserves\\n     * @return (uint, uint) An error code (0=success, otherwise a failure (see ErrorReporter.sol for details)) and the actual amount added, net token fees\\n     */\\n    function _addReservesFresh(uint addAmount) internal returns (uint, uint) {\\n        // totalReserves + actualAddAmount\\n        uint totalReservesNew;\\n        uint actualAddAmount;\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != block.number) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.ADD_RESERVES_FRESH_CHECK), actualAddAmount);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the caller and the addAmount\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\n         *  On success, the vToken holds an additional addAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *  it returns the amount actually transferred, in case of a fee.\\n         */\\n\\n        actualAddAmount = doTransferIn(msg.sender, addAmount);\\n\\n        totalReservesNew = totalReserves + actualAddAmount;\\n\\n        /* Revert on overflow */\\n        require(totalReservesNew >= totalReserves, \\\"add reserves unexpected overflow\\\");\\n\\n        // Store reserves[n+1] = reserves[n] + actualAddAmount\\n        totalReserves = totalReservesNew;\\n\\n        /* Emit NewReserves(admin, actualAddAmount, reserves[n+1]) */\\n        emit ReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\\n\\n        /* Return (NO_ERROR, actualAddAmount) */\\n        return (uint(Error.NO_ERROR), actualAddAmount);\\n    }\\n\\n    /**\\n     * @notice Reduces reserves by transferring to protocol share reserve contract\\n     * @dev Requires fresh interest accrual\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function _reduceReservesFresh(uint reduceAmount) internal virtual returns (uint) {\\n        if (reduceAmount == 0) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != block.number) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);\\n        }\\n\\n        // Fail gracefully if protocol has insufficient underlying cash\\n        if (getCashPrior() < reduceAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);\\n        }\\n\\n        // Check reduceAmount \\u2264 reserves[n] (totalReserves)\\n        if (reduceAmount > totalReserves) {\\n            return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        // Store reserves[n+1] = reserves[n] - reduceAmount\\n        totalReserves = totalReserves - reduceAmount;\\n\\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n        doTransferOut(protocolShareReserve, reduceAmount);\\n\\n        IProtocolShareReserve(protocolShareReserve).updateAssetsState(\\n            address(comptroller),\\n            underlying,\\n            IProtocolShareReserve.IncomeType.SPREAD\\n        );\\n\\n        emit ReservesReduced(protocolShareReserve, reduceAmount, totalReserves);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice updates the interest rate model (requires fresh interest accrual)\\n     * @dev Governance function to update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function _setInterestRateModelFresh(InterestRateModelV8 newInterestRateModel) internal returns (uint) {\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != block.number) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK);\\n        }\\n\\n        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\\n        require(newInterestRateModel.isInterestRateModel(), \\\"marker method returned false\\\");\\n\\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\\n        emit NewMarketInterestRateModel(interestRateModel, newInterestRateModel);\\n\\n        // Set the interest rate model to newInterestRateModel\\n        interestRateModel = newInterestRateModel;\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /*** Safe Token ***/\\n\\n    /**\\n     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\n     *  This may revert due to insufficient balance or insufficient allowance.\\n     */\\n    function doTransferIn(address from, uint amount) internal virtual returns (uint);\\n\\n    /**\\n     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure rather than reverting.\\n     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\\n     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\\n     */\\n    function doTransferOut(address payable to, uint amount) internal virtual;\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return Tuple of error code and the calculated balance or 0 if error code is non-zero\\n     */\\n    function borrowBalanceStoredInternal(address account) internal view returns (MathError, uint) {\\n        /* Note: we do not assert that the market is up to date */\\n        MathError mathErr;\\n        uint principalTimesIndex;\\n        uint result;\\n\\n        /* Get borrowBalance and borrowIndex */\\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\n\\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\\n         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\n         */\\n        if (borrowSnapshot.principal == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        /* Calculate new borrow balance using the interest index:\\n         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\n         */\\n        (mathErr, principalTimesIndex) = mulUInt(borrowSnapshot.principal, borrowIndex);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        (mathErr, result) = divUInt(principalTimesIndex, borrowSnapshot.interestIndex);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, result);\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the vToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return Tuple of error code and calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStoredInternal() internal view virtual returns (MathError, uint) {\\n        uint _totalSupply = totalSupply;\\n        if (_totalSupply == 0) {\\n            /*\\n             * If there are no tokens minted:\\n             *  exchangeRate = initialExchangeRate\\n             */\\n            return (MathError.NO_ERROR, initialExchangeRateMantissa);\\n        } else {\\n            /*\\n             * Otherwise:\\n             *  exchangeRate = (totalCash + totalBorrows + flashLoanAmount - totalReserves) / totalSupply\\n             */\\n            uint totalCash = getCashPrior();\\n            uint cashPlusBorrowsMinusReserves;\\n            Exp memory exchangeRate;\\n            MathError mathErr;\\n\\n            (mathErr, cashPlusBorrowsMinusReserves) = addThenSubUInt(\\n                totalCash + flashLoanAmount,\\n                totalBorrows,\\n                totalReserves\\n            );\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n\\n            (mathErr, exchangeRate) = getExp(cashPlusBorrowsMinusReserves, _totalSupply);\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n\\n            return (MathError.NO_ERROR, exchangeRate.mantissa);\\n        }\\n    }\\n\\n    function ensureAllowed(string memory functionSig) private view {\\n        require(\\n            IAccessControlManagerV8(accessControlManager).isAllowedToCall(msg.sender, functionSig),\\n            \\\"access denied\\\"\\n        );\\n    }\\n\\n    function ensureAdmin(address caller_) private view {\\n        require(caller_ == admin, \\\"Unauthorized\\\");\\n    }\\n\\n    function ensureNoMathError(MathError mErr) private pure {\\n        require(mErr == MathError.NO_ERROR, \\\"math error\\\");\\n    }\\n\\n    function ensureNonZeroAddress(address address_) private pure {\\n        require(address_ != address(0), \\\"zero address\\\");\\n    }\\n\\n    function ensureAccrueInterest() private {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n    }\\n\\n    /*** Safe Token ***/\\n\\n    /**\\n     * @notice Gets balance of this contract in terms of the underlying\\n     * @dev This excludes the value of the current message, if any\\n     * @return The quantity of underlying owned by this contract\\n     */\\n    function getCashPrior() internal view virtual returns (uint);\\n}\\n\",\"keccak256\":\"0x313be107e80c29d17225cf80c1dc39d02a86b63b929fc345fd00645d73707105\",\"license\":\"BSD-3-Clause\"},\"contracts/Tokens/VTokens/VTokenInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.25;\\n\\nimport { ComptrollerInterface } from \\\"../../Comptroller/ComptrollerInterface.sol\\\";\\nimport { InterestRateModelV8 } from \\\"../../InterestRateModels/InterestRateModelV8.sol\\\";\\n\\ncontract VTokenStorageBase {\\n    /**\\n     * @notice Container for borrow balance information\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n     */\\n    struct BorrowSnapshot {\\n        uint principal;\\n        uint interestIndex;\\n    }\\n\\n    /**\\n     * @dev Guard variable for re-entrancy checks\\n     */\\n    bool internal _notEntered;\\n\\n    /**\\n     * @notice EIP-20 token name for this token\\n     */\\n    string public name;\\n\\n    /**\\n     * @notice EIP-20 token symbol for this token\\n     */\\n    string public symbol;\\n\\n    /**\\n     * @notice EIP-20 token decimals for this token\\n     */\\n    uint8 public decimals;\\n\\n    /**\\n     * @notice Maximum borrow rate that can ever be applied (.0005% / block)\\n     */\\n\\n    uint internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n    /**\\n     * @notice Maximum fraction of interest that can be set aside for reserves\\n     */\\n    uint internal constant reserveFactorMaxMantissa = 1e18;\\n\\n    /**\\n     * @notice Administrator for this contract\\n     */\\n    address payable public admin;\\n\\n    /**\\n     * @notice Pending administrator for this contract\\n     */\\n    address payable public pendingAdmin;\\n\\n    /**\\n     * @notice Contract which oversees inter-vToken operations\\n     */\\n    ComptrollerInterface public comptroller;\\n\\n    /**\\n     * @notice Model which tells what the current interest rate should be\\n     */\\n    InterestRateModelV8 public interestRateModel;\\n\\n    /**\\n     * @notice Initial exchange rate used when minting the first VTokens (used when totalSupply = 0)\\n     */\\n    uint internal initialExchangeRateMantissa;\\n\\n    /**\\n     * @notice Fraction of interest currently set aside for reserves\\n     */\\n    uint public reserveFactorMantissa;\\n\\n    /**\\n     * @notice Block number that interest was last accrued at\\n     */\\n    uint public accrualBlockNumber;\\n\\n    /**\\n     * @notice Accumulator of the total earned interest rate since the opening of the market\\n     */\\n    uint public borrowIndex;\\n\\n    /**\\n     * @notice Total amount of outstanding borrows of the underlying in this market\\n     */\\n    uint public totalBorrows;\\n\\n    /**\\n     * @notice Total amount of reserves of the underlying held in this market\\n     */\\n    uint public totalReserves;\\n\\n    /**\\n     * @notice Total number of tokens in circulation\\n     */\\n    uint public totalSupply;\\n\\n    /**\\n     * @notice Official record of token balances for each account\\n     */\\n    mapping(address => uint) internal accountTokens;\\n\\n    /**\\n     * @notice Approved token transfer amounts on behalf of others\\n     */\\n    mapping(address => mapping(address => uint)) internal transferAllowances;\\n\\n    /**\\n     * @notice Mapping of account addresses to outstanding borrow balances\\n     */\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\n\\n    /**\\n     * @notice Underlying asset for this VToken\\n     */\\n    address public underlying;\\n\\n    /**\\n     * @notice Implementation address for this contract\\n     */\\n    address public implementation;\\n\\n    /**\\n     * @notice delta block after which reserves will be reduced\\n     */\\n    uint public reduceReservesBlockDelta;\\n\\n    /**\\n     * @notice last block number at which reserves were reduced\\n     */\\n    uint public reduceReservesBlockNumber;\\n\\n    /**\\n     * @notice address of protocol share reserve contract\\n     */\\n    address payable public protocolShareReserve;\\n\\n    /**\\n     * @notice address of accessControlManager\\n     */\\n\\n    address public accessControlManager;\\n}\\n\\ncontract VTokenStorage is VTokenStorageBase {\\n    /**\\n     * @notice flashLoan is enabled for this market or not\\n     */\\n    bool public isFlashLoanEnabled;\\n\\n    /**\\n     * @notice total fee percentage collected on flashLoan (scaled by 1e18)\\n     */\\n    uint256 public flashLoanFeeMantissa;\\n\\n    /**\\n     * @notice fee percentage of flashLoan that goes to protocol (scaled by 1e18)\\n     */\\n    uint256 public flashLoanProtocolShareMantissa;\\n\\n    /**\\n     * @notice Amount of flashLoan taken by the receiver\\n     * @dev This is used to track the amount of flashLoan taken to correctly calculate the exchange rate\\n     *      during the flashLoan process. It is added to the total cash when calculating the exchange rate.\\n     */\\n    uint256 public flashLoanAmount;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[46] private __gap;\\n}\\n\\nabstract contract VTokenInterface is VTokenStorage {\\n    /**\\n     * @notice Indicator that this is a vToken contract (for inspection)\\n     */\\n    bool public constant isVToken = true;\\n\\n    /*** Market Events ***/\\n\\n    /**\\n     * @notice Event emitted when interest is accrued\\n     */\\n    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when tokens are minted\\n     */\\n    event Mint(address minter, uint mintAmount, uint mintTokens, uint256 totalSupply);\\n\\n    /**\\n     * @notice Event emitted when tokens are minted behalf by payer to receiver\\n     */\\n    event MintBehalf(address payer, address receiver, uint mintAmount, uint mintTokens, uint256 totalSupply);\\n\\n    /**\\n     * @notice Event emitted when tokens are redeemed\\n     */\\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens, uint256 totalSupply);\\n\\n    /**\\n     * @notice Event emitted when tokens are redeemed and fee is transferred\\n     */\\n    event RedeemFee(address redeemer, uint feeAmount, uint redeemTokens);\\n\\n    /**\\n     * @notice Event emitted when underlying is borrowed\\n     */\\n    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is repaid\\n     */\\n    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is liquidated\\n     */\\n    event LiquidateBorrow(\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        address vTokenCollateral,\\n        uint seizeTokens\\n    );\\n\\n    /*** Admin Events ***/\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is changed\\n     */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is accepted, which means admin has been updated\\n     */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    /**\\n     * @notice Event emitted when comptroller is changed\\n     */\\n    event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\n\\n    /**\\n     * @notice Event emitted when interestRateModel is changed\\n     */\\n    event NewMarketInterestRateModel(\\n        InterestRateModelV8 oldInterestRateModel,\\n        InterestRateModelV8 newInterestRateModel\\n    );\\n\\n    /**\\n     * @notice Event emitted when the reserve factor is changed\\n     */\\n    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\\n\\n    /**\\n     * @notice Event emitted when the reserves are added\\n     */\\n    event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice Event emitted when the reserves are reduced\\n     */\\n    event ReservesReduced(address protocolShareReserve, uint reduceAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice EIP20 Transfer event\\n     */\\n    event Transfer(address indexed from, address indexed to, uint amount);\\n\\n    /**\\n     * @notice EIP20 Approval event\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\n\\n    /**\\n     * @notice Event emitted when block delta for reduce reserves get updated\\n     */\\n    event NewReduceReservesBlockDelta(uint256 oldReduceReservesBlockDelta, uint256 newReduceReservesBlockDelta);\\n\\n    /**\\n     * @notice Event emitted when address of ProtocolShareReserve contract get updated\\n     */\\n    event NewProtocolShareReserve(address indexed oldProtocolShareReserve, address indexed newProtocolShareReserve);\\n\\n    /**\\n     * @notice Emitted when access control address is changed by admin\\n     */\\n    event NewAccessControlManager(address oldAccessControlAddress, address newAccessControlAddress);\\n\\n    /**\\n     * @notice Event emitted when flashLoanEnabled status is changed\\n     */\\n    event FlashLoanStatusChanged(bool previousStatus, bool newStatus);\\n\\n    /**\\n     * @notice Event emitted when flashLoan is executed\\n     */\\n    event FlashLoanExecuted(address receiver, address underlying, uint256 amount);\\n\\n    /**\\n     * @notice Event emitted when asset is transferred to receiver\\n     */\\n    event TransferOutUnderlyingFlashLoan(address asset, address receiver, uint256 amount);\\n\\n    /**\\n     * @notice Event emitted when asset is transferred from sender and verified\\n     */\\n    event TransferInUnderlyingFlashLoan(address asset, address sender, uint256 amount);\\n\\n    /**\\n     * @notice Event emitted when flashLoan fee mantissa is updated\\n     */\\n    event FlashLoanFeeUpdated(\\n        uint256 oldFlashLoanFeeMantissa,\\n        uint256 newFlashLoanFeeMantissa,\\n        uint256 oldFlashLoanProtocolShare,\\n        uint256 newFlashLoanProtocolShare\\n    );\\n\\n    // @notice Thrown when comptroller is not valid\\n    error InvalidComptroller();\\n\\n    // @notice Thrown when flashLoan is not enabled\\n    error FlashLoanNotEnabled();\\n\\n    // @notice Thrown when the receiver contract execute operation fails\\n    error ExecuteFlashLoanFailed();\\n\\n    // @notice Thrown when the sender is not authorized to do flash loan\\n    error SenderNotAuthorized(address sender);\\n\\n    // @notice Thrown when the repayment is insufficient\\n    error InsufficientRepayment();\\n\\n    // @notice Thrown when there is already an active flashLoan\\n    error FlashLoanAlreadyActive();\\n\\n    /*** User Interface ***/\\n\\n    function transfer(address dst, uint amount) external virtual returns (bool);\\n\\n    function transferFrom(address src, address dst, uint amount) external virtual returns (bool);\\n\\n    function approve(address spender, uint amount) external virtual returns (bool);\\n\\n    function balanceOfUnderlying(address owner) external virtual returns (uint);\\n\\n    function totalBorrowsCurrent() external virtual returns (uint);\\n\\n    function borrowBalanceCurrent(address account) external virtual returns (uint);\\n\\n    function seize(address liquidator, address borrower, uint seizeTokens) external virtual returns (uint);\\n\\n    /*** Admin Function ***/\\n    function _setPendingAdmin(address payable newPendingAdmin) external virtual returns (uint);\\n\\n    /*** Admin Function ***/\\n    function _acceptAdmin() external virtual returns (uint);\\n\\n    /*** Admin Function ***/\\n    function _setReserveFactor(uint newReserveFactorMantissa) external virtual returns (uint);\\n\\n    /*** Admin Function ***/\\n    function _reduceReserves(uint reduceAmount) external virtual returns (uint);\\n\\n    function borrowDebtPosition(address borrower, uint borrowAmount) external virtual returns (uint);\\n\\n    function balanceOf(address owner) external view virtual returns (uint);\\n\\n    function allowance(address owner, address spender) external view virtual returns (uint);\\n\\n    function getAccountSnapshot(address account) external view virtual returns (uint, uint, uint, uint);\\n\\n    function borrowRatePerBlock() external view virtual returns (uint);\\n\\n    function supplyRatePerBlock() external view virtual returns (uint);\\n\\n    function getCash() external view virtual returns (uint);\\n\\n    function exchangeRateCurrent() public virtual returns (uint);\\n\\n    function accrueInterest() public virtual returns (uint);\\n\\n    /*** Admin Function ***/\\n    function _setComptroller(ComptrollerInterface newComptroller) public virtual returns (uint);\\n\\n    /*** Admin Function ***/\\n    function _setInterestRateModel(InterestRateModelV8 newInterestRateModel) public virtual returns (uint);\\n\\n    function borrowBalanceStored(address account) public view virtual returns (uint);\\n\\n    function exchangeRateStored() public view virtual returns (uint);\\n}\\n\\ninterface VBep20Interface {\\n    /*** User Interface ***/\\n\\n    function mint(uint mintAmount) external returns (uint);\\n\\n    function mintBehalf(address receiver, uint mintAmount) external returns (uint);\\n\\n    function redeem(uint redeemTokens) external returns (uint);\\n\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\n\\n    function borrow(uint borrowAmount) external returns (uint);\\n\\n    function repayBorrow(uint repayAmount) external returns (uint);\\n\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\\n\\n    function liquidateBorrow(\\n        address borrower,\\n        uint repayAmount,\\n        VTokenInterface vTokenCollateral\\n    ) external returns (uint);\\n\\n    /*** Admin Functions ***/\\n\\n    function _addReserves(uint addAmount) external returns (uint);\\n}\\n\\ninterface VDelegatorInterface {\\n    /**\\n     * @notice Emitted when implementation is changed\\n     */\\n    event NewImplementation(address oldImplementation, address newImplementation);\\n\\n    /**\\n     * @notice Called by the admin to update the implementation of the delegator\\n     * @param implementation_ The address of the new implementation for delegation\\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\n     */\\n    function _setImplementation(\\n        address implementation_,\\n        bool allowResign,\\n        bytes memory becomeImplementationData\\n    ) external;\\n}\\n\\ninterface VDelegateInterface {\\n    /**\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\n     * @param data The encoded bytes data for any initialization\\n     */\\n    function _becomeImplementation(bytes memory data) external;\\n\\n    /**\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\n     */\\n    function _resignImplementation() external;\\n}\\n\",\"keccak256\":\"0x0da238b4a21bd5fbe556ff0b4addf0449b0b2dfdbc0a4494a1ad9055586496ff\",\"license\":\"BSD-3-Clause\"},\"contracts/Utils/CarefulMath.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\n/**\\n * @title Careful Math\\n * @author Venus\\n * @notice Derived from OpenZeppelin's SafeMath library\\n *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\\n */\\ncontract CarefulMath {\\n    /**\\n     * @dev Possible error codes that we can return\\n     */\\n    enum MathError {\\n        NO_ERROR,\\n        DIVISION_BY_ZERO,\\n        INTEGER_OVERFLOW,\\n        INTEGER_UNDERFLOW\\n    }\\n\\n    /**\\n     * @dev Multiplies two numbers, returns an error on overflow.\\n     */\\n    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (a == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        uint c;\\n        unchecked {\\n            c = a * b;\\n        }\\n\\n        if (c / a != b) {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        } else {\\n            return (MathError.NO_ERROR, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, truncating the quotient.\\n     */\\n    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b == 0) {\\n            return (MathError.DIVISION_BY_ZERO, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, a / b);\\n    }\\n\\n    /**\\n     * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\\n     */\\n    function subUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b <= a) {\\n            unchecked {\\n                return (MathError.NO_ERROR, a - b);\\n            }\\n        } else {\\n            return (MathError.INTEGER_UNDERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Adds two numbers, returns an error on overflow.\\n     */\\n    function addUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        uint c;\\n        unchecked {\\n            c = a + b;\\n        }\\n\\n        if (c >= a) {\\n            return (MathError.NO_ERROR, c);\\n        } else {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev add a and b and then subtract c\\n     */\\n    function addThenSubUInt(uint a, uint b, uint c) internal pure returns (MathError, uint) {\\n        (MathError err0, uint sum) = addUInt(a, b);\\n\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, 0);\\n        }\\n\\n        return subUInt(sum, c);\\n    }\\n}\\n\",\"keccak256\":\"0xb7ca049dc6f4a31c8994ad5fd2093b9f7f60c21495ff8386c7802ef13d9858a7\",\"license\":\"BSD-3-Clause\"},\"contracts/Utils/ErrorReporter.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\nimport { WeightFunction } from \\\"../Comptroller/Diamond/interfaces/IFacetBase.sol\\\";\\n\\ncontract ComptrollerErrorReporter {\\n    /// @notice Thrown when You are already in the selected pool.\\n    error AlreadyInSelectedPool();\\n\\n    /// @notice Thrown when One or more of your assets are not compatible with the selected pool.\\n    error IncompatibleBorrowedAssets();\\n\\n    /// @notice Thrown when Switching to this pool would fail the liquidity check or lead to liquidation.\\n    error LiquidityCheckFailed(uint256 errorCode, uint256 shortfall);\\n\\n    /// @notice Thrown when trying to call pool-specific methods on the Core Pool\\n    error InvalidOperationForCorePool();\\n\\n    /// @notice Thrown when input array lengths do not match\\n    error ArrayLengthMismatch();\\n\\n    /// @notice Thrown when market trying to add in a pool is not listed in the core pool\\n    error MarketNotListedInCorePool();\\n\\n    /// @notice Thrown when market is not set in the _poolMarkets mapping\\n    error MarketConfigNotFound();\\n\\n    /// @notice Thrown when borrowing is not allowed in the selected pool for a given market.\\n    error BorrowNotAllowedInPool();\\n\\n    /// @notice Thrown when trying to remove a market that is not listed in the given pool.\\n    error PoolMarketNotFound(uint96 poolId, address vToken);\\n\\n    /// @notice Thrown when a given pool ID does not exist\\n    error PoolDoesNotExist(uint96 poolId);\\n\\n    /// @notice Thrown when the pool label is empty\\n    error EmptyPoolLabel();\\n\\n    /// @notice Thrown when a vToken is already listed in the specified pool\\n    error MarketAlreadyListed(uint96 poolId, address vToken);\\n\\n    /// @notice Thrown when an invalid weighting strategy is provided\\n    error InvalidWeightingStrategy(WeightFunction strategy);\\n\\n    // @notice Thrown when no assets are requested for flash loan\\n    error NoAssetsRequested();\\n\\n    // @notice Thrown when invalid flash loan parameters are provided\\n    error InvalidFlashLoanParams();\\n\\n    // @notice Thrown when flash loan is not enabled on the vToken\\n    error FlashLoanNotEnabled();\\n\\n    // @notice Thrown when the sender is not authorized to use flashloan onBehalfOf\\n    error SenderNotAuthorizedForFlashLoan(address sender);\\n\\n    // @notice Thrown when the onBehalfOf didn't approve the contract that receives flashloan\\n    error NotAnApprovedDelegate();\\n\\n    // @notice Thrown when an invalid mode is provided\\n    error InvalidMode();\\n\\n    // @notice Thrown when executeOperation on the receiver contract fails\\n    error ExecuteFlashLoanFailed();\\n\\n    // @notice Thrown when the requested amount is zero\\n    error InvalidAmount();\\n\\n    // @notice Thrown when failing to create a debt position in mode 1\\n    error FailedToCreateDebtPosition();\\n\\n    /// @notice Thrown when attempting to interact with an inactive pool\\n    error InactivePool(uint96 poolId);\\n\\n    /// @notice Thrown when repayment amount is insufficient to cover the fee\\n    error NotEnoughRepayment(uint256 repaid, uint256 required);\\n\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        COMPTROLLER_MISMATCH,\\n        INSUFFICIENT_SHORTFALL,\\n        INSUFFICIENT_LIQUIDITY,\\n        INVALID_CLOSE_FACTOR,\\n        INVALID_COLLATERAL_FACTOR,\\n        INVALID_LIQUIDATION_INCENTIVE,\\n        MARKET_NOT_ENTERED, // no longer possible\\n        MARKET_NOT_LISTED,\\n        MARKET_ALREADY_LISTED,\\n        MATH_ERROR,\\n        NONZERO_BORROW_BALANCE,\\n        PRICE_ERROR,\\n        REJECTION,\\n        SNAPSHOT_ERROR,\\n        TOO_MANY_ASSETS,\\n        TOO_MUCH_REPAY,\\n        INSUFFICIENT_BALANCE_FOR_VAI,\\n        MARKET_NOT_COLLATERAL,\\n        INVALID_LIQUIDATION_THRESHOLD\\n    }\\n\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n        EXIT_MARKET_BALANCE_OWED,\\n        EXIT_MARKET_REJECTION,\\n        SET_CLOSE_FACTOR_OWNER_CHECK,\\n        SET_CLOSE_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\n        SET_IMPLEMENTATION_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n        SET_PRICE_ORACLE_OWNER_CHECK,\\n        SUPPORT_MARKET_EXISTS,\\n        SUPPORT_MARKET_OWNER_CHECK,\\n        SET_PAUSE_GUARDIAN_OWNER_CHECK,\\n        SET_VAI_MINT_RATE_CHECK,\\n        SET_VAICONTROLLER_OWNER_CHECK,\\n        SET_MINTED_VAI_REJECTION,\\n        SET_TREASURY_OWNER_CHECK,\\n        UNLIST_MARKET_NOT_LISTED,\\n        SET_LIQUIDATION_THRESHOLD_VALIDATION,\\n        COLLATERAL_FACTOR_GREATER_THAN_LIQUIDATION_THRESHOLD\\n    }\\n\\n    /**\\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n     **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n     */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n     */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\\n\\ncontract TokenErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        BAD_INPUT,\\n        COMPTROLLER_REJECTION,\\n        COMPTROLLER_CALCULATION_ERROR,\\n        INTEREST_RATE_MODEL_ERROR,\\n        INVALID_ACCOUNT_PAIR,\\n        INVALID_CLOSE_AMOUNT_REQUESTED,\\n        INVALID_COLLATERAL_FACTOR,\\n        MATH_ERROR,\\n        MARKET_NOT_FRESH,\\n        MARKET_NOT_LISTED,\\n        TOKEN_INSUFFICIENT_ALLOWANCE,\\n        TOKEN_INSUFFICIENT_BALANCE,\\n        TOKEN_INSUFFICIENT_CASH,\\n        TOKEN_TRANSFER_IN_FAILED,\\n        TOKEN_TRANSFER_OUT_FAILED,\\n        TOKEN_PRICE_ERROR\\n    }\\n\\n    /*\\n     * Note: FailureInfo (but not Error) is kept in alphabetical order\\n     *       This is because FailureInfo grows significantly faster, and\\n     *       the order of Error has some meaning, while the order of FailureInfo\\n     *       is entirely arbitrary.\\n     */\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\\n        BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        BORROW_ACCRUE_INTEREST_FAILED,\\n        BORROW_CASH_NOT_AVAILABLE,\\n        BORROW_FRESHNESS_CHECK,\\n        BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        BORROW_MARKET_NOT_LISTED,\\n        BORROW_COMPTROLLER_REJECTION,\\n        LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\n        LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\n        LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\n        LIQUIDATE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\n        LIQUIDATE_FRESHNESS_CHECK,\\n        LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\n        LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_SEIZE_TOO_MUCH,\\n        MINT_ACCRUE_INTEREST_FAILED,\\n        MINT_COMPTROLLER_REJECTION,\\n        MINT_EXCHANGE_CALCULATION_FAILED,\\n        MINT_EXCHANGE_RATE_READ_FAILED,\\n        MINT_FRESHNESS_CHECK,\\n        MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        MINT_TRANSFER_IN_FAILED,\\n        MINT_TRANSFER_IN_NOT_POSSIBLE,\\n        REDEEM_ACCRUE_INTEREST_FAILED,\\n        REDEEM_COMPTROLLER_REJECTION,\\n        REDEEM_CASH_NOT_AVAILABLE,\\n        REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_RATE_READ_FAILED,\\n        REDEEM_FRESHNESS_CHECK,\\n        REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\\n        REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\\n        REDUCE_RESERVES_ADMIN_CHECK,\\n        REDUCE_RESERVES_CASH_NOT_AVAILABLE,\\n        REDUCE_RESERVES_FRESH_CHECK,\\n        REDUCE_RESERVES_VALIDATION,\\n        REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_COMPTROLLER_REJECTION,\\n        REPAY_BORROW_FRESHNESS_CHECK,\\n        REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COMPTROLLER_OWNER_CHECK,\\n        SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\\n        SET_INTEREST_RATE_MODEL_FRESH_CHECK,\\n        SET_INTEREST_RATE_MODEL_OWNER_CHECK,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_ORACLE_MARKET_NOT_LISTED,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\\n        SET_RESERVE_FACTOR_ADMIN_CHECK,\\n        SET_RESERVE_FACTOR_FRESH_CHECK,\\n        SET_RESERVE_FACTOR_BOUNDS_CHECK,\\n        TRANSFER_COMPTROLLER_REJECTION,\\n        TRANSFER_NOT_ALLOWED,\\n        TRANSFER_NOT_ENOUGH,\\n        TRANSFER_TOO_MUCH,\\n        ADD_RESERVES_ACCRUE_INTEREST_FAILED,\\n        ADD_RESERVES_FRESH_CHECK,\\n        ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE,\\n        TOKEN_GET_UNDERLYING_PRICE_ERROR,\\n        REPAY_VAI_COMPTROLLER_REJECTION,\\n        REPAY_VAI_FRESHNESS_CHECK,\\n        VAI_MINT_EXCHANGE_CALCULATION_FAILED,\\n        SFT_MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED\\n    }\\n\\n    /**\\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n     **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n     */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n     */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\\n\\ncontract VAIControllerErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED, // The sender is not authorized to perform this action.\\n        REJECTION, // The action would violate the comptroller, vaicontroller policy.\\n        SNAPSHOT_ERROR, // The comptroller could not get the account borrows and exchange rate from the market.\\n        PRICE_ERROR, // The comptroller could not obtain a required price of an asset.\\n        MATH_ERROR, // A math calculation error occurred.\\n        INSUFFICIENT_BALANCE_FOR_VAI // Caller does not have sufficient balance to mint VAI.\\n    }\\n\\n    enum FailureInfo {\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n        SET_COMPTROLLER_OWNER_CHECK,\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n        VAI_MINT_REJECTION,\\n        VAI_BURN_REJECTION,\\n        VAI_LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\n        VAI_LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\n        VAI_LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\n        VAI_LIQUIDATE_COMPTROLLER_REJECTION,\\n        VAI_LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\n        VAI_LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\n        VAI_LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\n        VAI_LIQUIDATE_FRESHNESS_CHECK,\\n        VAI_LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\n        VAI_LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\n        VAI_LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\n        VAI_LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\n        VAI_LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\n        VAI_LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\n        VAI_LIQUIDATE_SEIZE_TOO_MUCH,\\n        MINT_FEE_CALCULATION_FAILED,\\n        SET_TREASURY_OWNER_CHECK\\n    }\\n\\n    /**\\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n     **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n     */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n     */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\\n\",\"keccak256\":\"0x477449f2fbc242df3031cd079a530dcf028461efe14384ee8aba70bec2a0e496\",\"license\":\"BSD-3-Clause\"},\"contracts/Utils/Exponential.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\nimport { CarefulMath } from \\\"./CarefulMath.sol\\\";\\nimport { ExponentialNoError } from \\\"./ExponentialNoError.sol\\\";\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Venus\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract Exponential is CarefulMath, ExponentialNoError {\\n    /**\\n     * @dev Creates an exponential from numerator and denominator values.\\n     *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\\n     *            or if `denom` is zero.\\n     */\\n    function getExp(uint num, uint denom) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint scaledNumerator) = mulUInt(num, expScale);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({ mantissa: 0 }));\\n        }\\n\\n        (MathError err1, uint rational) = divUInt(scaledNumerator, denom);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({ mantissa: 0 }));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({ mantissa: rational }));\\n    }\\n\\n    /**\\n     * @dev Adds two exponentials, returning a new exponential.\\n     */\\n    function addExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        (MathError error, uint result) = addUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({ mantissa: result }));\\n    }\\n\\n    /**\\n     * @dev Subtracts two exponentials, returning a new exponential.\\n     */\\n    function subExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        (MathError error, uint result) = subUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({ mantissa: result }));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, returning a new Exp.\\n     */\\n    function mulScalar(Exp memory a, uint scalar) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint scaledMantissa) = mulUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({ mantissa: 0 }));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({ mantissa: scaledMantissa }));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mulScalarTruncate(Exp memory a, uint scalar) internal pure returns (MathError, uint) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(product));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mulScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) internal pure returns (MathError, uint) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return addUInt(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Divide an Exp by a scalar, returning a new Exp.\\n     */\\n    function divScalar(Exp memory a, uint scalar) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint descaledMantissa) = divUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({ mantissa: 0 }));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({ mantissa: descaledMantissa }));\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, returning a new Exp.\\n     */\\n    function divScalarByExp(uint scalar, Exp memory divisor) internal pure returns (MathError, Exp memory) {\\n        /*\\n          We are doing this as:\\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\\n\\n          How it works:\\n          Exp = a / b;\\n          Scalar = s;\\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\\n        */\\n        (MathError err0, uint numerator) = mulUInt(expScale, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({ mantissa: 0 }));\\n        }\\n        return getExp(numerator, divisor.mantissa);\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\\n     */\\n    function divScalarByExpTruncate(uint scalar, Exp memory divisor) internal pure returns (MathError, uint) {\\n        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(fraction));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials, returning a new exponential.\\n     */\\n    function mulExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({ mantissa: 0 }));\\n        }\\n\\n        // We add half the scale before dividing so that we get rounding instead of truncation.\\n        //  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717\\n        // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\\n        (MathError err1, uint doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({ mantissa: 0 }));\\n        }\\n\\n        (MathError err2, uint product) = divUInt(doubleScaledProductWithHalfScale, expScale);\\n        // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\\n        assert(err2 == MathError.NO_ERROR);\\n\\n        return (MathError.NO_ERROR, Exp({ mantissa: product }));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\\n     */\\n    function mulExp(uint a, uint b) internal pure returns (MathError, Exp memory) {\\n        return mulExp(Exp({ mantissa: a }), Exp({ mantissa: b }));\\n    }\\n\\n    /**\\n     * @dev Multiplies three exponentials, returning a new exponential.\\n     */\\n    function mulExp3(Exp memory a, Exp memory b, Exp memory c) internal pure returns (MathError, Exp memory) {\\n        (MathError err, Exp memory ab) = mulExp(a, b);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, ab);\\n        }\\n        return mulExp(ab, c);\\n    }\\n\\n    /**\\n     * @dev Divides two exponentials, returning a new exponential.\\n     *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\\n     *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\\n     */\\n    function divExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        return getExp(a.mantissa, b.mantissa);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9b293a09a3ec69ac16f58dce449a553b44121eb9aad666a777d8f6f4ae83f0\",\"license\":\"BSD-3-Clause\"},\"contracts/Utils/ExponentialNoError.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract ExponentialNoError {\\n    uint internal constant expScale = 1e18;\\n    uint internal constant doubleScale = 1e36;\\n    uint internal constant halfExpScale = expScale / 2;\\n    uint internal constant mantissaOne = expScale;\\n\\n    struct Exp {\\n        uint mantissa;\\n    }\\n\\n    struct Double {\\n        uint mantissa;\\n    }\\n\\n    /**\\n     * @dev Truncates the given exp to a whole number value.\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n     */\\n    function truncate(Exp memory exp) internal pure returns (uint) {\\n        // Note: We are not using careful math here as we're performing a division that cannot fail\\n        return exp.mantissa / expScale;\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mul_ScalarTruncate(Exp memory a, uint scalar) internal pure returns (uint) {\\n        Exp memory product = mul_(a, scalar);\\n        return truncate(product);\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mul_ScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) internal pure returns (uint) {\\n        Exp memory product = mul_(a, scalar);\\n        return add_(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Checks if first Exp is less than second Exp.\\n     */\\n    function lessThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n        return left.mantissa < right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp <= right Exp.\\n     */\\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n        return left.mantissa <= right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp > right Exp.\\n     */\\n    function greaterThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n        return left.mantissa > right.mantissa;\\n    }\\n\\n    /**\\n     * @dev returns true if Exp is exactly zero\\n     */\\n    function isZeroExp(Exp memory value) internal pure returns (bool) {\\n        return value.mantissa == 0;\\n    }\\n\\n    function safe224(uint n, string memory errorMessage) internal pure returns (uint224) {\\n        require(n < 2 ** 224, errorMessage);\\n        return uint224(n);\\n    }\\n\\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2 ** 32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function add_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: add_(a.mantissa, b.mantissa) });\\n    }\\n\\n    function add_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({ mantissa: add_(a.mantissa, b.mantissa) });\\n    }\\n\\n    function add_(uint a, uint b) internal pure returns (uint) {\\n        return add_(a, b, \\\"addition overflow\\\");\\n    }\\n\\n    function add_(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: sub_(a.mantissa, b.mantissa) });\\n    }\\n\\n    function sub_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({ mantissa: sub_(a.mantissa, b.mantissa) });\\n    }\\n\\n    function sub_(uint a, uint b) internal pure returns (uint) {\\n        return sub_(a, b, \\\"subtraction underflow\\\");\\n    }\\n\\n    function sub_(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function mul_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: mul_(a.mantissa, b.mantissa) / expScale });\\n    }\\n\\n    function mul_(Exp memory a, uint b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: mul_(a.mantissa, b) });\\n    }\\n\\n    function mul_(uint a, Exp memory b) internal pure returns (uint) {\\n        return mul_(a, b.mantissa) / expScale;\\n    }\\n\\n    function mul_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({ mantissa: mul_(a.mantissa, b.mantissa) / doubleScale });\\n    }\\n\\n    function mul_(Double memory a, uint b) internal pure returns (Double memory) {\\n        return Double({ mantissa: mul_(a.mantissa, b) });\\n    }\\n\\n    function mul_(uint a, Double memory b) internal pure returns (uint) {\\n        return mul_(a, b.mantissa) / doubleScale;\\n    }\\n\\n    function mul_(uint a, uint b) internal pure returns (uint) {\\n        return mul_(a, b, \\\"multiplication overflow\\\");\\n    }\\n\\n    function mul_(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        uint c = a * b;\\n        require(c / a == b, errorMessage);\\n        return c;\\n    }\\n\\n    function div_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: div_(mul_(a.mantissa, expScale), b.mantissa) });\\n    }\\n\\n    function div_(Exp memory a, uint b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: div_(a.mantissa, b) });\\n    }\\n\\n    function div_(uint a, Exp memory b) internal pure returns (uint) {\\n        return div_(mul_(a, expScale), b.mantissa);\\n    }\\n\\n    function div_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({ mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa) });\\n    }\\n\\n    function div_(Double memory a, uint b) internal pure returns (Double memory) {\\n        return Double({ mantissa: div_(a.mantissa, b) });\\n    }\\n\\n    function div_(uint a, Double memory b) internal pure returns (uint) {\\n        return div_(mul_(a, doubleScale), b.mantissa);\\n    }\\n\\n    function div_(uint a, uint b) internal pure returns (uint) {\\n        return div_(a, b, \\\"divide by zero\\\");\\n    }\\n\\n    function div_(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    function fraction(uint a, uint b) internal pure returns (Double memory) {\\n        return Double({ mantissa: div_(mul_(a, doubleScale), b) });\\n    }\\n}\\n\",\"keccak256\":\"0xce75802a56763fb96b2046b374127f080a425cfe3634670767ec040ccb6ea7e0\",\"license\":\"BSD-3-Clause\"},\"contracts/external/IProtocolShareReserve.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.25;\\n\\ninterface IProtocolShareReserve {\\n    enum IncomeType {\\n        SPREAD,\\n        LIQUIDATION,\\n        ERC4626_WRAPPER_REWARDS,\\n        FLASHLOAN\\n    }\\n\\n    function updateAssetsState(address comptroller, address asset, IncomeType incomeType) external;\\n}\\n\",\"keccak256\":\"0x029861e068e9c4d802650eaf6dd8cfed0980d2ce9a45e6fcc1e1e628ecc1f523\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600e575f80fd5b50613b5b8061001c5f395ff3fe608060405234801561000f575f80fd5b50600436106104a6575f3560e01c80637dc0d1d01161026e578063bbb8864a11610156578063dce15449116100ca578063e87554461161008f578063e875544614610b69578063f445d70314610b72578063f519fc3014610b9f578063f851a44014610bb2578063fa6331d814610bc4578063fd51a3ad14610bcd575f80fd5b8063dce1544914610ad7578063dcfbc0c714610aea578063e0f6123d14610afd578063e37d4b7914610b1f578063e85a296014610b56575f80fd5b8063c5f956af1161011b578063c5f956af14610a84578063c7ee005e14610a97578063d136af4414610714578063d24febad14610aaa578063d3270f9914610abd578063d463654c14610ad0575f80fd5b8063bbb8864a14610a1d578063bec04f7214610a3c578063bf32442d14610a45578063c32094c7146108c6578063c5b4db5514610a56575f80fd5b80639bb27d62116101ed578063a89766dd116101b2578063a89766dd14610963578063b2eafc3914610976578063b8324c7c14610989578063b88d846b146109e4578063bb82aa5e146109f7578063bb85745014610a0a575f80fd5b80639bb27d62146109045780639bd8f6e8146109175780639bf34cbb1461092a5780639cfdd9e61461093d578063a657e57914610950575f80fd5b8063919a373611610233578063919a3736146108a05780639254f5e5146108b35780639460c8b5146108c657806394b2294b146108d957806396c99064146108e2575f80fd5b80637dc0d1d0146108395780638a7dc1651461084c5780638b3113f6146107275780638c1ac18a1461086b5780639159b1771461088d575f80fd5b806342adb2111161039157806355ee1fe1116103105780636662c7c9116102d55780636662c7c9146107a5578063719f701b146107b857806373769099146107c157806376551383146108015780637938146f146108135780637d172bd514610826575f80fd5b806355ee1fe11461074d5780635cc4fdeb146107605780635dd3fc9d146107735780635f5af1aa14610792578063607ef6c11461057d575f80fd5b80634ef233fc116103565780634ef233fc1461070157806351a485e414610714578063522c656b1461072757806352d84d1e1461073a578063530e784f1461074d575f80fd5b806342adb211146106965780634964f48c146106a95780634a584432146106bc5780634d99c776146106db5780634e0853db146106ee575f80fd5b806324aaa220116104285780632ec04124116103ed5780632ec0412414610626578063317b0b771461055557806335439240146106395780634088c73e1461064c57806341a18d2c14610659578063425fad5814610683575f80fd5b806324aaa220146105ce57806326782247146105e15780632a6a6065146105f45780632b5d790c146105ce5780632bc7e29e14610607575f80fd5b806312348e961161046e57806312348e961461055557806317db216314610568578063186db48f1461057d57806321af45691461059057806324a3d622146105bb575f80fd5b806302c3bcbb146104aa57806304ef9d58146104dc57806308e0225c146104e55780630db4b4e51461050f57806310b9833814610518575b5f80fd5b6104c96104b836600461303a565b60276020525f908152604090205481565b6040519081526020015b60405180910390f35b6104c960225481565b6104c96104f3366004613055565b601360209081525f928352604080842090915290825290205481565b6104c9601d5481565b610545610526366004613055565b602c60209081525f928352604080842090915290825290205460ff1681565b60405190151581526020016104d3565b6104c961056336600461308c565b610be0565b61057b6105763660046130b0565b610bf0565b005b61057b61058b366004613140565b610ca4565b601e546105a3906001600160a01b031681565b6040516001600160a01b0390911681526020016104d3565b600a546105a3906001600160a01b031681565b61057b6105dc3660046131a7565b610d15565b6001546105a3906001600160a01b031681565b610545610602366004613225565b610d89565b6104c961061536600461303a565b60166020525f908152604090205481565b6104c961063436600461308c565b610e1f565b6104c961064736600461325b565b610ea2565b6018546105459060ff1681565b6104c9610667366004613055565b601260209081525f928352604080842090915290825290205481565b6018546105459062010000900460ff1681565b61057b6106a4366004613297565b610ed9565b61057b6106b73660046132c3565b610f56565b6104c96106ca36600461303a565b601f6020525f908152604090205481565b6104c96106e93660046132dd565b61108b565b61057b6106fc3660046132f7565b6110a8565b61057b61070f36600461303a565b61116b565b61057b610722366004613140565b611299565b61057b610735366004613297565b611304565b6105a361074836600461308c565b611312565b6104c961075b36600461303a565b61133a565b6104c961076e3660046132f7565b611344565b6104c961078136600461303a565b602b6020525f908152604090205481565b6104c96107a036600461303a565b611372565b61057b6107b336600461308c565b611409565b6104c9601c5481565b6107e96107cf36600461303a565b60356020525f90815260409020546001600160601b031681565b6040516001600160601b0390911681526020016104d3565b60185461054590610100900460ff1681565b61057b6108213660046132c3565b611495565b601b546105a3906001600160a01b031681565b6004546105a3906001600160a01b031681565b6104c961085a36600461303a565b60146020525f908152604090205481565b61054561087936600461303a565b602d6020525f908152604090205460ff1681565b6104c961089b366004613329565b6115bc565b61057b6108ae36600461303a565b6115f5565b6015546105a3906001600160a01b031681565b6104c96108d436600461303a565b611661565b6104c960075481565b6108f56108f036600461336a565b61166b565b6040516104d3939291906133b1565b6025546105a3906001600160a01b031681565b6104c96109253660046133da565b611718565b6104c961093836600461303a565b611745565b6104c961094b36600461303a565b6117db565b6037546107e9906001600160601b031681565b61057b610971366004613404565b611872565b6020546105a3906001600160a01b031681565b6109c061099736600461303a565b60106020525f90815260409020546001600160e01b03811690600160e01b900463ffffffff1682565b604080516001600160e01b03909316835263ffffffff9091166020830152016104d3565b61057b6109f236600461341f565b6119b3565b6002546105a3906001600160a01b031681565b61057b610a1836600461303a565b611b17565b6104c9610a2b36600461303a565b602a6020525f908152604090205481565b6104c960175481565b6033546001600160a01b03166105a3565b610a6c6ec097ce7bc90715b34b9f100000000081565b6040516001600160e01b0390911681526020016104d3565b6021546105a3906001600160a01b031681565b6031546105a3906001600160a01b031681565b6104c9610ab836600461349b565b611bac565b6026546105a3906001600160a01b031681565b6107e95f81565b6105a3610ae53660046133da565b611d13565b6003546105a3906001600160a01b031681565b610545610b0b36600461303a565b60386020525f908152604090205460ff1681565b6109c0610b2d36600461303a565b60116020525f90815260409020546001600160e01b03811690600160e01b900463ffffffff1682565b610545610b643660046134b8565b611d47565b6104c960055481565b610545610b80366004613055565b603260209081525f928352604080842090915290825290205460ff1681565b6104c9610bad36600461303a565b611d8b565b5f546105a3906001600160a01b031681565b6104c9601a5481565b6104c9610bdb3660046133da565b611e22565b5f610bea82611ec6565b92915050565b610c1160405180606001604052806032815260200161392a60329139611fa0565b6015546001600160a01b03838116911614610c3757610c37610c3283612050565b612072565b6001600160a01b038381165f81815260326020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527fc080966e9e93529edc1b244180c245bc60f3d86f1e690a17651a5e428746a8cd91015b60405180910390a3505050565b610d0f8484808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250506040805160208088028281018201909352878252909350879250869182918501908490808284375f920191909152506120b792505050565b50505050565b610d828585808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250506040805160208089028281018201909352888252909350889250879182918501908490808284375f92019190915250869250612207915050565b5050505050565b5f610dc86040518060400160405280601881526020017f5f73657450726f746f636f6c50617573656428626f6f6c290000000000000000815250611fa0565b60188054831515620100000262ff0000199091161790556040517fd7500633dd3ddd74daa7af62f8c8404c7fe4a81da179998db851696bed004b3890610e1390841515815260200190565b60405180910390a15090565b5f60175482808203610e4c5760405162461bcd60e51b8152600401610e43906134e7565b60405180910390fd5b610e54612296565b601780549085905560408051828152602081018790527f73747d68b346dce1e932bcd238282e7ac84c01569e1f8d0469c222fdc6e9d5a491015b60405180910390a15f9350505b5050919050565b5f610ec46040518060600160405280602f8152602001613985602f9139611fa0565b610ecf8484846122e2565b90505b9392505050565b610efa6040518060600160405280602a81526020016139b4602a9139611fa0565b610f0382612434565b6001600160a01b0382165f81815260386020526040808220805460ff191685151590811790915590519092917f1f4df5032f431b9890646a781be28b0d693e581666d1a80be27ae3959069172291a35050565b610f946040518060400160405280601a81526020017f736574506f6f6c4163746976652875696e7439362c626f6f6c29000000000000815250611fa0565b6037546001600160601b039081169083161115610fcf57604051632db8671b60e11b81526001600160601b0383166004820152602401610e43565b6001600160601b038216610ff657604051630203217b60e61b815260040160405180910390fd5b6001600160601b0382165f908152603660205260409020600281015482151560ff90911615150361102657505050565b60028101546040805160ff9092161515825283151560208301526001600160601b038516917f75e42fceb039532886a9d75717e843bfef67fd7f6f91f0fc5b1d48e9ce8a1ba9910160405180910390a2600201805460ff191691151591909117905550565b6001600160a01b031660a09190911b6001600160a01b0319161790565b601b546001600160a01b03908116908490811682036110d95760405162461bcd60e51b8152600401610e4390613532565b6110e1612296565b6110ea85612434565b601b546001600160a01b03161561110357611103612482565b601b80546001600160a01b0319166001600160a01b038716908117909155601c859055601d84905560408051868152602081018690527f7059037d74ee16b0fb06a4a30f3348dd2635f301f92e373c92899a25a522ef6e910160405180910390a25050505050565b611173612296565b61117c81612434565b5f816001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111b9573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111dd9190613574565b6033549091506001600160a01b0380831691161461123d5760405162461bcd60e51b815260206004820152601a60248201527f696e76616c6964207876732076746f6b656e20616464726573730000000000006044820152606401610e43565b6034546040516001600160a01b038085169216907f2565e1579c0926afb7113edbfd85373e85cadaa3e0346f04de19686a2bb86ed1905f90a350603480546001600160a01b0319166001600160a01b0392909216919091179055565b610d0f8484808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250506040805160208088028281018201909352878252909350879250869182918501908490808284375f9201919091525061261192505050565b61130e8282612761565b5050565b600d8181548110611321575f80fd5b5f918252602090912001546001600160a01b0316905081565b5f610bea82612801565b5f6113666040518060600160405280602c8152602001613a2a602c9139611fa0565b610ecf5f858585612898565b600a545f906001600160a01b03908116908390811682036113a55760405162461bcd60e51b8152600401610e4390613532565b6113ad612296565b6113b684612434565b600a80546001600160a01b038681166001600160a01b03198316179092556040519116907f0613b6ee6a04f0d09f390e4d9318894b9f6ac7fd83897cd8d18896ba579c401e90610e8e908390889061358f565b601a548180820361142c5760405162461bcd60e51b8152600401610e43906134e7565b611434612296565b601b546001600160a01b03161561144d5761144d612482565b601a80549084905560408051828152602081018690527fe81d4ac15e5afa1e708e66664eddc697177423d950d133bda8262d8885e6da3b91015b60405180910390a150505050565b6114b6604051806060016040528060258152602001613a7f60259139611fa0565b6037546001600160601b0390811690831611156114f157604051632db8671b60e11b81526001600160601b0383166004820152602401610e43565b6001600160601b03821661151857604051630203217b60e61b815260040160405180910390fd5b6001600160601b0382165f908152603660205260409020600281015482151561010090910460ff1615150361154c57505050565b60028101546040805161010090920460ff161515825283151560208301526001600160601b038516917f9d2a9183b06e3492f91d3d88ae222e700c8873dd0068f9c3fc783eccb96a1ec4910160405180910390a260020180549115156101000261ff001990921691909117905550565b5f6115de604051806060016040528060338152602001613aa460339139611fa0565b6115ea85858585612898565b90505b949350505050565b6115fd612296565b61160681612434565b6033546040516001600160a01b038084169216907ffe7fd0d872def0f65050e9f38fc6691d0c192c694a56f09b04bec5fb2ea61f2b905f90a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b5f610bea82612ab5565b60366020525f9081526040902080548190611685906135a9565b80601f01602080910402602001604051908101604052809291908181526020018280546116b1906135a9565b80156116fc5780601f106116d3576101008083540402835291602001916116fc565b820191905f5260205f20905b8154815290600101906020018083116116df57829003601f168201915b5050506002909301549192505060ff8082169161010090041683565b5f61173a604051806060016040528060288152602001613ad760289139611fa0565b610ed25f84846122e2565b6026545f906001600160a01b03908116908390811682036117785760405162461bcd60e51b8152600401610e4390613532565b611780612296565b61178984612434565b602680546001600160a01b038681166001600160a01b0319831681179093556040519116917f0f7eb572d1b3053a0a3a33c04151364cf88d163182a5e4e1088cb8e52321e08a91610e8e91849161358f565b6015545f906001600160a01b039081169083908116820361180e5760405162461bcd60e51b8152600401610e4390613532565b611816612296565b61181f84612434565b601580546001600160a01b038681166001600160a01b03198316179092556040519116907fe1ddcb2dab8e5b03cfc8c67a0d5861d91d16f7bd2612fd381faf4541d212c9b290610e8e908390889061358f565b611893604051806060016040528060278152602001613aff60279139611fa0565b6037546001600160601b0390811690841611156118ce57604051632db8671b60e11b81526001600160601b0384166004820152602401610e43565b5f6118d9848461108b565b5f81815260096020526040902080549192509060ff1661190c57604051630665210960e21b815260040160405180910390fd5b82151581600601600c9054906101000a900460ff1615150361192f575050505050565b600681015460408051600160601b90920460ff161515825284151560208301526001600160a01b038616916001600160601b038816917fe40f9c4af130bdb5bd1650ab4bc918dba9d900fa94685f0113e72a6cfe6c5fcc910160405180910390a36006018054921515600160601b0260ff60601b1990931692909217909155505050565b6119f16040518060400160405280601b81526020017f736574506f6f6c4c6162656c2875696e7439362c737472696e67290000000000815250611fa0565b6037546001600160601b039081169084161115611a2c57604051632db8671b60e11b81526001600160601b0384166004820152602401610e43565b6001600160601b038316611a5357604051630203217b60e61b815260040160405180910390fd5b5f819003611a745760405163522e397360e11b815260040160405180910390fd5b6001600160601b0383165f90815260366020526040908190209051611a9c90849084906135e1565b60405190819003812090611ab19083906135f0565b604051809103902003611ac45750505050565b836001600160601b03167f1ebc260ee8077871ff0b70b184ff9dac4ecee8b0f7dcc4f3a3f5068549f5078e825f018585604051611b039392919061368a565b60405180910390a280610d82838583613781565b6025546001600160a01b0390811690829081168203611b485760405162461bcd60e51b8152600401610e4390613532565b611b50612296565b611b5983612434565b602580546001600160a01b038581166001600160a01b03198316179092556040519116907fa5ea5616d5f6dbbaa62fdfcf3856723216eed485c394d9e51ec8e6d40e1d1ac190611487908390879061358f565b6020545f90611bc3906001600160a01b0316612b2a565b670de0b6b3a76400008210611c0c5760405162461bcd60e51b815260206004820152600f60248201526e70657263656e74203e3d203130302560881b6044820152606401610e43565b611c1584612434565b611c1e83612434565b6020805460218054602280546001600160a01b03198086166001600160a01b038c8116919091179097558316898716179093558690556040519284169316917f29f06ea15931797ebaed313d81d100963dc22cb213cb4ce2737b5a62b1a8b1e890611c8c9085908a9061358f565b60405180910390a17f8de763046d7b8f08b6c3d03543de1d615309417842bb5d2d62f110f65809ddac8287604051611cc592919061358f565b60405180910390a160408051828152602081018790527f0893f8f4101baaabbeb513f96761e7a36eb837403c82cc651c292a4abdc94ed7910160405180910390a15f5b979650505050505050565b6008602052815f5260405f208181548110611d2c575f80fd5b5f918252602090912001546001600160a01b03169150829050565b6001600160a01b0382165f90815260296020526040812081836008811115611d7157611d7161351e565b815260208101919091526040015f205460ff169392505050565b6028545f906001600160a01b0390811690839081168203611dbe5760405162461bcd60e51b8152600401610e4390613532565b611dc6612296565b611dcf84612434565b602880546001600160a01b038681166001600160a01b03198316179092556040519116907f0f1eca7612e020f6e4582bcead0573eba4b5f7b56668754c6aed82ef12057dd490610e8e908390889061358f565b5f611e2b612b85565b60185460ff16158015611e465750601854610100900460ff16155b611e825760405162461bcd60e51b815260206004820152600d60248201526c159052481a5cc81c185d5cd959609a1b6044820152606401610e43565b6015546001600160a01b03163314611ea757611ea0600e6016612bd3565b9050610bea565b6001600160a01b0383165f908152601660205260408120839055610ed2565b5f60055482808203611eea5760405162461bcd60e51b8152600401610e43906134e7565b611ef2612296565b604080516020808201835286825282518082018452670c7d713b49da00008152835191820190935266b1a2bc2ec500008152815183519293921080611f38575082518151115b15611f5257611f48600580612bd3565b9550505050610e9b565b600580549088905560408051828152602081018a90527f3b9670cf975d26958e754b57098eaa2ac914d8d2a31b83257997b9f346110fd9910160405180910390a15f98975050505050505050565b6028546040516318c5e8ab60e01b81526001600160a01b03909116906318c5e8ab90611fd2903390859060040161383b565b602060405180830381865afa158015611fed573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612011919061385e565b61204d5760405162461bcd60e51b815260206004820152600d60248201526c1858d8d95cdcc819195b9a5959609a1b6044820152606401610e43565b50565b5f60095f61205e5f8561108b565b81526020019081526020015f209050919050565b805460ff1661204d5760405162461bcd60e51b81526020600482015260116024820152701b585c9ad95d081b9bdd081b1a5cdd1959607a1b6044820152606401610e43565b6120d8604051806060016040528060298152602001613a5660299139611fa0565b8151815181158015906120ea57508082145b6121265760405162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a59081a5b9c1d5d609a1b6044820152606401610e43565b5f5b82811015610d825783818151811061214257612142613879565b6020026020010151601f5f87848151811061215f5761215f613879565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020015f208190555084818151811061219c5761219c613879565b60200260200101516001600160a01b03167f6f1951b2aad10f3fc81b86d91105b413a5b3f847a34bbc5ce1904201b14438f68583815181106121e0576121e0613879565b60200260200101516040516121f791815260200190565b60405180910390a2600101612128565b61222860405180606001604052806029815260200161395c60299139611fa0565b825182515f5b8281101561228e575f5b828110156122855761227d87838151811061225557612255613879565b602002602001015187838151811061226f5761226f613879565b602002602001015187612c4a565b600101612238565b5060010161222e565b505050505050565b5f546001600160a01b031633146122e05760405162461bcd60e51b815260206004820152600e60248201526d37b7363c9030b236b4b71031b0b760911b6044820152606401610e43565b565b5f60095f6122f0868661108b565b81526020019081526020015f2060050154828082036123215760405162461bcd60e51b8152600401610e43906134e7565b6037546001600160601b03908116908716111561235c57604051632db8671b60e11b81526001600160601b0387166004820152602401610e43565b5f60095f61236a898961108b565b81526020019081526020015f20905061238281612072565b670de0b6b3a76400008510156123cd5760405162461bcd60e51b815260206004820152601060248201526f0d2dcc6cadce8d2ecca40784062ca62760831b6044820152606401610e43565b856001600160a01b0316876001600160601b03167fc1d7bc090f3a87255c2f4e56f66d1b7a49683d279f77921b1701aa5d733ef74583600501548860405161241f929190918252602082015260400190565b60405180910390a3600581018590555f611d08565b6001600160a01b03811661204d5760405162461bcd60e51b815260206004820152601560248201527463616e2774206265207a65726f206164647265737360581b6044820152606401610e43565b601c5415806124925750601c5443105b1561249957565b6033546040516370a0823160e01b81523060048201526001600160a01b03909116905f9082906370a0823190602401602060405180830381865afa1580156124e3573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612507919061388d565b9050805f03612514575050565b5f8061252243601c54612cee565b90505f612531601a5483612d27565b905080841061254257809250612546565b8392505b601d54831015612557575050505050565b43601c55601b54612575906001600160a01b03878116911685612d68565b6040518381527ff6d4b8f74d85a6e2d7a50225957b8a6cfec69ad92f5905627260541aa0a5565d9060200160405180910390a1601b5f9054906101000a90046001600160a01b03166001600160a01b031663faa1809e6040518163ffffffff1660e01b81526004015f604051808303815f87803b1580156125f4575f80fd5b505af1158015612606573d5f803e3d5ffd5b505050505050505050565b6126326040518060600160405280602981526020016139de60299139611fa0565b81518151811580159061264457508082145b6126805760405162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a59081a5b9c1d5d609a1b6044820152606401610e43565b5f5b82811015610d825783818151811061269c5761269c613879565b602002602001015160275f8784815181106126b9576126b9613879565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020015f20819055508481815181106126f6576126f6613879565b60200260200101516001600160a01b03167f9e0ad9cee10bdf36b7fbd38910c0bdff0f275ace679b45b922381c2723d676f885838151811061273a5761273a613879565b602002602001015160405161275191815260200190565b60405180910390a2600101612682565b612782604051806060016040528060238152602001613a0760239139611fa0565b6015546001600160a01b038381169116146127a3576127a3610c3283612050565b6001600160a01b0382165f818152602d6020908152604091829020805460ff191685151590811790915591519182527f03561d5280ebb02280893b1d60978e4a27e7654a149c5d0e7c2cf65389ce1694910160405180910390a25050565b6004545f906001600160a01b03908116908390811682036128345760405162461bcd60e51b8152600401610e4390613532565b61283c612296565b61284584612434565b600480546001600160a01b038681166001600160a01b03198316179092556040519116907fd52b2b9b7e9ee655fcb95d2e5b9e0c9f69e7ef2b8e9d2d0ea78402d576d22e2290610e8e908390889061358f565b5f6128a284612434565b6037546001600160601b0390811690861611156128dd57604051632db8671b60e11b81526001600160601b0386166004820152602401610e43565b5f60095f6128eb888861108b565b81526020019081526020015f20905061290381612072565b670de0b6b3a76400008411156129275761291f60066008612bd3565b9150506115ed565b83158015906129a157506004805460405163fc57d4df60e01b81526001600160a01b038881169382019390935291169063fc57d4df90602401602060405180830381865afa15801561297b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061299f919061388d565b155b156129b25761291f600d6009612bd3565b670de0b6b3a76400008311156129ce5761291f60146019612bd3565b838310156129e25761291f6014601a612bd3565b6001810154848114612a45576001820185905560408051828152602081018790526001600160a01b038816916001600160601b038a16917f0d1a615379dc62cec7bc63b7e313a07ed659918f4ad3720b3af8041b305146f2910160405180910390a35b6004820154848114612aa8576004830185905560408051828152602081018790526001600160a01b038916916001600160601b038b16917fc90f7b48c299a8d58b0b9e2756e27773c6fb1daab159af052d6c5b791bc7eef7910160405180910390a35b5f98975050505050505050565b5f612abe612296565b612ac782612434565b603180546001600160a01b038481166001600160a01b03198316179092556040519116907fcb20dab7409e4fb972d9adccb39530520b226ce6940d85c9523a499b950b6ea390612b1a908390869061358f565b60405180910390a15f9392505050565b5f546001600160a01b03163314806120115750336001600160a01b0382161461204d5760405162461bcd60e51b815260206004820152600d60248201526c1858d8d95cdcc819195b9a5959609a1b6044820152606401610e43565b60185462010000900460ff16156122e05760405162461bcd60e51b81526020600482015260126024820152711c1c9bdd1bd8dbdb081a5cc81c185d5cd95960721b6044820152606401610e43565b5f7f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa0836014811115612c0757612c0761351e565b83601a811115612c1957612c1961351e565b6040805192835260208301919091525f9082015260600160405180910390a1826014811115610ed257610ed261351e565b612c56610c3284612050565b6001600160a01b0383165f9081526029602052604081208291846008811115612c8157612c8161351e565b815260208101919091526040015f20805460ff1916911515919091179055816008811115612cb157612cb161351e565b836001600160a01b03167f35007a986bcd36d2f73fc7f1b73762e12eadb4406dd163194950fd3b5a6a827d83604051610c97911515815260200190565b5f610ed28383604051806040016040528060158152602001747375627472616374696f6e20756e646572666c6f7760581b815250612dbf565b5f610ed283836040518060400160405280601781526020017f6d756c7469706c69636174696f6e206f766572666c6f77000000000000000000815250612ded565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052612dba908490612e46565b505050565b5f8184841115612de25760405162461bcd60e51b8152600401610e4391906138a4565b50610ecf83856138ca565b5f831580612df9575082155b15612e0557505f610ed2565b5f612e1084866138dd565b905083612e1d86836138f4565b148390612e3d5760405162461bcd60e51b8152600401610e4391906138a4565b50949350505050565b5f612e9a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612f199092919063ffffffff16565b905080515f1480612eba575080806020019051810190612eba919061385e565b612dba5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610e43565b6060610ecf84845f85855f80866001600160a01b03168587604051612f3e9190613913565b5f6040518083038185875af1925050503d805f8114612f78576040519150601f19603f3d011682016040523d82523d5f602084013e612f7d565b606091505b5091509150611d088783838760608315612ff75782515f03612ff0576001600160a01b0385163b612ff05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610e43565b50816115ed565b6115ed838381511561300c5781518083602001fd5b8060405162461bcd60e51b8152600401610e4391906138a4565b6001600160a01b038116811461204d575f80fd5b5f6020828403121561304a575f80fd5b8135610ed281613026565b5f8060408385031215613066575f80fd5b823561307181613026565b9150602083013561308181613026565b809150509250929050565b5f6020828403121561309c575f80fd5b5035919050565b801515811461204d575f80fd5b5f805f606084860312156130c2575f80fd5b83356130cd81613026565b925060208401356130dd81613026565b915060408401356130ed816130a3565b809150509250925092565b5f8083601f840112613108575f80fd5b50813567ffffffffffffffff81111561311f575f80fd5b6020830191508360208260051b8501011115613139575f80fd5b9250929050565b5f805f8060408587031215613153575f80fd5b843567ffffffffffffffff8082111561316a575f80fd5b613176888389016130f8565b9096509450602087013591508082111561318e575f80fd5b5061319b878288016130f8565b95989497509550505050565b5f805f805f606086880312156131bb575f80fd5b853567ffffffffffffffff808211156131d2575f80fd5b6131de89838a016130f8565b909750955060208801359150808211156131f6575f80fd5b50613203888289016130f8565b9094509250506040860135613217816130a3565b809150509295509295909350565b5f60208284031215613235575f80fd5b8135610ed2816130a3565b80356001600160601b0381168114613256575f80fd5b919050565b5f805f6060848603121561326d575f80fd5b61327684613240565b9250602084013561328681613026565b929592945050506040919091013590565b5f80604083850312156132a8575f80fd5b82356132b381613026565b91506020830135613081816130a3565b5f80604083850312156132d4575f80fd5b6132b383613240565b5f80604083850312156132ee575f80fd5b61307183613240565b5f805f60608486031215613309575f80fd5b833561331481613026565b95602085013595506040909401359392505050565b5f805f806080858703121561333c575f80fd5b61334585613240565b9350602085013561335581613026565b93969395505050506040820135916060013590565b5f6020828403121561337a575f80fd5b610ed282613240565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b606081525f6133c36060830186613383565b931515602083015250901515604090910152919050565b5f80604083850312156133eb575f80fd5b82356133f681613026565b946020939093013593505050565b5f805f60608486031215613416575f80fd5b6130cd84613240565b5f805f60408486031215613431575f80fd5b61343a84613240565b9250602084013567ffffffffffffffff80821115613456575f80fd5b818601915086601f830112613469575f80fd5b813581811115613477575f80fd5b876020828501011115613488575f80fd5b6020830194508093505050509250925092565b5f805f606084860312156134ad575f80fd5b833561327681613026565b5f80604083850312156134c9575f80fd5b82356134d481613026565b9150602083013560098110613081575f80fd5b6020808252601e908201527f6f6c642076616c75652069732073616d65206173206e65772076616c75650000604082015260600190565b634e487b7160e01b5f52602160045260245ffd5b60208082526022908201527f6f6c6420616464726573732069732073616d65206173206e6577206164647265604082015261737360f01b606082015260800190565b5f60208284031215613584575f80fd5b8151610ed281613026565b6001600160a01b0392831681529116602082015260400190565b600181811c908216806135bd57607f821691505b6020821081036135db57634e487b7160e01b5f52602260045260245ffd5b50919050565b818382375f9101908152919050565b5f8083546135fd816135a9565b60018281168015613615576001811461362a57613656565b60ff1984168752821515830287019450613656565b875f526020805f205f5b8581101561364d5781548a820152908401908201613634565b50505082870194505b50929695505050505050565b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b604081525f80855461369b816135a9565b806040860152606060018084165f81146136bc57600181146136d857613707565b60ff1985166060890152606084151560051b8901019550613707565b8a5f526020805f205f5b868110156136fd5781548b82018701529084019082016136e2565b8a01606001975050505b5050505050828103602084015261371f818587613662565b9695505050505050565b634e487b7160e01b5f52604160045260245ffd5b601f821115612dba57805f5260205f20601f840160051c810160208510156137625750805b601f840160051c820191505b81811015610d82575f815560010161376e565b67ffffffffffffffff83111561379957613799613729565b6137ad836137a783546135a9565b8361373d565b5f601f8411600181146137de575f85156137c75750838201355b5f19600387901b1c1916600186901b178355610d82565b5f83815260208120601f198716915b8281101561380d57868501358255602094850194600190920191016137ed565b5086821015613829575f1960f88860031b161c19848701351681555b505060018560011b0183555050505050565b6001600160a01b03831681526040602082018190525f90610ecf90830184613383565b5f6020828403121561386e575f80fd5b8151610ed2816130a3565b634e487b7160e01b5f52603260045260245ffd5b5f6020828403121561389d575f80fd5b5051919050565b602081525f610ed26020830184613383565b634e487b7160e01b5f52601160045260245ffd5b81810381811115610bea57610bea6138b6565b8082028115828204841417610bea57610bea6138b6565b5f8261390e57634e487b7160e01b5f52601260045260245ffd5b500490565b5f82518060208501845e5f92019182525091905056fe5f736574466f726365644c69717569646174696f6e466f725573657228616464726573732c616464726573732c626f6f6c295f736574416374696f6e7350617573656428616464726573735b5d2c75696e74385b5d2c626f6f6c297365744c69717569646174696f6e496e63656e746976652875696e7439362c616464726573732c75696e743235362973657457686974654c697374466c6173684c6f616e4163636f756e7428616464726573732c626f6f6c295f7365744d61726b6574537570706c794361707328616464726573735b5d2c75696e743235365b5d295f736574466f726365644c69717569646174696f6e28616464726573732c626f6f6c29736574436f6c6c61746572616c466163746f7228616464726573732c75696e743235362c75696e74323536295f7365744d61726b6574426f72726f774361707328616464726573735b5d2c75696e743235365b5d29736574416c6c6f77436f7265506f6f6c46616c6c6261636b2875696e7439362c626f6f6c29736574436f6c6c61746572616c466163746f722875696e7439362c616464726573732c75696e743235362c75696e74323536297365744c69717569646174696f6e496e63656e7469766528616464726573732c75696e74323536297365744973426f72726f77416c6c6f7765642875696e7439362c616464726573732c626f6f6c29a26469706673582212202b7dfaef11aece86d2bda6968f07a64091baf1c1621de138b7f0904f5ae86fc364736f6c63430008190033",
  "deployedBytecode": "0x608060405234801561000f575f80fd5b50600436106104a6575f3560e01c80637dc0d1d01161026e578063bbb8864a11610156578063dce15449116100ca578063e87554461161008f578063e875544614610b69578063f445d70314610b72578063f519fc3014610b9f578063f851a44014610bb2578063fa6331d814610bc4578063fd51a3ad14610bcd575f80fd5b8063dce1544914610ad7578063dcfbc0c714610aea578063e0f6123d14610afd578063e37d4b7914610b1f578063e85a296014610b56575f80fd5b8063c5f956af1161011b578063c5f956af14610a84578063c7ee005e14610a97578063d136af4414610714578063d24febad14610aaa578063d3270f9914610abd578063d463654c14610ad0575f80fd5b8063bbb8864a14610a1d578063bec04f7214610a3c578063bf32442d14610a45578063c32094c7146108c6578063c5b4db5514610a56575f80fd5b80639bb27d62116101ed578063a89766dd116101b2578063a89766dd14610963578063b2eafc3914610976578063b8324c7c14610989578063b88d846b146109e4578063bb82aa5e146109f7578063bb85745014610a0a575f80fd5b80639bb27d62146109045780639bd8f6e8146109175780639bf34cbb1461092a5780639cfdd9e61461093d578063a657e57914610950575f80fd5b8063919a373611610233578063919a3736146108a05780639254f5e5146108b35780639460c8b5146108c657806394b2294b146108d957806396c99064146108e2575f80fd5b80637dc0d1d0146108395780638a7dc1651461084c5780638b3113f6146107275780638c1ac18a1461086b5780639159b1771461088d575f80fd5b806342adb2111161039157806355ee1fe1116103105780636662c7c9116102d55780636662c7c9146107a5578063719f701b146107b857806373769099146107c157806376551383146108015780637938146f146108135780637d172bd514610826575f80fd5b806355ee1fe11461074d5780635cc4fdeb146107605780635dd3fc9d146107735780635f5af1aa14610792578063607ef6c11461057d575f80fd5b80634ef233fc116103565780634ef233fc1461070157806351a485e414610714578063522c656b1461072757806352d84d1e1461073a578063530e784f1461074d575f80fd5b806342adb211146106965780634964f48c146106a95780634a584432146106bc5780634d99c776146106db5780634e0853db146106ee575f80fd5b806324aaa220116104285780632ec04124116103ed5780632ec0412414610626578063317b0b771461055557806335439240146106395780634088c73e1461064c57806341a18d2c14610659578063425fad5814610683575f80fd5b806324aaa220146105ce57806326782247146105e15780632a6a6065146105f45780632b5d790c146105ce5780632bc7e29e14610607575f80fd5b806312348e961161046e57806312348e961461055557806317db216314610568578063186db48f1461057d57806321af45691461059057806324a3d622146105bb575f80fd5b806302c3bcbb146104aa57806304ef9d58146104dc57806308e0225c146104e55780630db4b4e51461050f57806310b9833814610518575b5f80fd5b6104c96104b836600461303a565b60276020525f908152604090205481565b6040519081526020015b60405180910390f35b6104c960225481565b6104c96104f3366004613055565b601360209081525f928352604080842090915290825290205481565b6104c9601d5481565b610545610526366004613055565b602c60209081525f928352604080842090915290825290205460ff1681565b60405190151581526020016104d3565b6104c961056336600461308c565b610be0565b61057b6105763660046130b0565b610bf0565b005b61057b61058b366004613140565b610ca4565b601e546105a3906001600160a01b031681565b6040516001600160a01b0390911681526020016104d3565b600a546105a3906001600160a01b031681565b61057b6105dc3660046131a7565b610d15565b6001546105a3906001600160a01b031681565b610545610602366004613225565b610d89565b6104c961061536600461303a565b60166020525f908152604090205481565b6104c961063436600461308c565b610e1f565b6104c961064736600461325b565b610ea2565b6018546105459060ff1681565b6104c9610667366004613055565b601260209081525f928352604080842090915290825290205481565b6018546105459062010000900460ff1681565b61057b6106a4366004613297565b610ed9565b61057b6106b73660046132c3565b610f56565b6104c96106ca36600461303a565b601f6020525f908152604090205481565b6104c96106e93660046132dd565b61108b565b61057b6106fc3660046132f7565b6110a8565b61057b61070f36600461303a565b61116b565b61057b610722366004613140565b611299565b61057b610735366004613297565b611304565b6105a361074836600461308c565b611312565b6104c961075b36600461303a565b61133a565b6104c961076e3660046132f7565b611344565b6104c961078136600461303a565b602b6020525f908152604090205481565b6104c96107a036600461303a565b611372565b61057b6107b336600461308c565b611409565b6104c9601c5481565b6107e96107cf36600461303a565b60356020525f90815260409020546001600160601b031681565b6040516001600160601b0390911681526020016104d3565b60185461054590610100900460ff1681565b61057b6108213660046132c3565b611495565b601b546105a3906001600160a01b031681565b6004546105a3906001600160a01b031681565b6104c961085a36600461303a565b60146020525f908152604090205481565b61054561087936600461303a565b602d6020525f908152604090205460ff1681565b6104c961089b366004613329565b6115bc565b61057b6108ae36600461303a565b6115f5565b6015546105a3906001600160a01b031681565b6104c96108d436600461303a565b611661565b6104c960075481565b6108f56108f036600461336a565b61166b565b6040516104d3939291906133b1565b6025546105a3906001600160a01b031681565b6104c96109253660046133da565b611718565b6104c961093836600461303a565b611745565b6104c961094b36600461303a565b6117db565b6037546107e9906001600160601b031681565b61057b610971366004613404565b611872565b6020546105a3906001600160a01b031681565b6109c061099736600461303a565b60106020525f90815260409020546001600160e01b03811690600160e01b900463ffffffff1682565b604080516001600160e01b03909316835263ffffffff9091166020830152016104d3565b61057b6109f236600461341f565b6119b3565b6002546105a3906001600160a01b031681565b61057b610a1836600461303a565b611b17565b6104c9610a2b36600461303a565b602a6020525f908152604090205481565b6104c960175481565b6033546001600160a01b03166105a3565b610a6c6ec097ce7bc90715b34b9f100000000081565b6040516001600160e01b0390911681526020016104d3565b6021546105a3906001600160a01b031681565b6031546105a3906001600160a01b031681565b6104c9610ab836600461349b565b611bac565b6026546105a3906001600160a01b031681565b6107e95f81565b6105a3610ae53660046133da565b611d13565b6003546105a3906001600160a01b031681565b610545610b0b36600461303a565b60386020525f908152604090205460ff1681565b6109c0610b2d36600461303a565b60116020525f90815260409020546001600160e01b03811690600160e01b900463ffffffff1682565b610545610b643660046134b8565b611d47565b6104c960055481565b610545610b80366004613055565b603260209081525f928352604080842090915290825290205460ff1681565b6104c9610bad36600461303a565b611d8b565b5f546105a3906001600160a01b031681565b6104c9601a5481565b6104c9610bdb3660046133da565b611e22565b5f610bea82611ec6565b92915050565b610c1160405180606001604052806032815260200161392a60329139611fa0565b6015546001600160a01b03838116911614610c3757610c37610c3283612050565b612072565b6001600160a01b038381165f81815260326020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527fc080966e9e93529edc1b244180c245bc60f3d86f1e690a17651a5e428746a8cd91015b60405180910390a3505050565b610d0f8484808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250506040805160208088028281018201909352878252909350879250869182918501908490808284375f920191909152506120b792505050565b50505050565b610d828585808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250506040805160208089028281018201909352888252909350889250879182918501908490808284375f92019190915250869250612207915050565b5050505050565b5f610dc86040518060400160405280601881526020017f5f73657450726f746f636f6c50617573656428626f6f6c290000000000000000815250611fa0565b60188054831515620100000262ff0000199091161790556040517fd7500633dd3ddd74daa7af62f8c8404c7fe4a81da179998db851696bed004b3890610e1390841515815260200190565b60405180910390a15090565b5f60175482808203610e4c5760405162461bcd60e51b8152600401610e43906134e7565b60405180910390fd5b610e54612296565b601780549085905560408051828152602081018790527f73747d68b346dce1e932bcd238282e7ac84c01569e1f8d0469c222fdc6e9d5a491015b60405180910390a15f9350505b5050919050565b5f610ec46040518060600160405280602f8152602001613985602f9139611fa0565b610ecf8484846122e2565b90505b9392505050565b610efa6040518060600160405280602a81526020016139b4602a9139611fa0565b610f0382612434565b6001600160a01b0382165f81815260386020526040808220805460ff191685151590811790915590519092917f1f4df5032f431b9890646a781be28b0d693e581666d1a80be27ae3959069172291a35050565b610f946040518060400160405280601a81526020017f736574506f6f6c4163746976652875696e7439362c626f6f6c29000000000000815250611fa0565b6037546001600160601b039081169083161115610fcf57604051632db8671b60e11b81526001600160601b0383166004820152602401610e43565b6001600160601b038216610ff657604051630203217b60e61b815260040160405180910390fd5b6001600160601b0382165f908152603660205260409020600281015482151560ff90911615150361102657505050565b60028101546040805160ff9092161515825283151560208301526001600160601b038516917f75e42fceb039532886a9d75717e843bfef67fd7f6f91f0fc5b1d48e9ce8a1ba9910160405180910390a2600201805460ff191691151591909117905550565b6001600160a01b031660a09190911b6001600160a01b0319161790565b601b546001600160a01b03908116908490811682036110d95760405162461bcd60e51b8152600401610e4390613532565b6110e1612296565b6110ea85612434565b601b546001600160a01b03161561110357611103612482565b601b80546001600160a01b0319166001600160a01b038716908117909155601c859055601d84905560408051868152602081018690527f7059037d74ee16b0fb06a4a30f3348dd2635f301f92e373c92899a25a522ef6e910160405180910390a25050505050565b611173612296565b61117c81612434565b5f816001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111b9573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111dd9190613574565b6033549091506001600160a01b0380831691161461123d5760405162461bcd60e51b815260206004820152601a60248201527f696e76616c6964207876732076746f6b656e20616464726573730000000000006044820152606401610e43565b6034546040516001600160a01b038085169216907f2565e1579c0926afb7113edbfd85373e85cadaa3e0346f04de19686a2bb86ed1905f90a350603480546001600160a01b0319166001600160a01b0392909216919091179055565b610d0f8484808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250506040805160208088028281018201909352878252909350879250869182918501908490808284375f9201919091525061261192505050565b61130e8282612761565b5050565b600d8181548110611321575f80fd5b5f918252602090912001546001600160a01b0316905081565b5f610bea82612801565b5f6113666040518060600160405280602c8152602001613a2a602c9139611fa0565b610ecf5f858585612898565b600a545f906001600160a01b03908116908390811682036113a55760405162461bcd60e51b8152600401610e4390613532565b6113ad612296565b6113b684612434565b600a80546001600160a01b038681166001600160a01b03198316179092556040519116907f0613b6ee6a04f0d09f390e4d9318894b9f6ac7fd83897cd8d18896ba579c401e90610e8e908390889061358f565b601a548180820361142c5760405162461bcd60e51b8152600401610e43906134e7565b611434612296565b601b546001600160a01b03161561144d5761144d612482565b601a80549084905560408051828152602081018690527fe81d4ac15e5afa1e708e66664eddc697177423d950d133bda8262d8885e6da3b91015b60405180910390a150505050565b6114b6604051806060016040528060258152602001613a7f60259139611fa0565b6037546001600160601b0390811690831611156114f157604051632db8671b60e11b81526001600160601b0383166004820152602401610e43565b6001600160601b03821661151857604051630203217b60e61b815260040160405180910390fd5b6001600160601b0382165f908152603660205260409020600281015482151561010090910460ff1615150361154c57505050565b60028101546040805161010090920460ff161515825283151560208301526001600160601b038516917f9d2a9183b06e3492f91d3d88ae222e700c8873dd0068f9c3fc783eccb96a1ec4910160405180910390a260020180549115156101000261ff001990921691909117905550565b5f6115de604051806060016040528060338152602001613aa460339139611fa0565b6115ea85858585612898565b90505b949350505050565b6115fd612296565b61160681612434565b6033546040516001600160a01b038084169216907ffe7fd0d872def0f65050e9f38fc6691d0c192c694a56f09b04bec5fb2ea61f2b905f90a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b5f610bea82612ab5565b60366020525f9081526040902080548190611685906135a9565b80601f01602080910402602001604051908101604052809291908181526020018280546116b1906135a9565b80156116fc5780601f106116d3576101008083540402835291602001916116fc565b820191905f5260205f20905b8154815290600101906020018083116116df57829003601f168201915b5050506002909301549192505060ff8082169161010090041683565b5f61173a604051806060016040528060288152602001613ad760289139611fa0565b610ed25f84846122e2565b6026545f906001600160a01b03908116908390811682036117785760405162461bcd60e51b8152600401610e4390613532565b611780612296565b61178984612434565b602680546001600160a01b038681166001600160a01b0319831681179093556040519116917f0f7eb572d1b3053a0a3a33c04151364cf88d163182a5e4e1088cb8e52321e08a91610e8e91849161358f565b6015545f906001600160a01b039081169083908116820361180e5760405162461bcd60e51b8152600401610e4390613532565b611816612296565b61181f84612434565b601580546001600160a01b038681166001600160a01b03198316179092556040519116907fe1ddcb2dab8e5b03cfc8c67a0d5861d91d16f7bd2612fd381faf4541d212c9b290610e8e908390889061358f565b611893604051806060016040528060278152602001613aff60279139611fa0565b6037546001600160601b0390811690841611156118ce57604051632db8671b60e11b81526001600160601b0384166004820152602401610e43565b5f6118d9848461108b565b5f81815260096020526040902080549192509060ff1661190c57604051630665210960e21b815260040160405180910390fd5b82151581600601600c9054906101000a900460ff1615150361192f575050505050565b600681015460408051600160601b90920460ff161515825284151560208301526001600160a01b038616916001600160601b038816917fe40f9c4af130bdb5bd1650ab4bc918dba9d900fa94685f0113e72a6cfe6c5fcc910160405180910390a36006018054921515600160601b0260ff60601b1990931692909217909155505050565b6119f16040518060400160405280601b81526020017f736574506f6f6c4c6162656c2875696e7439362c737472696e67290000000000815250611fa0565b6037546001600160601b039081169084161115611a2c57604051632db8671b60e11b81526001600160601b0384166004820152602401610e43565b6001600160601b038316611a5357604051630203217b60e61b815260040160405180910390fd5b5f819003611a745760405163522e397360e11b815260040160405180910390fd5b6001600160601b0383165f90815260366020526040908190209051611a9c90849084906135e1565b60405190819003812090611ab19083906135f0565b604051809103902003611ac45750505050565b836001600160601b03167f1ebc260ee8077871ff0b70b184ff9dac4ecee8b0f7dcc4f3a3f5068549f5078e825f018585604051611b039392919061368a565b60405180910390a280610d82838583613781565b6025546001600160a01b0390811690829081168203611b485760405162461bcd60e51b8152600401610e4390613532565b611b50612296565b611b5983612434565b602580546001600160a01b038581166001600160a01b03198316179092556040519116907fa5ea5616d5f6dbbaa62fdfcf3856723216eed485c394d9e51ec8e6d40e1d1ac190611487908390879061358f565b6020545f90611bc3906001600160a01b0316612b2a565b670de0b6b3a76400008210611c0c5760405162461bcd60e51b815260206004820152600f60248201526e70657263656e74203e3d203130302560881b6044820152606401610e43565b611c1584612434565b611c1e83612434565b6020805460218054602280546001600160a01b03198086166001600160a01b038c8116919091179097558316898716179093558690556040519284169316917f29f06ea15931797ebaed313d81d100963dc22cb213cb4ce2737b5a62b1a8b1e890611c8c9085908a9061358f565b60405180910390a17f8de763046d7b8f08b6c3d03543de1d615309417842bb5d2d62f110f65809ddac8287604051611cc592919061358f565b60405180910390a160408051828152602081018790527f0893f8f4101baaabbeb513f96761e7a36eb837403c82cc651c292a4abdc94ed7910160405180910390a15f5b979650505050505050565b6008602052815f5260405f208181548110611d2c575f80fd5b5f918252602090912001546001600160a01b03169150829050565b6001600160a01b0382165f90815260296020526040812081836008811115611d7157611d7161351e565b815260208101919091526040015f205460ff169392505050565b6028545f906001600160a01b0390811690839081168203611dbe5760405162461bcd60e51b8152600401610e4390613532565b611dc6612296565b611dcf84612434565b602880546001600160a01b038681166001600160a01b03198316179092556040519116907f0f1eca7612e020f6e4582bcead0573eba4b5f7b56668754c6aed82ef12057dd490610e8e908390889061358f565b5f611e2b612b85565b60185460ff16158015611e465750601854610100900460ff16155b611e825760405162461bcd60e51b815260206004820152600d60248201526c159052481a5cc81c185d5cd959609a1b6044820152606401610e43565b6015546001600160a01b03163314611ea757611ea0600e6016612bd3565b9050610bea565b6001600160a01b0383165f908152601660205260408120839055610ed2565b5f60055482808203611eea5760405162461bcd60e51b8152600401610e43906134e7565b611ef2612296565b604080516020808201835286825282518082018452670c7d713b49da00008152835191820190935266b1a2bc2ec500008152815183519293921080611f38575082518151115b15611f5257611f48600580612bd3565b9550505050610e9b565b600580549088905560408051828152602081018a90527f3b9670cf975d26958e754b57098eaa2ac914d8d2a31b83257997b9f346110fd9910160405180910390a15f98975050505050505050565b6028546040516318c5e8ab60e01b81526001600160a01b03909116906318c5e8ab90611fd2903390859060040161383b565b602060405180830381865afa158015611fed573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612011919061385e565b61204d5760405162461bcd60e51b815260206004820152600d60248201526c1858d8d95cdcc819195b9a5959609a1b6044820152606401610e43565b50565b5f60095f61205e5f8561108b565b81526020019081526020015f209050919050565b805460ff1661204d5760405162461bcd60e51b81526020600482015260116024820152701b585c9ad95d081b9bdd081b1a5cdd1959607a1b6044820152606401610e43565b6120d8604051806060016040528060298152602001613a5660299139611fa0565b8151815181158015906120ea57508082145b6121265760405162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a59081a5b9c1d5d609a1b6044820152606401610e43565b5f5b82811015610d825783818151811061214257612142613879565b6020026020010151601f5f87848151811061215f5761215f613879565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020015f208190555084818151811061219c5761219c613879565b60200260200101516001600160a01b03167f6f1951b2aad10f3fc81b86d91105b413a5b3f847a34bbc5ce1904201b14438f68583815181106121e0576121e0613879565b60200260200101516040516121f791815260200190565b60405180910390a2600101612128565b61222860405180606001604052806029815260200161395c60299139611fa0565b825182515f5b8281101561228e575f5b828110156122855761227d87838151811061225557612255613879565b602002602001015187838151811061226f5761226f613879565b602002602001015187612c4a565b600101612238565b5060010161222e565b505050505050565b5f546001600160a01b031633146122e05760405162461bcd60e51b815260206004820152600e60248201526d37b7363c9030b236b4b71031b0b760911b6044820152606401610e43565b565b5f60095f6122f0868661108b565b81526020019081526020015f2060050154828082036123215760405162461bcd60e51b8152600401610e43906134e7565b6037546001600160601b03908116908716111561235c57604051632db8671b60e11b81526001600160601b0387166004820152602401610e43565b5f60095f61236a898961108b565b81526020019081526020015f20905061238281612072565b670de0b6b3a76400008510156123cd5760405162461bcd60e51b815260206004820152601060248201526f0d2dcc6cadce8d2ecca40784062ca62760831b6044820152606401610e43565b856001600160a01b0316876001600160601b03167fc1d7bc090f3a87255c2f4e56f66d1b7a49683d279f77921b1701aa5d733ef74583600501548860405161241f929190918252602082015260400190565b60405180910390a3600581018590555f611d08565b6001600160a01b03811661204d5760405162461bcd60e51b815260206004820152601560248201527463616e2774206265207a65726f206164647265737360581b6044820152606401610e43565b601c5415806124925750601c5443105b1561249957565b6033546040516370a0823160e01b81523060048201526001600160a01b03909116905f9082906370a0823190602401602060405180830381865afa1580156124e3573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612507919061388d565b9050805f03612514575050565b5f8061252243601c54612cee565b90505f612531601a5483612d27565b905080841061254257809250612546565b8392505b601d54831015612557575050505050565b43601c55601b54612575906001600160a01b03878116911685612d68565b6040518381527ff6d4b8f74d85a6e2d7a50225957b8a6cfec69ad92f5905627260541aa0a5565d9060200160405180910390a1601b5f9054906101000a90046001600160a01b03166001600160a01b031663faa1809e6040518163ffffffff1660e01b81526004015f604051808303815f87803b1580156125f4575f80fd5b505af1158015612606573d5f803e3d5ffd5b505050505050505050565b6126326040518060600160405280602981526020016139de60299139611fa0565b81518151811580159061264457508082145b6126805760405162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a59081a5b9c1d5d609a1b6044820152606401610e43565b5f5b82811015610d825783818151811061269c5761269c613879565b602002602001015160275f8784815181106126b9576126b9613879565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020015f20819055508481815181106126f6576126f6613879565b60200260200101516001600160a01b03167f9e0ad9cee10bdf36b7fbd38910c0bdff0f275ace679b45b922381c2723d676f885838151811061273a5761273a613879565b602002602001015160405161275191815260200190565b60405180910390a2600101612682565b612782604051806060016040528060238152602001613a0760239139611fa0565b6015546001600160a01b038381169116146127a3576127a3610c3283612050565b6001600160a01b0382165f818152602d6020908152604091829020805460ff191685151590811790915591519182527f03561d5280ebb02280893b1d60978e4a27e7654a149c5d0e7c2cf65389ce1694910160405180910390a25050565b6004545f906001600160a01b03908116908390811682036128345760405162461bcd60e51b8152600401610e4390613532565b61283c612296565b61284584612434565b600480546001600160a01b038681166001600160a01b03198316179092556040519116907fd52b2b9b7e9ee655fcb95d2e5b9e0c9f69e7ef2b8e9d2d0ea78402d576d22e2290610e8e908390889061358f565b5f6128a284612434565b6037546001600160601b0390811690861611156128dd57604051632db8671b60e11b81526001600160601b0386166004820152602401610e43565b5f60095f6128eb888861108b565b81526020019081526020015f20905061290381612072565b670de0b6b3a76400008411156129275761291f60066008612bd3565b9150506115ed565b83158015906129a157506004805460405163fc57d4df60e01b81526001600160a01b038881169382019390935291169063fc57d4df90602401602060405180830381865afa15801561297b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061299f919061388d565b155b156129b25761291f600d6009612bd3565b670de0b6b3a76400008311156129ce5761291f60146019612bd3565b838310156129e25761291f6014601a612bd3565b6001810154848114612a45576001820185905560408051828152602081018790526001600160a01b038816916001600160601b038a16917f0d1a615379dc62cec7bc63b7e313a07ed659918f4ad3720b3af8041b305146f2910160405180910390a35b6004820154848114612aa8576004830185905560408051828152602081018790526001600160a01b038916916001600160601b038b16917fc90f7b48c299a8d58b0b9e2756e27773c6fb1daab159af052d6c5b791bc7eef7910160405180910390a35b5f98975050505050505050565b5f612abe612296565b612ac782612434565b603180546001600160a01b038481166001600160a01b03198316179092556040519116907fcb20dab7409e4fb972d9adccb39530520b226ce6940d85c9523a499b950b6ea390612b1a908390869061358f565b60405180910390a15f9392505050565b5f546001600160a01b03163314806120115750336001600160a01b0382161461204d5760405162461bcd60e51b815260206004820152600d60248201526c1858d8d95cdcc819195b9a5959609a1b6044820152606401610e43565b60185462010000900460ff16156122e05760405162461bcd60e51b81526020600482015260126024820152711c1c9bdd1bd8dbdb081a5cc81c185d5cd95960721b6044820152606401610e43565b5f7f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa0836014811115612c0757612c0761351e565b83601a811115612c1957612c1961351e565b6040805192835260208301919091525f9082015260600160405180910390a1826014811115610ed257610ed261351e565b612c56610c3284612050565b6001600160a01b0383165f9081526029602052604081208291846008811115612c8157612c8161351e565b815260208101919091526040015f20805460ff1916911515919091179055816008811115612cb157612cb161351e565b836001600160a01b03167f35007a986bcd36d2f73fc7f1b73762e12eadb4406dd163194950fd3b5a6a827d83604051610c97911515815260200190565b5f610ed28383604051806040016040528060158152602001747375627472616374696f6e20756e646572666c6f7760581b815250612dbf565b5f610ed283836040518060400160405280601781526020017f6d756c7469706c69636174696f6e206f766572666c6f77000000000000000000815250612ded565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052612dba908490612e46565b505050565b5f8184841115612de25760405162461bcd60e51b8152600401610e4391906138a4565b50610ecf83856138ca565b5f831580612df9575082155b15612e0557505f610ed2565b5f612e1084866138dd565b905083612e1d86836138f4565b148390612e3d5760405162461bcd60e51b8152600401610e4391906138a4565b50949350505050565b5f612e9a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612f199092919063ffffffff16565b905080515f1480612eba575080806020019051810190612eba919061385e565b612dba5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610e43565b6060610ecf84845f85855f80866001600160a01b03168587604051612f3e9190613913565b5f6040518083038185875af1925050503d805f8114612f78576040519150601f19603f3d011682016040523d82523d5f602084013e612f7d565b606091505b5091509150611d088783838760608315612ff75782515f03612ff0576001600160a01b0385163b612ff05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610e43565b50816115ed565b6115ed838381511561300c5781518083602001fd5b8060405162461bcd60e51b8152600401610e4391906138a4565b6001600160a01b038116811461204d575f80fd5b5f6020828403121561304a575f80fd5b8135610ed281613026565b5f8060408385031215613066575f80fd5b823561307181613026565b9150602083013561308181613026565b809150509250929050565b5f6020828403121561309c575f80fd5b5035919050565b801515811461204d575f80fd5b5f805f606084860312156130c2575f80fd5b83356130cd81613026565b925060208401356130dd81613026565b915060408401356130ed816130a3565b809150509250925092565b5f8083601f840112613108575f80fd5b50813567ffffffffffffffff81111561311f575f80fd5b6020830191508360208260051b8501011115613139575f80fd5b9250929050565b5f805f8060408587031215613153575f80fd5b843567ffffffffffffffff8082111561316a575f80fd5b613176888389016130f8565b9096509450602087013591508082111561318e575f80fd5b5061319b878288016130f8565b95989497509550505050565b5f805f805f606086880312156131bb575f80fd5b853567ffffffffffffffff808211156131d2575f80fd5b6131de89838a016130f8565b909750955060208801359150808211156131f6575f80fd5b50613203888289016130f8565b9094509250506040860135613217816130a3565b809150509295509295909350565b5f60208284031215613235575f80fd5b8135610ed2816130a3565b80356001600160601b0381168114613256575f80fd5b919050565b5f805f6060848603121561326d575f80fd5b61327684613240565b9250602084013561328681613026565b929592945050506040919091013590565b5f80604083850312156132a8575f80fd5b82356132b381613026565b91506020830135613081816130a3565b5f80604083850312156132d4575f80fd5b6132b383613240565b5f80604083850312156132ee575f80fd5b61307183613240565b5f805f60608486031215613309575f80fd5b833561331481613026565b95602085013595506040909401359392505050565b5f805f806080858703121561333c575f80fd5b61334585613240565b9350602085013561335581613026565b93969395505050506040820135916060013590565b5f6020828403121561337a575f80fd5b610ed282613240565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b606081525f6133c36060830186613383565b931515602083015250901515604090910152919050565b5f80604083850312156133eb575f80fd5b82356133f681613026565b946020939093013593505050565b5f805f60608486031215613416575f80fd5b6130cd84613240565b5f805f60408486031215613431575f80fd5b61343a84613240565b9250602084013567ffffffffffffffff80821115613456575f80fd5b818601915086601f830112613469575f80fd5b813581811115613477575f80fd5b876020828501011115613488575f80fd5b6020830194508093505050509250925092565b5f805f606084860312156134ad575f80fd5b833561327681613026565b5f80604083850312156134c9575f80fd5b82356134d481613026565b9150602083013560098110613081575f80fd5b6020808252601e908201527f6f6c642076616c75652069732073616d65206173206e65772076616c75650000604082015260600190565b634e487b7160e01b5f52602160045260245ffd5b60208082526022908201527f6f6c6420616464726573732069732073616d65206173206e6577206164647265604082015261737360f01b606082015260800190565b5f60208284031215613584575f80fd5b8151610ed281613026565b6001600160a01b0392831681529116602082015260400190565b600181811c908216806135bd57607f821691505b6020821081036135db57634e487b7160e01b5f52602260045260245ffd5b50919050565b818382375f9101908152919050565b5f8083546135fd816135a9565b60018281168015613615576001811461362a57613656565b60ff1984168752821515830287019450613656565b875f526020805f205f5b8581101561364d5781548a820152908401908201613634565b50505082870194505b50929695505050505050565b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b604081525f80855461369b816135a9565b806040860152606060018084165f81146136bc57600181146136d857613707565b60ff1985166060890152606084151560051b8901019550613707565b8a5f526020805f205f5b868110156136fd5781548b82018701529084019082016136e2565b8a01606001975050505b5050505050828103602084015261371f818587613662565b9695505050505050565b634e487b7160e01b5f52604160045260245ffd5b601f821115612dba57805f5260205f20601f840160051c810160208510156137625750805b601f840160051c820191505b81811015610d82575f815560010161376e565b67ffffffffffffffff83111561379957613799613729565b6137ad836137a783546135a9565b8361373d565b5f601f8411600181146137de575f85156137c75750838201355b5f19600387901b1c1916600186901b178355610d82565b5f83815260208120601f198716915b8281101561380d57868501358255602094850194600190920191016137ed565b5086821015613829575f1960f88860031b161c19848701351681555b505060018560011b0183555050505050565b6001600160a01b03831681526040602082018190525f90610ecf90830184613383565b5f6020828403121561386e575f80fd5b8151610ed2816130a3565b634e487b7160e01b5f52603260045260245ffd5b5f6020828403121561389d575f80fd5b5051919050565b602081525f610ed26020830184613383565b634e487b7160e01b5f52601160045260245ffd5b81810381811115610bea57610bea6138b6565b8082028115828204841417610bea57610bea6138b6565b5f8261390e57634e487b7160e01b5f52601260045260245ffd5b500490565b5f82518060208501845e5f92019182525091905056fe5f736574466f726365644c69717569646174696f6e466f725573657228616464726573732c616464726573732c626f6f6c295f736574416374696f6e7350617573656428616464726573735b5d2c75696e74385b5d2c626f6f6c297365744c69717569646174696f6e496e63656e746976652875696e7439362c616464726573732c75696e743235362973657457686974654c697374466c6173684c6f616e4163636f756e7428616464726573732c626f6f6c295f7365744d61726b6574537570706c794361707328616464726573735b5d2c75696e743235365b5d295f736574466f726365644c69717569646174696f6e28616464726573732c626f6f6c29736574436f6c6c61746572616c466163746f7228616464726573732c75696e743235362c75696e74323536295f7365744d61726b6574426f72726f774361707328616464726573735b5d2c75696e743235365b5d29736574416c6c6f77436f7265506f6f6c46616c6c6261636b2875696e7439362c626f6f6c29736574436f6c6c61746572616c466163746f722875696e7439362c616464726573732c75696e743235362c75696e74323536297365744c69717569646174696f6e496e63656e7469766528616464726573732c75696e74323536297365744973426f72726f77416c6c6f7765642875696e7439362c616464726573732c626f6f6c29a26469706673582212202b7dfaef11aece86d2bda6968f07a64091baf1c1621de138b7f0904f5ae86fc364736f6c63430008190033",
  "devdoc": {
    "author": "Venus",
    "details": "This facet contains all the setters for the states",
    "events": {
      "Failure(uint256,uint256,uint256)": {
        "details": "`error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary contract-specific code that enables us to report opaque error codes from upgradeable contracts.*"
      }
    },
    "kind": "dev",
    "methods": {
      "_setAccessControl(address)": {
        "details": "Allows the contract admin to set the address of access control of this contract",
        "params": {
          "newAccessControlAddress": "New address for the access control"
        },
        "returns": {
          "_0": "uint256 0=success, otherwise will revert"
        }
      },
      "_setActionsPaused(address[],uint8[],bool)": {
        "details": "Allows a privileged role to pause/unpause the protocol action state",
        "params": {
          "actions_": "List of action ids to pause/unpause",
          "markets_": "Markets to pause/unpause the actions on",
          "paused_": "The new paused state (true=paused, false=unpaused)"
        }
      },
      "_setCloseFactor(uint256)": {
        "details": "Allows the contract admin to set the closeFactor used to liquidate borrows",
        "params": {
          "newCloseFactorMantissa": "New close factor, scaled by 1e18"
        },
        "returns": {
          "_0": "uint256 0=success, otherwise will revert"
        }
      },
      "_setComptrollerLens(address)": {
        "details": "Set ComptrollerLens contract address",
        "params": {
          "comptrollerLens_": "The new ComptrollerLens contract address to be set"
        },
        "returns": {
          "_0": "uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "_setForcedLiquidation(address,bool)": {
        "details": "Allows a privileged role to set enable/disable forced liquidations",
        "params": {
          "enable": "Whether to enable forced liquidations",
          "vTokenBorrowed": "Borrowed vToken"
        }
      },
      "_setForcedLiquidationForUser(address,address,bool)": {
        "params": {
          "borrower": "The address of the borrower",
          "enable": "Whether to enable forced liquidations",
          "vTokenBorrowed": "Borrowed vToken"
        }
      },
      "_setLiquidatorContract(address)": {
        "details": "Allows the contract admin to update the address of liquidator contract",
        "params": {
          "newLiquidatorContract_": "The new address of the liquidator contract"
        }
      },
      "_setMarketBorrowCaps(address[],uint256[])": {
        "details": "Allows a privileged role to set the borrowing cap for a vToken market. A borrow cap of 0 corresponds to Borrow not allowed",
        "params": {
          "newBorrowCaps": "The new borrow cap values in underlying to be set. A value of 0 corresponds to Borrow not allowed",
          "vTokens": "The addresses of the markets (tokens) to change the borrow caps for"
        }
      },
      "_setMarketSupplyCaps(address[],uint256[])": {
        "details": "Allows a privileged role to set the supply cap for a vToken. A supply cap of 0 corresponds to Minting NotAllowed",
        "params": {
          "newSupplyCaps": "The new supply cap values in underlying to be set. A value of 0 corresponds to Minting NotAllowed",
          "vTokens": "The addresses of the markets (tokens) to change the supply caps for"
        }
      },
      "_setPauseGuardian(address)": {
        "details": "Allows the contract admin to change the Pause Guardian",
        "params": {
          "newPauseGuardian": "The address of the new Pause Guardian"
        },
        "returns": {
          "_0": "uint256 0=success, otherwise a failure. (See enum Error for details)"
        }
      },
      "_setPriceOracle(address)": {
        "details": "Allows the contract admin to set a new price oracle used by the Comptroller",
        "params": {
          "newOracle": "The new price oracle to set"
        },
        "returns": {
          "_0": "uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "_setPrimeToken(address)": {
        "params": {
          "_prime": "The new prime token contract to be set"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "_setProtocolPaused(bool)": {
        "details": "Allows a privileged role to pause/unpause protocol",
        "params": {
          "state": "The new state (true=paused, false=unpaused)"
        },
        "returns": {
          "_0": "bool The updated state of the protocol"
        }
      },
      "_setTreasuryData(address,address,uint256)": {
        "params": {
          "newTreasuryAddress": "The new address of the treasury to be set",
          "newTreasuryGuardian": "The new address of the treasury guardian to be set",
          "newTreasuryPercent": "The new treasury percent to be set"
        },
        "returns": {
          "_0": "uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "_setVAIController(address)": {
        "details": "Admin function to set a new VAI controller",
        "returns": {
          "_0": "uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "_setVAIMintRate(uint256)": {
        "params": {
          "newVAIMintRate": "The new VAI mint rate to be set"
        },
        "returns": {
          "_0": "uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "_setVAIVaultInfo(address,uint256,uint256)": {
        "params": {
          "minReleaseAmount_": "The minimum release amount to VAI Vault",
          "releaseStartBlock_": "The start block of release to VAI Vault",
          "vault_": "The address of the VAI Vault"
        }
      },
      "_setVenusVAIVaultRate(uint256)": {
        "params": {
          "venusVAIVaultRate_": "The amount of XVS wei per block to distribute to VAI Vault"
        }
      },
      "_setXVSToken(address)": {
        "params": {
          "xvs_": "The address of the XVS token"
        }
      },
      "_setXVSVToken(address)": {
        "params": {
          "xvsVToken_": "The address of the XVS vToken"
        }
      },
      "actionPaused(address,uint8)": {
        "params": {
          "action": "Action id",
          "market": "vToken address"
        }
      },
      "getPoolMarketIndex(uint96,address)": {
        "details": "Computes a unique key for a (poolId, market) pair used in the `_poolMarkets` mapping - For the core pool (`poolId == 0`), this results in the address being left-padded to 32 bytes,   maintaining backward compatibility with legacy mappings - For other pools, packs the `poolId` and `market` address into a single `bytes32` key,   The first 96 bits are used for the `poolId`, and the remaining 160 bits for the `market` address",
        "params": {
          "poolId": "The ID of the pool",
          "vToken": "The address of the market (vToken)"
        },
        "returns": {
          "_0": "PoolMarketId The `bytes32` key that uniquely represents the (poolId, vToken) pair"
        }
      },
      "getXVSAddress()": {
        "returns": {
          "_0": "The address of XVS token"
        }
      },
      "setActionsPaused(address[],uint8[],bool)": {
        "params": {
          "actions_": "List of action ids to pause/unpause",
          "markets_": "Markets to pause/unpause the actions on",
          "paused_": "The new paused state (true=paused, false=unpaused)"
        }
      },
      "setAllowCorePoolFallback(uint96,bool)": {
        "custom:error": "InvalidOperationForCorePool Reverts when attempting to call pool-specific methods on the Core Pool.PoolDoesNotExist Reverts if the target pool ID does not exist.",
        "custom:event": "PoolFallbackStatusUpdated Emitted after the pool fallback flag is updated.",
        "params": {
          "allowFallback": "True to allow fallback to Core Pool, false to disable.",
          "poolId": "ID of the pool to update."
        }
      },
      "setCloseFactor(uint256)": {
        "params": {
          "newCloseFactorMantissa": "New close factor, scaled by 1e18"
        },
        "returns": {
          "_0": "uint256 0=success, otherwise will revert"
        }
      },
      "setCollateralFactor(address,uint256,uint256)": {
        "params": {
          "newCollateralFactorMantissa": "The new collateral factor, scaled by 1e18",
          "newLiquidationThresholdMantissa": "The new liquidation threshold, scaled by 1e18",
          "vToken": "The market to set the factor on"
        },
        "returns": {
          "_0": "uint256 0=success, otherwise a failure. (See ErrorReporter for details)"
        }
      },
      "setCollateralFactor(uint96,address,uint256,uint256)": {
        "params": {
          "newCollateralFactorMantissa": "The new collateral factor, scaled by 1e18",
          "newLiquidationThresholdMantissa": "The new liquidation threshold, scaled by 1e18",
          "poolId": "The ID of the pool.",
          "vToken": "The market to set the factor on"
        },
        "returns": {
          "_0": "uint256 0=success, otherwise a failure. (See ErrorReporter for details)"
        }
      },
      "setForcedLiquidation(address,bool)": {
        "params": {
          "enable": "Whether to enable forced liquidations",
          "vTokenBorrowed": "Borrowed vToken"
        }
      },
      "setIsBorrowAllowed(uint96,address,bool)": {
        "custom:error": "PoolDoesNotExist Reverts if the pool ID is invalid.MarketConfigNotFound Reverts if the market is not listed in the pool.",
        "custom:event": "BorrowAllowedUpdated Emitted after the borrow permission for a market is updated.",
        "params": {
          "borrowAllowed": "The new borrow allowed status.",
          "poolId": "The ID of the pool.",
          "vToken": "The address of the market (vToken)."
        }
      },
      "setLiquidationIncentive(address,uint256)": {
        "params": {
          "newLiquidationIncentiveMantissa": "New liquidationIncentive scaled by 1e18",
          "vToken": "The market to set the liquidationIncentive for"
        },
        "returns": {
          "_0": "uint256 0=success, otherwise a failure. (See ErrorReporter for details)"
        }
      },
      "setLiquidationIncentive(uint96,address,uint256)": {
        "params": {
          "newLiquidationIncentiveMantissa": "New liquidationIncentive scaled by 1e18",
          "poolId": "The ID of the pool.",
          "vToken": "The market to set the liquidationIncentive for"
        },
        "returns": {
          "_0": "uint256 0=success, otherwise a failure. (See ErrorReporter for details)"
        }
      },
      "setMarketBorrowCaps(address[],uint256[])": {
        "params": {
          "newBorrowCaps": "The new borrow cap values in underlying to be set. A value of 0 corresponds to Borrow not allowed",
          "vTokens": "The addresses of the markets (tokens) to change the borrow caps for"
        }
      },
      "setMarketSupplyCaps(address[],uint256[])": {
        "params": {
          "newSupplyCaps": "The new supply cap values in underlying to be set. A value of 0 corresponds to Minting NotAllowed",
          "vTokens": "The addresses of the markets (tokens) to change the supply caps for"
        }
      },
      "setMintedVAIOf(address,uint256)": {
        "params": {
          "amount": "The amount of VAI to set to the account",
          "owner": "The address of the account to set"
        },
        "returns": {
          "_0": "The number of minted VAI by `owner`"
        }
      },
      "setPoolActive(uint96,bool)": {
        "custom:error": "InvalidOperationForCorePool Reverts when attempting to call pool-specific methods on the Core Pool.PoolDoesNotExist Reverts if the target pool ID does not exist.",
        "custom:event": "PoolActiveStatusUpdated Emitted after the pool active status is updated.",
        "params": {
          "active": "true to enable, false to disable",
          "poolId": "id of the pool to update"
        }
      },
      "setPoolLabel(uint96,string)": {
        "custom:error": "InvalidOperationForCorePool Reverts when attempting to call pool-specific methods on the Core PoolPoolDoesNotExist Reverts if the target pool ID does not existEmptyPoolLabel Reverts if the provided label is an empty string",
        "custom:event": "PoolLabelUpdated Emitted after the pool label is updated",
        "params": {
          "newLabel": "The new label for the pool",
          "poolId": "ID of the pool to update"
        }
      },
      "setPriceOracle(address)": {
        "params": {
          "newOracle": "The new price oracle to set"
        },
        "returns": {
          "_0": "uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "setPrimeToken(address)": {
        "params": {
          "_prime": "The new prime token contract to be set"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "setWhiteListFlashLoanAccount(address,bool)": {
        "params": {
          "_isWhiteListed": "True to whitelist the account for flash loans, false to remove from whitelist",
          "account": "The account to authorize for flash loans"
        }
      }
    },
    "title": "SetterFacet",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AlreadyInSelectedPool()": [
        {
          "notice": "Thrown when You are already in the selected pool."
        }
      ],
      "ArrayLengthMismatch()": [
        {
          "notice": "Thrown when input array lengths do not match"
        }
      ],
      "BorrowNotAllowedInPool()": [
        {
          "notice": "Thrown when borrowing is not allowed in the selected pool for a given market."
        }
      ],
      "EmptyPoolLabel()": [
        {
          "notice": "Thrown when the pool label is empty"
        }
      ],
      "InactivePool(uint96)": [
        {
          "notice": "Thrown when attempting to interact with an inactive pool"
        }
      ],
      "IncompatibleBorrowedAssets()": [
        {
          "notice": "Thrown when One or more of your assets are not compatible with the selected pool."
        }
      ],
      "InvalidOperationForCorePool()": [
        {
          "notice": "Thrown when trying to call pool-specific methods on the Core Pool"
        }
      ],
      "InvalidWeightingStrategy(uint8)": [
        {
          "notice": "Thrown when an invalid weighting strategy is provided"
        }
      ],
      "LiquidityCheckFailed(uint256,uint256)": [
        {
          "notice": "Thrown when Switching to this pool would fail the liquidity check or lead to liquidation."
        }
      ],
      "MarketAlreadyListed(uint96,address)": [
        {
          "notice": "Thrown when a vToken is already listed in the specified pool"
        }
      ],
      "MarketConfigNotFound()": [
        {
          "notice": "Thrown when market is not set in the _poolMarkets mapping"
        }
      ],
      "MarketNotListedInCorePool()": [
        {
          "notice": "Thrown when market trying to add in a pool is not listed in the core pool"
        }
      ],
      "NotEnoughRepayment(uint256,uint256)": [
        {
          "notice": "Thrown when repayment amount is insufficient to cover the fee"
        }
      ],
      "PoolDoesNotExist(uint96)": [
        {
          "notice": "Thrown when a given pool ID does not exist"
        }
      ],
      "PoolMarketNotFound(uint96,address)": [
        {
          "notice": "Thrown when trying to remove a market that is not listed in the given pool."
        }
      ]
    },
    "events": {
      "ActionPausedMarket(address,uint8,bool)": {
        "notice": "Emitted when an action is paused on a market"
      },
      "ActionProtocolPaused(bool)": {
        "notice": "Emitted when protocol state is changed by admin"
      },
      "BorrowAllowedUpdated(uint96,address,bool,bool)": {
        "notice": "Emitted when the borrowAllowed flag is updated for a market"
      },
      "DistributedVAIVaultVenus(uint256)": {
        "notice": "Emitted when XVS is distributed to VAI Vault"
      },
      "IsAccountFlashLoanWhitelisted(address,bool)": {
        "notice": "Emitted when an account's flash loan whitelist status is updated"
      },
      "IsForcedLiquidationEnabledForUserUpdated(address,address,bool)": {
        "notice": "Emitted when forced liquidation is enabled or disabled for a user borrowing in a market"
      },
      "IsForcedLiquidationEnabledUpdated(address,bool)": {
        "notice": "Emitted when forced liquidation is enabled or disabled for all users in a market"
      },
      "MarketEntered(address,address)": {
        "notice": "Emitted when an account enters a market"
      },
      "NewAccessControl(address,address)": {
        "notice": "Emitted when access control address is changed by admin"
      },
      "NewBorrowCap(address,uint256)": {
        "notice": "Emitted when borrow cap for a vToken is changed"
      },
      "NewCloseFactor(uint256,uint256)": {
        "notice": "Emitted when close factor is changed by admin"
      },
      "NewCollateralFactor(uint96,address,uint256,uint256)": {
        "notice": "Emitted when a collateral factor for a market in a pool is changed by admin"
      },
      "NewComptrollerLens(address,address)": {
        "notice": "Emitted when ComptrollerLens address is changed"
      },
      "NewLiquidationIncentive(uint96,address,uint256,uint256)": {
        "notice": "Emitted when liquidation incentive for a market in a pool is changed by admin"
      },
      "NewLiquidationThreshold(uint96,address,uint256,uint256)": {
        "notice": "Emitted when liquidation threshold for a market in a pool is changed by admin"
      },
      "NewLiquidatorContract(address,address)": {
        "notice": "Emitted when liquidator adress is changed"
      },
      "NewPauseGuardian(address,address)": {
        "notice": "Emitted when pause guardian is changed"
      },
      "NewPriceOracle(address,address)": {
        "notice": "Emitted when price oracle is changed"
      },
      "NewPrimeToken(address,address)": {
        "notice": "Emitted when prime token contract address is changed"
      },
      "NewSupplyCap(address,uint256)": {
        "notice": "Emitted when supply cap for a vToken is changed"
      },
      "NewTreasuryAddress(address,address)": {
        "notice": "Emitted when treasury address is changed"
      },
      "NewTreasuryGuardian(address,address)": {
        "notice": "Emitted when treasury guardian is changed"
      },
      "NewTreasuryPercent(uint256,uint256)": {
        "notice": "Emitted when treasury percent is changed"
      },
      "NewVAIController(address,address)": {
        "notice": "Emitted when VAIController is changed"
      },
      "NewVAIMintRate(uint256,uint256)": {
        "notice": "Emitted when VAI mint rate is changed by admin"
      },
      "NewVAIVaultInfo(address,uint256,uint256)": {
        "notice": "Emitted when VAI Vault info is changed"
      },
      "NewVenusVAIVaultRate(uint256,uint256)": {
        "notice": "Emitted when Venus VAI Vault rate is changed"
      },
      "NewXVSToken(address,address)": {
        "notice": "Emitted when XVS token address is changed"
      },
      "NewXVSVToken(address,address)": {
        "notice": "Emitted when XVS vToken address is changed"
      },
      "PoolActiveStatusUpdated(uint96,bool,bool)": {
        "notice": "Emitted when pool active status updated"
      },
      "PoolFallbackStatusUpdated(uint96,bool,bool)": {
        "notice": "Emitted when pool Fallback status is updated"
      },
      "PoolLabelUpdated(uint96,string,string)": {
        "notice": "Emitted when pool label is updated"
      }
    },
    "kind": "user",
    "methods": {
      "_setAccessControl(address)": {
        "notice": "Sets the address of the access control of this contract"
      },
      "_setActionsPaused(address[],uint8[],bool)": {
        "notice": "Pause/unpause certain actions"
      },
      "_setCloseFactor(uint256)": {
        "notice": "Sets the closeFactor used when liquidating borrows"
      },
      "_setForcedLiquidation(address,bool)": {
        "notice": "Enables forced liquidations for a market. If forced liquidation is enabled, borrows in the market may be liquidated regardless of the account liquidity"
      },
      "_setForcedLiquidationForUser(address,address,bool)": {
        "notice": "Enables forced liquidations for user's borrows in a certain market. If forced liquidation is enabled, user's borrows in the market may be liquidated regardless of the account liquidity. Forced liquidation may be enabled for a user even if it is not enabled for the entire market."
      },
      "_setLiquidatorContract(address)": {
        "notice": "Update the address of the liquidator contract"
      },
      "_setMarketBorrowCaps(address[],uint256[])": {
        "notice": "Set the given borrow caps for the given vToken market Borrowing that brings total borrows to or above borrow cap will revert"
      },
      "_setMarketSupplyCaps(address[],uint256[])": {
        "notice": "Set the given supply caps for the given vToken market Supply that brings total Supply to or above supply cap will revert"
      },
      "_setPauseGuardian(address)": {
        "notice": "Admin function to change the Pause Guardian"
      },
      "_setPriceOracle(address)": {
        "notice": "Sets a new price oracle for the comptroller"
      },
      "_setPrimeToken(address)": {
        "notice": "Sets the prime token contract for the comptroller"
      },
      "_setProtocolPaused(bool)": {
        "notice": "Set whole protocol pause/unpause state"
      },
      "_setTreasuryData(address,address,uint256)": {
        "notice": "Set the treasury data."
      },
      "_setVAIController(address)": {
        "notice": "Sets a new VAI controller"
      },
      "_setVAIMintRate(uint256)": {
        "notice": "Set the VAI mint rate"
      },
      "_setVAIVaultInfo(address,uint256,uint256)": {
        "notice": "Set the VAI Vault infos"
      },
      "_setVenusVAIVaultRate(uint256)": {
        "notice": "Set the amount of XVS distributed per block to VAI Vault"
      },
      "_setXVSToken(address)": {
        "notice": "Set the address of the XVS token"
      },
      "_setXVSVToken(address)": {
        "notice": "Set the address of the XVS vToken"
      },
      "accountAssets(address,uint256)": {
        "notice": "Per-account mapping of \"assets you are in\", capped by maxAssets"
      },
      "actionPaused(address,uint8)": {
        "notice": "Checks if a certain action is paused on a market"
      },
      "admin()": {
        "notice": "Administrator for this contract"
      },
      "allMarkets(uint256)": {
        "notice": "A list of all markets"
      },
      "approvedDelegates(address,address)": {
        "notice": "Whether the delegate is allowed to borrow or redeem on behalf of the user"
      },
      "authorizedFlashLoan(address)": {
        "notice": "Mapping of accounts authorized to execute flash loans"
      },
      "borrowCapGuardian()": {
        "notice": "The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market."
      },
      "borrowCaps(address)": {
        "notice": "Borrow caps enforced by borrowAllowed for each vToken address."
      },
      "closeFactorMantissa()": {
        "notice": "Multiplier used to calculate the maximum repayAmount when liquidating a borrow"
      },
      "comptrollerImplementation()": {
        "notice": "Active brains of Unitroller"
      },
      "getPoolMarketIndex(uint96,address)": {
        "notice": "Returns the unique market index for the given poolId and vToken pair"
      },
      "getXVSAddress()": {
        "notice": "Returns the XVS address"
      },
      "isForcedLiquidationEnabled(address)": {
        "notice": "Whether forced liquidation is enabled for all users borrowing in a certain market"
      },
      "isForcedLiquidationEnabledForUser(address,address)": {
        "notice": "Whether forced liquidation is enabled for the borrows of a user in a market"
      },
      "lastPoolId()": {
        "notice": "Counter used to generate unique pool IDs"
      },
      "maxAssets()": {
        "notice": "Max number of assets a single account can participate in (borrow or use as collateral)"
      },
      "mintVAIGuardianPaused()": {
        "notice": "The Pause Guardian can pause certain actions as a safety mechanism."
      },
      "mintedVAIs(address)": {
        "notice": "The minted VAI amount to each user"
      },
      "oracle()": {
        "notice": "Oracle which gives the price of any given asset"
      },
      "pauseGuardian()": {
        "notice": "The Pause Guardian can pause certain actions as a safety mechanism."
      },
      "pendingAdmin()": {
        "notice": "Pending administrator for this contract"
      },
      "pendingComptrollerImplementation()": {
        "notice": "Pending brains of Unitroller"
      },
      "pools(uint96)": {
        "notice": "Mapping of pool ID to its corresponding metadata and configuration"
      },
      "prime()": {
        "notice": "Prime token address"
      },
      "protocolPaused()": {
        "notice": "Pause/Unpause whole protocol actions"
      },
      "setActionsPaused(address[],uint8[],bool)": {
        "notice": "Alias to _setActionsPaused to support the Isolated Lending Comptroller Interface"
      },
      "setAllowCorePoolFallback(uint96,bool)": {
        "notice": "Updates the `allowCorePoolFallback` flag for a specific pool (excluding the Core Pool)."
      },
      "setCloseFactor(uint256)": {
        "notice": "Alias to _setCloseFactor to support the Isolated Lending Comptroller Interface"
      },
      "setCollateralFactor(address,uint256,uint256)": {
        "notice": "Sets the collateral factor and liquidation threshold for a market in the Core Pool only."
      },
      "setCollateralFactor(uint96,address,uint256,uint256)": {
        "notice": "Sets the collateral factor and liquidation threshold for a market in the specified pool."
      },
      "setForcedLiquidation(address,bool)": {
        "notice": "Alias to _setForcedLiquidation to support the Isolated Lending Comptroller Interface"
      },
      "setIsBorrowAllowed(uint96,address,bool)": {
        "notice": "Updates the `isBorrowAllowed` flag for a market in a pool."
      },
      "setLiquidationIncentive(address,uint256)": {
        "notice": "Sets the liquidation incentive for a market in the Core Pool only."
      },
      "setLiquidationIncentive(uint96,address,uint256)": {
        "notice": "Sets the liquidation incentive for a market in the specified pool."
      },
      "setMarketBorrowCaps(address[],uint256[])": {
        "notice": "Alias to _setMarketBorrowCaps to support the Isolated Lending Comptroller Interface"
      },
      "setMarketSupplyCaps(address[],uint256[])": {
        "notice": "Alias to _setMarketSupplyCaps to support the Isolated Lending Comptroller Interface"
      },
      "setMintedVAIOf(address,uint256)": {
        "notice": "Set the minted VAI amount of the `owner`"
      },
      "setPoolActive(uint96,bool)": {
        "notice": "updates active status for a specific pool (excluding the Core Pool)"
      },
      "setPoolLabel(uint96,string)": {
        "notice": "Updates the label for a specific pool (excluding the Core Pool)"
      },
      "setPriceOracle(address)": {
        "notice": "Alias to _setPriceOracle to support the Isolated Lending Comptroller Interface"
      },
      "setPrimeToken(address)": {
        "notice": "Alias to _setPrimeToken to support the Isolated Lending Comptroller Interface"
      },
      "setWhiteListFlashLoanAccount(address,bool)": {
        "notice": "Adds/Removes an account to the flash loan whitelist"
      },
      "supplyCaps(address)": {
        "notice": "Supply caps enforced by mintAllowed for each vToken address. Defaults to zero which corresponds to minting notAllowed"
      },
      "treasuryAddress()": {
        "notice": "Treasury address"
      },
      "treasuryGuardian()": {
        "notice": "Treasury Guardian address"
      },
      "treasuryPercent()": {
        "notice": "Fee percent of accrued interest with decimal 18"
      },
      "userPoolId(address)": {
        "notice": "Tracks the selected pool for each user"
      },
      "vaiController()": {
        "notice": "The Address of VAIController"
      },
      "vaiMintRate()": {
        "notice": "VAI Mint Rate as a percentage"
      },
      "venusAccrued(address)": {
        "notice": "The XVS accrued but not yet transferred to each user"
      },
      "venusBorrowSpeeds(address)": {
        "notice": "The rate at which venus is distributed to the corresponding borrow market (per block)"
      },
      "venusBorrowState(address)": {
        "notice": "The Venus market borrow state for each market"
      },
      "venusBorrowerIndex(address,address)": {
        "notice": "The Venus borrow index for each market for each borrower as of the last time they accrued XVS"
      },
      "venusInitialIndex()": {
        "notice": "The initial Venus index for a market"
      },
      "venusSupplierIndex(address,address)": {
        "notice": "The Venus supply index for each market for each supplier as of the last time they accrued XVS"
      },
      "venusSupplySpeeds(address)": {
        "notice": "The rate at which venus is distributed to the corresponding supply market (per block)"
      },
      "venusSupplyState(address)": {
        "notice": "The Venus market supply state for each market"
      },
      "venusVAIVaultRate()": {
        "notice": "The rate at which the flywheel distributes XVS to VAI Vault, per block"
      }
    },
    "notice": "This facet contract contains all the configurational setter functions",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1658,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1661,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "pendingAdmin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1664,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "comptrollerImplementation",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1667,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "pendingComptrollerImplementation",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1674,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "oracle",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ResilientOracleInterface)992"
      },
      {
        "astId": 1677,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "closeFactorMantissa",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1680,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "_oldLiquidationIncentiveMantissa",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1683,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "maxAssets",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1690,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "accountAssets",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_array(t_contract(VToken)32564)dyn_storage)"
      },
      {
        "astId": 1724,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "_poolMarkets",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_userDefinedValueType(PoolMarketId)11255,t_struct(Market)1717_storage)"
      },
      {
        "astId": 1727,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "pauseGuardian",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 1730,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "_mintGuardianPaused",
        "offset": 20,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 1733,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "_borrowGuardianPaused",
        "offset": 21,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 1736,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "transferGuardianPaused",
        "offset": 22,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 1739,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "seizeGuardianPaused",
        "offset": 23,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 1744,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "mintGuardianPaused",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1749,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "borrowGuardianPaused",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1761,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "allMarkets",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_contract(VToken)32564)dyn_storage"
      },
      {
        "astId": 1764,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "venusRate",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 1769,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "venusSpeeds",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1775,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "venusSupplyState",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_struct(VenusMarketState)1756_storage)"
      },
      {
        "astId": 1781,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "venusBorrowState",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_struct(VenusMarketState)1756_storage)"
      },
      {
        "astId": 1788,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "venusSupplierIndex",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1795,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "venusBorrowerIndex",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1800,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "venusAccrued",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1804,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "vaiController",
        "offset": 0,
        "slot": "21",
        "type": "t_contract(VAIControllerInterface)25579"
      },
      {
        "astId": 1809,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "mintedVAIs",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1812,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "vaiMintRate",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 1815,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "mintVAIGuardianPaused",
        "offset": 0,
        "slot": "24",
        "type": "t_bool"
      },
      {
        "astId": 1817,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "repayVAIGuardianPaused",
        "offset": 1,
        "slot": "24",
        "type": "t_bool"
      },
      {
        "astId": 1820,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "protocolPaused",
        "offset": 2,
        "slot": "24",
        "type": "t_bool"
      },
      {
        "astId": 1823,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "venusVAIRate",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 1829,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "venusVAIVaultRate",
        "offset": 0,
        "slot": "26",
        "type": "t_uint256"
      },
      {
        "astId": 1831,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "vaiVaultAddress",
        "offset": 0,
        "slot": "27",
        "type": "t_address"
      },
      {
        "astId": 1833,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "releaseStartBlock",
        "offset": 0,
        "slot": "28",
        "type": "t_uint256"
      },
      {
        "astId": 1835,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "minReleaseAmount",
        "offset": 0,
        "slot": "29",
        "type": "t_uint256"
      },
      {
        "astId": 1841,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "borrowCapGuardian",
        "offset": 0,
        "slot": "30",
        "type": "t_address"
      },
      {
        "astId": 1846,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "borrowCaps",
        "offset": 0,
        "slot": "31",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1852,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "treasuryGuardian",
        "offset": 0,
        "slot": "32",
        "type": "t_address"
      },
      {
        "astId": 1855,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "treasuryAddress",
        "offset": 0,
        "slot": "33",
        "type": "t_address"
      },
      {
        "astId": 1858,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "treasuryPercent",
        "offset": 0,
        "slot": "34",
        "type": "t_uint256"
      },
      {
        "astId": 1866,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "venusContributorSpeeds",
        "offset": 0,
        "slot": "35",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1871,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "lastContributorBlock",
        "offset": 0,
        "slot": "36",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1876,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "liquidatorContract",
        "offset": 0,
        "slot": "37",
        "type": "t_address"
      },
      {
        "astId": 1882,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "comptrollerLens",
        "offset": 0,
        "slot": "38",
        "type": "t_contract(ComptrollerLensInterface)1641"
      },
      {
        "astId": 1890,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "supplyCaps",
        "offset": 0,
        "slot": "39",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1896,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "accessControl",
        "offset": 0,
        "slot": "40",
        "type": "t_address"
      },
      {
        "astId": 1903,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "_actionPaused",
        "offset": 0,
        "slot": "41",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 1911,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "venusBorrowSpeeds",
        "offset": 0,
        "slot": "42",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1916,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "venusSupplySpeeds",
        "offset": 0,
        "slot": "43",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1926,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "approvedDelegates",
        "offset": 0,
        "slot": "44",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1934,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "isForcedLiquidationEnabled",
        "offset": 0,
        "slot": "45",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1953,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "_selectorToFacetAndPosition",
        "offset": 0,
        "slot": "46",
        "type": "t_mapping(t_bytes4,t_struct(FacetAddressAndPosition)1942_storage)"
      },
      {
        "astId": 1958,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "_facetFunctionSelectors",
        "offset": 0,
        "slot": "47",
        "type": "t_mapping(t_address,t_struct(FacetFunctionSelectors)1948_storage)"
      },
      {
        "astId": 1961,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "_facetAddresses",
        "offset": 0,
        "slot": "48",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1968,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "prime",
        "offset": 0,
        "slot": "49",
        "type": "t_contract(IPrime)22757"
      },
      {
        "astId": 1978,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "isForcedLiquidationEnabledForUser",
        "offset": 0,
        "slot": "50",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1984,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "xvs",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 1987,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "xvsVToken",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 2009,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "userPoolId",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_uint96)"
      },
      {
        "astId": 2015,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "pools",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_uint96,t_struct(PoolData)2004_storage)"
      },
      {
        "astId": 2018,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "lastPoolId",
        "offset": 0,
        "slot": "55",
        "type": "t_uint96"
      },
      {
        "astId": 2039,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "authorizedFlashLoan",
        "offset": 0,
        "slot": "56",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes4)dyn_storage": {
        "base": "t_bytes4",
        "encoding": "dynamic_array",
        "label": "bytes4[]",
        "numberOfBytes": "32"
      },
      "t_array(t_contract(VToken)32564)dyn_storage": {
        "base": "t_contract(VToken)32564",
        "encoding": "dynamic_array",
        "label": "contract VToken[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_contract(ComptrollerLensInterface)1641": {
        "encoding": "inplace",
        "label": "contract ComptrollerLensInterface",
        "numberOfBytes": "20"
      },
      "t_contract(IPrime)22757": {
        "encoding": "inplace",
        "label": "contract IPrime",
        "numberOfBytes": "20"
      },
      "t_contract(ResilientOracleInterface)992": {
        "encoding": "inplace",
        "label": "contract ResilientOracleInterface",
        "numberOfBytes": "20"
      },
      "t_contract(VAIControllerInterface)25579": {
        "encoding": "inplace",
        "label": "contract VAIControllerInterface",
        "numberOfBytes": "20"
      },
      "t_contract(VToken)32564": {
        "encoding": "inplace",
        "label": "contract VToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_contract(VToken)32564)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract VToken[])",
        "numberOfBytes": "32",
        "value": "t_array(t_contract(VToken)32564)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_struct(FacetFunctionSelectors)1948_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ComptrollerV13Storage.FacetFunctionSelectors)",
        "numberOfBytes": "32",
        "value": "t_struct(FacetFunctionSelectors)1948_storage"
      },
      "t_mapping(t_address,t_struct(VenusMarketState)1756_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ComptrollerV1Storage.VenusMarketState)",
        "numberOfBytes": "32",
        "value": "t_struct(VenusMarketState)1756_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint96)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint96)",
        "numberOfBytes": "32",
        "value": "t_uint96"
      },
      "t_mapping(t_bytes4,t_struct(FacetAddressAndPosition)1942_storage)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => struct ComptrollerV13Storage.FacetAddressAndPosition)",
        "numberOfBytes": "32",
        "value": "t_struct(FacetAddressAndPosition)1942_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint96,t_struct(PoolData)2004_storage)": {
        "encoding": "mapping",
        "key": "t_uint96",
        "label": "mapping(uint96 => struct ComptrollerV17Storage.PoolData)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolData)2004_storage"
      },
      "t_mapping(t_userDefinedValueType(PoolMarketId)11255,t_struct(Market)1717_storage)": {
        "encoding": "mapping",
        "key": "t_userDefinedValueType(PoolMarketId)11255",
        "label": "mapping(PoolMarketId => struct ComptrollerV1Storage.Market)",
        "numberOfBytes": "32",
        "value": "t_struct(Market)1717_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(FacetAddressAndPosition)1942_storage": {
        "encoding": "inplace",
        "label": "struct ComptrollerV13Storage.FacetAddressAndPosition",
        "members": [
          {
            "astId": 1939,
            "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
            "label": "facetAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1941,
            "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
            "label": "functionSelectorPosition",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(FacetFunctionSelectors)1948_storage": {
        "encoding": "inplace",
        "label": "struct ComptrollerV13Storage.FacetFunctionSelectors",
        "members": [
          {
            "astId": 1945,
            "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
            "label": "functionSelectors",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes4)dyn_storage"
          },
          {
            "astId": 1947,
            "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
            "label": "facetAddressPosition",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Market)1717_storage": {
        "encoding": "inplace",
        "label": "struct ComptrollerV1Storage.Market",
        "members": [
          {
            "astId": 1693,
            "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
            "label": "isListed",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1696,
            "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
            "label": "collateralFactorMantissa",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1701,
            "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
            "label": "accountMembership",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 1704,
            "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
            "label": "isVenus",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 1707,
            "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
            "label": "liquidationThresholdMantissa",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1710,
            "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
            "label": "liquidationIncentiveMantissa",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1713,
            "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
            "label": "poolId",
            "offset": 0,
            "slot": "6",
            "type": "t_uint96"
          },
          {
            "astId": 1716,
            "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
            "label": "isBorrowAllowed",
            "offset": 12,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(PoolData)2004_storage": {
        "encoding": "inplace",
        "label": "struct ComptrollerV17Storage.PoolData",
        "members": [
          {
            "astId": 1993,
            "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
            "label": "label",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1997,
            "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
            "label": "vTokens",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 2000,
            "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
            "label": "isActive",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 2003,
            "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
            "label": "allowCorePoolFallback",
            "offset": 1,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(VenusMarketState)1756_storage": {
        "encoding": "inplace",
        "label": "struct ComptrollerV1Storage.VenusMarketState",
        "members": [
          {
            "astId": 1752,
            "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
            "label": "index",
            "offset": 0,
            "slot": "0",
            "type": "t_uint224"
          },
          {
            "astId": 1755,
            "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
            "label": "block",
            "offset": 28,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      },
      "t_userDefinedValueType(PoolMarketId)11255": {
        "encoding": "inplace",
        "label": "PoolMarketId",
        "numberOfBytes": "32"
      }
    }
  }
}
