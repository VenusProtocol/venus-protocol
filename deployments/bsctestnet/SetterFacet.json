{
  "address": "0xb619F7ce96c0a6E3F0b44e993f663522F79f294A",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract VToken",
          "name": "vToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "enum ComptrollerTypes.Action",
          "name": "action",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "pauseState",
          "type": "bool"
        }
      ],
      "name": "ActionPausedMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "ActionProtocolPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DistributedVAIVaultVenus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "error",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "info",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "detail",
          "type": "uint256"
        }
      ],
      "name": "Failure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        }
      ],
      "name": "IsForcedLiquidationEnabledForUserUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        }
      ],
      "name": "IsForcedLiquidationEnabledUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract VToken",
          "name": "vToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MarketEntered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAccessControlAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAccessControlAddress",
          "type": "address"
        }
      ],
      "name": "NewAccessControl",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract VToken",
          "name": "vToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBorrowCap",
          "type": "uint256"
        }
      ],
      "name": "NewBorrowCap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCloseFactorMantissa",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCloseFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "NewCloseFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract VToken",
          "name": "vToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCollateralFactorMantissa",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCollateralFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "NewCollateralFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldComptrollerLens",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newComptrollerLens",
          "type": "address"
        }
      ],
      "name": "NewComptrollerLens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldLiquidationIncentiveMantissa",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLiquidationIncentiveMantissa",
          "type": "uint256"
        }
      ],
      "name": "NewLiquidationIncentive",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldLiquidatorContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newLiquidatorContract",
          "type": "address"
        }
      ],
      "name": "NewLiquidatorContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldPauseGuardian",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPauseGuardian",
          "type": "address"
        }
      ],
      "name": "NewPauseGuardian",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract PriceOracle",
          "name": "oldPriceOracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract PriceOracle",
          "name": "newPriceOracle",
          "type": "address"
        }
      ],
      "name": "NewPriceOracle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IPrime",
          "name": "oldPrimeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IPrime",
          "name": "newPrimeToken",
          "type": "address"
        }
      ],
      "name": "NewPrimeToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract VToken",
          "name": "vToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSupplyCap",
          "type": "uint256"
        }
      ],
      "name": "NewSupplyCap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldTreasuryAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTreasuryAddress",
          "type": "address"
        }
      ],
      "name": "NewTreasuryAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldTreasuryGuardian",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTreasuryGuardian",
          "type": "address"
        }
      ],
      "name": "NewTreasuryGuardian",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldTreasuryPercent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTreasuryPercent",
          "type": "uint256"
        }
      ],
      "name": "NewTreasuryPercent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract VAIControllerInterface",
          "name": "oldVAIController",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract VAIControllerInterface",
          "name": "newVAIController",
          "type": "address"
        }
      ],
      "name": "NewVAIController",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldVAIMintRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newVAIMintRate",
          "type": "uint256"
        }
      ],
      "name": "NewVAIMintRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "releaseStartBlock_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "releaseInterval_",
          "type": "uint256"
        }
      ],
      "name": "NewVAIVaultInfo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldVenusVAIVaultRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newVenusVAIVaultRate",
          "type": "uint256"
        }
      ],
      "name": "NewVenusVAIVaultRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldXVS",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newXVS",
          "type": "address"
        }
      ],
      "name": "NewXVSToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldXVSVToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newXVSVToken",
          "type": "address"
        }
      ],
      "name": "NewXVSVToken",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newAccessControlAddress",
          "type": "address"
        }
      ],
      "name": "_setAccessControl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address[]",
          "name": "markets_",
          "type": "address[]"
        },
        {
          "internalType": "enum ComptrollerTypes.Action[]",
          "name": "actions_",
          "type": "uint8[]"
        },
        {
          "internalType": "bool",
          "name": "paused_",
          "type": "bool"
        }
      ],
      "name": "_setActionsPaused",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCloseFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "_setCloseFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract VToken",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newCollateralFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "_setCollateralFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract ComptrollerLensInterface",
          "name": "comptrollerLens_",
          "type": "address"
        }
      ],
      "name": "_setComptrollerLens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "vTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        }
      ],
      "name": "_setForcedLiquidation",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        }
      ],
      "name": "_setForcedLiquidationForUser",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newLiquidationIncentiveMantissa",
          "type": "uint256"
        }
      ],
      "name": "_setLiquidationIncentive",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newLiquidatorContract_",
          "type": "address"
        }
      ],
      "name": "_setLiquidatorContract",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract VToken[]",
          "name": "vTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "newBorrowCaps",
          "type": "uint256[]"
        }
      ],
      "name": "_setMarketBorrowCaps",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract VToken[]",
          "name": "vTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "newSupplyCaps",
          "type": "uint256[]"
        }
      ],
      "name": "_setMarketSupplyCaps",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newPauseGuardian",
          "type": "address"
        }
      ],
      "name": "_setPauseGuardian",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract PriceOracle",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "_setPriceOracle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract IPrime",
          "name": "_prime",
          "type": "address"
        }
      ],
      "name": "_setPrimeToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "_setProtocolPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newTreasuryGuardian",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newTreasuryAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newTreasuryPercent",
          "type": "uint256"
        }
      ],
      "name": "_setTreasuryData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract VAIControllerInterface",
          "name": "vaiController_",
          "type": "address"
        }
      ],
      "name": "_setVAIController",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newVAIMintRate",
          "type": "uint256"
        }
      ],
      "name": "_setVAIMintRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "vault_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "releaseStartBlock_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minReleaseAmount_",
          "type": "uint256"
        }
      ],
      "name": "_setVAIVaultInfo",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "venusVAIVaultRate_",
          "type": "uint256"
        }
      ],
      "name": "_setVenusVAIVaultRate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "xvs_",
          "type": "address"
        }
      ],
      "name": "_setXVSToken",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "xvsVToken_",
          "type": "address"
        }
      ],
      "name": "_setXVSVToken",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "accountAssets",
      "outputs": [
        {
          "internalType": "contract VToken",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "enum ComptrollerTypes.Action",
          "name": "action",
          "type": "uint8"
        }
      ],
      "name": "actionPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allMarkets",
      "outputs": [
        {
          "internalType": "contract VToken",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvedDelegates",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "borrowCapGuardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowCaps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "closeFactorMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "comptrollerImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "comptrollerLens",
      "outputs": [
        {
          "internalType": "contract ComptrollerLensInterface",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getXVSAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isForcedLiquidationEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isForcedLiquidationEnabledForUser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "liquidationIncentiveMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "liquidatorContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isListed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "collateralFactorMantissa",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isVenus",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "maxAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "minReleaseAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "mintVAIGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mintedVAIs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract PriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "pauseGuardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "pendingAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "pendingComptrollerImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "prime",
      "outputs": [
        {
          "internalType": "contract IPrime",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "protocolPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "releaseStartBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "repayVAIGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address[]",
          "name": "markets_",
          "type": "address[]"
        },
        {
          "internalType": "enum ComptrollerTypes.Action[]",
          "name": "actions_",
          "type": "uint8[]"
        },
        {
          "internalType": "bool",
          "name": "paused_",
          "type": "bool"
        }
      ],
      "name": "setActionsPaused",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCloseFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "setCloseFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract VToken",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newCollateralFactorMantissa",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newLiquidationThresholdMantissa",
          "type": "uint256"
        }
      ],
      "name": "setCollateralFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "vTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        }
      ],
      "name": "setForcedLiquidation",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newLiquidationIncentiveMantissa",
          "type": "uint256"
        }
      ],
      "name": "setLiquidationIncentive",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract VToken[]",
          "name": "vTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "newBorrowCaps",
          "type": "uint256[]"
        }
      ],
      "name": "setMarketBorrowCaps",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract VToken[]",
          "name": "vTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "newSupplyCaps",
          "type": "uint256[]"
        }
      ],
      "name": "setMarketSupplyCaps",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setMintedVAIOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract PriceOracle",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "setPriceOracle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract IPrime",
          "name": "_prime",
          "type": "address"
        }
      ],
      "name": "setPrimeToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "supplyCaps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "treasuryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "treasuryGuardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "treasuryPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "vaiController",
      "outputs": [
        {
          "internalType": "contract VAIControllerInterface",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "vaiMintRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "vaiVaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "venusAccrued",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "venusBorrowSpeeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "venusBorrowState",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "index",
          "type": "uint224"
        },
        {
          "internalType": "uint32",
          "name": "block",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "venusBorrowerIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "venusInitialIndex",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "",
          "type": "uint224"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "venusSupplierIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "venusSupplySpeeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "venusSupplyState",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "index",
          "type": "uint224"
        },
        {
          "internalType": "uint32",
          "name": "block",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "venusVAIVaultRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfd657b826b02b4b50e2d6e8aa5a37d74bf5e0a5f8430086a6b24c4f69a18e1ef",
  "receipt": {
    "to": null,
    "from": "0x616574729DF936d26F328a934401983cB189951c",
    "contractAddress": "0xb619F7ce96c0a6E3F0b44e993f663522F79f294A",
    "transactionIndex": 0,
    "gasUsed": "2898420",
    "logsBloom": "0x
    "blockHash": "0xf28b852c1fca2115ad9816682e2357ea4c6ef70fd91e3fa86adb622845a05897",
    "transactionHash": "0xfd657b826b02b4b50e2d6e8aa5a37d74bf5e0a5f8430086a6b24c4f69a18e1ef",
    "logs": [],
    "blockNumber": 56831162,
    "cumulativeGasUsed": "2898420",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "501a636c0cfe94ed0788c4114ed4912e",
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract VToken\",\"name\":\"vToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum ComptrollerTypes.Action\",\"name\":\"action\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"pauseState\",\"type\":\"bool\"}],\"name\":\"ActionPausedMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"ActionProtocolPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DistributedVAIVaultVenus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"error\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"detail\",\"type\":\"uint256\"}],\"name\":\"Failure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"IsForcedLiquidationEnabledForUserUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"IsForcedLiquidationEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract VToken\",\"name\":\"vToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MarketEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAccessControlAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAccessControlAddress\",\"type\":\"address\"}],\"name\":\"NewAccessControl\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract VToken\",\"name\":\"vToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBorrowCap\",\"type\":\"uint256\"}],\"name\":\"NewBorrowCap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCloseFactorMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCloseFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"NewCloseFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract VToken\",\"name\":\"vToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCollateralFactorMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCollateralFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"NewCollateralFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldComptrollerLens\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newComptrollerLens\",\"type\":\"address\"}],\"name\":\"NewComptrollerLens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLiquidationIncentiveMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLiquidationIncentiveMantissa\",\"type\":\"uint256\"}],\"name\":\"NewLiquidationIncentive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldLiquidatorContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLiquidatorContract\",\"type\":\"address\"}],\"name\":\"NewLiquidatorContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPauseGuardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPauseGuardian\",\"type\":\"address\"}],\"name\":\"NewPauseGuardian\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract PriceOracle\",\"name\":\"oldPriceOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract PriceOracle\",\"name\":\"newPriceOracle\",\"type\":\"address\"}],\"name\":\"NewPriceOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IPrime\",\"name\":\"oldPrimeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IPrime\",\"name\":\"newPrimeToken\",\"type\":\"address\"}],\"name\":\"NewPrimeToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract VToken\",\"name\":\"vToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSupplyCap\",\"type\":\"uint256\"}],\"name\":\"NewSupplyCap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTreasuryAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasuryAddress\",\"type\":\"address\"}],\"name\":\"NewTreasuryAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTreasuryGuardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasuryGuardian\",\"type\":\"address\"}],\"name\":\"NewTreasuryGuardian\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTreasuryPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTreasuryPercent\",\"type\":\"uint256\"}],\"name\":\"NewTreasuryPercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract VAIControllerInterface\",\"name\":\"oldVAIController\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract VAIControllerInterface\",\"name\":\"newVAIController\",\"type\":\"address\"}],\"name\":\"NewVAIController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldVAIMintRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVAIMintRate\",\"type\":\"uint256\"}],\"name\":\"NewVAIMintRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseStartBlock_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseInterval_\",\"type\":\"uint256\"}],\"name\":\"NewVAIVaultInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldVenusVAIVaultRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVenusVAIVaultRate\",\"type\":\"uint256\"}],\"name\":\"NewVenusVAIVaultRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldXVS\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newXVS\",\"type\":\"address\"}],\"name\":\"NewXVSToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldXVSVToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newXVSVToken\",\"type\":\"address\"}],\"name\":\"NewXVSVToken\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAccessControlAddress\",\"type\":\"address\"}],\"name\":\"_setAccessControl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"markets_\",\"type\":\"address[]\"},{\"internalType\":\"enum ComptrollerTypes.Action[]\",\"name\":\"actions_\",\"type\":\"uint8[]\"},{\"internalType\":\"bool\",\"name\":\"paused_\",\"type\":\"bool\"}],\"name\":\"_setActionsPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCloseFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"_setCloseFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract VToken\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newCollateralFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"_setCollateralFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ComptrollerLensInterface\",\"name\":\"comptrollerLens_\",\"type\":\"address\"}],\"name\":\"_setComptrollerLens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"vTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"_setForcedLiquidation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"_setForcedLiquidationForUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLiquidationIncentiveMantissa\",\"type\":\"uint256\"}],\"name\":\"_setLiquidationIncentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLiquidatorContract_\",\"type\":\"address\"}],\"name\":\"_setLiquidatorContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract VToken[]\",\"name\":\"vTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newBorrowCaps\",\"type\":\"uint256[]\"}],\"name\":\"_setMarketBorrowCaps\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract VToken[]\",\"name\":\"vTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newSupplyCaps\",\"type\":\"uint256[]\"}],\"name\":\"_setMarketSupplyCaps\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPauseGuardian\",\"type\":\"address\"}],\"name\":\"_setPauseGuardian\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract PriceOracle\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"_setPriceOracle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IPrime\",\"name\":\"_prime\",\"type\":\"address\"}],\"name\":\"_setPrimeToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setProtocolPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTreasuryGuardian\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newTreasuryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newTreasuryPercent\",\"type\":\"uint256\"}],\"name\":\"_setTreasuryData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract VAIControllerInterface\",\"name\":\"vaiController_\",\"type\":\"address\"}],\"name\":\"_setVAIController\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newVAIMintRate\",\"type\":\"uint256\"}],\"name\":\"_setVAIMintRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"releaseStartBlock_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReleaseAmount_\",\"type\":\"uint256\"}],\"name\":\"_setVAIVaultInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"venusVAIVaultRate_\",\"type\":\"uint256\"}],\"name\":\"_setVenusVAIVaultRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"xvs_\",\"type\":\"address\"}],\"name\":\"_setXVSToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"xvsVToken_\",\"type\":\"address\"}],\"name\":\"_setXVSVToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accountAssets\",\"outputs\":[{\"internalType\":\"contract VToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"enum ComptrollerTypes.Action\",\"name\":\"action\",\"type\":\"uint8\"}],\"name\":\"actionPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allMarkets\",\"outputs\":[{\"internalType\":\"contract VToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedDelegates\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrowCapGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowCaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closeFactorMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"comptrollerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"comptrollerLens\",\"outputs\":[{\"internalType\":\"contract ComptrollerLensInterface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getXVSAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isForcedLiquidationEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isForcedLiquidationEnabledForUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidationIncentiveMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidatorContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isVenus\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minReleaseAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintVAIGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintedVAIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract PriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pauseGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingComptrollerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prime\",\"outputs\":[{\"internalType\":\"contract IPrime\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"protocolPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"repayVAIGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"markets_\",\"type\":\"address[]\"},{\"internalType\":\"enum ComptrollerTypes.Action[]\",\"name\":\"actions_\",\"type\":\"uint8[]\"},{\"internalType\":\"bool\",\"name\":\"paused_\",\"type\":\"bool\"}],\"name\":\"setActionsPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCloseFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"setCloseFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract VToken\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newCollateralFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newLiquidationThresholdMantissa\",\"type\":\"uint256\"}],\"name\":\"setCollateralFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"vTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setForcedLiquidation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLiquidationIncentiveMantissa\",\"type\":\"uint256\"}],\"name\":\"setLiquidationIncentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract VToken[]\",\"name\":\"vTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newBorrowCaps\",\"type\":\"uint256[]\"}],\"name\":\"setMarketBorrowCaps\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract VToken[]\",\"name\":\"vTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newSupplyCaps\",\"type\":\"uint256[]\"}],\"name\":\"setMarketSupplyCaps\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMintedVAIOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract PriceOracle\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"setPriceOracle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IPrime\",\"name\":\"_prime\",\"type\":\"address\"}],\"name\":\"setPrimeToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supplyCaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treasuryGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treasuryPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vaiController\",\"outputs\":[{\"internalType\":\"contract VAIControllerInterface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vaiMintRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vaiVaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"venusAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"venusBorrowSpeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"venusBorrowState\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"index\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"block\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"venusBorrowerIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"venusInitialIndex\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"\",\"type\":\"uint224\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"venusSupplierIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"venusSupplySpeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"venusSupplyState\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"index\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"block\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"venusVAIVaultRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Venus\",\"details\":\"This facet contains all the setters for the states\",\"methods\":{\"_setAccessControl(address)\":{\"details\":\"Allows the contract admin to set the address of access control of this contract\",\"params\":{\"newAccessControlAddress\":\"New address for the access control\"},\"return\":\"uint256 0=success, otherwise will revert\"},\"_setActionsPaused(address[],uint8[],bool)\":{\"details\":\"Allows a privileged role to pause/unpause the protocol action state\",\"params\":{\"actions_\":\"List of action ids to pause/unpause\",\"markets_\":\"Markets to pause/unpause the actions on\",\"paused_\":\"The new paused state (true=paused, false=unpaused)\"}},\"_setCloseFactor(uint256)\":{\"details\":\"Allows the contract admin to set the closeFactor used to liquidate borrows\",\"params\":{\"newCloseFactorMantissa\":\"New close factor, scaled by 1e18\"},\"return\":\"uint256 0=success, otherwise will revert\"},\"_setCollateralFactor(address,uint256)\":{\"details\":\"Allows a privileged role to set the collateralFactorMantissa\",\"params\":{\"newCollateralFactorMantissa\":\"The new collateral factor, scaled by 1e18\",\"vToken\":\"The market to set the factor on\"},\"return\":\"uint256 0=success, otherwise a failure. (See ErrorReporter for details)\"},\"_setComptrollerLens(address)\":{\"details\":\"Set ComptrollerLens contract address\",\"params\":{\"comptrollerLens_\":\"The new ComptrollerLens contract address to be set\"},\"return\":\"uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)\"},\"_setForcedLiquidation(address,bool)\":{\"details\":\"Allows a privileged role to set enable/disable forced liquidations\",\"params\":{\"enable\":\"Whether to enable forced liquidations\",\"vTokenBorrowed\":\"Borrowed vToken\"}},\"_setForcedLiquidationForUser(address,address,bool)\":{\"params\":{\"borrower\":\"The address of the borrower\",\"enable\":\"Whether to enable forced liquidations\",\"vTokenBorrowed\":\"Borrowed vToken\"}},\"_setLiquidationIncentive(uint256)\":{\"details\":\"Allows a privileged role to set the liquidationIncentiveMantissa\",\"params\":{\"newLiquidationIncentiveMantissa\":\"New liquidationIncentive scaled by 1e18\"},\"return\":\"uint256 0=success, otherwise a failure. (See ErrorReporter for details)\"},\"_setLiquidatorContract(address)\":{\"details\":\"Allows the contract admin to update the address of liquidator contract\",\"params\":{\"newLiquidatorContract_\":\"The new address of the liquidator contract\"}},\"_setMarketBorrowCaps(address[],uint256[])\":{\"details\":\"Allows a privileged role to set the borrowing cap for a vToken market. A borrow cap of 0 corresponds to Borrow not allowed\",\"params\":{\"newBorrowCaps\":\"The new borrow cap values in underlying to be set. A value of 0 corresponds to Borrow not allowed\",\"vTokens\":\"The addresses of the markets (tokens) to change the borrow caps for\"}},\"_setMarketSupplyCaps(address[],uint256[])\":{\"details\":\"Allows a privileged role to set the supply cap for a vToken. A supply cap of 0 corresponds to Minting NotAllowed\",\"params\":{\"newSupplyCaps\":\"The new supply cap values in underlying to be set. A value of 0 corresponds to Minting NotAllowed\",\"vTokens\":\"The addresses of the markets (tokens) to change the supply caps for\"}},\"_setPauseGuardian(address)\":{\"details\":\"Allows the contract admin to change the Pause Guardian\",\"params\":{\"newPauseGuardian\":\"The address of the new Pause Guardian\"},\"return\":\"uint256 0=success, otherwise a failure. (See enum Error for details)\"},\"_setPriceOracle(address)\":{\"details\":\"Allows the contract admin to set a new price oracle used by the Comptroller\",\"params\":{\"newOracle\":\"The new price oracle to set\"},\"return\":\"uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)\"},\"_setPrimeToken(address)\":{\"params\":{\"_prime\":\"The new prime token contract to be set\"},\"return\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"},\"_setProtocolPaused(bool)\":{\"details\":\"Allows a privileged role to pause/unpause protocol\",\"params\":{\"state\":\"The new state (true=paused, false=unpaused)\"},\"return\":\"bool The updated state of the protocol\"},\"_setTreasuryData(address,address,uint256)\":{\"params\":{\"newTreasuryAddress\":\"The new address of the treasury to be set\",\"newTreasuryGuardian\":\"The new address of the treasury guardian to be set\",\"newTreasuryPercent\":\"The new treasury percent to be set\"},\"return\":\"uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)\"},\"_setVAIController(address)\":{\"details\":\"Admin function to set a new VAI controller\",\"return\":\"uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)\"},\"_setVAIMintRate(uint256)\":{\"params\":{\"newVAIMintRate\":\"The new VAI mint rate to be set\"},\"return\":\"uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)\"},\"_setVAIVaultInfo(address,uint256,uint256)\":{\"params\":{\"minReleaseAmount_\":\"The minimum release amount to VAI Vault\",\"releaseStartBlock_\":\"The start block of release to VAI Vault\",\"vault_\":\"The address of the VAI Vault\"}},\"_setVenusVAIVaultRate(uint256)\":{\"params\":{\"venusVAIVaultRate_\":\"The amount of XVS wei per block to distribute to VAI Vault\"}},\"_setXVSToken(address)\":{\"params\":{\"xvs_\":\"The address of the XVS token\"}},\"_setXVSVToken(address)\":{\"params\":{\"xvsVToken_\":\"The address of the XVS vToken\"}},\"actionPaused(address,uint8)\":{\"params\":{\"action\":\"Action id\",\"market\":\"vToken address\"}},\"getXVSAddress()\":{\"return\":\"The address of XVS token\"},\"setActionsPaused(address[],uint8[],bool)\":{\"params\":{\"actions_\":\"List of action ids to pause/unpause\",\"markets_\":\"Markets to pause/unpause the actions on\",\"paused_\":\"The new paused state (true=paused, false=unpaused)\"}},\"setCloseFactor(uint256)\":{\"params\":{\"newCloseFactorMantissa\":\"New close factor, scaled by 1e18\"},\"return\":\"uint256 0=success, otherwise will revert\"},\"setCollateralFactor(address,uint256,uint256)\":{\"params\":{\"newCollateralFactorMantissa\":\"The new collateral factor, scaled by 1e18\",\"newLiquidationThresholdMantissa\":\"The new liquidation threshold, scaled by 1e18\",\"vToken\":\"The market to set the factor on\"},\"return\":\"uint256 0=success, otherwise a failure. (See ErrorReporter for details)\"},\"setForcedLiquidation(address,bool)\":{\"params\":{\"enable\":\"Whether to enable forced liquidations\",\"vTokenBorrowed\":\"Borrowed vToken\"}},\"setLiquidationIncentive(uint256)\":{\"params\":{\"newLiquidationIncentiveMantissa\":\"New liquidationIncentive scaled by 1e18\"},\"return\":\"uint256 0=success, otherwise a failure. (See ErrorReporter for details)\"},\"setMarketBorrowCaps(address[],uint256[])\":{\"params\":{\"newBorrowCaps\":\"The new borrow cap values in underlying to be set. A value of 0 corresponds to Borrow not allowed\",\"vTokens\":\"The addresses of the markets (tokens) to change the borrow caps for\"}},\"setMarketSupplyCaps(address[],uint256[])\":{\"params\":{\"newSupplyCaps\":\"The new supply cap values in underlying to be set. A value of 0 corresponds to Minting NotAllowed\",\"vTokens\":\"The addresses of the markets (tokens) to change the supply caps for\"}},\"setMintedVAIOf(address,uint256)\":{\"params\":{\"amount\":\"The amount of VAI to set to the account\",\"owner\":\"The address of the account to set\"},\"return\":\"The number of minted VAI by `owner`\"},\"setPriceOracle(address)\":{\"params\":{\"newOracle\":\"The new price oracle to set\"},\"return\":\"uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)\"},\"setPrimeToken(address)\":{\"params\":{\"_prime\":\"The new prime token contract to be set\"},\"return\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"title\":\"SetterFacet\"},\"userdoc\":{\"methods\":{\"_setAccessControl(address)\":{\"notice\":\"Sets the address of the access control of this contract\"},\"_setActionsPaused(address[],uint8[],bool)\":{\"notice\":\"Pause/unpause certain actions\"},\"_setCloseFactor(uint256)\":{\"notice\":\"Sets the closeFactor used when liquidating borrows\"},\"_setCollateralFactor(address,uint256)\":{\"notice\":\"Sets the collateralFactor for a market\"},\"_setForcedLiquidation(address,bool)\":{\"notice\":\"Enables forced liquidations for a market. If forced liquidation is enabled, borrows in the market may be liquidated regardless of the account liquidity\"},\"_setForcedLiquidationForUser(address,address,bool)\":{\"notice\":\"Enables forced liquidations for user's borrows in a certain market. If forced liquidation is enabled, user's borrows in the market may be liquidated regardless of the account liquidity. Forced liquidation may be enabled for a user even if it is not enabled for the entire market.\"},\"_setLiquidationIncentive(uint256)\":{\"notice\":\"Sets liquidationIncentive\"},\"_setLiquidatorContract(address)\":{\"notice\":\"Update the address of the liquidator contract\"},\"_setMarketBorrowCaps(address[],uint256[])\":{\"notice\":\"Set the given borrow caps for the given vToken market Borrowing that brings total borrows to or above borrow cap will revert\"},\"_setMarketSupplyCaps(address[],uint256[])\":{\"notice\":\"Set the given supply caps for the given vToken market Supply that brings total Supply to or above supply cap will revert\"},\"_setPauseGuardian(address)\":{\"notice\":\"Admin function to change the Pause Guardian\"},\"_setPriceOracle(address)\":{\"notice\":\"Sets a new price oracle for the comptroller\"},\"_setPrimeToken(address)\":{\"notice\":\"Sets the prime token contract for the comptroller\"},\"_setProtocolPaused(bool)\":{\"notice\":\"Set whole protocol pause/unpause state\"},\"_setTreasuryData(address,address,uint256)\":{\"notice\":\"Set the treasury data.\"},\"_setVAIController(address)\":{\"notice\":\"Sets a new VAI controller\"},\"_setVAIMintRate(uint256)\":{\"notice\":\"Set the VAI mint rate\"},\"_setVAIVaultInfo(address,uint256,uint256)\":{\"notice\":\"Set the VAI Vault infos\"},\"_setVenusVAIVaultRate(uint256)\":{\"notice\":\"Set the amount of XVS distributed per block to VAI Vault\"},\"_setXVSToken(address)\":{\"notice\":\"Set the address of the XVS token\"},\"_setXVSVToken(address)\":{\"notice\":\"Set the address of the XVS vToken\"},\"actionPaused(address,uint8)\":{\"notice\":\"Checks if a certain action is paused on a market\"},\"getXVSAddress()\":{\"notice\":\"Returns the XVS address\"},\"setActionsPaused(address[],uint8[],bool)\":{\"notice\":\"Alias to _setActionsPaused to support the Isolated Lending Comptroller Interface\"},\"setCloseFactor(uint256)\":{\"notice\":\"Alias to _setCloseFactor to support the Isolated Lending Comptroller Interface\"},\"setCollateralFactor(address,uint256,uint256)\":{\"notice\":\"Alias to _setCollateralFactor to support the Isolated Lending Comptroller Interface\"},\"setForcedLiquidation(address,bool)\":{\"notice\":\"Alias to _setForcedLiquidation to support the Isolated Lending Comptroller Interface\"},\"setLiquidationIncentive(uint256)\":{\"notice\":\"Alias to _setLiquidationIncentive to support the Isolated Lending Comptroller Interface\"},\"setMarketBorrowCaps(address[],uint256[])\":{\"notice\":\"Alias to _setMarketBorrowCaps to support the Isolated Lending Comptroller Interface\"},\"setMarketSupplyCaps(address[],uint256[])\":{\"notice\":\"Alias to _setMarketSupplyCaps to support the Isolated Lending Comptroller Interface\"},\"setMintedVAIOf(address,uint256)\":{\"notice\":\"Set the minted VAI amount of the `owner`\"},\"setPriceOracle(address)\":{\"notice\":\"Alias to _setPriceOracle to support the Isolated Lending Comptroller Interface\"},\"setPrimeToken(address)\":{\"notice\":\"Alias to _setPrimeToken to support the Isolated Lending Comptroller Interface\"}},\"notice\":\"This facet contract contains all the configurational setter functions\"}},\"settings\":{\"compilationTarget\":{\"contracts/Comptroller/Diamond/facets/SetterFacet.sol\":\"SetterFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@venusprotocol/governance-contracts/contracts/Governance/IAccessControlManagerV5.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.5.16;\\n\\n/**\\n * @title IAccessControlManagerV5\\n * @author Venus\\n * @notice Interface implemented by the `AccessControlManagerV5` contract.\\n */\\ninterface IAccessControlManagerV5 {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @notice Gives a function call permission to one single account\\n     * @dev this function can be called only from Role Admin or DEFAULT_ADMIN_ROLE\\n     * \\t\\tMay emit a {RoleGranted} event.\\n     * @param contractAddress address of contract for which call permissions will be granted\\n     * @param functionSig signature e.g. \\\"functionName(uint,bool)\\\"\\n     */\\n    function giveCallPermission(address contractAddress, string calldata functionSig, address accountToPermit) external;\\n\\n    /**\\n     * @notice Revokes an account's permission to a particular function call\\n     * @dev this function can be called only from Role Admin or DEFAULT_ADMIN_ROLE\\n     * \\t\\tMay emit a {RoleRevoked} event.\\n     * @param contractAddress address of contract for which call permissions will be revoked\\n     * @param functionSig signature e.g. \\\"functionName(uint,bool)\\\"\\n     */\\n    function revokeCallPermission(\\n        address contractAddress,\\n        string calldata functionSig,\\n        address accountToRevoke\\n    ) external;\\n\\n    /**\\n     * @notice Verifies if the given account can call a praticular contract's function\\n     * @dev Since the contract is calling itself this function, we can get contracts address with msg.sender\\n     * @param account address (eoa or contract) for which call permissions will be checked\\n     * @param functionSig signature e.g. \\\"functionName(uint,bool)\\\"\\n     * @return false if the user account cannot call the particular contract function\\n     *\\n     */\\n    function isAllowedToCall(address account, string calldata functionSig) external view returns (bool);\\n\\n    function hasPermission(\\n        address account,\\n        address contractAddress,\\n        string calldata functionSig\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x3563db4c75f7aa0b8a982bab591907dda192438a2368511b62a9c587a3e54226\"},\"contracts/Comptroller/ComptrollerInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"../Tokens/VTokens/VToken.sol\\\";\\nimport \\\"../Oracle/PriceOracle.sol\\\";\\nimport \\\"../Tokens/VAI/VAIControllerInterface.sol\\\";\\nimport { ComptrollerTypes } from \\\"./ComptrollerStorage.sol\\\";\\n\\ncontract ComptrollerInterface {\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\n    bool public constant isComptroller = true;\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata vTokens) external returns (uint[] memory);\\n\\n    function exitMarket(address vToken) external returns (uint);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(address vToken, address minter, uint mintAmount) external returns (uint);\\n\\n    function mintVerify(address vToken, address minter, uint mintAmount, uint mintTokens) external;\\n\\n    function redeemAllowed(address vToken, address redeemer, uint redeemTokens) external returns (uint);\\n\\n    function redeemVerify(address vToken, address redeemer, uint redeemAmount, uint redeemTokens) external;\\n\\n    function borrowAllowed(address vToken, address borrower, uint borrowAmount) external returns (uint);\\n\\n    function borrowVerify(address vToken, address borrower, uint borrowAmount) external;\\n\\n    function repayBorrowAllowed(\\n        address vToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount\\n    ) external returns (uint);\\n\\n    function repayBorrowVerify(\\n        address vToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount,\\n        uint borrowerIndex\\n    ) external;\\n\\n    function liquidateBorrowAllowed(\\n        address vTokenBorrowed,\\n        address vTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount\\n    ) external returns (uint);\\n\\n    function liquidateBorrowVerify(\\n        address vTokenBorrowed,\\n        address vTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        uint seizeTokens\\n    ) external;\\n\\n    function seizeAllowed(\\n        address vTokenCollateral,\\n        address vTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens\\n    ) external returns (uint);\\n\\n    function seizeVerify(\\n        address vTokenCollateral,\\n        address vTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens\\n    ) external;\\n\\n    function transferAllowed(address vToken, address src, address dst, uint transferTokens) external returns (uint);\\n\\n    function transferVerify(address vToken, address src, address dst, uint transferTokens) external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address vTokenBorrowed,\\n        address vTokenCollateral,\\n        uint repayAmount\\n    ) external view returns (uint, uint);\\n\\n    function setMintedVAIOf(address owner, uint amount) external returns (uint);\\n\\n    function liquidateVAICalculateSeizeTokens(\\n        address vTokenCollateral,\\n        uint repayAmount\\n    ) external view returns (uint, uint);\\n\\n    function getXVSAddress() public view returns (address);\\n\\n    function markets(address) external view returns (bool, uint);\\n\\n    function oracle() external view returns (PriceOracle);\\n\\n    function getAccountLiquidity(address) external view returns (uint, uint, uint);\\n\\n    function getAssetsIn(address) external view returns (VToken[] memory);\\n\\n    function claimVenus(address) external;\\n\\n    function venusAccrued(address) external view returns (uint);\\n\\n    function venusSupplySpeeds(address) external view returns (uint);\\n\\n    function venusBorrowSpeeds(address) external view returns (uint);\\n\\n    function getAllMarkets() external view returns (VToken[] memory);\\n\\n    function venusSupplierIndex(address, address) external view returns (uint);\\n\\n    function venusInitialIndex() external view returns (uint224);\\n\\n    function venusBorrowerIndex(address, address) external view returns (uint);\\n\\n    function venusBorrowState(address) external view returns (uint224, uint32);\\n\\n    function venusSupplyState(address) external view returns (uint224, uint32);\\n\\n    function approvedDelegates(address borrower, address delegate) external view returns (bool);\\n\\n    function vaiController() external view returns (VAIControllerInterface);\\n\\n    function liquidationIncentiveMantissa() external view returns (uint);\\n\\n    function protocolPaused() external view returns (bool);\\n\\n    function actionPaused(address market, ComptrollerTypes.Action action) public view returns (bool);\\n\\n    function mintedVAIs(address user) external view returns (uint);\\n\\n    function vaiMintRate() external view returns (uint);\\n}\\n\\ninterface IVAIVault {\\n    function updatePendingRewards() external;\\n}\\n\\ninterface IComptroller {\\n    function liquidationIncentiveMantissa() external view returns (uint);\\n\\n    /*** Treasury Data ***/\\n    function treasuryAddress() external view returns (address);\\n\\n    function treasuryPercent() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x4f4965dd8614b455952a2ef186fd8a509affbc56078a4aa8702f46d4c8209793\"},\"contracts/Comptroller/ComptrollerLensInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../Tokens/VTokens/VToken.sol\\\";\\n\\ninterface ComptrollerLensInterface {\\n    function liquidateCalculateSeizeTokens(\\n        address comptroller,\\n        address vTokenBorrowed,\\n        address vTokenCollateral,\\n        uint actualRepayAmount\\n    ) external view returns (uint, uint);\\n\\n    function liquidateVAICalculateSeizeTokens(\\n        address comptroller,\\n        address vTokenCollateral,\\n        uint actualRepayAmount\\n    ) external view returns (uint, uint);\\n\\n    function getHypotheticalAccountLiquidity(\\n        address comptroller,\\n        address account,\\n        VToken vTokenModify,\\n        uint redeemTokens,\\n        uint borrowAmount\\n    ) external view returns (uint, uint, uint);\\n}\\n\",\"keccak256\":\"0xc824e034221740c1957891547c78a123b595017cf102629454a04d36637e9c4a\"},\"contracts/Comptroller/ComptrollerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity ^0.5.16;\\n\\nimport { VToken } from \\\"../Tokens/VTokens/VToken.sol\\\";\\nimport { PriceOracle } from \\\"../Oracle/PriceOracle.sol\\\";\\nimport { VAIControllerInterface } from \\\"../Tokens/VAI/VAIControllerInterface.sol\\\";\\nimport { ComptrollerLensInterface } from \\\"./ComptrollerLensInterface.sol\\\";\\nimport { IPrime } from \\\"../Tokens/Prime/IPrime.sol\\\";\\n\\ninterface ComptrollerTypes {\\n    enum Action {\\n        MINT,\\n        REDEEM,\\n        BORROW,\\n        REPAY,\\n        SEIZE,\\n        LIQUIDATE,\\n        TRANSFER,\\n        ENTER_MARKET,\\n        EXIT_MARKET\\n    }\\n}\\n\\ncontract UnitrollerAdminStorage {\\n    /**\\n     * @notice Administrator for this contract\\n     */\\n    address public admin;\\n\\n    /**\\n     * @notice Pending administrator for this contract\\n     */\\n    address public pendingAdmin;\\n\\n    /**\\n     * @notice Active brains of Unitroller\\n     */\\n    address public comptrollerImplementation;\\n\\n    /**\\n     * @notice Pending brains of Unitroller\\n     */\\n    address public pendingComptrollerImplementation;\\n}\\n\\ncontract ComptrollerV1Storage is ComptrollerTypes, UnitrollerAdminStorage {\\n    /**\\n     * @notice Oracle which gives the price of any given asset\\n     */\\n    PriceOracle public oracle;\\n\\n    /**\\n     * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\\n     */\\n    uint256 public closeFactorMantissa;\\n\\n    /**\\n     * @notice Multiplier representing the discount on collateral that a liquidator receives\\n     */\\n    uint256 public liquidationIncentiveMantissa;\\n\\n    /**\\n     * @notice Max number of assets a single account can participate in (borrow or use as collateral)\\n     */\\n    uint256 public maxAssets;\\n\\n    /**\\n     * @notice Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\\n     */\\n    mapping(address => VToken[]) public accountAssets;\\n\\n    struct Market {\\n        /// @notice Whether or not this market is listed\\n        bool isListed;\\n        /**\\n         * @notice Multiplier representing the most one can borrow against their collateral in this market.\\n         *  For instance, 0.9 to allow borrowing 90% of collateral value.\\n         *  Must be between 0 and 1, and stored as a mantissa.\\n         */\\n        uint256 collateralFactorMantissa;\\n        /// @notice Per-market mapping of \\\"accounts in this asset\\\"\\n        mapping(address => bool) accountMembership;\\n        /// @notice Whether or not this market receives XVS\\n        bool isVenus;\\n    }\\n\\n    /**\\n     * @notice Official mapping of vTokens -> Market metadata\\n     * @dev Used e.g. to determine if a market is supported\\n     */\\n    mapping(address => Market) public markets;\\n\\n    /**\\n     * @notice The Pause Guardian can pause certain actions as a safety mechanism.\\n     */\\n    address public pauseGuardian;\\n\\n    /// @notice Whether minting is paused (deprecated, superseded by actionPaused)\\n    bool private _mintGuardianPaused;\\n    /// @notice Whether borrowing is paused (deprecated, superseded by actionPaused)\\n    bool private _borrowGuardianPaused;\\n    /// @notice Whether borrowing is paused (deprecated, superseded by actionPaused)\\n    bool internal transferGuardianPaused;\\n    /// @notice Whether borrowing is paused (deprecated, superseded by actionPaused)\\n    bool internal seizeGuardianPaused;\\n    /// @notice Whether borrowing is paused (deprecated, superseded by actionPaused)\\n    mapping(address => bool) internal mintGuardianPaused;\\n    /// @notice Whether borrowing is paused (deprecated, superseded by actionPaused)\\n    mapping(address => bool) internal borrowGuardianPaused;\\n\\n    struct VenusMarketState {\\n        /// @notice The market's last updated venusBorrowIndex or venusSupplyIndex\\n        uint224 index;\\n        /// @notice The block number the index was last updated at\\n        uint32 block;\\n    }\\n\\n    /// @notice A list of all markets\\n    VToken[] public allMarkets;\\n\\n    /// @notice The rate at which the flywheel distributes XVS, per block\\n    uint256 internal venusRate;\\n\\n    /// @notice The portion of venusRate that each market currently receives\\n    mapping(address => uint256) internal venusSpeeds;\\n\\n    /// @notice The Venus market supply state for each market\\n    mapping(address => VenusMarketState) public venusSupplyState;\\n\\n    /// @notice The Venus market borrow state for each market\\n    mapping(address => VenusMarketState) public venusBorrowState;\\n\\n    /// @notice The Venus supply index for each market for each supplier as of the last time they accrued XVS\\n    mapping(address => mapping(address => uint256)) public venusSupplierIndex;\\n\\n    /// @notice The Venus borrow index for each market for each borrower as of the last time they accrued XVS\\n    mapping(address => mapping(address => uint256)) public venusBorrowerIndex;\\n\\n    /// @notice The XVS accrued but not yet transferred to each user\\n    mapping(address => uint256) public venusAccrued;\\n\\n    /// @notice The Address of VAIController\\n    VAIControllerInterface public vaiController;\\n\\n    /// @notice The minted VAI amount to each user\\n    mapping(address => uint256) public mintedVAIs;\\n\\n    /// @notice VAI Mint Rate as a percentage\\n    uint256 public vaiMintRate;\\n\\n    /**\\n     * @notice The Pause Guardian can pause certain actions as a safety mechanism.\\n     */\\n    bool public mintVAIGuardianPaused;\\n    bool public repayVAIGuardianPaused;\\n\\n    /**\\n     * @notice Pause/Unpause whole protocol actions\\n     */\\n    bool public protocolPaused;\\n\\n    /// @notice The rate at which the flywheel distributes XVS to VAI Minters, per block (deprecated)\\n    uint256 private venusVAIRate;\\n}\\n\\ncontract ComptrollerV2Storage is ComptrollerV1Storage {\\n    /// @notice The rate at which the flywheel distributes XVS to VAI Vault, per block\\n    uint256 public venusVAIVaultRate;\\n\\n    // address of VAI Vault\\n    address public vaiVaultAddress;\\n\\n    // start block of release to VAI Vault\\n    uint256 public releaseStartBlock;\\n\\n    // minimum release amount to VAI Vault\\n    uint256 public minReleaseAmount;\\n}\\n\\ncontract ComptrollerV3Storage is ComptrollerV2Storage {\\n    /// @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\\n    address public borrowCapGuardian;\\n\\n    /// @notice Borrow caps enforced by borrowAllowed for each vToken address.\\n    mapping(address => uint256) public borrowCaps;\\n}\\n\\ncontract ComptrollerV4Storage is ComptrollerV3Storage {\\n    /// @notice Treasury Guardian address\\n    address public treasuryGuardian;\\n\\n    /// @notice Treasury address\\n    address public treasuryAddress;\\n\\n    /// @notice Fee percent of accrued interest with decimal 18\\n    uint256 public treasuryPercent;\\n}\\n\\ncontract ComptrollerV5Storage is ComptrollerV4Storage {\\n    /// @notice The portion of XVS that each contributor receives per block (deprecated)\\n    mapping(address => uint256) private venusContributorSpeeds;\\n\\n    /// @notice Last block at which a contributor's XVS rewards have been allocated (deprecated)\\n    mapping(address => uint256) private lastContributorBlock;\\n}\\n\\ncontract ComptrollerV6Storage is ComptrollerV5Storage {\\n    address public liquidatorContract;\\n}\\n\\ncontract ComptrollerV7Storage is ComptrollerV6Storage {\\n    ComptrollerLensInterface public comptrollerLens;\\n}\\n\\ncontract ComptrollerV8Storage is ComptrollerV7Storage {\\n    /// @notice Supply caps enforced by mintAllowed for each vToken address. Defaults to zero which corresponds to minting notAllowed\\n    mapping(address => uint256) public supplyCaps;\\n}\\n\\ncontract ComptrollerV9Storage is ComptrollerV8Storage {\\n    /// @notice AccessControlManager address\\n    address internal accessControl;\\n\\n    /// @notice True if a certain action is paused on a certain market\\n    mapping(address => mapping(uint256 => bool)) internal _actionPaused;\\n}\\n\\ncontract ComptrollerV10Storage is ComptrollerV9Storage {\\n    /// @notice The rate at which venus is distributed to the corresponding borrow market (per block)\\n    mapping(address => uint256) public venusBorrowSpeeds;\\n\\n    /// @notice The rate at which venus is distributed to the corresponding supply market (per block)\\n    mapping(address => uint256) public venusSupplySpeeds;\\n}\\n\\ncontract ComptrollerV11Storage is ComptrollerV10Storage {\\n    /// @notice Whether the delegate is allowed to borrow or redeem on behalf of the user\\n    //mapping(address user => mapping (address delegate => bool approved)) public approvedDelegates;\\n    mapping(address => mapping(address => bool)) public approvedDelegates;\\n}\\n\\ncontract ComptrollerV12Storage is ComptrollerV11Storage {\\n    /// @notice Whether forced liquidation is enabled for all users borrowing in a certain market\\n    mapping(address => bool) public isForcedLiquidationEnabled;\\n}\\n\\ncontract ComptrollerV13Storage is ComptrollerV12Storage {\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in _facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in _facetAddresses array\\n    }\\n\\n    mapping(bytes4 => FacetAddressAndPosition) internal _selectorToFacetAndPosition;\\n    // maps facet addresses to function selectors\\n    mapping(address => FacetFunctionSelectors) internal _facetFunctionSelectors;\\n    // facet addresses\\n    address[] internal _facetAddresses;\\n}\\n\\ncontract ComptrollerV14Storage is ComptrollerV13Storage {\\n    /// @notice Prime token address\\n    IPrime public prime;\\n}\\n\\ncontract ComptrollerV15Storage is ComptrollerV14Storage {\\n    /// @notice Whether forced liquidation is enabled for the borrows of a user in a market\\n    mapping(address /* user */ => mapping(address /* market */ => bool)) public isForcedLiquidationEnabledForUser;\\n}\\n\\ncontract ComptrollerV16Storage is ComptrollerV15Storage {\\n    /// @notice The XVS token contract address\\n    address internal xvs;\\n\\n    /// @notice The XVS vToken contract address\\n    address internal xvsVToken;\\n}\\n\",\"keccak256\":\"0x06608bb502e91c33fda8c0dd88cc79a49a078fab521bc27d10fc3a69c1da55f4\"},\"contracts/Comptroller/Diamond/facets/FacetBase.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.5.16;\\n\\nimport { VToken, ComptrollerErrorReporter, ExponentialNoError } from \\\"../../../Tokens/VTokens/VToken.sol\\\";\\nimport { IVAIVault } from \\\"../../../Comptroller/ComptrollerInterface.sol\\\";\\nimport { ComptrollerV16Storage } from \\\"../../../Comptroller/ComptrollerStorage.sol\\\";\\nimport { IAccessControlManagerV5 } from \\\"@venusprotocol/governance-contracts/contracts/Governance/IAccessControlManagerV5.sol\\\";\\n\\nimport { SafeBEP20, IBEP20 } from \\\"../../../Utils/SafeBEP20.sol\\\";\\n\\n/**\\n * @title FacetBase\\n * @author Venus\\n * @notice This facet contract contains functions related to access and checks\\n */\\ncontract FacetBase is ComptrollerV16Storage, ExponentialNoError, ComptrollerErrorReporter {\\n    using SafeBEP20 for IBEP20;\\n\\n    /// @notice The initial Venus index for a market\\n    uint224 public constant venusInitialIndex = 1e36;\\n    // closeFactorMantissa must be strictly greater than this value\\n    uint256 internal constant closeFactorMinMantissa = 0.05e18; // 0.05\\n    // closeFactorMantissa must not exceed this value\\n    uint256 internal constant closeFactorMaxMantissa = 0.9e18; // 0.9\\n    // No collateralFactorMantissa may exceed this value\\n    uint256 internal constant collateralFactorMaxMantissa = 0.9e18; // 0.9\\n\\n    /// @notice Emitted when an account enters a market\\n    event MarketEntered(VToken indexed vToken, address indexed account);\\n\\n    /// @notice Emitted when XVS is distributed to VAI Vault\\n    event DistributedVAIVaultVenus(uint256 amount);\\n\\n    /// @notice Reverts if the protocol is paused\\n    function checkProtocolPauseState() internal view {\\n        require(!protocolPaused, \\\"protocol is paused\\\");\\n    }\\n\\n    /// @notice Reverts if a certain action is paused on a market\\n    function checkActionPauseState(address market, Action action) internal view {\\n        require(!actionPaused(market, action), \\\"action is paused\\\");\\n    }\\n\\n    /// @notice Reverts if the caller is not admin\\n    function ensureAdmin() internal view {\\n        require(msg.sender == admin, \\\"only admin can\\\");\\n    }\\n\\n    /// @notice Checks the passed address is nonzero\\n    function ensureNonzeroAddress(address someone) internal pure {\\n        require(someone != address(0), \\\"can't be zero address\\\");\\n    }\\n\\n    /// @notice Reverts if the market is not listed\\n    function ensureListed(Market storage market) internal view {\\n        require(market.isListed, \\\"market not listed\\\");\\n    }\\n\\n    /// @notice Reverts if the caller is neither admin nor the passed address\\n    function ensureAdminOr(address privilegedAddress) internal view {\\n        require(msg.sender == admin || msg.sender == privilegedAddress, \\\"access denied\\\");\\n    }\\n\\n    /// @notice Checks the caller is allowed to call the specified fuction\\n    function ensureAllowed(string memory functionSig) internal view {\\n        require(IAccessControlManagerV5(accessControl).isAllowedToCall(msg.sender, functionSig), \\\"access denied\\\");\\n    }\\n\\n    /**\\n     * @notice Checks if a certain action is paused on a market\\n     * @param action Action id\\n     * @param market vToken address\\n     */\\n    function actionPaused(address market, Action action) public view returns (bool) {\\n        return _actionPaused[market][uint256(action)];\\n    }\\n\\n    /**\\n     * @notice Get the latest block number\\n     */\\n    function getBlockNumber() internal view returns (uint256) {\\n        return block.number;\\n    }\\n\\n    /**\\n     * @notice Get the latest block number with the safe32 check\\n     */\\n    function getBlockNumberAsUint32() internal view returns (uint32) {\\n        return safe32(getBlockNumber(), \\\"block # > 32 bits\\\");\\n    }\\n\\n    /**\\n     * @notice Transfer XVS to VAI Vault\\n     */\\n    function releaseToVault() internal {\\n        if (releaseStartBlock == 0 || getBlockNumber() < releaseStartBlock) {\\n            return;\\n        }\\n\\n        IBEP20 xvs_ = IBEP20(xvs);\\n\\n        uint256 xvsBalance = xvs_.balanceOf(address(this));\\n        if (xvsBalance == 0) {\\n            return;\\n        }\\n\\n        uint256 actualAmount;\\n        uint256 deltaBlocks = sub_(getBlockNumber(), releaseStartBlock);\\n        // releaseAmount = venusVAIVaultRate * deltaBlocks\\n        uint256 releaseAmount_ = mul_(venusVAIVaultRate, deltaBlocks);\\n\\n        if (xvsBalance >= releaseAmount_) {\\n            actualAmount = releaseAmount_;\\n        } else {\\n            actualAmount = xvsBalance;\\n        }\\n\\n        if (actualAmount < minReleaseAmount) {\\n            return;\\n        }\\n\\n        releaseStartBlock = getBlockNumber();\\n\\n        xvs_.safeTransfer(vaiVaultAddress, actualAmount);\\n        emit DistributedVAIVaultVenus(actualAmount);\\n\\n        IVAIVault(vaiVaultAddress).updatePendingRewards();\\n    }\\n\\n    /**\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\n     * @param vTokenModify The market to hypothetically redeem/borrow in\\n     * @param account The account to determine liquidity for\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\n     * @dev Note that we calculate the exchangeRateStored for each collateral vToken using stored data,\\n     *  without calculating accumulated interest.\\n     * @return (possible error code,\\n                hypothetical account liquidity in excess of collateral requirements,\\n     *          hypothetical account shortfall below collateral requirements)\\n     */\\n    function getHypotheticalAccountLiquidityInternal(\\n        address account,\\n        VToken vTokenModify,\\n        uint256 redeemTokens,\\n        uint256 borrowAmount\\n    ) internal view returns (Error, uint256, uint256) {\\n        (uint256 err, uint256 liquidity, uint256 shortfall) = comptrollerLens.getHypotheticalAccountLiquidity(\\n            address(this),\\n            account,\\n            vTokenModify,\\n            redeemTokens,\\n            borrowAmount\\n        );\\n        return (Error(err), liquidity, shortfall);\\n    }\\n\\n    /**\\n     * @notice Add the market to the borrower's \\\"assets in\\\" for liquidity calculations\\n     * @param vToken The market to enter\\n     * @param borrower The address of the account to modify\\n     * @return Success indicator for whether the market was entered\\n     */\\n    function addToMarketInternal(VToken vToken, address borrower) internal returns (Error) {\\n        checkActionPauseState(address(vToken), Action.ENTER_MARKET);\\n        Market storage marketToJoin = markets[address(vToken)];\\n        ensureListed(marketToJoin);\\n        if (marketToJoin.accountMembership[borrower]) {\\n            // already joined\\n            return Error.NO_ERROR;\\n        }\\n        // survived the gauntlet, add to list\\n        // NOTE: we store these somewhat redundantly as a significant optimization\\n        //  this avoids having to iterate through the list for the most common use cases\\n        //  that is, only when we need to perform liquidity checks\\n        //  and not whenever we want to check if an account is in a particular market\\n        marketToJoin.accountMembership[borrower] = true;\\n        accountAssets[borrower].push(vToken);\\n\\n        emit MarketEntered(vToken, borrower);\\n\\n        return Error.NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Checks for the user is allowed to redeem tokens\\n     * @param vToken Address of the market\\n     * @param redeemer Address of the user\\n     * @param redeemTokens Amount of tokens to redeem\\n     * @return Success indicator for redeem is allowed or not\\n     */\\n    function redeemAllowedInternal(\\n        address vToken,\\n        address redeemer,\\n        uint256 redeemTokens\\n    ) internal view returns (uint256) {\\n        ensureListed(markets[vToken]);\\n        /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */\\n        if (!markets[vToken].accountMembership[redeemer]) {\\n            return uint256(Error.NO_ERROR);\\n        }\\n        /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\\n        (Error err, , uint256 shortfall) = getHypotheticalAccountLiquidityInternal(\\n            redeemer,\\n            VToken(vToken),\\n            redeemTokens,\\n            0\\n        );\\n        if (err != Error.NO_ERROR) {\\n            return uint256(err);\\n        }\\n        if (shortfall != 0) {\\n            return uint256(Error.INSUFFICIENT_LIQUIDITY);\\n        }\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Returns the XVS address\\n     * @return The address of XVS token\\n     */\\n    function getXVSAddress() external view returns (address) {\\n        return xvs;\\n    }\\n}\\n\",\"keccak256\":\"0x3a015aa01706f07dd76caa6531bef30a70b5de6ac91a79c825cfef9ac2648b83\"},\"contracts/Comptroller/Diamond/facets/SetterFacet.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.5.16;\\n\\nimport { VToken } from \\\"../../../Tokens/VTokens/VToken.sol\\\";\\nimport { ISetterFacet } from \\\"../interfaces/ISetterFacet.sol\\\";\\nimport { PriceOracle } from \\\"../../../Oracle/PriceOracle.sol\\\";\\nimport { ComptrollerLensInterface } from \\\"../../ComptrollerLensInterface.sol\\\";\\nimport { VAIControllerInterface } from \\\"../../../Tokens/VAI/VAIControllerInterface.sol\\\";\\nimport { FacetBase } from \\\"./FacetBase.sol\\\";\\nimport { IPrime } from \\\"../../../Tokens/Prime/IPrime.sol\\\";\\n\\n/**\\n * @title SetterFacet\\n * @author Venus\\n * @dev This facet contains all the setters for the states\\n * @notice This facet contract contains all the configurational setter functions\\n */\\ncontract SetterFacet is ISetterFacet, FacetBase {\\n    /// @notice Emitted when close factor is changed by admin\\n    event NewCloseFactor(uint256 oldCloseFactorMantissa, uint256 newCloseFactorMantissa);\\n\\n    /// @notice Emitted when a collateral factor is changed by admin\\n    event NewCollateralFactor(\\n        VToken indexed vToken,\\n        uint256 oldCollateralFactorMantissa,\\n        uint256 newCollateralFactorMantissa\\n    );\\n\\n    /// @notice Emitted when liquidation incentive is changed by admin\\n    event NewLiquidationIncentive(uint256 oldLiquidationIncentiveMantissa, uint256 newLiquidationIncentiveMantissa);\\n\\n    /// @notice Emitted when price oracle is changed\\n    event NewPriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle);\\n\\n    /// @notice Emitted when borrow cap for a vToken is changed\\n    event NewBorrowCap(VToken indexed vToken, uint256 newBorrowCap);\\n\\n    /// @notice Emitted when VAIController is changed\\n    event NewVAIController(VAIControllerInterface oldVAIController, VAIControllerInterface newVAIController);\\n\\n    /// @notice Emitted when VAI mint rate is changed by admin\\n    event NewVAIMintRate(uint256 oldVAIMintRate, uint256 newVAIMintRate);\\n\\n    /// @notice Emitted when protocol state is changed by admin\\n    event ActionProtocolPaused(bool state);\\n\\n    /// @notice Emitted when treasury guardian is changed\\n    event NewTreasuryGuardian(address oldTreasuryGuardian, address newTreasuryGuardian);\\n\\n    /// @notice Emitted when treasury address is changed\\n    event NewTreasuryAddress(address oldTreasuryAddress, address newTreasuryAddress);\\n\\n    /// @notice Emitted when treasury percent is changed\\n    event NewTreasuryPercent(uint256 oldTreasuryPercent, uint256 newTreasuryPercent);\\n\\n    /// @notice Emitted when liquidator adress is changed\\n    event NewLiquidatorContract(address oldLiquidatorContract, address newLiquidatorContract);\\n\\n    /// @notice Emitted when ComptrollerLens address is changed\\n    event NewComptrollerLens(address oldComptrollerLens, address newComptrollerLens);\\n\\n    /// @notice Emitted when supply cap for a vToken is changed\\n    event NewSupplyCap(VToken indexed vToken, uint256 newSupplyCap);\\n\\n    /// @notice Emitted when access control address is changed by admin\\n    event NewAccessControl(address oldAccessControlAddress, address newAccessControlAddress);\\n\\n    /// @notice Emitted when pause guardian is changed\\n    event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\\n\\n    /// @notice Emitted when an action is paused on a market\\n    event ActionPausedMarket(VToken indexed vToken, Action indexed action, bool pauseState);\\n\\n    /// @notice Emitted when VAI Vault info is changed\\n    event NewVAIVaultInfo(address indexed vault_, uint256 releaseStartBlock_, uint256 releaseInterval_);\\n\\n    /// @notice Emitted when Venus VAI Vault rate is changed\\n    event NewVenusVAIVaultRate(uint256 oldVenusVAIVaultRate, uint256 newVenusVAIVaultRate);\\n\\n    /// @notice Emitted when prime token contract address is changed\\n    event NewPrimeToken(IPrime oldPrimeToken, IPrime newPrimeToken);\\n\\n    /// @notice Emitted when forced liquidation is enabled or disabled for all users in a market\\n    event IsForcedLiquidationEnabledUpdated(address indexed vToken, bool enable);\\n\\n    /// @notice Emitted when forced liquidation is enabled or disabled for a user borrowing in a market\\n    event IsForcedLiquidationEnabledForUserUpdated(address indexed borrower, address indexed vToken, bool enable);\\n\\n    /// @notice Emitted when XVS token address is changed\\n    event NewXVSToken(address indexed oldXVS, address indexed newXVS);\\n\\n    /// @notice Emitted when XVS vToken address is changed\\n    event NewXVSVToken(address indexed oldXVSVToken, address indexed newXVSVToken);\\n\\n    /**\\n     * @notice Compare two addresses to ensure they are different\\n     * @param oldAddress The original address to compare\\n     * @param newAddress The new address to compare\\n     */\\n    modifier compareAddress(address oldAddress, address newAddress) {\\n        require(oldAddress != newAddress, \\\"old address is same as new address\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Compare two values to ensure they are different\\n     * @param oldValue The original value to compare\\n     * @param newValue The new value to compare\\n     */\\n    modifier compareValue(uint256 oldValue, uint256 newValue) {\\n        require(oldValue != newValue, \\\"old value is same as new value\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Alias to _setPriceOracle to support the Isolated Lending Comptroller Interface\\n     * @param newOracle The new price oracle to set\\n     * @return uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function setPriceOracle(PriceOracle newOracle) external returns (uint256) {\\n        return __setPriceOracle(newOracle);\\n    }\\n\\n    /**\\n     * @notice Sets a new price oracle for the comptroller\\n     * @dev Allows the contract admin to set a new price oracle used by the Comptroller\\n     * @param newOracle The new price oracle to set\\n     * @return uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setPriceOracle(PriceOracle newOracle) external returns (uint256) {\\n        return __setPriceOracle(newOracle);\\n    }\\n\\n    /**\\n     * @notice Alias to _setCloseFactor to support the Isolated Lending Comptroller Interface\\n     * @param newCloseFactorMantissa New close factor, scaled by 1e18\\n     * @return uint256 0=success, otherwise will revert\\n     */\\n    function setCloseFactor(uint256 newCloseFactorMantissa) external returns (uint256) {\\n        return __setCloseFactor(newCloseFactorMantissa);\\n    }\\n\\n    /**\\n     * @notice Sets the closeFactor used when liquidating borrows\\n     * @dev Allows the contract admin to set the closeFactor used to liquidate borrows\\n     * @param newCloseFactorMantissa New close factor, scaled by 1e18\\n     * @return uint256 0=success, otherwise will revert\\n     */\\n    function _setCloseFactor(uint256 newCloseFactorMantissa) external returns (uint256) {\\n        return __setCloseFactor(newCloseFactorMantissa);\\n    }\\n\\n    /**\\n     * @notice Sets the address of the access control of this contract\\n     * @dev Allows the contract admin to set the address of access control of this contract\\n     * @param newAccessControlAddress New address for the access control\\n     * @return uint256 0=success, otherwise will revert\\n     */\\n    function _setAccessControl(\\n        address newAccessControlAddress\\n    ) external compareAddress(accessControl, newAccessControlAddress) returns (uint256) {\\n        // Check caller is admin\\n        ensureAdmin();\\n        ensureNonzeroAddress(newAccessControlAddress);\\n\\n        address oldAccessControlAddress = accessControl;\\n\\n        accessControl = newAccessControlAddress;\\n        emit NewAccessControl(oldAccessControlAddress, newAccessControlAddress);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Alias to _setCollateralFactor to support the Isolated Lending Comptroller Interface\\n     * @param vToken The market to set the factor on\\n     * @param newCollateralFactorMantissa The new collateral factor, scaled by 1e18\\n     * @param newLiquidationThresholdMantissa The new liquidation threshold, scaled by 1e18\\n     * @return uint256 0=success, otherwise a failure. (See ErrorReporter for details)\\n     */\\n    function setCollateralFactor(\\n        VToken vToken,\\n        uint256 newCollateralFactorMantissa,\\n        uint256 newLiquidationThresholdMantissa\\n    ) external returns (uint256) {\\n        require(\\n            newCollateralFactorMantissa == newLiquidationThresholdMantissa,\\n            \\\"collateral factor and liquidation threshold must be the same\\\"\\n        );\\n        return __setCollateralFactor(vToken, newCollateralFactorMantissa);\\n    }\\n\\n    /**\\n     * @notice Sets the collateralFactor for a market\\n     * @dev Allows a privileged role to set the collateralFactorMantissa\\n     * @param vToken The market to set the factor on\\n     * @param newCollateralFactorMantissa The new collateral factor, scaled by 1e18\\n     * @return uint256 0=success, otherwise a failure. (See ErrorReporter for details)\\n     */\\n    function _setCollateralFactor(VToken vToken, uint256 newCollateralFactorMantissa) external returns (uint256) {\\n        return __setCollateralFactor(vToken, newCollateralFactorMantissa);\\n    }\\n\\n    /**\\n     * @notice Alias to _setLiquidationIncentive to support the Isolated Lending Comptroller Interface\\n     * @param newLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18\\n     * @return uint256 0=success, otherwise a failure. (See ErrorReporter for details)\\n     */\\n    function setLiquidationIncentive(uint256 newLiquidationIncentiveMantissa) external returns (uint256) {\\n        return __setLiquidationIncentive(newLiquidationIncentiveMantissa);\\n    }\\n\\n    /**\\n     * @notice Sets liquidationIncentive\\n     * @dev Allows a privileged role to set the liquidationIncentiveMantissa\\n     * @param newLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18\\n     * @return uint256 0=success, otherwise a failure. (See ErrorReporter for details)\\n     */\\n    function _setLiquidationIncentive(uint256 newLiquidationIncentiveMantissa) external returns (uint256) {\\n        return __setLiquidationIncentive(newLiquidationIncentiveMantissa);\\n    }\\n\\n    /**\\n     * @notice Update the address of the liquidator contract\\n     * @dev Allows the contract admin to update the address of liquidator contract\\n     * @param newLiquidatorContract_ The new address of the liquidator contract\\n     */\\n    function _setLiquidatorContract(\\n        address newLiquidatorContract_\\n    ) external compareAddress(liquidatorContract, newLiquidatorContract_) {\\n        // Check caller is admin\\n        ensureAdmin();\\n        ensureNonzeroAddress(newLiquidatorContract_);\\n        address oldLiquidatorContract = liquidatorContract;\\n        liquidatorContract = newLiquidatorContract_;\\n        emit NewLiquidatorContract(oldLiquidatorContract, newLiquidatorContract_);\\n    }\\n\\n    /**\\n     * @notice Admin function to change the Pause Guardian\\n     * @dev Allows the contract admin to change the Pause Guardian\\n     * @param newPauseGuardian The address of the new Pause Guardian\\n     * @return uint256 0=success, otherwise a failure. (See enum Error for details)\\n     */\\n    function _setPauseGuardian(\\n        address newPauseGuardian\\n    ) external compareAddress(pauseGuardian, newPauseGuardian) returns (uint256) {\\n        ensureAdmin();\\n        ensureNonzeroAddress(newPauseGuardian);\\n\\n        // Save current value for inclusion in log\\n        address oldPauseGuardian = pauseGuardian;\\n        // Store pauseGuardian with value newPauseGuardian\\n        pauseGuardian = newPauseGuardian;\\n\\n        // Emit NewPauseGuardian(OldPauseGuardian, NewPauseGuardian)\\n        emit NewPauseGuardian(oldPauseGuardian, newPauseGuardian);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Alias to _setMarketBorrowCaps to support the Isolated Lending Comptroller Interface\\n     * @param vTokens The addresses of the markets (tokens) to change the borrow caps for\\n     * @param newBorrowCaps The new borrow cap values in underlying to be set. A value of 0 corresponds to Borrow not allowed\\n     */\\n    function setMarketBorrowCaps(VToken[] calldata vTokens, uint256[] calldata newBorrowCaps) external {\\n        __setMarketBorrowCaps(vTokens, newBorrowCaps);\\n    }\\n\\n    /**\\n     * @notice Set the given borrow caps for the given vToken market Borrowing that brings total borrows to or above borrow cap will revert\\n     * @dev Allows a privileged role to set the borrowing cap for a vToken market. A borrow cap of 0 corresponds to Borrow not allowed\\n     * @param vTokens The addresses of the markets (tokens) to change the borrow caps for\\n     * @param newBorrowCaps The new borrow cap values in underlying to be set. A value of 0 corresponds to Borrow not allowed\\n     */\\n    function _setMarketBorrowCaps(VToken[] calldata vTokens, uint256[] calldata newBorrowCaps) external {\\n        __setMarketBorrowCaps(vTokens, newBorrowCaps);\\n    }\\n\\n    /**\\n     * @notice Alias to _setMarketSupplyCaps to support the Isolated Lending Comptroller Interface\\n     * @param vTokens The addresses of the markets (tokens) to change the supply caps for\\n     * @param newSupplyCaps The new supply cap values in underlying to be set. A value of 0 corresponds to Minting NotAllowed\\n     */\\n    function setMarketSupplyCaps(VToken[] calldata vTokens, uint256[] calldata newSupplyCaps) external {\\n        __setMarketSupplyCaps(vTokens, newSupplyCaps);\\n    }\\n\\n    /**\\n     * @notice Set the given supply caps for the given vToken market Supply that brings total Supply to or above supply cap will revert\\n     * @dev Allows a privileged role to set the supply cap for a vToken. A supply cap of 0 corresponds to Minting NotAllowed\\n     * @param vTokens The addresses of the markets (tokens) to change the supply caps for\\n     * @param newSupplyCaps The new supply cap values in underlying to be set. A value of 0 corresponds to Minting NotAllowed\\n     */\\n    function _setMarketSupplyCaps(VToken[] calldata vTokens, uint256[] calldata newSupplyCaps) external {\\n        __setMarketSupplyCaps(vTokens, newSupplyCaps);\\n    }\\n\\n    /**\\n     * @notice Set whole protocol pause/unpause state\\n     * @dev Allows a privileged role to pause/unpause protocol\\n     * @param state The new state (true=paused, false=unpaused)\\n     * @return bool The updated state of the protocol\\n     */\\n    function _setProtocolPaused(bool state) external returns (bool) {\\n        ensureAllowed(\\\"_setProtocolPaused(bool)\\\");\\n\\n        protocolPaused = state;\\n        emit ActionProtocolPaused(state);\\n        return state;\\n    }\\n\\n    /**\\n     * @notice Alias to _setActionsPaused to support the Isolated Lending Comptroller Interface\\n     * @param markets_ Markets to pause/unpause the actions on\\n     * @param actions_ List of action ids to pause/unpause\\n     * @param paused_ The new paused state (true=paused, false=unpaused)\\n     */\\n    function setActionsPaused(address[] calldata markets_, Action[] calldata actions_, bool paused_) external {\\n        __setActionsPaused(markets_, actions_, paused_);\\n    }\\n\\n    /**\\n     * @notice Pause/unpause certain actions\\n     * @dev Allows a privileged role to pause/unpause the protocol action state\\n     * @param markets_ Markets to pause/unpause the actions on\\n     * @param actions_ List of action ids to pause/unpause\\n     * @param paused_ The new paused state (true=paused, false=unpaused)\\n     */\\n    function _setActionsPaused(address[] calldata markets_, Action[] calldata actions_, bool paused_) external {\\n        __setActionsPaused(markets_, actions_, paused_);\\n    }\\n\\n    /**\\n     * @dev Pause/unpause an action on a market\\n     * @param market Market to pause/unpause the action on\\n     * @param action Action id to pause/unpause\\n     * @param paused The new paused state (true=paused, false=unpaused)\\n     */\\n    function setActionPausedInternal(address market, Action action, bool paused) internal {\\n        ensureListed(markets[market]);\\n        _actionPaused[market][uint256(action)] = paused;\\n        emit ActionPausedMarket(VToken(market), action, paused);\\n    }\\n\\n    /**\\n     * @notice Sets a new VAI controller\\n     * @dev Admin function to set a new VAI controller\\n     * @return uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setVAIController(\\n        VAIControllerInterface vaiController_\\n    ) external compareAddress(address(vaiController), address(vaiController_)) returns (uint256) {\\n        // Check caller is admin\\n        ensureAdmin();\\n        ensureNonzeroAddress(address(vaiController_));\\n\\n        VAIControllerInterface oldVaiController = vaiController;\\n        vaiController = vaiController_;\\n        emit NewVAIController(oldVaiController, vaiController_);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Set the VAI mint rate\\n     * @param newVAIMintRate The new VAI mint rate to be set\\n     * @return uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setVAIMintRate(\\n        uint256 newVAIMintRate\\n    ) external compareValue(vaiMintRate, newVAIMintRate) returns (uint256) {\\n        // Check caller is admin\\n        ensureAdmin();\\n        uint256 oldVAIMintRate = vaiMintRate;\\n        vaiMintRate = newVAIMintRate;\\n        emit NewVAIMintRate(oldVAIMintRate, newVAIMintRate);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Set the minted VAI amount of the `owner`\\n     * @param owner The address of the account to set\\n     * @param amount The amount of VAI to set to the account\\n     * @return The number of minted VAI by `owner`\\n     */\\n    function setMintedVAIOf(address owner, uint256 amount) external returns (uint256) {\\n        checkProtocolPauseState();\\n\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        require(!mintVAIGuardianPaused && !repayVAIGuardianPaused, \\\"VAI is paused\\\");\\n        // Check caller is vaiController\\n        if (msg.sender != address(vaiController)) {\\n            return fail(Error.REJECTION, FailureInfo.SET_MINTED_VAI_REJECTION);\\n        }\\n        mintedVAIs[owner] = amount;\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Set the treasury data.\\n     * @param newTreasuryGuardian The new address of the treasury guardian to be set\\n     * @param newTreasuryAddress The new address of the treasury to be set\\n     * @param newTreasuryPercent The new treasury percent to be set\\n     * @return uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setTreasuryData(\\n        address newTreasuryGuardian,\\n        address newTreasuryAddress,\\n        uint256 newTreasuryPercent\\n    ) external returns (uint256) {\\n        // Check caller is admin\\n        ensureAdminOr(treasuryGuardian);\\n\\n        require(newTreasuryPercent < 1e18, \\\"percent >= 100%\\\");\\n        ensureNonzeroAddress(newTreasuryGuardian);\\n        ensureNonzeroAddress(newTreasuryAddress);\\n\\n        address oldTreasuryGuardian = treasuryGuardian;\\n        address oldTreasuryAddress = treasuryAddress;\\n        uint256 oldTreasuryPercent = treasuryPercent;\\n\\n        treasuryGuardian = newTreasuryGuardian;\\n        treasuryAddress = newTreasuryAddress;\\n        treasuryPercent = newTreasuryPercent;\\n\\n        emit NewTreasuryGuardian(oldTreasuryGuardian, newTreasuryGuardian);\\n        emit NewTreasuryAddress(oldTreasuryAddress, newTreasuryAddress);\\n        emit NewTreasuryPercent(oldTreasuryPercent, newTreasuryPercent);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /*** Venus Distribution ***/\\n\\n    /**\\n     * @dev Set ComptrollerLens contract address\\n     * @param comptrollerLens_ The new ComptrollerLens contract address to be set\\n     * @return uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setComptrollerLens(\\n        ComptrollerLensInterface comptrollerLens_\\n    ) external compareAddress(address(comptrollerLens), address(comptrollerLens_)) returns (uint256) {\\n        ensureAdmin();\\n        ensureNonzeroAddress(address(comptrollerLens_));\\n        address oldComptrollerLens = address(comptrollerLens);\\n        comptrollerLens = comptrollerLens_;\\n        emit NewComptrollerLens(oldComptrollerLens, address(comptrollerLens));\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Set the amount of XVS distributed per block to VAI Vault\\n     * @param venusVAIVaultRate_ The amount of XVS wei per block to distribute to VAI Vault\\n     */\\n    function _setVenusVAIVaultRate(\\n        uint256 venusVAIVaultRate_\\n    ) external compareValue(venusVAIVaultRate, venusVAIVaultRate_) {\\n        ensureAdmin();\\n        if (vaiVaultAddress != address(0)) {\\n            releaseToVault();\\n        }\\n        uint256 oldVenusVAIVaultRate = venusVAIVaultRate;\\n        venusVAIVaultRate = venusVAIVaultRate_;\\n        emit NewVenusVAIVaultRate(oldVenusVAIVaultRate, venusVAIVaultRate_);\\n    }\\n\\n    /**\\n     * @notice Set the VAI Vault infos\\n     * @param vault_ The address of the VAI Vault\\n     * @param releaseStartBlock_ The start block of release to VAI Vault\\n     * @param minReleaseAmount_ The minimum release amount to VAI Vault\\n     */\\n    function _setVAIVaultInfo(\\n        address vault_,\\n        uint256 releaseStartBlock_,\\n        uint256 minReleaseAmount_\\n    ) external compareAddress(vaiVaultAddress, vault_) {\\n        ensureAdmin();\\n        ensureNonzeroAddress(vault_);\\n        if (vaiVaultAddress != address(0)) {\\n            releaseToVault();\\n        }\\n\\n        vaiVaultAddress = vault_;\\n        releaseStartBlock = releaseStartBlock_;\\n        minReleaseAmount = minReleaseAmount_;\\n        emit NewVAIVaultInfo(vault_, releaseStartBlock_, minReleaseAmount_);\\n    }\\n\\n    /**\\n     * @notice Alias to _setPrimeToken to support the Isolated Lending Comptroller Interface\\n     * @param _prime The new prime token contract to be set\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function setPrimeToken(IPrime _prime) external returns (uint256) {\\n        return __setPrimeToken(_prime);\\n    }\\n\\n    /**\\n     * @notice Sets the prime token contract for the comptroller\\n     * @param _prime The new prime token contract to be set\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setPrimeToken(IPrime _prime) external returns (uint256) {\\n        return __setPrimeToken(_prime);\\n    }\\n\\n    /**\\n     * @notice Alias to _setForcedLiquidation to support the Isolated Lending Comptroller Interface\\n     * @param vTokenBorrowed Borrowed vToken\\n     * @param enable Whether to enable forced liquidations\\n     */\\n    function setForcedLiquidation(address vTokenBorrowed, bool enable) external {\\n        __setForcedLiquidation(vTokenBorrowed, enable);\\n    }\\n\\n    /** @notice Enables forced liquidations for a market. If forced liquidation is enabled,\\n     * borrows in the market may be liquidated regardless of the account liquidity\\n     * @dev Allows a privileged role to set enable/disable forced liquidations\\n     * @param vTokenBorrowed Borrowed vToken\\n     * @param enable Whether to enable forced liquidations\\n     */\\n    function _setForcedLiquidation(address vTokenBorrowed, bool enable) external {\\n        __setForcedLiquidation(vTokenBorrowed, enable);\\n    }\\n\\n    /**\\n     * @notice Enables forced liquidations for user's borrows in a certain market. If forced\\n     * liquidation is enabled, user's borrows in the market may be liquidated regardless of\\n     * the account liquidity. Forced liquidation may be enabled for a user even if it is not\\n     * enabled for the entire market.\\n     * @param borrower The address of the borrower\\n     * @param vTokenBorrowed Borrowed vToken\\n     * @param enable Whether to enable forced liquidations\\n     */\\n    function _setForcedLiquidationForUser(address borrower, address vTokenBorrowed, bool enable) external {\\n        ensureAllowed(\\\"_setForcedLiquidationForUser(address,address,bool)\\\");\\n        if (vTokenBorrowed != address(vaiController)) {\\n            ensureListed(markets[vTokenBorrowed]);\\n        }\\n        isForcedLiquidationEnabledForUser[borrower][vTokenBorrowed] = enable;\\n        emit IsForcedLiquidationEnabledForUserUpdated(borrower, vTokenBorrowed, enable);\\n    }\\n\\n    /**\\n     * @notice Set the address of the XVS token\\n     * @param xvs_ The address of the XVS token\\n     */\\n    function _setXVSToken(address xvs_) external {\\n        ensureAdmin();\\n        ensureNonzeroAddress(xvs_);\\n\\n        emit NewXVSToken(xvs, xvs_);\\n        xvs = xvs_;\\n    }\\n\\n    /**\\n     * @notice Set the address of the XVS vToken\\n     * @param xvsVToken_ The address of the XVS vToken\\n     */\\n    function _setXVSVToken(address xvsVToken_) external {\\n        ensureAdmin();\\n        ensureNonzeroAddress(xvsVToken_);\\n\\n        address underlying = VToken(xvsVToken_).underlying();\\n        require(underlying == xvs, \\\"invalid xvs vtoken address\\\");\\n\\n        emit NewXVSVToken(xvsVToken, xvsVToken_);\\n        xvsVToken = xvsVToken_;\\n    }\\n\\n    /**\\n     * @dev Updates the valid price oracle. Used by _setPriceOracle and setPriceOracle\\n     * @param newOracle The new price oracle to be set\\n     * @return uint256 0=success, otherwise reverted\\n     */\\n    function __setPriceOracle(\\n        PriceOracle newOracle\\n    ) internal compareAddress(address(oracle), address(newOracle)) returns (uint256) {\\n        // Check caller is admin\\n        ensureAdmin();\\n        ensureNonzeroAddress(address(newOracle));\\n\\n        // Track the old oracle for the comptroller\\n        PriceOracle oldOracle = oracle;\\n\\n        // Set comptroller's oracle to newOracle\\n        oracle = newOracle;\\n\\n        // Emit NewPriceOracle(oldOracle, newOracle)\\n        emit NewPriceOracle(oldOracle, newOracle);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @dev Updates the close factor. Used by _setCloseFactor and setCloseFactor\\n     * @param newCloseFactorMantissa The new close factor to be set\\n     * @return uint256 0=success, otherwise reverted\\n     */\\n    function __setCloseFactor(\\n        uint256 newCloseFactorMantissa\\n    ) internal compareValue(closeFactorMantissa, newCloseFactorMantissa) returns (uint256) {\\n        // Check caller is admin\\n        ensureAdmin();\\n\\n        Exp memory newCloseFactorExp = Exp({ mantissa: newCloseFactorMantissa });\\n\\n        //-- Check close factor <= 0.9\\n        Exp memory highLimit = Exp({ mantissa: closeFactorMaxMantissa });\\n        //-- Check close factor >= 0.05\\n        Exp memory lowLimit = Exp({ mantissa: closeFactorMinMantissa });\\n\\n        if (lessThanExp(highLimit, newCloseFactorExp) || greaterThanExp(lowLimit, newCloseFactorExp)) {\\n            return fail(Error.INVALID_CLOSE_FACTOR, FailureInfo.SET_CLOSE_FACTOR_VALIDATION);\\n        }\\n\\n        uint256 oldCloseFactorMantissa = closeFactorMantissa;\\n        closeFactorMantissa = newCloseFactorMantissa;\\n        emit NewCloseFactor(oldCloseFactorMantissa, newCloseFactorMantissa);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @dev Updates the collateral factor. Used by _setCollateralFactor and setCollateralFactor\\n     * @param vToken The market to set the factor on\\n     * @param newCollateralFactorMantissa The new collateral factor to be set\\n     * @return uint256 0=success, otherwise reverted\\n     */\\n    function __setCollateralFactor(\\n        VToken vToken,\\n        uint256 newCollateralFactorMantissa\\n    )\\n        internal\\n        compareValue(markets[address(vToken)].collateralFactorMantissa, newCollateralFactorMantissa)\\n        returns (uint256)\\n    {\\n        // Check caller is allowed by access control manager\\n        ensureAllowed(\\\"_setCollateralFactor(address,uint256)\\\");\\n        ensureNonzeroAddress(address(vToken));\\n\\n        // Verify market is listed\\n        Market storage market = markets[address(vToken)];\\n        ensureListed(market);\\n\\n        Exp memory newCollateralFactorExp = Exp({ mantissa: newCollateralFactorMantissa });\\n\\n        //-- Check collateral factor <= 0.9\\n        Exp memory highLimit = Exp({ mantissa: collateralFactorMaxMantissa });\\n        if (lessThanExp(highLimit, newCollateralFactorExp)) {\\n            return fail(Error.INVALID_COLLATERAL_FACTOR, FailureInfo.SET_COLLATERAL_FACTOR_VALIDATION);\\n        }\\n\\n        // If collateral factor != 0, fail if price == 0\\n        if (newCollateralFactorMantissa != 0 && oracle.getUnderlyingPrice(vToken) == 0) {\\n            return fail(Error.PRICE_ERROR, FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE);\\n        }\\n\\n        // Set market's collateral factor to new collateral factor, remember old value\\n        uint256 oldCollateralFactorMantissa = market.collateralFactorMantissa;\\n        market.collateralFactorMantissa = newCollateralFactorMantissa;\\n\\n        // Emit event with asset, old collateral factor, and new collateral factor\\n        emit NewCollateralFactor(vToken, oldCollateralFactorMantissa, newCollateralFactorMantissa);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @dev Updates the liquidation incentive. Used by _setLiquidationIncentive and setLiquidationIncentive\\n     * @param newLiquidationIncentiveMantissa The new liquidation incentive to be set\\n     * @return uint256 0=success, otherwise reverted\\n     */\\n    function __setLiquidationIncentive(\\n        uint256 newLiquidationIncentiveMantissa\\n    ) internal compareValue(liquidationIncentiveMantissa, newLiquidationIncentiveMantissa) returns (uint256) {\\n        ensureAllowed(\\\"_setLiquidationIncentive(uint256)\\\");\\n\\n        require(newLiquidationIncentiveMantissa >= 1e18, \\\"incentive < 1e18\\\");\\n\\n        // Save current value for use in log\\n        uint256 oldLiquidationIncentiveMantissa = liquidationIncentiveMantissa;\\n        // Set liquidation incentive to new incentive\\n        liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;\\n\\n        // Emit event with old incentive, new incentive\\n        emit NewLiquidationIncentive(oldLiquidationIncentiveMantissa, newLiquidationIncentiveMantissa);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @dev Updates the borrow caps. Used by _setMarketBorrowCaps and setMarketBorrowCaps\\n     * @param vTokens The markets to set the borrow caps on\\n     * @param newBorrowCaps The new borrow caps to be set\\n     */\\n    function __setMarketBorrowCaps(VToken[] memory vTokens, uint256[] memory newBorrowCaps) internal {\\n        ensureAllowed(\\\"_setMarketBorrowCaps(address[],uint256[])\\\");\\n\\n        uint256 numMarkets = vTokens.length;\\n        uint256 numBorrowCaps = newBorrowCaps.length;\\n\\n        require(numMarkets != 0 && numMarkets == numBorrowCaps, \\\"invalid input\\\");\\n\\n        for (uint256 i; i < numMarkets; ++i) {\\n            borrowCaps[address(vTokens[i])] = newBorrowCaps[i];\\n            emit NewBorrowCap(vTokens[i], newBorrowCaps[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates the supply caps. Used by _setMarketSupplyCaps and setMarketSupplyCaps\\n     * @param vTokens The markets to set the supply caps on\\n     * @param newSupplyCaps The new supply caps to be set\\n     */\\n    function __setMarketSupplyCaps(VToken[] memory vTokens, uint256[] memory newSupplyCaps) internal {\\n        ensureAllowed(\\\"_setMarketSupplyCaps(address[],uint256[])\\\");\\n\\n        uint256 numMarkets = vTokens.length;\\n        uint256 numSupplyCaps = newSupplyCaps.length;\\n\\n        require(numMarkets != 0 && numMarkets == numSupplyCaps, \\\"invalid input\\\");\\n\\n        for (uint256 i; i < numMarkets; ++i) {\\n            supplyCaps[address(vTokens[i])] = newSupplyCaps[i];\\n            emit NewSupplyCap(vTokens[i], newSupplyCaps[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates the prime token. Used by _setPrimeToken and setPrimeToken\\n     * @param _prime The new prime token to be set\\n     * @return uint256 0=success, otherwise reverted\\n     */\\n    function __setPrimeToken(IPrime _prime) internal returns (uint) {\\n        ensureAdmin();\\n        ensureNonzeroAddress(address(_prime));\\n\\n        IPrime oldPrime = prime;\\n        prime = _prime;\\n        emit NewPrimeToken(oldPrime, _prime);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @dev Updates the forced liquidation. Used by _setForcedLiquidation and setForcedLiquidation\\n     * @param vTokenBorrowed The market to set the forced liquidation on\\n     * @param enable Whether to enable forced liquidations\\n     */\\n    function __setForcedLiquidation(address vTokenBorrowed, bool enable) internal {\\n        ensureAllowed(\\\"_setForcedLiquidation(address,bool)\\\");\\n        if (vTokenBorrowed != address(vaiController)) {\\n            ensureListed(markets[vTokenBorrowed]);\\n        }\\n        isForcedLiquidationEnabled[vTokenBorrowed] = enable;\\n        emit IsForcedLiquidationEnabledUpdated(vTokenBorrowed, enable);\\n    }\\n\\n    /**\\n     * @dev Updates the actions paused. Used by _setActionsPaused and setActionsPaused\\n     * @param markets_ The markets to set the actions paused on\\n     * @param actions_ The actions to set the paused state on\\n     * @param paused_ The new paused state to be set\\n     */\\n    function __setActionsPaused(address[] memory markets_, Action[] memory actions_, bool paused_) internal {\\n        ensureAllowed(\\\"_setActionsPaused(address[],uint8[],bool)\\\");\\n\\n        uint256 numMarkets = markets_.length;\\n        uint256 numActions = actions_.length;\\n        for (uint256 marketIdx; marketIdx < numMarkets; ++marketIdx) {\\n            for (uint256 actionIdx; actionIdx < numActions; ++actionIdx) {\\n                setActionPausedInternal(markets_[marketIdx], actions_[actionIdx], paused_);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x706a953bc52c44bba5e9e6fb342c903c4dfec987b7e5ebfc48fe7f66eadf9b8d\"},\"contracts/Comptroller/Diamond/interfaces/ISetterFacet.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.5.16;\\n\\nimport { PriceOracle } from \\\"../../../Oracle/PriceOracle.sol\\\";\\nimport { VToken } from \\\"../../../Tokens/VTokens/VToken.sol\\\";\\nimport { ComptrollerTypes } from \\\"../../ComptrollerStorage.sol\\\";\\nimport { VAIControllerInterface } from \\\"../../../Tokens/VAI/VAIControllerInterface.sol\\\";\\nimport { ComptrollerLensInterface } from \\\"../../../Comptroller/ComptrollerLensInterface.sol\\\";\\nimport { IPrime } from \\\"../../../Tokens/Prime/IPrime.sol\\\";\\n\\ninterface ISetterFacet {\\n    function setPriceOracle(PriceOracle newOracle) external returns (uint256);\\n\\n    function _setPriceOracle(PriceOracle newOracle) external returns (uint256);\\n\\n    function setCloseFactor(uint256 newCloseFactorMantissa) external returns (uint256);\\n\\n    function _setCloseFactor(uint256 newCloseFactorMantissa) external returns (uint256);\\n\\n    function _setAccessControl(address newAccessControlAddress) external returns (uint256);\\n\\n    function setCollateralFactor(\\n        VToken vToken,\\n        uint256 newCollateralFactorMantissa,\\n        uint256 newLiquidationThresholdMantissa\\n    ) external returns (uint256);\\n\\n    function _setCollateralFactor(VToken vToken, uint256 newCollateralFactorMantissa) external returns (uint256);\\n\\n    function setLiquidationIncentive(uint256 newLiquidationIncentiveMantissa) external returns (uint256);\\n\\n    function _setLiquidationIncentive(uint256 newLiquidationIncentiveMantissa) external returns (uint256);\\n\\n    function _setLiquidatorContract(address newLiquidatorContract_) external;\\n\\n    function _setPauseGuardian(address newPauseGuardian) external returns (uint256);\\n\\n    function setMarketBorrowCaps(VToken[] calldata vTokens, uint256[] calldata newBorrowCaps) external;\\n\\n    function _setMarketBorrowCaps(VToken[] calldata vTokens, uint256[] calldata newBorrowCaps) external;\\n\\n    function setMarketSupplyCaps(VToken[] calldata vTokens, uint256[] calldata newSupplyCaps) external;\\n\\n    function _setMarketSupplyCaps(VToken[] calldata vTokens, uint256[] calldata newSupplyCaps) external;\\n\\n    function _setProtocolPaused(bool state) external returns (bool);\\n\\n    function setActionsPaused(\\n        address[] calldata markets,\\n        ComptrollerTypes.Action[] calldata actions,\\n        bool paused\\n    ) external;\\n\\n    function _setActionsPaused(\\n        address[] calldata markets,\\n        ComptrollerTypes.Action[] calldata actions,\\n        bool paused\\n    ) external;\\n\\n    function _setVAIController(VAIControllerInterface vaiController_) external returns (uint256);\\n\\n    function _setVAIMintRate(uint256 newVAIMintRate) external returns (uint256);\\n\\n    function setMintedVAIOf(address owner, uint256 amount) external returns (uint256);\\n\\n    function _setTreasuryData(\\n        address newTreasuryGuardian,\\n        address newTreasuryAddress,\\n        uint256 newTreasuryPercent\\n    ) external returns (uint256);\\n\\n    function _setComptrollerLens(ComptrollerLensInterface comptrollerLens_) external returns (uint256);\\n\\n    function _setVenusVAIVaultRate(uint256 venusVAIVaultRate_) external;\\n\\n    function _setVAIVaultInfo(address vault_, uint256 releaseStartBlock_, uint256 minReleaseAmount_) external;\\n\\n    function _setForcedLiquidation(address vToken, bool enable) external;\\n\\n    function setPrimeToken(IPrime _prime) external returns (uint256);\\n\\n    function _setPrimeToken(IPrime _prime) external returns (uint);\\n\\n    function setForcedLiquidation(address vTokenBorrowed, bool enable) external;\\n\\n    function _setForcedLiquidationForUser(address borrower, address vTokenBorrowed, bool enable) external;\\n\\n    function _setXVSToken(address xvs_) external;\\n\\n    function _setXVSVToken(address xvsVToken_) external;\\n}\\n\",\"keccak256\":\"0x55acb423f18a32239f2f5e32962329cd9e85f17886c7872f172ae1818fc39b51\"},\"contracts/InterestRateModels/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.5.16;\\n\\n/**\\n * @title Venus's InterestRateModel Interface\\n * @author Venus\\n */\\ncontract InterestRateModel {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    bool public constant isInterestRateModel = true;\\n\\n    /**\\n     * @notice Calculates the current borrow interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amnount of reserves the market has\\n     * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) external view returns (uint);\\n\\n    /**\\n     * @notice Calculates the current supply interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amnount of reserves the market has\\n     * @param reserveFactorMantissa The current reserve factor the market has\\n     * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getSupplyRate(\\n        uint cash,\\n        uint borrows,\\n        uint reserves,\\n        uint reserveFactorMantissa\\n    ) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x786416e63346afec50151e44b993dbbdb12f94cd3f2c9dba631afe237353605f\"},\"contracts/Oracle/PriceOracle.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"../Tokens/VTokens/VToken.sol\\\";\\n\\ncontract PriceOracle {\\n    /// @notice Indicator that this is a PriceOracle contract (for inspection)\\n    bool public constant isPriceOracle = true;\\n\\n    /**\\n     * @notice Get the underlying price of a vToken asset\\n     * @param vToken The vToken to get the underlying price of\\n     * @return The underlying asset price mantissa (scaled by 1e18).\\n     *  Zero means the price is unavailable.\\n     */\\n    function getUnderlyingPrice(VToken vToken) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x0f68d0e07decba8fb9a77df1659170f310b487cc0b650f53ca6aa55ed62b28de\"},\"contracts/Tokens/EIP20Interface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @title BEP 20 Token Standard Interface\\n *  https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface EIP20Interface {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return success whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return success whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (-1 means infinite)\\n     * @return success whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return remaining The number of tokens allowed to be spent\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0x7e89ffa9c0d432c4db8bd5388ff68e33934dcdb1d038d74bbed3b2fdae3eb532\"},\"contracts/Tokens/EIP20NonStandardInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @title EIP20NonStandardInterface\\n * @dev Version of BEP20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface EIP20NonStandardInterface {\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return balance of the owner\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the BEP-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     */\\n    function transfer(address dst, uint256 amount) external;\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the BEP-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external;\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved\\n     * @return success Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return remaining The number of tokens allowed to be spent\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0x05a3a7d5ab47de3964c95d706dcc18fe7583b1d064dbb74808c0f2774f347afa\"},\"contracts/Tokens/Prime/IPrime.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.5.16;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title IPrime\\n * @author Venus\\n * @notice Interface for Prime Token\\n */\\ninterface IPrime {\\n    /**\\n     * @notice Executed by XVSVault whenever user's XVSVault balance changes\\n     * @param user the account address whose balance was updated\\n     */\\n    function xvsUpdated(address user) external;\\n\\n    /**\\n     * @notice accrues interest and updates score for an user for a specific market\\n     * @param user the account address for which to accrue interest and update score\\n     * @param market the market for which to accrue interest and update score\\n     */\\n    function accrueInterestAndUpdateScore(address user, address market) external;\\n\\n    /**\\n     * @notice Distributes income from market since last distribution\\n     * @param vToken the market for which to distribute the income\\n     */\\n    function accrueInterest(address vToken) external;\\n\\n    /**\\n     * @notice Returns if user is a prime holder\\n     * @param isPrimeHolder returns if the user is a prime holder\\n     */\\n    function isUserPrimeHolder(address user) external view returns (bool isPrimeHolder);\\n}\\n\",\"keccak256\":\"0x58861c0c05b8757f1a5d50b107eff479c8680878e6aa51bc93af420caf73f500\"},\"contracts/Tokens/VAI/VAIControllerInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport { VTokenInterface } from \\\"../VTokens/VTokenInterfaces.sol\\\";\\n\\ncontract VAIControllerInterface {\\n    function mintVAI(uint256 mintVAIAmount) external returns (uint256);\\n\\n    function repayVAI(uint256 amount) external returns (uint256, uint256);\\n\\n    function repayVAIBehalf(address borrower, uint256 amount) external returns (uint256, uint256);\\n\\n    function liquidateVAI(\\n        address borrower,\\n        uint256 repayAmount,\\n        VTokenInterface vTokenCollateral\\n    ) external returns (uint256, uint256);\\n\\n    function getMintableVAI(address minter) external view returns (uint256, uint256);\\n\\n    function getVAIAddress() external view returns (address);\\n\\n    function getVAIRepayAmount(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1f020ff46cb0efa0ebf563f449fd4d8aa1c8b8ed53c46860d71a08548d7fdfaa\"},\"contracts/Tokens/VTokens/VToken.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"../../Comptroller/ComptrollerInterface.sol\\\";\\nimport \\\"../../Utils/ErrorReporter.sol\\\";\\nimport \\\"../../Utils/Exponential.sol\\\";\\nimport \\\"../../Tokens/EIP20Interface.sol\\\";\\nimport \\\"../../Tokens/EIP20NonStandardInterface.sol\\\";\\nimport \\\"../../InterestRateModels/InterestRateModel.sol\\\";\\nimport \\\"./VTokenInterfaces.sol\\\";\\nimport { IAccessControlManagerV5 } from \\\"@venusprotocol/governance-contracts/contracts/Governance/IAccessControlManagerV5.sol\\\";\\n\\n/**\\n * @title Venus's vToken Contract\\n * @notice Abstract base for vTokens\\n * @author Venus\\n */\\ncontract VToken is VTokenInterface, Exponential, TokenErrorReporter {\\n    struct MintLocalVars {\\n        MathError mathErr;\\n        uint exchangeRateMantissa;\\n        uint mintTokens;\\n        uint totalSupplyNew;\\n        uint accountTokensNew;\\n        uint actualMintAmount;\\n    }\\n\\n    struct RedeemLocalVars {\\n        MathError mathErr;\\n        uint exchangeRateMantissa;\\n        uint redeemTokens;\\n        uint redeemAmount;\\n        uint totalSupplyNew;\\n        uint accountTokensNew;\\n    }\\n\\n    struct BorrowLocalVars {\\n        MathError mathErr;\\n        uint accountBorrows;\\n        uint accountBorrowsNew;\\n        uint totalBorrowsNew;\\n    }\\n\\n    struct RepayBorrowLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint repayAmount;\\n        uint borrowerIndex;\\n        uint accountBorrows;\\n        uint accountBorrowsNew;\\n        uint totalBorrowsNew;\\n        uint actualRepayAmount;\\n    }\\n\\n    /*** Reentrancy Guard ***/\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     */\\n    modifier nonReentrant() {\\n        require(_notEntered, \\\"re-entered\\\");\\n        _notEntered = false;\\n        _;\\n        _notEntered = true; // get a gas-refund post-Istanbul\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    // @custom:event Emits Transfer event\\n    function transfer(address dst, uint256 amount) external nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, msg.sender, dst, amount) == uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    // @custom:event Emits Transfer event\\n    function transferFrom(address src, address dst, uint256 amount) external nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, src, dst, amount) == uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    // @custom:event Emits Approval event on successful approve\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        transferAllowances[msg.sender][spender] = amount;\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the underlying balance of the `owner`\\n     * @dev This also accrues interest in a transaction\\n     * @param owner The address of the account to query\\n     * @return The amount of underlying owned by `owner`\\n     */\\n    function balanceOfUnderlying(address owner) external returns (uint) {\\n        Exp memory exchangeRate = Exp({ mantissa: exchangeRateCurrent() });\\n        (MathError mErr, uint balance) = mulScalarTruncate(exchangeRate, accountTokens[owner]);\\n        ensureNoMathError(mErr);\\n        return balance;\\n    }\\n\\n    /**\\n     * @notice Returns the current total borrows plus accrued interest\\n     * @return The total borrows with interest\\n     */\\n    function totalBorrowsCurrent() external nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return totalBorrows;\\n    }\\n\\n    /**\\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\\n     * @param account The address whose balance should be calculated after updating borrowIndex\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceCurrent(address account) external nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return borrowBalanceStored(account);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Will fail unless called by another vToken during the process of liquidation.\\n     *  Its absolutely critical to use msg.sender as the borrowed vToken and not a parameter.\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of vTokens to seize\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits Transfer event\\n    function seize(address liquidator, address borrower, uint seizeTokens) external nonReentrant returns (uint) {\\n        return seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\n    }\\n\\n    /**\\n     * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n     * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n     * @param newPendingAdmin New pending admin.\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits NewPendingAdmin event with old and new admin addresses\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint) {\\n        // Check caller = admin\\n        ensureAdmin(msg.sender);\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n     * @dev Admin function for pending admin to accept role and update admin\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits NewAdmin event on successful acceptance\\n    // @custom:event Emits NewPendingAdmin event with null new pending admin\\n    function _acceptAdmin() external returns (uint) {\\n        // Check caller is pendingAdmin\\n        if (msg.sender != pendingAdmin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\\n        }\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = address(0);\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice accrues interest and sets a new reserve factor for the protocol using `_setReserveFactorFresh`\\n     * @dev Governor function to accrue interest and set a new reserve factor\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits NewReserveFactor event\\n    function _setReserveFactor(uint newReserveFactorMantissa_) external nonReentrant returns (uint) {\\n        ensureAllowed(\\\"_setReserveFactor(uint256)\\\");\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reserve factor change failed.\\n            return fail(Error(error), FailureInfo.SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\\n        return _setReserveFactorFresh(newReserveFactorMantissa_);\\n    }\\n\\n    /**\\n     * @notice Sets the address of the access control manager of this contract\\n     * @dev Admin function to set the access control address\\n     * @param newAccessControlManagerAddress New address for the access control\\n     * @return uint 0=success, otherwise will revert\\n     */\\n    function setAccessControlManager(address newAccessControlManagerAddress) external returns (uint) {\\n        // Check caller is admin\\n        ensureAdmin(msg.sender);\\n\\n        ensureNonZeroAddress(newAccessControlManagerAddress);\\n\\n        emit NewAccessControlManager(accessControlManager, newAccessControlManagerAddress);\\n        accessControlManager = newAccessControlManagerAddress;\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring to protocol share reserve\\n     * @param reduceAmount_ Amount of reduction to reserves\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits ReservesReduced event\\n    function _reduceReserves(uint reduceAmount_) external nonReentrant returns (uint) {\\n        ensureAllowed(\\\"_reduceReserves(uint256)\\\");\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\n            return fail(Error(error), FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED);\\n        }\\n\\n        // If reserves were reduced in accrueInterest\\n        if (reduceReservesBlockNumber == block.number) return (uint(Error.NO_ERROR));\\n        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n        return _reduceReservesFresh(reduceAmount_);\\n    }\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return The number of tokens allowed to be spent (-1 means infinite)\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256) {\\n        return transferAllowances[owner][spender];\\n    }\\n\\n    /**\\n     * @notice Get the token balance of the `owner`\\n     * @param owner The address of the account to query\\n     * @return The number of tokens owned by `owner`\\n     */\\n    function balanceOf(address owner) external view returns (uint256) {\\n        return accountTokens[owner];\\n    }\\n\\n    /**\\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\\n     * @dev This is used by comptroller to more efficiently perform liquidity checks.\\n     * @param account Address of the account to snapshot\\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\n     */\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint) {\\n        uint vTokenBalance = accountTokens[account];\\n        uint borrowBalance;\\n        uint exchangeRateMantissa;\\n\\n        MathError mErr;\\n\\n        (mErr, borrowBalance) = borrowBalanceStoredInternal(account);\\n        if (mErr != MathError.NO_ERROR) {\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\n        }\\n\\n        (mErr, exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (mErr != MathError.NO_ERROR) {\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\n        }\\n\\n        return (uint(Error.NO_ERROR), vTokenBalance, borrowBalance, exchangeRateMantissa);\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block supply interest rate for this vToken\\n     * @return The supply interest rate per block, scaled by 1e18\\n     */\\n    function supplyRatePerBlock() external view returns (uint) {\\n        return interestRateModel.getSupplyRate(getCashPrior(), totalBorrows, totalReserves, reserveFactorMantissa);\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block borrow interest rate for this vToken\\n     * @return The borrow interest rate per block, scaled by 1e18\\n     */\\n    function borrowRatePerBlock() external view returns (uint) {\\n        return interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, totalReserves);\\n    }\\n\\n    /**\\n     * @notice Get cash balance of this vToken in the underlying asset\\n     * @return The quantity of underlying asset owned by this contract\\n     */\\n    function getCash() external view returns (uint) {\\n        return getCashPrior();\\n    }\\n\\n    /**\\n     * @notice Governance function to set new threshold of block difference after which funds will be sent to the protocol share reserve\\n     * @param newReduceReservesBlockDelta_ block difference value\\n     */\\n    function setReduceReservesBlockDelta(uint256 newReduceReservesBlockDelta_) external {\\n        require(newReduceReservesBlockDelta_ > 0, \\\"Invalid Input\\\");\\n        ensureAllowed(\\\"setReduceReservesBlockDelta(uint256)\\\");\\n        emit NewReduceReservesBlockDelta(reduceReservesBlockDelta, newReduceReservesBlockDelta_);\\n        reduceReservesBlockDelta = newReduceReservesBlockDelta_;\\n    }\\n\\n    /**\\n     * @notice Sets protocol share reserve contract address\\n     * @param protcolShareReserve_ The address of protocol share reserve contract\\n     */\\n    function setProtocolShareReserve(address payable protcolShareReserve_) external {\\n        // Check caller is admin\\n        ensureAdmin(msg.sender);\\n        ensureNonZeroAddress(protcolShareReserve_);\\n        emit NewProtocolShareReserve(protocolShareReserve, protcolShareReserve_);\\n        protocolShareReserve = protcolShareReserve_;\\n    }\\n\\n    /**\\n     * @notice Initialize the money market\\n     * @param comptroller_ The address of the Comptroller\\n     * @param interestRateModel_ The address of the interest rate model\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n     * @param name_ EIP-20 name of this token\\n     * @param symbol_ EIP-20 symbol of this token\\n     * @param decimals_ EIP-20 decimal precision of this token\\n     */\\n    function initialize(\\n        ComptrollerInterface comptroller_,\\n        InterestRateModel interestRateModel_,\\n        uint initialExchangeRateMantissa_,\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) public {\\n        ensureAdmin(msg.sender);\\n        require(accrualBlockNumber == 0 && borrowIndex == 0, \\\"market may only be initialized once\\\");\\n\\n        // Set initial exchange rate\\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\\n        require(initialExchangeRateMantissa > 0, \\\"initial exchange rate must be greater than zero.\\\");\\n\\n        // Set the comptroller\\n        uint err = _setComptroller(comptroller_);\\n        require(err == uint(Error.NO_ERROR), \\\"setting comptroller failed\\\");\\n\\n        // Initialize block number and borrow index (block number mocks depend on comptroller being set)\\n        accrualBlockNumber = block.number;\\n        borrowIndex = mantissaOne;\\n\\n        // Set the interest rate model (depends on block number / borrow index)\\n        err = _setInterestRateModelFresh(interestRateModel_);\\n        require(err == uint(Error.NO_ERROR), \\\"setting interest rate model failed\\\");\\n\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = decimals_;\\n\\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @notice Accrue interest then return the up-to-date exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateCurrent() public nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return exchangeRateStored();\\n    }\\n\\n    /**\\n     * @notice Applies accrued interest to total borrows and reserves\\n     * @dev This calculates interest accrued from the last checkpointed block\\n     * up to the current block and writes new checkpoint to storage and\\n     * reduce spread reserves to protocol share reserve\\n     * if currentBlock - reduceReservesBlockNumber >= blockDelta\\n     */\\n    // @custom:event Emits AccrueInterest event\\n    function accrueInterest() public returns (uint) {\\n        /* Remember the initial block number */\\n        uint currentBlockNumber = block.number;\\n        uint accrualBlockNumberPrior = accrualBlockNumber;\\n\\n        /* Short-circuit accumulating 0 interest */\\n        if (accrualBlockNumberPrior == currentBlockNumber) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        /* Read the previous values out of storage */\\n        uint cashPrior = getCashPrior();\\n        uint borrowsPrior = totalBorrows;\\n        uint reservesPrior = totalReserves;\\n        uint borrowIndexPrior = borrowIndex;\\n\\n        /* Calculate the current borrow interest rate */\\n        uint borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior, borrowsPrior, reservesPrior);\\n        require(borrowRateMantissa <= borrowRateMaxMantissa, \\\"borrow rate is absurdly high\\\");\\n\\n        /* Calculate the number of blocks elapsed since the last accrual */\\n        (MathError mathErr, uint blockDelta) = subUInt(currentBlockNumber, accrualBlockNumberPrior);\\n        ensureNoMathError(mathErr);\\n\\n        /*\\n         * Calculate the interest accumulated into borrows and reserves and the new index:\\n         *  simpleInterestFactor = borrowRate * blockDelta\\n         *  interestAccumulated = simpleInterestFactor * totalBorrows\\n         *  totalBorrowsNew = interestAccumulated + totalBorrows\\n         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\\n         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\\n         */\\n\\n        Exp memory simpleInterestFactor;\\n        uint interestAccumulated;\\n        uint totalBorrowsNew;\\n        uint totalReservesNew;\\n        uint borrowIndexNew;\\n\\n        (mathErr, simpleInterestFactor) = mulScalar(Exp({ mantissa: borrowRateMantissa }), blockDelta);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\\n                    uint(mathErr)\\n                );\\n        }\\n\\n        (mathErr, interestAccumulated) = mulScalarTruncate(simpleInterestFactor, borrowsPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\\n                    uint(mathErr)\\n                );\\n        }\\n\\n        (mathErr, totalBorrowsNew) = addUInt(interestAccumulated, borrowsPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\\n                    uint(mathErr)\\n                );\\n        }\\n\\n        (mathErr, totalReservesNew) = mulScalarTruncateAddUInt(\\n            Exp({ mantissa: reserveFactorMantissa }),\\n            interestAccumulated,\\n            reservesPrior\\n        );\\n        if (mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\\n                    uint(mathErr)\\n                );\\n        }\\n\\n        (mathErr, borrowIndexNew) = mulScalarTruncateAddUInt(simpleInterestFactor, borrowIndexPrior, borrowIndexPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\\n                    uint(mathErr)\\n                );\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accrualBlockNumber = currentBlockNumber;\\n        borrowIndex = borrowIndexNew;\\n        totalBorrows = totalBorrowsNew;\\n        totalReserves = totalReservesNew;\\n\\n        (mathErr, blockDelta) = subUInt(currentBlockNumber, reduceReservesBlockNumber);\\n        ensureNoMathError(mathErr);\\n        if (blockDelta >= reduceReservesBlockDelta) {\\n            reduceReservesBlockNumber = currentBlockNumber;\\n            if (cashPrior < totalReservesNew) {\\n                _reduceReservesFresh(cashPrior);\\n            } else {\\n                _reduceReservesFresh(totalReservesNew);\\n            }\\n        }\\n\\n        /* We emit an AccrueInterest event */\\n        emit AccrueInterest(cashPrior, interestAccumulated, borrowIndexNew, totalBorrowsNew);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets a new comptroller for the market\\n     * @dev Admin function to set a new comptroller\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits NewComptroller event\\n    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint) {\\n        // Check caller is admin\\n        ensureAdmin(msg.sender);\\n\\n        ComptrollerInterface oldComptroller = comptroller;\\n        // Ensure invoke comptroller.isComptroller() returns true\\n        require(newComptroller.isComptroller(), \\\"marker method returned false\\\");\\n\\n        // Set market's comptroller to newComptroller\\n        comptroller = newComptroller;\\n\\n        // Emit NewComptroller(oldComptroller, newComptroller)\\n        emit NewComptroller(oldComptroller, newComptroller);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and updates the interest rate model using _setInterestRateModelFresh\\n     * @dev Governance function to accrue interest and update the interest rate model\\n     * @param newInterestRateModel_ The new interest rate model to use\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel_) public returns (uint) {\\n        ensureAllowed(\\\"_setInterestRateModel(address)\\\");\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted change of interest rate model failed\\n            return fail(Error(error), FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\\n        return _setInterestRateModelFresh(newInterestRateModel_);\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the VToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStored() public view returns (uint) {\\n        (MathError err, uint result) = exchangeRateStoredInternal();\\n        ensureNoMathError(err);\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceStored(address account) public view returns (uint) {\\n        (MathError err, uint result) = borrowBalanceStoredInternal(account);\\n        ensureNoMathError(err);\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Transfers `tokens` tokens from `src` to `dst` by `spender`\\n     * @dev Called by both `transfer` and `transferFrom` internally\\n     * @param spender The address of the account performing the transfer\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param tokens The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferTokens(address spender, address src, address dst, uint tokens) internal returns (uint) {\\n        /* Fail if transfer not allowed */\\n        uint allowed = comptroller.transferAllowed(address(this), src, dst, tokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.TRANSFER_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Do not allow self-transfers */\\n        if (src == dst) {\\n            return fail(Error.BAD_INPUT, FailureInfo.TRANSFER_NOT_ALLOWED);\\n        }\\n\\n        /* Get the allowance, infinite for the account owner */\\n        uint startingAllowance = 0;\\n        if (spender == src) {\\n            startingAllowance = uint(-1);\\n        } else {\\n            startingAllowance = transferAllowances[src][spender];\\n        }\\n\\n        /* Do the calculations, checking for {under,over}flow */\\n        MathError mathErr;\\n        uint allowanceNew;\\n        uint srvTokensNew;\\n        uint dstTokensNew;\\n\\n        (mathErr, allowanceNew) = subUInt(startingAllowance, tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ALLOWED);\\n        }\\n\\n        (mathErr, srvTokensNew) = subUInt(accountTokens[src], tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ENOUGH);\\n        }\\n\\n        (mathErr, dstTokensNew) = addUInt(accountTokens[dst], tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_TOO_MUCH);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        accountTokens[src] = srvTokensNew;\\n        accountTokens[dst] = dstTokensNew;\\n\\n        /* Eat some of the allowance (if necessary) */\\n        if (startingAllowance != uint(-1)) {\\n            transferAllowances[src][spender] = allowanceNew;\\n        }\\n\\n        /* We emit a Transfer event */\\n        emit Transfer(src, dst, tokens);\\n\\n        comptroller.transferVerify(address(this), src, dst, tokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receives vTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintInternal(uint mintAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted mint failed\\n            return (fail(Error(error), FailureInfo.MINT_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\n        return mintFresh(msg.sender, mintAmount);\\n    }\\n\\n    /**\\n     * @notice User supplies assets into the market and receives vTokens in exchange\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param minter The address of the account which is supplying the assets\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintFresh(address minter, uint mintAmount) internal returns (uint, uint) {\\n        /* Fail if mint not allowed */\\n        uint allowed = comptroller.mintAllowed(address(this), minter, mintAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != block.number) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK), 0);\\n        }\\n\\n        MintLocalVars memory vars;\\n\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr)), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         *  We call `doTransferIn` for the minter and the mintAmount.\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\n         *  side-effects occurred. The function returns the amount actually transferred,\\n         *  in case of a fee. On success, the vToken holds an additional `actualMintAmount`\\n         *  of cash.\\n         */\\n        vars.actualMintAmount = doTransferIn(minter, mintAmount);\\n\\n        /*\\n         * We get the current exchange rate and calculate the number of vTokens to be minted:\\n         *  mintTokens = actualMintAmount / exchangeRate\\n         */\\n\\n        (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(\\n            vars.actualMintAmount,\\n            Exp({ mantissa: vars.exchangeRateMantissa })\\n        );\\n        ensureNoMathError(vars.mathErr);\\n\\n        /*\\n         * We calculate the new total supply of vTokens and minter token balance, checking for overflow:\\n         *  totalSupplyNew = totalSupply + mintTokens\\n         *  accountTokensNew = accountTokens[minter] + mintTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = addUInt(totalSupply, vars.mintTokens);\\n        ensureNoMathError(vars.mathErr);\\n        (vars.mathErr, vars.accountTokensNew) = addUInt(accountTokens[minter], vars.mintTokens);\\n        ensureNoMathError(vars.mathErr);\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[minter] = vars.accountTokensNew;\\n\\n        /* We emit a Mint event, and a Transfer event */\\n        emit Mint(minter, vars.actualMintAmount, vars.mintTokens, vars.accountTokensNew);\\n        emit Transfer(address(this), minter, vars.mintTokens);\\n\\n        /* We call the defense and prime accrue interest hook */\\n        comptroller.mintVerify(address(this), minter, vars.actualMintAmount, vars.mintTokens);\\n\\n        return (uint(Error.NO_ERROR), vars.actualMintAmount);\\n    }\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receiver receives vTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param receiver The address of the account which is receiving the vTokens\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintBehalfInternal(address receiver, uint mintAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted mintBehalf failed\\n            return (fail(Error(error), FailureInfo.MINT_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // mintBelahfFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\n        return mintBehalfFresh(msg.sender, receiver, mintAmount);\\n    }\\n\\n    /**\\n     * @notice Payer supplies assets into the market and receiver receives vTokens in exchange\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param payer The address of the account which is paying the underlying token\\n     * @param receiver The address of the account which is receiving vToken\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintBehalfFresh(address payer, address receiver, uint mintAmount) internal returns (uint, uint) {\\n        ensureNonZeroAddress(receiver);\\n        /* Fail if mint not allowed */\\n        uint allowed = comptroller.mintAllowed(address(this), receiver, mintAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != block.number) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK), 0);\\n        }\\n\\n        MintLocalVars memory vars;\\n\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr)), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         *  We call `doTransferIn` for the payer and the mintAmount.\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\n         *  side-effects occurred. The function returns the amount actually transferred,\\n         *  in case of a fee. On success, the vToken holds an additional `actualMintAmount`\\n         *  of cash.\\n         */\\n        vars.actualMintAmount = doTransferIn(payer, mintAmount);\\n\\n        /*\\n         * We get the current exchange rate and calculate the number of vTokens to be minted:\\n         *  mintTokens = actualMintAmount / exchangeRate\\n         */\\n\\n        (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(\\n            vars.actualMintAmount,\\n            Exp({ mantissa: vars.exchangeRateMantissa })\\n        );\\n        ensureNoMathError(vars.mathErr);\\n\\n        /*\\n         * We calculate the new total supply of vTokens and receiver token balance, checking for overflow:\\n         *  totalSupplyNew = totalSupply + mintTokens\\n         *  accountTokensNew = accountTokens[receiver] + mintTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = addUInt(totalSupply, vars.mintTokens);\\n        ensureNoMathError(vars.mathErr);\\n\\n        (vars.mathErr, vars.accountTokensNew) = addUInt(accountTokens[receiver], vars.mintTokens);\\n        ensureNoMathError(vars.mathErr);\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[receiver] = vars.accountTokensNew;\\n\\n        /* We emit a MintBehalf event, and a Transfer event */\\n        emit MintBehalf(payer, receiver, vars.actualMintAmount, vars.mintTokens, vars.accountTokensNew);\\n        emit Transfer(address(this), receiver, vars.mintTokens);\\n\\n        /* We call the defense and prime accrue interest hook */\\n        comptroller.mintVerify(address(this), receiver, vars.actualMintAmount, vars.mintTokens);\\n\\n        return (uint(Error.NO_ERROR), vars.actualMintAmount);\\n    }\\n\\n    /**\\n     * @notice Redeemer redeems vTokens in exchange for the underlying assets, transferred to the receiver. Redeemer and receiver can be the same\\n     *   address, or different addresses if the receiver was previously approved by the redeemer as a valid delegate (see MarketFacet.updateDelegate)\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemer The address of the account which is redeeming the tokens\\n     * @param receiver The receiver of the tokens\\n     * @param redeemTokens The number of vTokens to redeem into underlying\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function redeemInternal(\\n        address redeemer,\\n        address payable receiver,\\n        uint redeemTokens\\n    ) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n        }\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(redeemer, receiver, redeemTokens, 0);\\n    }\\n\\n    /**\\n     * @notice Sender redeems underlying assets on behalf of some other address. This function is only available\\n     *   for senders, explicitly marked as delegates of the supplier using `comptroller.updateDelegate`\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemer The address of the account which is redeeming the tokens\\n     * @param receiver The receiver of the tokens, if called by a delegate\\n     * @param redeemAmount The amount of underlying to receive from redeeming vTokens\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function redeemUnderlyingInternal(\\n        address redeemer,\\n        address payable receiver,\\n        uint redeemAmount\\n    ) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n        }\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(redeemer, receiver, 0, redeemAmount);\\n    }\\n\\n    /**\\n     * @notice Redeemer redeems vTokens in exchange for the underlying assets, transferred to the receiver. Redeemer and receiver can be the same\\n     *   address, or different addresses if the receiver was previously approved by the redeemer as a valid delegate (see MarketFacet.updateDelegate)\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param redeemer The address of the account which is redeeming the tokens\\n     * @param receiver The receiver of the tokens\\n     * @param redeemTokensIn The number of vTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @param redeemAmountIn The number of underlying tokens to receive from redeeming vTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // solhint-disable-next-line code-complexity\\n    function redeemFresh(\\n        address redeemer,\\n        address payable receiver,\\n        uint redeemTokensIn,\\n        uint redeemAmountIn\\n    ) internal returns (uint) {\\n        require(redeemTokensIn == 0 || redeemAmountIn == 0, \\\"one of redeemTokensIn or redeemAmountIn must be zero\\\");\\n\\n        RedeemLocalVars memory vars;\\n\\n        /* exchangeRate = invoke Exchange Rate Stored() */\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        ensureNoMathError(vars.mathErr);\\n\\n        /* If redeemTokensIn > 0: */\\n        if (redeemTokensIn > 0) {\\n            /*\\n             * We calculate the exchange rate and the amount of underlying to be redeemed:\\n             *  redeemTokens = redeemTokensIn\\n             *  redeemAmount = redeemTokensIn x exchangeRateCurrent\\n             */\\n            vars.redeemTokens = redeemTokensIn;\\n\\n            (vars.mathErr, vars.redeemAmount) = mulScalarTruncate(\\n                Exp({ mantissa: vars.exchangeRateMantissa }),\\n                redeemTokensIn\\n            );\\n            ensureNoMathError(vars.mathErr);\\n        } else {\\n            /*\\n             * We get the current exchange rate and calculate the amount to be redeemed:\\n             *  redeemTokens = redeemAmountIn / exchangeRate\\n             *  redeemAmount = redeemAmountIn\\n             */\\n\\n            (vars.mathErr, vars.redeemTokens) = divScalarByExpTruncate(\\n                redeemAmountIn,\\n                Exp({ mantissa: vars.exchangeRateMantissa })\\n            );\\n            ensureNoMathError(vars.mathErr);\\n\\n            vars.redeemAmount = redeemAmountIn;\\n        }\\n\\n        /* Fail if redeem not allowed */\\n        uint allowed = comptroller.redeemAllowed(address(this), redeemer, vars.redeemTokens);\\n        if (allowed != 0) {\\n            revert(\\\"math error\\\");\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != block.number) {\\n            revert(\\\"math error\\\");\\n        }\\n\\n        /*\\n         * We calculate the new total supply and redeemer balance, checking for underflow:\\n         *  totalSupplyNew = totalSupply - redeemTokens\\n         *  accountTokensNew = accountTokens[redeemer] - redeemTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = subUInt(totalSupply, vars.redeemTokens);\\n        ensureNoMathError(vars.mathErr);\\n\\n        (vars.mathErr, vars.accountTokensNew) = subUInt(accountTokens[redeemer], vars.redeemTokens);\\n        ensureNoMathError(vars.mathErr);\\n\\n        /* Fail gracefully if protocol has insufficient cash */\\n        if (getCashPrior() < vars.redeemAmount) {\\n            revert(\\\"math error\\\");\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[redeemer] = vars.accountTokensNew;\\n\\n        /*\\n         * We invoke doTransferOut for the receiver and the redeemAmount.\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\n         *  On success, the vToken has redeemAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n\\n        uint feeAmount;\\n        uint remainedAmount;\\n        if (IComptroller(address(comptroller)).treasuryPercent() != 0) {\\n            (vars.mathErr, feeAmount) = mulUInt(\\n                vars.redeemAmount,\\n                IComptroller(address(comptroller)).treasuryPercent()\\n            );\\n            ensureNoMathError(vars.mathErr);\\n\\n            (vars.mathErr, feeAmount) = divUInt(feeAmount, 1e18);\\n            ensureNoMathError(vars.mathErr);\\n\\n            (vars.mathErr, remainedAmount) = subUInt(vars.redeemAmount, feeAmount);\\n            ensureNoMathError(vars.mathErr);\\n\\n            doTransferOut(address(uint160(IComptroller(address(comptroller)).treasuryAddress())), feeAmount);\\n\\n            emit RedeemFee(redeemer, feeAmount, vars.redeemTokens);\\n        } else {\\n            remainedAmount = vars.redeemAmount;\\n        }\\n\\n        doTransferOut(receiver, remainedAmount);\\n\\n        /* We emit a Transfer event, and a Redeem event */\\n        emit Transfer(redeemer, address(this), vars.redeemTokens);\\n        emit Redeem(redeemer, remainedAmount, vars.redeemTokens, vars.accountTokensNew);\\n\\n        /* We call the defense and prime accrue interest hook */\\n        comptroller.redeemVerify(address(this), redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Receiver gets the borrow on behalf of the borrower address\\n     * @param borrower The borrower, on behalf of whom to borrow\\n     * @param receiver The account that would receive the funds (can be the same as the borrower)\\n     * @param borrowAmount The amount of the underlying asset to borrow\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function borrowInternal(\\n        address borrower,\\n        address payable receiver,\\n        uint borrowAmount\\n    ) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return fail(Error(error), FailureInfo.BORROW_ACCRUE_INTEREST_FAILED);\\n        }\\n        // borrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return borrowFresh(borrower, receiver, borrowAmount);\\n    }\\n\\n    /**\\n     * @notice Receiver gets the borrow on behalf of the borrower address\\n     * @dev Before calling this function, ensure that the interest has been accrued\\n     * @param borrower The borrower, on behalf of whom to borrow\\n     * @param receiver The account that would receive the funds (can be the same as the borrower)\\n     * @param borrowAmount The amount of the underlying asset to borrow\\n     * @return uint Returns 0 on success, otherwise revert (see ErrorReporter.sol for details).\\n     */\\n    function borrowFresh(address borrower, address payable receiver, uint borrowAmount) internal returns (uint) {\\n        /* Revert if borrow not allowed */\\n        uint allowed = comptroller.borrowAllowed(address(this), borrower, borrowAmount);\\n        if (allowed != 0) {\\n            revert(\\\"math error\\\");\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != block.number) {\\n            revert(\\\"math error\\\");\\n        }\\n\\n        /* Revert if protocol has insufficient underlying cash */\\n        if (getCashPrior() < borrowAmount) {\\n            revert(\\\"math error\\\");\\n        }\\n\\n        BorrowLocalVars memory vars;\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on overflow:\\n         *  accountBorrowsNew = accountBorrows + borrowAmount\\n         *  totalBorrowsNew = totalBorrows + borrowAmount\\n         */\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n        ensureNoMathError(vars.mathErr);\\n\\n        (vars.mathErr, vars.accountBorrowsNew) = addUInt(vars.accountBorrows, borrowAmount);\\n        ensureNoMathError(vars.mathErr);\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = addUInt(totalBorrows, borrowAmount);\\n        ensureNoMathError(vars.mathErr);\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /*\\n         * We invoke doTransferOut for the receiver and the borrowAmount.\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\n         *  On success, the vToken borrowAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(receiver, borrowAmount);\\n\\n        /* We emit a Borrow event */\\n        emit Borrow(borrower, borrowAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense and prime accrue interest hook */\\n        comptroller.borrowVerify(address(this), borrower, borrowAmount);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender repays their own borrow\\n     * @param repayAmount The amount to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowInternal(uint repayAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.REPAY_BORROW_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        return repayBorrowFresh(msg.sender, msg.sender, repayAmount);\\n    }\\n\\n    /**\\n     * @notice Sender repays a borrow belonging to another borrowing account\\n     * @param borrower The account with the debt being payed off\\n     * @param repayAmount The amount to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowBehalfInternal(address borrower, uint repayAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.REPAY_BEHALF_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        return repayBorrowFresh(msg.sender, borrower, repayAmount);\\n    }\\n\\n    /**\\n     * @notice Borrows are repaid by another user (possibly the borrower).\\n     * @param payer The account paying off the borrow\\n     * @param borrower The account with the debt being payed off\\n     * @param repayAmount The amount of undelrying tokens being returned\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowFresh(address payer, address borrower, uint repayAmount) internal returns (uint, uint) {\\n        /* Fail if repayBorrow not allowed */\\n        uint allowed = comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount);\\n        if (allowed != 0) {\\n            return (\\n                failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION, allowed),\\n                0\\n            );\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != block.number) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.REPAY_BORROW_FRESHNESS_CHECK), 0);\\n        }\\n\\n        RepayBorrowLocalVars memory vars;\\n\\n        /* We remember the original borrowerIndex for verification purposes */\\n        vars.borrowerIndex = accountBorrows[borrower].interestIndex;\\n\\n        /* We fetch the amount the borrower owes, with accumulated interest */\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n                    uint(vars.mathErr)\\n                ),\\n                0\\n            );\\n        }\\n\\n        /* If repayAmount == -1, repayAmount = accountBorrows */\\n        if (repayAmount == uint(-1)) {\\n            vars.repayAmount = vars.accountBorrows;\\n        } else {\\n            vars.repayAmount = repayAmount;\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the payer and the repayAmount\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\n         *  On success, the vToken holds an additional repayAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *   it returns the amount actually transferred, in case of a fee.\\n         */\\n        vars.actualRepayAmount = doTransferIn(payer, vars.repayAmount);\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on underflow:\\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\\n         */\\n        (vars.mathErr, vars.accountBorrowsNew) = subUInt(vars.accountBorrows, vars.actualRepayAmount);\\n        ensureNoMathError(vars.mathErr);\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = subUInt(totalBorrows, vars.actualRepayAmount);\\n        ensureNoMathError(vars.mathErr);\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /* We emit a RepayBorrow event */\\n        emit RepayBorrow(payer, borrower, vars.actualRepayAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense and prime accrue interest hook */\\n        comptroller.repayBorrowVerify(address(this), payer, borrower, vars.actualRepayAmount, vars.borrowerIndex);\\n\\n        return (uint(Error.NO_ERROR), vars.actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice The sender liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this vToken to be liquidated\\n     * @param vTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateBorrowInternal(\\n        address borrower,\\n        uint repayAmount,\\n        VTokenInterface vTokenCollateral\\n    ) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED), 0);\\n        }\\n\\n        error = vTokenCollateral.accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED), 0);\\n        }\\n\\n        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return liquidateBorrowFresh(msg.sender, borrower, repayAmount, vTokenCollateral);\\n    }\\n\\n    /**\\n     * @notice The liquidator liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this vToken to be liquidated\\n     * @param liquidator The address repaying the borrow and seizing collateral\\n     * @param vTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    // solhint-disable-next-line code-complexity\\n    function liquidateBorrowFresh(\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        VTokenInterface vTokenCollateral\\n    ) internal returns (uint, uint) {\\n        /* Fail if liquidate not allowed */\\n        uint allowed = comptroller.liquidateBorrowAllowed(\\n            address(this),\\n            address(vTokenCollateral),\\n            liquidator,\\n            borrower,\\n            repayAmount\\n        );\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != block.number) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_FRESHNESS_CHECK), 0);\\n        }\\n\\n        /* Verify vTokenCollateral market's block number equals current block number */\\n        if (vTokenCollateral.accrualBlockNumber() != block.number) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK), 0);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            return (fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER), 0);\\n        }\\n\\n        /* Fail if repayAmount = 0 */\\n        if (repayAmount == 0) {\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO), 0);\\n        }\\n\\n        /* Fail if repayAmount = -1 */\\n        if (repayAmount == uint(-1)) {\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX), 0);\\n        }\\n\\n        /* Fail if repayBorrow fails */\\n        (uint repayBorrowError, uint actualRepayAmount) = repayBorrowFresh(liquidator, borrower, repayAmount);\\n        if (repayBorrowError != uint(Error.NO_ERROR)) {\\n            return (fail(Error(repayBorrowError), FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We calculate the number of collateral tokens that will be seized */\\n        (uint amountSeizeError, uint seizeTokens) = comptroller.liquidateCalculateSeizeTokens(\\n            address(this),\\n            address(vTokenCollateral),\\n            actualRepayAmount\\n        );\\n        require(amountSeizeError == uint(Error.NO_ERROR), \\\"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\\\");\\n\\n        /* Revert if borrower collateral token balance < seizeTokens */\\n        require(vTokenCollateral.balanceOf(borrower) >= seizeTokens, \\\"LIQUIDATE_SEIZE_TOO_MUCH\\\");\\n\\n        // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\n        uint seizeError;\\n        if (address(vTokenCollateral) == address(this)) {\\n            seizeError = seizeInternal(address(this), liquidator, borrower, seizeTokens);\\n        } else {\\n            seizeError = vTokenCollateral.seize(liquidator, borrower, seizeTokens);\\n        }\\n\\n        /* Revert if seize tokens fails (since we cannot be sure of side effects) */\\n        require(seizeError == uint(Error.NO_ERROR), \\\"token seizure failed\\\");\\n\\n        /* We emit a LiquidateBorrow event */\\n        emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, address(vTokenCollateral), seizeTokens);\\n\\n        /* We call the defense and prime accrue interest hook */\\n        comptroller.liquidateBorrowVerify(\\n            address(this),\\n            address(vTokenCollateral),\\n            liquidator,\\n            borrower,\\n            actualRepayAmount,\\n            seizeTokens\\n        );\\n\\n        return (uint(Error.NO_ERROR), actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another vToken.\\n     *  Its absolutely critical to use msg.sender as the seizer vToken and not a parameter.\\n     * @param seizerToken The contract seizing the collateral (i.e. borrowed vToken)\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of vTokens to seize\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function seizeInternal(\\n        address seizerToken,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens\\n    ) internal returns (uint) {\\n        /* Fail if seize not allowed */\\n        uint allowed = comptroller.seizeAllowed(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_SEIZE_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            return fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER);\\n        }\\n\\n        MathError mathErr;\\n        uint borrowerTokensNew;\\n        uint liquidatorTokensNew;\\n\\n        /*\\n         * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\\n         *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\\n         *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\\n         */\\n        (mathErr, borrowerTokensNew) = subUInt(accountTokens[borrower], seizeTokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, liquidatorTokensNew) = addUInt(accountTokens[liquidator], seizeTokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED, uint(mathErr));\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accountTokens[borrower] = borrowerTokensNew;\\n        accountTokens[liquidator] = liquidatorTokensNew;\\n\\n        /* Emit a Transfer event */\\n        emit Transfer(borrower, liquidator, seizeTokens);\\n\\n        /* We call the defense and prime accrue interest hook */\\n        comptroller.seizeVerify(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets a new reserve factor for the protocol (requires fresh interest accrual)\\n     * @dev Governance function to set a new reserve factor\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function _setReserveFactorFresh(uint newReserveFactorMantissa) internal returns (uint) {\\n        // Verify market's block number equals current block number\\n        if (accrualBlockNumber != block.number) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK);\\n        }\\n\\n        // Check newReserveFactor \\u2264 maxReserveFactor\\n        if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\\n            return fail(Error.BAD_INPUT, FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);\\n        }\\n\\n        uint oldReserveFactorMantissa = reserveFactorMantissa;\\n        reserveFactorMantissa = newReserveFactorMantissa;\\n\\n        emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and adds reserves by transferring from `msg.sender`\\n     * @param addAmount Amount of addition to reserves\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function _addReservesInternal(uint addAmount) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\n            return fail(Error(error), FailureInfo.ADD_RESERVES_ACCRUE_INTEREST_FAILED);\\n        }\\n\\n        // _addReservesFresh emits reserve-addition-specific logs on errors, so we don't need to.\\n        (error, ) = _addReservesFresh(addAmount);\\n        return error;\\n    }\\n\\n    /**\\n     * @notice Add reserves by transferring from caller\\n     * @dev Requires fresh interest accrual\\n     * @param addAmount Amount of addition to reserves\\n     * @return (uint, uint) An error code (0=success, otherwise a failure (see ErrorReporter.sol for details)) and the actual amount added, net token fees\\n     */\\n    function _addReservesFresh(uint addAmount) internal returns (uint, uint) {\\n        // totalReserves + actualAddAmount\\n        uint totalReservesNew;\\n        uint actualAddAmount;\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != block.number) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.ADD_RESERVES_FRESH_CHECK), actualAddAmount);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the caller and the addAmount\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\n         *  On success, the vToken holds an additional addAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *  it returns the amount actually transferred, in case of a fee.\\n         */\\n\\n        actualAddAmount = doTransferIn(msg.sender, addAmount);\\n\\n        totalReservesNew = totalReserves + actualAddAmount;\\n\\n        /* Revert on overflow */\\n        require(totalReservesNew >= totalReserves, \\\"add reserves unexpected overflow\\\");\\n\\n        // Store reserves[n+1] = reserves[n] + actualAddAmount\\n        totalReserves = totalReservesNew;\\n\\n        /* Emit NewReserves(admin, actualAddAmount, reserves[n+1]) */\\n        emit ReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\\n\\n        /* Return (NO_ERROR, actualAddAmount) */\\n        return (uint(Error.NO_ERROR), actualAddAmount);\\n    }\\n\\n    /**\\n     * @notice Reduces reserves by transferring to protocol share reserve contract\\n     * @dev Requires fresh interest accrual\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function _reduceReservesFresh(uint reduceAmount) internal returns (uint) {\\n        if (reduceAmount == 0) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != block.number) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);\\n        }\\n\\n        // Fail gracefully if protocol has insufficient underlying cash\\n        if (getCashPrior() < reduceAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);\\n        }\\n\\n        // Check reduceAmount \\u2264 reserves[n] (totalReserves)\\n        if (reduceAmount > totalReserves) {\\n            return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        // totalReserves - reduceAmount\\n        uint totalReservesNew = totalReserves - reduceAmount;\\n\\n        // Store reserves[n+1] = reserves[n] - reduceAmount\\n        totalReserves = totalReservesNew;\\n\\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n        doTransferOut(protocolShareReserve, reduceAmount);\\n\\n        IProtocolShareReserveV5(protocolShareReserve).updateAssetsState(\\n            address(comptroller),\\n            underlying,\\n            IProtocolShareReserveV5.IncomeType.SPREAD\\n        );\\n\\n        emit ReservesReduced(protocolShareReserve, reduceAmount, totalReservesNew);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice updates the interest rate model (requires fresh interest accrual)\\n     * @dev Governance function to update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint) {\\n        // Used to store old model for use in the event that is emitted on success\\n        InterestRateModel oldInterestRateModel;\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != block.number) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK);\\n        }\\n\\n        // Track the market's current interest rate model\\n        oldInterestRateModel = interestRateModel;\\n\\n        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\\n        require(newInterestRateModel.isInterestRateModel(), \\\"marker method returned false\\\");\\n\\n        // Set the interest rate model to newInterestRateModel\\n        interestRateModel = newInterestRateModel;\\n\\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\\n        emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /*** Safe Token ***/\\n\\n    /**\\n     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\n     *  This may revert due to insufficient balance or insufficient allowance.\\n     */\\n    function doTransferIn(address from, uint amount) internal returns (uint);\\n\\n    /**\\n     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure rather than reverting.\\n     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\\n     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\\n     */\\n    function doTransferOut(address payable to, uint amount) internal;\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return Tuple of error code and the calculated balance or 0 if error code is non-zero\\n     */\\n    function borrowBalanceStoredInternal(address account) internal view returns (MathError, uint) {\\n        /* Note: we do not assert that the market is up to date */\\n        MathError mathErr;\\n        uint principalTimesIndex;\\n        uint result;\\n\\n        /* Get borrowBalance and borrowIndex */\\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\n\\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\\n         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\n         */\\n        if (borrowSnapshot.principal == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        /* Calculate new borrow balance using the interest index:\\n         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\n         */\\n        (mathErr, principalTimesIndex) = mulUInt(borrowSnapshot.principal, borrowIndex);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        (mathErr, result) = divUInt(principalTimesIndex, borrowSnapshot.interestIndex);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, result);\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the vToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return Tuple of error code and calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStoredInternal() internal view returns (MathError, uint) {\\n        uint _totalSupply = totalSupply;\\n        if (_totalSupply == 0) {\\n            /*\\n             * If there are no tokens minted:\\n             *  exchangeRate = initialExchangeRate\\n             */\\n            return (MathError.NO_ERROR, initialExchangeRateMantissa);\\n        } else {\\n            /*\\n             * Otherwise:\\n             *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\\n             */\\n            uint totalCash = getCashPrior();\\n            uint cashPlusBorrowsMinusReserves;\\n            Exp memory exchangeRate;\\n            MathError mathErr;\\n\\n            (mathErr, cashPlusBorrowsMinusReserves) = addThenSubUInt(totalCash, totalBorrows, totalReserves);\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n\\n            (mathErr, exchangeRate) = getExp(cashPlusBorrowsMinusReserves, _totalSupply);\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n\\n            return (MathError.NO_ERROR, exchangeRate.mantissa);\\n        }\\n    }\\n\\n    function ensureAllowed(string memory functionSig) private view {\\n        require(\\n            IAccessControlManagerV5(accessControlManager).isAllowedToCall(msg.sender, functionSig),\\n            \\\"access denied\\\"\\n        );\\n    }\\n\\n    function ensureAdmin(address caller_) private view {\\n        require(caller_ == admin, \\\"Unauthorized\\\");\\n    }\\n\\n    function ensureNoMathError(MathError mErr) private pure {\\n        require(mErr == MathError.NO_ERROR, \\\"math error\\\");\\n    }\\n\\n    function ensureNonZeroAddress(address address_) private pure {\\n        require(address_ != address(0), \\\"zero address\\\");\\n    }\\n\\n    /*** Safe Token ***/\\n\\n    /**\\n     * @notice Gets balance of this contract in terms of the underlying\\n     * @dev This excludes the value of the current message, if any\\n     * @return The quantity of underlying owned by this contract\\n     */\\n    function getCashPrior() internal view returns (uint);\\n}\\n\",\"keccak256\":\"0xfdbcdbd6cab4aeba2c06f39adbfbd8e42a3e50d02aed628c2d76b97659d84b68\"},\"contracts/Tokens/VTokens/VTokenInterfaces.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"../../Comptroller/ComptrollerInterface.sol\\\";\\nimport \\\"../../InterestRateModels/InterestRateModel.sol\\\";\\n\\ninterface IProtocolShareReserveV5 {\\n    enum IncomeType {\\n        SPREAD,\\n        LIQUIDATION\\n    }\\n\\n    function updateAssetsState(address comptroller, address asset, IncomeType kind) external;\\n}\\n\\ncontract VTokenStorageBase {\\n    /**\\n     * @notice Container for borrow balance information\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n     */\\n    struct BorrowSnapshot {\\n        uint principal;\\n        uint interestIndex;\\n    }\\n\\n    /**\\n     * @dev Guard variable for re-entrancy checks\\n     */\\n    bool internal _notEntered;\\n\\n    /**\\n     * @notice EIP-20 token name for this token\\n     */\\n    string public name;\\n\\n    /**\\n     * @notice EIP-20 token symbol for this token\\n     */\\n    string public symbol;\\n\\n    /**\\n     * @notice EIP-20 token decimals for this token\\n     */\\n    uint8 public decimals;\\n\\n    /**\\n     * @notice Maximum borrow rate that can ever be applied (.0005% / block)\\n     */\\n\\n    uint internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n    /**\\n     * @notice Maximum fraction of interest that can be set aside for reserves\\n     */\\n    uint internal constant reserveFactorMaxMantissa = 1e18;\\n\\n    /**\\n     * @notice Administrator for this contract\\n     */\\n    address payable public admin;\\n\\n    /**\\n     * @notice Pending administrator for this contract\\n     */\\n    address payable public pendingAdmin;\\n\\n    /**\\n     * @notice Contract which oversees inter-vToken operations\\n     */\\n    ComptrollerInterface public comptroller;\\n\\n    /**\\n     * @notice Model which tells what the current interest rate should be\\n     */\\n    InterestRateModel public interestRateModel;\\n\\n    /**\\n     * @notice Initial exchange rate used when minting the first VTokens (used when totalSupply = 0)\\n     */\\n    uint internal initialExchangeRateMantissa;\\n\\n    /**\\n     * @notice Fraction of interest currently set aside for reserves\\n     */\\n    uint public reserveFactorMantissa;\\n\\n    /**\\n     * @notice Block number that interest was last accrued at\\n     */\\n    uint public accrualBlockNumber;\\n\\n    /**\\n     * @notice Accumulator of the total earned interest rate since the opening of the market\\n     */\\n    uint public borrowIndex;\\n\\n    /**\\n     * @notice Total amount of outstanding borrows of the underlying in this market\\n     */\\n    uint public totalBorrows;\\n\\n    /**\\n     * @notice Total amount of reserves of the underlying held in this market\\n     */\\n    uint public totalReserves;\\n\\n    /**\\n     * @notice Total number of tokens in circulation\\n     */\\n    uint public totalSupply;\\n\\n    /**\\n     * @notice Official record of token balances for each account\\n     */\\n    mapping(address => uint) internal accountTokens;\\n\\n    /**\\n     * @notice Approved token transfer amounts on behalf of others\\n     */\\n    mapping(address => mapping(address => uint)) internal transferAllowances;\\n\\n    /**\\n     * @notice Mapping of account addresses to outstanding borrow balances\\n     */\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\n\\n    /**\\n     * @notice Underlying asset for this VToken\\n     */\\n    address public underlying;\\n\\n    /**\\n     * @notice Implementation address for this contract\\n     */\\n    address public implementation;\\n\\n    /**\\n     * @notice delta block after which reserves will be reduced\\n     */\\n    uint public reduceReservesBlockDelta;\\n\\n    /**\\n     * @notice last block number at which reserves were reduced\\n     */\\n    uint public reduceReservesBlockNumber;\\n\\n    /**\\n     * @notice address of protocol share reserve contract\\n     */\\n    address payable public protocolShareReserve;\\n\\n    /**\\n     * @notice address of accessControlManager\\n     */\\n\\n    address public accessControlManager;\\n}\\n\\ncontract VTokenStorage is VTokenStorageBase {\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\\ncontract VTokenInterface is VTokenStorage {\\n    /**\\n     * @notice Indicator that this is a vToken contract (for inspection)\\n     */\\n    bool public constant isVToken = true;\\n\\n    /*** Market Events ***/\\n\\n    /**\\n     * @notice Event emitted when interest is accrued\\n     */\\n    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when tokens are minted\\n     */\\n    event Mint(address minter, uint mintAmount, uint mintTokens, uint256 totalSupply);\\n\\n    /**\\n     * @notice Event emitted when tokens are minted behalf by payer to receiver\\n     */\\n    event MintBehalf(address payer, address receiver, uint mintAmount, uint mintTokens, uint256 totalSupply);\\n\\n    /**\\n     * @notice Event emitted when tokens are redeemed\\n     */\\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens, uint256 totalSupply);\\n\\n    /**\\n     * @notice Event emitted when tokens are redeemed and fee is transferred\\n     */\\n    event RedeemFee(address redeemer, uint feeAmount, uint redeemTokens);\\n\\n    /**\\n     * @notice Event emitted when underlying is borrowed\\n     */\\n    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is repaid\\n     */\\n    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is liquidated\\n     */\\n    event LiquidateBorrow(\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        address vTokenCollateral,\\n        uint seizeTokens\\n    );\\n\\n    /*** Admin Events ***/\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is changed\\n     */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is accepted, which means admin has been updated\\n     */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    /**\\n     * @notice Event emitted when comptroller is changed\\n     */\\n    event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\n\\n    /**\\n     * @notice Event emitted when interestRateModel is changed\\n     */\\n    event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\n\\n    /**\\n     * @notice Event emitted when the reserve factor is changed\\n     */\\n    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\\n\\n    /**\\n     * @notice Event emitted when the reserves are added\\n     */\\n    event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice Event emitted when the reserves are reduced\\n     */\\n    event ReservesReduced(address protocolShareReserve, uint reduceAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice EIP20 Transfer event\\n     */\\n    event Transfer(address indexed from, address indexed to, uint amount);\\n\\n    /**\\n     * @notice EIP20 Approval event\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\n\\n    /**\\n     * @notice Event emitted when block delta for reduce reserves get updated\\n     */\\n    event NewReduceReservesBlockDelta(uint256 oldReduceReservesBlockDelta, uint256 newReduceReservesBlockDelta);\\n\\n    /**\\n     * @notice Event emitted when address of ProtocolShareReserve contract get updated\\n     */\\n    event NewProtocolShareReserve(address indexed oldProtocolShareReserve, address indexed newProtocolShareReserve);\\n\\n    /**\\n     * @notice Failure event\\n     */\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /// @notice Emitted when access control address is changed by admin\\n    event NewAccessControlManager(address oldAccessControlAddress, address newAccessControlAddress);\\n\\n    /*** User Interface ***/\\n\\n    function transfer(address dst, uint amount) external returns (bool);\\n\\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\\n\\n    function approve(address spender, uint amount) external returns (bool);\\n\\n    function balanceOfUnderlying(address owner) external returns (uint);\\n\\n    function totalBorrowsCurrent() external returns (uint);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint);\\n\\n    function seize(address liquidator, address borrower, uint seizeTokens) external returns (uint);\\n\\n    /*** Admin Function ***/\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);\\n\\n    /*** Admin Function ***/\\n    function _acceptAdmin() external returns (uint);\\n\\n    /*** Admin Function ***/\\n    function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint);\\n\\n    /*** Admin Function ***/\\n    function _reduceReserves(uint reduceAmount) external returns (uint);\\n\\n    function balanceOf(address owner) external view returns (uint);\\n\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\\n\\n    function borrowRatePerBlock() external view returns (uint);\\n\\n    function supplyRatePerBlock() external view returns (uint);\\n\\n    function getCash() external view returns (uint);\\n\\n    function exchangeRateCurrent() public returns (uint);\\n\\n    function accrueInterest() public returns (uint);\\n\\n    /*** Admin Function ***/\\n    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint);\\n\\n    /*** Admin Function ***/\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint);\\n\\n    function borrowBalanceStored(address account) public view returns (uint);\\n\\n    function exchangeRateStored() public view returns (uint);\\n}\\n\\ncontract VBep20Interface {\\n    /*** User Interface ***/\\n\\n    function mint(uint mintAmount) external returns (uint);\\n\\n    function mintBehalf(address receiver, uint mintAmount) external returns (uint);\\n\\n    function redeem(uint redeemTokens) external returns (uint);\\n\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\n\\n    function borrow(uint borrowAmount) external returns (uint);\\n\\n    function repayBorrow(uint repayAmount) external returns (uint);\\n\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\\n\\n    function liquidateBorrow(\\n        address borrower,\\n        uint repayAmount,\\n        VTokenInterface vTokenCollateral\\n    ) external returns (uint);\\n\\n    /*** Admin Functions ***/\\n\\n    function _addReserves(uint addAmount) external returns (uint);\\n}\\n\\ncontract VDelegatorInterface {\\n    /**\\n     * @notice Emitted when implementation is changed\\n     */\\n    event NewImplementation(address oldImplementation, address newImplementation);\\n\\n    /**\\n     * @notice Called by the admin to update the implementation of the delegator\\n     * @param implementation_ The address of the new implementation for delegation\\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\n     */\\n    function _setImplementation(\\n        address implementation_,\\n        bool allowResign,\\n        bytes memory becomeImplementationData\\n    ) public;\\n}\\n\\ncontract VDelegateInterface {\\n    /**\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\n     * @param data The encoded bytes data for any initialization\\n     */\\n    function _becomeImplementation(bytes memory data) public;\\n\\n    /**\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\n     */\\n    function _resignImplementation() public;\\n}\\n\",\"keccak256\":\"0x2f12533847458414b423cc85677489709d772bec4e48933ae983d6861202a41b\"},\"contracts/Utils/Address.sol\":{\"content\":\"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        // solium-disable-next-line security/no-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x3c2ef780599a2ae6913282b982633f07e405a4a9c8511590df571e2b773aef9d\"},\"contracts/Utils/CarefulMath.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @title Careful Math\\n * @author Venus\\n * @notice Derived from OpenZeppelin's SafeMath library\\n *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\\n */\\ncontract CarefulMath {\\n    /**\\n     * @dev Possible error codes that we can return\\n     */\\n    enum MathError {\\n        NO_ERROR,\\n        DIVISION_BY_ZERO,\\n        INTEGER_OVERFLOW,\\n        INTEGER_UNDERFLOW\\n    }\\n\\n    /**\\n     * @dev Multiplies two numbers, returns an error on overflow.\\n     */\\n    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (a == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        uint c = a * b;\\n\\n        if (c / a != b) {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        } else {\\n            return (MathError.NO_ERROR, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, truncating the quotient.\\n     */\\n    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b == 0) {\\n            return (MathError.DIVISION_BY_ZERO, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, a / b);\\n    }\\n\\n    /**\\n     * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\\n     */\\n    function subUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b <= a) {\\n            return (MathError.NO_ERROR, a - b);\\n        } else {\\n            return (MathError.INTEGER_UNDERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Adds two numbers, returns an error on overflow.\\n     */\\n    function addUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        uint c = a + b;\\n\\n        if (c >= a) {\\n            return (MathError.NO_ERROR, c);\\n        } else {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev add a and b and then subtract c\\n     */\\n    function addThenSubUInt(uint a, uint b, uint c) internal pure returns (MathError, uint) {\\n        (MathError err0, uint sum) = addUInt(a, b);\\n\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, 0);\\n        }\\n\\n        return subUInt(sum, c);\\n    }\\n}\\n\",\"keccak256\":\"0x5bd84fb723641b98d0559272323b90ce42595f025af89cfb214d8c064c9ee3c3\"},\"contracts/Utils/ErrorReporter.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\ncontract ComptrollerErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        COMPTROLLER_MISMATCH,\\n        INSUFFICIENT_SHORTFALL,\\n        INSUFFICIENT_LIQUIDITY,\\n        INVALID_CLOSE_FACTOR,\\n        INVALID_COLLATERAL_FACTOR,\\n        INVALID_LIQUIDATION_INCENTIVE,\\n        MARKET_NOT_ENTERED, // no longer possible\\n        MARKET_NOT_LISTED,\\n        MARKET_ALREADY_LISTED,\\n        MATH_ERROR,\\n        NONZERO_BORROW_BALANCE,\\n        PRICE_ERROR,\\n        REJECTION,\\n        SNAPSHOT_ERROR,\\n        TOO_MANY_ASSETS,\\n        TOO_MUCH_REPAY,\\n        INSUFFICIENT_BALANCE_FOR_VAI,\\n        MARKET_NOT_COLLATERAL\\n    }\\n\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n        EXIT_MARKET_BALANCE_OWED,\\n        EXIT_MARKET_REJECTION,\\n        SET_CLOSE_FACTOR_OWNER_CHECK,\\n        SET_CLOSE_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\n        SET_IMPLEMENTATION_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n        SET_PRICE_ORACLE_OWNER_CHECK,\\n        SUPPORT_MARKET_EXISTS,\\n        SUPPORT_MARKET_OWNER_CHECK,\\n        SET_PAUSE_GUARDIAN_OWNER_CHECK,\\n        SET_VAI_MINT_RATE_CHECK,\\n        SET_VAICONTROLLER_OWNER_CHECK,\\n        SET_MINTED_VAI_REJECTION,\\n        SET_TREASURY_OWNER_CHECK,\\n        UNLIST_MARKET_NOT_LISTED\\n    }\\n\\n    /**\\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n     **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n     */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n     */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\\n\\ncontract TokenErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        BAD_INPUT,\\n        COMPTROLLER_REJECTION,\\n        COMPTROLLER_CALCULATION_ERROR,\\n        INTEREST_RATE_MODEL_ERROR,\\n        INVALID_ACCOUNT_PAIR,\\n        INVALID_CLOSE_AMOUNT_REQUESTED,\\n        INVALID_COLLATERAL_FACTOR,\\n        MATH_ERROR,\\n        MARKET_NOT_FRESH,\\n        MARKET_NOT_LISTED,\\n        TOKEN_INSUFFICIENT_ALLOWANCE,\\n        TOKEN_INSUFFICIENT_BALANCE,\\n        TOKEN_INSUFFICIENT_CASH,\\n        TOKEN_TRANSFER_IN_FAILED,\\n        TOKEN_TRANSFER_OUT_FAILED,\\n        TOKEN_PRICE_ERROR\\n    }\\n\\n    /*\\n     * Note: FailureInfo (but not Error) is kept in alphabetical order\\n     *       This is because FailureInfo grows significantly faster, and\\n     *       the order of Error has some meaning, while the order of FailureInfo\\n     *       is entirely arbitrary.\\n     */\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\\n        BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        BORROW_ACCRUE_INTEREST_FAILED,\\n        BORROW_CASH_NOT_AVAILABLE,\\n        BORROW_FRESHNESS_CHECK,\\n        BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        BORROW_MARKET_NOT_LISTED,\\n        BORROW_COMPTROLLER_REJECTION,\\n        LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\n        LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\n        LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\n        LIQUIDATE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\n        LIQUIDATE_FRESHNESS_CHECK,\\n        LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\n        LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_SEIZE_TOO_MUCH,\\n        MINT_ACCRUE_INTEREST_FAILED,\\n        MINT_COMPTROLLER_REJECTION,\\n        MINT_EXCHANGE_CALCULATION_FAILED,\\n        MINT_EXCHANGE_RATE_READ_FAILED,\\n        MINT_FRESHNESS_CHECK,\\n        MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        MINT_TRANSFER_IN_FAILED,\\n        MINT_TRANSFER_IN_NOT_POSSIBLE,\\n        REDEEM_ACCRUE_INTEREST_FAILED,\\n        REDEEM_COMPTROLLER_REJECTION,\\n        REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_RATE_READ_FAILED,\\n        REDEEM_FRESHNESS_CHECK,\\n        REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\\n        REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\\n        REDUCE_RESERVES_ADMIN_CHECK,\\n        REDUCE_RESERVES_CASH_NOT_AVAILABLE,\\n        REDUCE_RESERVES_FRESH_CHECK,\\n        REDUCE_RESERVES_VALIDATION,\\n        REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_COMPTROLLER_REJECTION,\\n        REPAY_BORROW_FRESHNESS_CHECK,\\n        REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COMPTROLLER_OWNER_CHECK,\\n        SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\\n        SET_INTEREST_RATE_MODEL_FRESH_CHECK,\\n        SET_INTEREST_RATE_MODEL_OWNER_CHECK,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_ORACLE_MARKET_NOT_LISTED,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\\n        SET_RESERVE_FACTOR_ADMIN_CHECK,\\n        SET_RESERVE_FACTOR_FRESH_CHECK,\\n        SET_RESERVE_FACTOR_BOUNDS_CHECK,\\n        TRANSFER_COMPTROLLER_REJECTION,\\n        TRANSFER_NOT_ALLOWED,\\n        TRANSFER_NOT_ENOUGH,\\n        TRANSFER_TOO_MUCH,\\n        ADD_RESERVES_ACCRUE_INTEREST_FAILED,\\n        ADD_RESERVES_FRESH_CHECK,\\n        ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE,\\n        TOKEN_GET_UNDERLYING_PRICE_ERROR,\\n        REPAY_VAI_COMPTROLLER_REJECTION,\\n        REPAY_VAI_FRESHNESS_CHECK,\\n        VAI_MINT_EXCHANGE_CALCULATION_FAILED,\\n        SFT_MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED\\n    }\\n\\n    /**\\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n     **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n     */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n     */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\\n\\ncontract VAIControllerErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED, // The sender is not authorized to perform this action.\\n        REJECTION, // The action would violate the comptroller, vaicontroller policy.\\n        SNAPSHOT_ERROR, // The comptroller could not get the account borrows and exchange rate from the market.\\n        PRICE_ERROR, // The comptroller could not obtain a required price of an asset.\\n        MATH_ERROR, // A math calculation error occurred.\\n        INSUFFICIENT_BALANCE_FOR_VAI // Caller does not have sufficient balance to mint VAI.\\n    }\\n\\n    enum FailureInfo {\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n        SET_COMPTROLLER_OWNER_CHECK,\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n        VAI_MINT_REJECTION,\\n        VAI_BURN_REJECTION,\\n        VAI_LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\n        VAI_LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\n        VAI_LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\n        VAI_LIQUIDATE_COMPTROLLER_REJECTION,\\n        VAI_LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\n        VAI_LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\n        VAI_LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\n        VAI_LIQUIDATE_FRESHNESS_CHECK,\\n        VAI_LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\n        VAI_LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\n        VAI_LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\n        VAI_LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\n        VAI_LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\n        VAI_LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\n        VAI_LIQUIDATE_SEIZE_TOO_MUCH,\\n        MINT_FEE_CALCULATION_FAILED,\\n        SET_TREASURY_OWNER_CHECK\\n    }\\n\\n    /**\\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n     **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n     */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n     */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\\n\",\"keccak256\":\"0x4f5a41ef380336395706659e2b8f315870dcf3d617ea6f81104424500b15b1ef\"},\"contracts/Utils/Exponential.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./CarefulMath.sol\\\";\\nimport \\\"./ExponentialNoError.sol\\\";\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Venus\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract Exponential is CarefulMath, ExponentialNoError {\\n    /**\\n     * @dev Creates an exponential from numerator and denominator values.\\n     *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\\n     *            or if `denom` is zero.\\n     */\\n    function getExp(uint num, uint denom) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint scaledNumerator) = mulUInt(num, expScale);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({ mantissa: 0 }));\\n        }\\n\\n        (MathError err1, uint rational) = divUInt(scaledNumerator, denom);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({ mantissa: 0 }));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({ mantissa: rational }));\\n    }\\n\\n    /**\\n     * @dev Adds two exponentials, returning a new exponential.\\n     */\\n    function addExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        (MathError error, uint result) = addUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({ mantissa: result }));\\n    }\\n\\n    /**\\n     * @dev Subtracts two exponentials, returning a new exponential.\\n     */\\n    function subExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        (MathError error, uint result) = subUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({ mantissa: result }));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, returning a new Exp.\\n     */\\n    function mulScalar(Exp memory a, uint scalar) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint scaledMantissa) = mulUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({ mantissa: 0 }));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({ mantissa: scaledMantissa }));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mulScalarTruncate(Exp memory a, uint scalar) internal pure returns (MathError, uint) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(product));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mulScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) internal pure returns (MathError, uint) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return addUInt(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Divide an Exp by a scalar, returning a new Exp.\\n     */\\n    function divScalar(Exp memory a, uint scalar) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint descaledMantissa) = divUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({ mantissa: 0 }));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({ mantissa: descaledMantissa }));\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, returning a new Exp.\\n     */\\n    function divScalarByExp(uint scalar, Exp memory divisor) internal pure returns (MathError, Exp memory) {\\n        /*\\n          We are doing this as:\\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\\n\\n          How it works:\\n          Exp = a / b;\\n          Scalar = s;\\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\\n        */\\n        (MathError err0, uint numerator) = mulUInt(expScale, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({ mantissa: 0 }));\\n        }\\n        return getExp(numerator, divisor.mantissa);\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\\n     */\\n    function divScalarByExpTruncate(uint scalar, Exp memory divisor) internal pure returns (MathError, uint) {\\n        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(fraction));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials, returning a new exponential.\\n     */\\n    function mulExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({ mantissa: 0 }));\\n        }\\n\\n        // We add half the scale before dividing so that we get rounding instead of truncation.\\n        //  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717\\n        // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\\n        (MathError err1, uint doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({ mantissa: 0 }));\\n        }\\n\\n        (MathError err2, uint product) = divUInt(doubleScaledProductWithHalfScale, expScale);\\n        // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\\n        assert(err2 == MathError.NO_ERROR);\\n\\n        return (MathError.NO_ERROR, Exp({ mantissa: product }));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\\n     */\\n    function mulExp(uint a, uint b) internal pure returns (MathError, Exp memory) {\\n        return mulExp(Exp({ mantissa: a }), Exp({ mantissa: b }));\\n    }\\n\\n    /**\\n     * @dev Multiplies three exponentials, returning a new exponential.\\n     */\\n    function mulExp3(Exp memory a, Exp memory b, Exp memory c) internal pure returns (MathError, Exp memory) {\\n        (MathError err, Exp memory ab) = mulExp(a, b);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, ab);\\n        }\\n        return mulExp(ab, c);\\n    }\\n\\n    /**\\n     * @dev Divides two exponentials, returning a new exponential.\\n     *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\\n     *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\\n     */\\n    function divExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        return getExp(a.mantissa, b.mantissa);\\n    }\\n}\\n\",\"keccak256\":\"0x92a68e9f6de3a70b103aa0ddb68faa8e60c443b1268e03853d5054171fe8e290\"},\"contracts/Utils/ExponentialNoError.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract ExponentialNoError {\\n    uint internal constant expScale = 1e18;\\n    uint internal constant doubleScale = 1e36;\\n    uint internal constant halfExpScale = expScale / 2;\\n    uint internal constant mantissaOne = expScale;\\n\\n    struct Exp {\\n        uint mantissa;\\n    }\\n\\n    struct Double {\\n        uint mantissa;\\n    }\\n\\n    /**\\n     * @dev Truncates the given exp to a whole number value.\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n     */\\n    function truncate(Exp memory exp) internal pure returns (uint) {\\n        // Note: We are not using careful math here as we're performing a division that cannot fail\\n        return exp.mantissa / expScale;\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mul_ScalarTruncate(Exp memory a, uint scalar) internal pure returns (uint) {\\n        Exp memory product = mul_(a, scalar);\\n        return truncate(product);\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mul_ScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) internal pure returns (uint) {\\n        Exp memory product = mul_(a, scalar);\\n        return add_(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Checks if first Exp is less than second Exp.\\n     */\\n    function lessThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n        return left.mantissa < right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp <= right Exp.\\n     */\\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n        return left.mantissa <= right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp > right Exp.\\n     */\\n    function greaterThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n        return left.mantissa > right.mantissa;\\n    }\\n\\n    /**\\n     * @dev returns true if Exp is exactly zero\\n     */\\n    function isZeroExp(Exp memory value) internal pure returns (bool) {\\n        return value.mantissa == 0;\\n    }\\n\\n    function safe224(uint n, string memory errorMessage) internal pure returns (uint224) {\\n        require(n < 2 ** 224, errorMessage);\\n        return uint224(n);\\n    }\\n\\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2 ** 32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function add_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: add_(a.mantissa, b.mantissa) });\\n    }\\n\\n    function add_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({ mantissa: add_(a.mantissa, b.mantissa) });\\n    }\\n\\n    function add_(uint a, uint b) internal pure returns (uint) {\\n        return add_(a, b, \\\"addition overflow\\\");\\n    }\\n\\n    function add_(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: sub_(a.mantissa, b.mantissa) });\\n    }\\n\\n    function sub_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({ mantissa: sub_(a.mantissa, b.mantissa) });\\n    }\\n\\n    function sub_(uint a, uint b) internal pure returns (uint) {\\n        return sub_(a, b, \\\"subtraction underflow\\\");\\n    }\\n\\n    function sub_(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function mul_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: mul_(a.mantissa, b.mantissa) / expScale });\\n    }\\n\\n    function mul_(Exp memory a, uint b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: mul_(a.mantissa, b) });\\n    }\\n\\n    function mul_(uint a, Exp memory b) internal pure returns (uint) {\\n        return mul_(a, b.mantissa) / expScale;\\n    }\\n\\n    function mul_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({ mantissa: mul_(a.mantissa, b.mantissa) / doubleScale });\\n    }\\n\\n    function mul_(Double memory a, uint b) internal pure returns (Double memory) {\\n        return Double({ mantissa: mul_(a.mantissa, b) });\\n    }\\n\\n    function mul_(uint a, Double memory b) internal pure returns (uint) {\\n        return mul_(a, b.mantissa) / doubleScale;\\n    }\\n\\n    function mul_(uint a, uint b) internal pure returns (uint) {\\n        return mul_(a, b, \\\"multiplication overflow\\\");\\n    }\\n\\n    function mul_(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        uint c = a * b;\\n        require(c / a == b, errorMessage);\\n        return c;\\n    }\\n\\n    function div_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: div_(mul_(a.mantissa, expScale), b.mantissa) });\\n    }\\n\\n    function div_(Exp memory a, uint b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: div_(a.mantissa, b) });\\n    }\\n\\n    function div_(uint a, Exp memory b) internal pure returns (uint) {\\n        return div_(mul_(a, expScale), b.mantissa);\\n    }\\n\\n    function div_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({ mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa) });\\n    }\\n\\n    function div_(Double memory a, uint b) internal pure returns (Double memory) {\\n        return Double({ mantissa: div_(a.mantissa, b) });\\n    }\\n\\n    function div_(uint a, Double memory b) internal pure returns (uint) {\\n        return div_(mul_(a, doubleScale), b.mantissa);\\n    }\\n\\n    function div_(uint a, uint b) internal pure returns (uint) {\\n        return div_(a, b, \\\"divide by zero\\\");\\n    }\\n\\n    function div_(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    function fraction(uint a, uint b) internal pure returns (Double memory) {\\n        return Double({ mantissa: div_(mul_(a, doubleScale), b) });\\n    }\\n}\\n\",\"keccak256\":\"0x237e63d9ad2bf232d70f854b8867a465913cab4d2033d295ec7736bf618ca302\"},\"contracts/Utils/IBEP20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the BEP20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {BEP20Detailed}.\\n */\\ninterface IBEP20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x839b08895eb1ad83502d3631e8e9e3a856d2a8c63c46f070d604af7b26c62c07\"},\"contracts/Utils/SafeBEP20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./IBEP20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeBEP20\\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeBEP20 for BEP20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeBEP20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IBEP20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IBEP20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IBEP20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeBEP20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IBEP20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IBEP20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\\n            value,\\n            \\\"SafeBEP20: decreased allowance below zero\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IBEP20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeBEP20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeBEP20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeBEP20: BEP20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x540ef6ddc47232a59d3ab0e95537f7a7d1c8a36f8dba315b010e60c6487bd768\"},\"contracts/Utils/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return add(a, b, \\\"SafeMath: addition overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9431fd772ed4abc038cdfe9ce6c0066897bd1685ad45848748d1952935d5b8ef\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613371806100206000396000f3fe608060405234801561001057600080fd5b50600436106104545760003560e01c80637dc0d1d011610241578063bf32442d1161013b578063dcfbc0c7116100c3578063f445d70311610087578063f445d70314610d74578063f519fc3014610da2578063f851a44014610dc8578063fa6331d814610dd0578063fd51a3ad14610dd857610454565b8063dcfbc0c714610ce3578063e37d4b7914610ceb578063e4028eee14610d11578063e85a296014610d3d578063e875544614610d6c57610454565b8063c7ee005e1161010a578063c7ee005e14610c71578063d136af441461085d578063d24febad14610c79578063d3270f9914610caf578063dce1544914610cb757610454565b8063bf32442d14610c3d578063c32094c714610b09578063c5b4db5514610c45578063c5f956af14610c6957610454565b80639bb27d62116101c9578063b8324c7c1161018d578063b8324c7c14610b93578063bb82aa5e14610be1578063bb85745014610be9578063bbb8864a14610c0f578063bec04f7214610c3557610454565b80639bb27d6214610b375780639bf34cbb14610b3f5780639cfdd9e614610b65578063a843108114610840578063b2eafc3914610b8b57610454565b80638e8f294b116102105780638e8f294b14610a93578063919a373614610adb5780639254f5e514610b015780639460c8b514610b0957806394b2294b14610b2f57610454565b80637dc0d1d014610a3f5780638a7dc16514610a475780638b3113f61461091b5780638c1ac18a14610a6d57610454565b8063425fad5811610352578063530e784f116102da578063607ef6c11161029e578063607ef6c1146105685780636662c7c914610a0a578063719f701b14610a275780637655138314610a2f5780637d172bd514610a3757610454565b8063530e784f1461096657806355ee1fe1146109665780635cc4fdeb1461098c5780635dd3fc9d146109be5780635f5af1aa146109e457610454565b80634ef233fc116103215780634ef233fc1461081a5780634fd42e171461084057806351a485e41461085d578063522c656b1461091b57806352d84d1e1461094957610454565b8063425fad58146107b25780634a584432146107ba5780634ada90af146107e05780634e0853db146107e857610454565b806324a3d622116103e05780632bc7e29e116103a45780632bc7e29e146107395780632ec041241461075f578063317b0b77146105115780634088c73e1461077c57806341a18d2c1461078457610454565b806324a3d6221461064a57806324aaa2201461065257806326782247146107125780632a6a60651461071a5780632b5d790c1461065257610454565b806310b983381161042757806310b98338146104cf57806312348e961461051157806317db21631461052e578063186db48f1461056857806321af45691461062657610454565b806302c3bcbb1461045957806304ef9d581461049157806308e0225c146104995780630db4b4e5146104c7575b600080fd5b61047f6004803603602081101561046f57600080fd5b50356001600160a01b0316610e04565b60408051918252519081900360200190f35b61047f610e16565b61047f600480360360408110156104af57600080fd5b506001600160a01b0381358116916020013516610e1c565b61047f610e39565b6104fd600480360360408110156104e557600080fd5b506001600160a01b0381358116916020013516610e3f565b604080519115158252519081900360200190f35b61047f6004803603602081101561052757600080fd5b5035610e5f565b6105666004803603606081101561054457600080fd5b506001600160a01b038135811691602081013590911690604001351515610e70565b005b6105666004803603604081101561057e57600080fd5b810190602081018135600160201b81111561059857600080fd5b8201836020820111156105aa57600080fd5b803590602001918460208302840111600160201b831117156105cb57600080fd5b919390929091602081019035600160201b8111156105e857600080fd5b8201836020820111156105fa57600080fd5b803590602001918460208302840111600160201b8311171561061b57600080fd5b509092509050610f35565b61062e610fa8565b604080516001600160a01b039092168252519081900360200190f35b61062e610fb7565b6105666004803603606081101561066857600080fd5b810190602081018135600160201b81111561068257600080fd5b82018360208201111561069457600080fd5b803590602001918460208302840111600160201b831117156106b557600080fd5b919390929091602081019035600160201b8111156106d257600080fd5b8201836020820111156106e457600080fd5b803590602001918460208302840111600160201b8311171561070557600080fd5b9193509150351515610fc6565b61062e61103c565b6104fd6004803603602081101561073057600080fd5b5035151561104b565b61047f6004803603602081101561074f57600080fd5b50356001600160a01b03166110dd565b61047f6004803603602081101561077557600080fd5b50356110ef565b6104fd611191565b61047f6004803603604081101561079a57600080fd5b506001600160a01b038135811691602001351661119a565b6104fd6111b7565b61047f600480360360208110156107d057600080fd5b50356001600160a01b03166111c6565b61047f6111d8565b610566600480360360608110156107fe57600080fd5b506001600160a01b0381351690602081013590604001356111de565b6105666004803603602081101561083057600080fd5b50356001600160a01b03166112c3565b61047f6004803603602081101561085657600080fd5b50356113fd565b6105666004803603604081101561087357600080fd5b810190602081018135600160201b81111561088d57600080fd5b82018360208201111561089f57600080fd5b803590602001918460208302840111600160201b831117156108c057600080fd5b919390929091602081019035600160201b8111156108dd57600080fd5b8201836020820111156108ef57600080fd5b803590602001918460208302840111600160201b8311171561091057600080fd5b509092509050611408565b6105666004803603604081101561093157600080fd5b506001600160a01b0381351690602001351515611475565b61062e6004803603602081101561095f57600080fd5b5035611483565b61047f6004803603602081101561097c57600080fd5b50356001600160a01b03166114aa565b61047f600480360360608110156109a257600080fd5b506001600160a01b0381351690602081013590604001356114b5565b61047f600480360360208110156109d457600080fd5b50356001600160a01b0316611509565b61047f600480360360208110156109fa57600080fd5b50356001600160a01b031661151b565b61056660048036036020811015610a2057600080fd5b50356115e6565b61047f611697565b6104fd61169d565b61062e6116ab565b61062e6116ba565b61047f60048036036020811015610a5d57600080fd5b50356001600160a01b03166116c9565b6104fd60048036036020811015610a8357600080fd5b50356001600160a01b03166116db565b610ab960048036036020811015610aa957600080fd5b50356001600160a01b03166116f0565b6040805193151584526020840192909252151582820152519081900360600190f35b61056660048036036020811015610af157600080fd5b50356001600160a01b0316611716565b61062e611783565b61047f60048036036020811015610b1f57600080fd5b50356001600160a01b0316611792565b61047f61179d565b61062e6117a3565b61047f60048036036020811015610b5557600080fd5b50356001600160a01b03166117b2565b61047f60048036036020811015610b7b57600080fd5b50356001600160a01b031661187c565b61062e611947565b610bb960048036036020811015610ba957600080fd5b50356001600160a01b0316611956565b604080516001600160e01b03909316835263ffffffff90911660208301528051918290030190f35b61062e611980565b61056660048036036020811015610bff57600080fd5b50356001600160a01b031661198f565b61047f60048036036020811015610c2557600080fd5b50356001600160a01b0316611a56565b61047f611a68565b61062e611a6e565b610c4d611a7d565b604080516001600160e01b039092168252519081900360200190f35b61062e611a90565b61062e611a9f565b61047f60048036036060811015610c8f57600080fd5b506001600160a01b03813581169160208101359091169060400135611aae565b61062e611c2b565b61062e60048036036040811015610ccd57600080fd5b506001600160a01b038135169060200135611c3a565b61062e611c6f565b610bb960048036036020811015610d0157600080fd5b50356001600160a01b0316611c7e565b61047f60048036036040811015610d2757600080fd5b506001600160a01b038135169060200135611ca8565b6104fd60048036036040811015610d5357600080fd5b5080356001600160a01b0316906020013560ff16611cb4565b61047f611cf4565b6104fd60048036036040811015610d8a57600080fd5b506001600160a01b0381358116916020013516611cfa565b61047f60048036036020811015610db857600080fd5b50356001600160a01b0316611d1a565b61062e611de5565b61047f611df4565b61047f60048036036040811015610dee57600080fd5b506001600160a01b038135169060200135611dfa565b60276020526000908152604090205481565b60225481565b601360209081526000928352604080842090915290825290205481565b601d5481565b602c60209081526000928352604080842090915290825290205460ff1681565b6000610e6a82611ea5565b92915050565b610e9160405180606001604052806032815260200161317f60329139611fcf565b6015546001600160a01b03838116911614610ec7576001600160a01b0382166000908152600960205260409020610ec7906120f3565b6001600160a01b03838116600081815260326020908152604080832094871680845294825291829020805460ff1916861515908117909155825190815291517fc080966e9e93529edc1b244180c245bc60f3d86f1e690a17651a5e428746a8cd9281900390910190a3505050565b610fa28484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602080880282810182019093528782529093508792508691829185019084908082843760009201919091525061213d92505050565b50505050565b601e546001600160a01b031681565b600a546001600160a01b031681565b6110358585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602080890282810182019093528882529093508892508791829185019084908082843760009201919091525086925061227b915050565b5050505050565b6001546001600160a01b031681565b600061108b6040518060400160405280601881526020017f5f73657450726f746f636f6c50617573656428626f6f6c290000000000000000815250611fcf565b6018805483151562010000810262ff0000199092169190911790915560408051918252517fd7500633dd3ddd74daa7af62f8c8404c7fe4a81da179998db851696bed004b389181900360200190a15090565b60166020526000908152604090205481565b60006017548280821415611138576040805162461bcd60e51b815260206004820152601e60248201526000805160206132d6833981519152604482015290519081900360640190fd5b611140612300565b6017805490859055604080518281526020810187905281517f73747d68b346dce1e932bcd238282e7ac84c01569e1f8d0469c222fdc6e9d5a4929181900390910190a160005b9350505b5050919050565b60185460ff1681565b601260209081526000928352604080842090915290825290205481565b60185462010000900460ff1681565b601f6020526000908152604090205481565b60065481565b601b546001600160a01b03908116908490811682141561122f5760405162461bcd60e51b81526004018080602001828103825260228152602001806132f66022913960400191505060405180910390fd5b611237612300565b61124085612352565b601b546001600160a01b031615611259576112596123a5565b601b80546001600160a01b0319166001600160a01b038716908117909155601c859055601d849055604080518681526020810186905281517f7059037d74ee16b0fb06a4a30f3348dd2635f301f92e373c92899a25a522ef6e929181900390910190a25050505050565b6112cb612300565b6112d481612352565b6000816001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561130f57600080fd5b505afa158015611323573d6000803e3d6000fd5b505050506040513d602081101561133957600080fd5b50516033549091506001600160a01b038083169116146113a0576040805162461bcd60e51b815260206004820152601a60248201527f696e76616c6964207876732076746f6b656e2061646472657373000000000000604482015290519081900360640190fd5b6034546040516001600160a01b038085169216907f2565e1579c0926afb7113edbfd85373e85cadaa3e0346f04de19686a2bb86ed190600090a350603480546001600160a01b0319166001600160a01b0392909216919091179055565b6000610e6a8261256c565b610fa28484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602080880282810182019093528782529093508792508691829185019084908082843760009201919091525061267092505050565b61147f82826127ae565b5050565b600d818154811061149057fe5b6000918252602090912001546001600160a01b0316905081565b6000610e6a82612865565b60008183146114f55760405162461bcd60e51b815260040180806020018281038252603c8152602001806131b1603c913960400191505060405180910390fd5b6114ff8484612930565b90505b9392505050565b602b6020526000908152604090205481565b600a546000906001600160a01b03908116908390811682141561156f5760405162461bcd60e51b81526004018080602001828103825260228152602001806132f66022913960400191505060405180910390fd5b611577612300565b61158084612352565b600a80546001600160a01b038681166001600160a01b0319831681179093556040805191909216808252602082019390935281517f0613b6ee6a04f0d09f390e4d9318894b9f6ac7fd83897cd8d18896ba579c401e929181900390910190a16000611186565b601a54818082141561162d576040805162461bcd60e51b815260206004820152601e60248201526000805160206132d6833981519152604482015290519081900360640190fd5b611635612300565b601b546001600160a01b03161561164e5761164e6123a5565b601a805490849055604080518281526020810186905281517fe81d4ac15e5afa1e708e66664eddc697177423d950d133bda8262d8885e6da3b929181900390910190a150505050565b601c5481565b601854610100900460ff1681565b601b546001600160a01b031681565b6004546001600160a01b031681565b60146020526000908152604090205481565b602d6020526000908152604090205460ff1681565b60096020526000908152604090208054600182015460039092015460ff91821692911683565b61171e612300565b61172781612352565b6033546040516001600160a01b038084169216907ffe7fd0d872def0f65050e9f38fc6691d0c192c694a56f09b04bec5fb2ea61f2b90600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b6015546001600160a01b031681565b6000610e6a82612b2e565b60075481565b6025546001600160a01b031681565b6026546000906001600160a01b0390811690839081168214156118065760405162461bcd60e51b81526004018080602001828103825260228152602001806132f66022913960400191505060405180910390fd5b61180e612300565b61181784612352565b602680546001600160a01b038681166001600160a01b0319831617928390556040805192821680845293909116602083015280517f0f7eb572d1b3053a0a3a33c04151364cf88d163182a5e4e1088cb8e52321e08a9281900390910190a16000611186565b6015546000906001600160a01b0390811690839081168214156118d05760405162461bcd60e51b81526004018080602001828103825260228152602001806132f66022913960400191505060405180910390fd5b6118d8612300565b6118e184612352565b601580546001600160a01b038681166001600160a01b0319831681179093556040805191909216808252602082019390935281517fe1ddcb2dab8e5b03cfc8c67a0d5861d91d16f7bd2612fd381faf4541d212c9b2929181900390910190a16000611186565b6020546001600160a01b031681565b6010602052600090815260409020546001600160e01b03811690600160e01b900463ffffffff1682565b6002546001600160a01b031681565b6025546001600160a01b0390811690829081168214156119e05760405162461bcd60e51b81526004018080602001828103825260228152602001806132f66022913960400191505060405180910390fd5b6119e8612300565b6119f183612352565b602580546001600160a01b038581166001600160a01b0319831681179093556040805191909216808252602082019390935281517fa5ea5616d5f6dbbaa62fdfcf3856723216eed485c394d9e51ec8e6d40e1d1ac1929181900390910190a150505050565b602a6020526000908152604090205481565b60175481565b6033546001600160a01b031690565b6ec097ce7bc90715b34b9f100000000081565b6021546001600160a01b031681565b6031546001600160a01b031681565b602054600090611ac6906001600160a01b0316612ba9565b670de0b6b3a76400008210611b14576040805162461bcd60e51b815260206004820152600f60248201526e70657263656e74203e3d203130302560881b604482015290519081900360640190fd5b611b1d84612352565b611b2683612352565b6020805460218054602280546001600160a01b038a81166001600160a01b0319808816821789558b8316908616179095559188905560408051958316808752968601949094528351929091169390927f29f06ea15931797ebaed313d81d100963dc22cb213cb4ce2737b5a62b1a8b1e892918290030190a1604080516001600160a01b0380851682528816602082015281517f8de763046d7b8f08b6c3d03543de1d615309417842bb5d2d62f110f65809ddac929181900390910190a1604080518281526020810187905281517f0893f8f4101baaabbeb513f96761e7a36eb837403c82cc651c292a4abdc94ed7929181900390910190a16000979650505050505050565b6026546001600160a01b031681565b60086020528160005260406000208181548110611c5357fe5b6000918252602090912001546001600160a01b03169150829050565b6003546001600160a01b031681565b6011602052600090815260409020546001600160e01b03811690600160e01b900463ffffffff1682565b60006115028383612930565b6001600160a01b038216600090815260296020526040812081836008811115611cd957fe5b815260208101919091526040016000205460ff169392505050565b60055481565b603260209081526000928352604080842090915290825290205460ff1681565b6028546000906001600160a01b039081169083908116821415611d6e5760405162461bcd60e51b81526004018080602001828103825260228152602001806132f66022913960400191505060405180910390fd5b611d76612300565b611d7f84612352565b602880546001600160a01b038681166001600160a01b0319831681179093556040805191909216808252602082019390935281517f0f1eca7612e020f6e4582bcead0573eba4b5f7b56668754c6aed82ef12057dd4929181900390910190a16000611186565b6000546001600160a01b031681565b601a5481565b6000611e04612c0b565b60185460ff16158015611e1f5750601854610100900460ff16155b611e60576040805162461bcd60e51b815260206004820152600d60248201526c159052481a5cc81c185d5cd959609a1b604482015290519081900360640190fd5b6015546001600160a01b03163314611e8557611e7e600e6016612c5e565b9050610e6a565b6001600160a01b0383166000908152601660205260408120839055611502565b60006005548280821415611eee576040805162461bcd60e51b815260206004820152601e60248201526000805160206132d6833981519152604482015290519081900360640190fd5b611ef6612300565b611efe61316b565b506040805160208101909152848152611f1561316b565b506040805160208101909152670c7d713b49da00008152611f3461316b565b50604080516020810190915266b1a2bc2ec500008152611f548284612cc4565b80611f645750611f648184612ccb565b15611f7e57611f74600580612c5e565b955050505061118a565b600580549088905560408051828152602081018a905281517f3b9670cf975d26958e754b57098eaa2ac914d8d2a31b83257997b9f346110fd9929181900390910190a1600098975050505050505050565b602854604080516318c5e8ab60e01b81523360048201818152602483019384528551604484015285516001600160a01b03909516946318c5e8ab949293879391606490910190602085019080838360005b83811015612038578181015183820152602001612020565b50505050905090810190601f1680156120655780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561208357600080fd5b505afa158015612097573d6000803e3d6000fd5b505050506040513d60208110156120ad57600080fd5b50516120f0576040805162461bcd60e51b815260206004820152600d60248201526c1858d8d95cdcc819195b9a5959609a1b604482015290519081900360640190fd5b50565b805460ff166120f0576040805162461bcd60e51b81526020600482015260116024820152701b585c9ad95d081b9bdd081b1a5cdd1959607a1b604482015290519081900360640190fd5b61215e6040518060600160405280602981526020016132ad60299139611fcf565b81518151811580159061217057508082145b6121b1576040805162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a59081a5b9c1d5d609a1b604482015290519081900360640190fd5b60005b82811015611035578381815181106121c857fe5b6020026020010151601f60008784815181106121e057fe5b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000208190555084818151811061221857fe5b60200260200101516001600160a01b03167f6f1951b2aad10f3fc81b86d91105b413a5b3f847a34bbc5ce1904201b14438f685838151811061225657fe5b60200260200101516040518082815260200191505060405180910390a26001016121b4565b61229c60405180606001604052806029815260200161321760299139611fcf565b8251825160005b828110156122f85760005b828110156122ef576122e78783815181106122c557fe5b60200260200101518783815181106122d957fe5b602002602001015187612cd2565b6001016122ae565b506001016122a3565b505050505050565b6000546001600160a01b03163314612350576040805162461bcd60e51b815260206004820152600e60248201526d37b7363c9030b236b4b71031b0b760911b604482015290519081900360640190fd5b565b6001600160a01b0381166120f0576040805162461bcd60e51b815260206004820152601560248201527463616e2774206265207a65726f206164647265737360581b604482015290519081900360640190fd5b601c5415806123bc5750601c546123ba612d8a565b105b156123c657612350565b603354604080516370a0823160e01b815230600482015290516001600160a01b039092169160009183916370a0823191602480820192602092909190829003018186803b15801561241657600080fd5b505afa15801561242a573d6000803e3d6000fd5b505050506040513d602081101561244057600080fd5b5051905080612450575050612350565b60008061246661245e612d8a565b601c54612d8e565b90506000612476601a5483612dc8565b90508084106124875780925061248b565b8392505b601d5483101561249f575050505050612350565b6124a7612d8a565b601c55601b546124ca906001600160a01b0387811691168563ffffffff612e0a16565b6040805184815290517ff6d4b8f74d85a6e2d7a50225957b8a6cfec69ad92f5905627260541aa0a5565d9181900360200190a1601b60009054906101000a90046001600160a01b03166001600160a01b031663faa1809e6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561254d57600080fd5b505af1158015612561573d6000803e3d6000fd5b505050505050505050565b600060065482808214156125b5576040805162461bcd60e51b815260206004820152601e60248201526000805160206132d6833981519152604482015290519081900360640190fd5b6125d660405180606001604052806021815260200161324060219139611fcf565b670de0b6b3a7640000841015612626576040805162461bcd60e51b815260206004820152601060248201526f0d2dcc6cadce8d2ecca40784062ca62760831b604482015290519081900360640190fd5b6006805490859055604080518281526020810187905281517faeba5a6c40a8ac138134bff1aaa65debf25971188a58804bad717f82f0ec1316929181900390910190a16000611186565b61269160405180606001604052806029815260200161326160299139611fcf565b8151815181158015906126a357508082145b6126e4576040805162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a59081a5b9c1d5d609a1b604482015290519081900360640190fd5b60005b82811015611035578381815181106126fb57fe5b60200260200101516027600087848151811061271357fe5b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000208190555084818151811061274b57fe5b60200260200101516001600160a01b03167f9e0ad9cee10bdf36b7fbd38910c0bdff0f275ace679b45b922381c2723d676f885838151811061278957fe5b60200260200101516040518082815260200191505060405180910390a26001016126e7565b6127cf60405180606001604052806023815260200161328a60239139611fcf565b6015546001600160a01b03838116911614612805576001600160a01b0382166000908152600960205260409020612805906120f3565b6001600160a01b0382166000818152602d6020908152604091829020805460ff1916851515908117909155825190815291517f03561d5280ebb02280893b1d60978e4a27e7654a149c5d0e7c2cf65389ce16949281900390910190a25050565b6004546000906001600160a01b0390811690839081168214156128b95760405162461bcd60e51b81526004018080602001828103825260228152602001806132f66022913960400191505060405180910390fd5b6128c1612300565b6128ca84612352565b600480546001600160a01b038681166001600160a01b0319831681179093556040805191909216808252602082019390935281517fd52b2b9b7e9ee655fcb95d2e5b9e0c9f69e7ef2b8e9d2d0ea78402d576d22e22929181900390910190a16000611186565b6001600160a01b0382166000908152600960205260408120600101548280821415612990576040805162461bcd60e51b815260206004820152601e60248201526000805160206132d6833981519152604482015290519081900360640190fd5b6129b160405180606001604052806025815260200161331860259139611fcf565b6129ba85612352565b6001600160a01b03851660009081526009602052604090206129db816120f3565b6129e361316b565b5060408051602081019091528581526129fa61316b565b506040805160208101909152670c7d713b49da00008152612a1b8183612cc4565b15612a3657612a2c60066008612c5e565b9550505050612b26565b8615801590612abf5750600480546040805163fc57d4df60e01b81526001600160a01b038c8116948201949094529051929091169163fc57d4df91602480820192602092909190829003018186803b158015612a9157600080fd5b505afa158015612aa5573d6000803e3d6000fd5b505050506040513d6020811015612abb57600080fd5b5051155b15612ad057612a2c600d6009612c5e565b6001830180549088905560408051828152602081018a905281516001600160a01b038c16927f70483e6592cd5182d45ac970e05bc62cdcc90e9d8ef2c2dbe686cf383bcd7fc5928290030190a260009650505050505b505092915050565b6000612b38612300565b612b4182612352565b603180546001600160a01b038481166001600160a01b0319831681179093556040805191909216808252602082019390935281517fcb20dab7409e4fb972d9adccb39530520b226ce6940d85c9523a499b950b6ea3929181900390910190a160009392505050565b6000546001600160a01b0316331480612bca5750336001600160a01b038216145b6120f0576040805162461bcd60e51b815260206004820152600d60248201526c1858d8d95cdcc819195b9a5959609a1b604482015290519081900360640190fd5b60185462010000900460ff1615612350576040805162461bcd60e51b81526020600482015260126024820152711c1c9bdd1bd8dbdb081a5cc81c185d5cd95960721b604482015290519081900360640190fd5b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa0836013811115612c8d57fe5b836018811115612c9957fe5b604080519283526020830191909152600082820152519081900360600190a182601381111561150257fe5b5190511090565b5190511190565b6001600160a01b0383166000908152600960205260409020612cf3906120f3565b6001600160a01b03831660009081526029602052604081208291846008811115612d1957fe5b81526020810191909152604001600020805460ff1916911515919091179055816008811115612d4457fe5b60408051831515815290516001600160a01b038616917f35007a986bcd36d2f73fc7f1b73762e12eadb4406dd163194950fd3b5a6a827d919081900360200190a3505050565b4390565b60006115028383604051806040016040528060158152602001747375627472616374696f6e20756e646572666c6f7760581b815250612e61565b600061150283836040518060400160405280601781526020017f6d756c7469706c69636174696f6e206f766572666c6f77000000000000000000815250612ef8565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052612e5c908490612f77565b505050565b60008184841115612ef05760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612eb5578181015183820152602001612e9d565b50505050905090810190601f168015612ee25780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000831580612f05575082155b15612f1257506000611502565b83830283858281612f1f57fe5b04148390612f6e5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315612eb5578181015183820152602001612e9d565b50949350505050565b612f89826001600160a01b031661312f565b612fda576040805162461bcd60e51b815260206004820152601f60248201527f5361666542455032303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b60006060836001600160a01b0316836040518082805190602001908083835b602083106130185780518252601f199092019160209182019101612ff9565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461307a576040519150601f19603f3d011682016040523d82523d6000602084013e61307f565b606091505b5091509150816130d6576040805162461bcd60e51b815260206004820181905260248201527f5361666542455032303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b805115610fa2578080602001905160208110156130f257600080fd5b5051610fa25760405162461bcd60e51b815260040180806020018281038252602a8152602001806131ed602a913960400191505060405180910390fd5b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061316357508115155b949350505050565b604051806020016040528060008152509056fe5f736574466f726365644c69717569646174696f6e466f725573657228616464726573732c616464726573732c626f6f6c29636f6c6c61746572616c20666163746f7220616e64206c69717569646174696f6e207468726573686f6c64206d757374206265207468652073616d655361666542455032303a204245503230206f7065726174696f6e20646964206e6f7420737563636565645f736574416374696f6e7350617573656428616464726573735b5d2c75696e74385b5d2c626f6f6c295f7365744c69717569646174696f6e496e63656e746976652875696e74323536295f7365744d61726b6574537570706c794361707328616464726573735b5d2c75696e743235365b5d295f736574466f726365644c69717569646174696f6e28616464726573732c626f6f6c295f7365744d61726b6574426f72726f774361707328616464726573735b5d2c75696e743235365b5d296f6c642076616c75652069732073616d65206173206e65772076616c756500006f6c6420616464726573732069732073616d65206173206e657720616464726573735f736574436f6c6c61746572616c466163746f7228616464726573732c75696e7432353629a265627a7a72315820a8733c4dc45d66f1513f5517ede6577eaf52045ef6720dfaa444062d2e59489264736f6c63430005100032",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106104545760003560e01c80637dc0d1d011610241578063bf32442d1161013b578063dcfbc0c7116100c3578063f445d70311610087578063f445d70314610d74578063f519fc3014610da2578063f851a44014610dc8578063fa6331d814610dd0578063fd51a3ad14610dd857610454565b8063dcfbc0c714610ce3578063e37d4b7914610ceb578063e4028eee14610d11578063e85a296014610d3d578063e875544614610d6c57610454565b8063c7ee005e1161010a578063c7ee005e14610c71578063d136af441461085d578063d24febad14610c79578063d3270f9914610caf578063dce1544914610cb757610454565b8063bf32442d14610c3d578063c32094c714610b09578063c5b4db5514610c45578063c5f956af14610c6957610454565b80639bb27d62116101c9578063b8324c7c1161018d578063b8324c7c14610b93578063bb82aa5e14610be1578063bb85745014610be9578063bbb8864a14610c0f578063bec04f7214610c3557610454565b80639bb27d6214610b375780639bf34cbb14610b3f5780639cfdd9e614610b65578063a843108114610840578063b2eafc3914610b8b57610454565b80638e8f294b116102105780638e8f294b14610a93578063919a373614610adb5780639254f5e514610b015780639460c8b514610b0957806394b2294b14610b2f57610454565b80637dc0d1d014610a3f5780638a7dc16514610a475780638b3113f61461091b5780638c1ac18a14610a6d57610454565b8063425fad5811610352578063530e784f116102da578063607ef6c11161029e578063607ef6c1146105685780636662c7c914610a0a578063719f701b14610a275780637655138314610a2f5780637d172bd514610a3757610454565b8063530e784f1461096657806355ee1fe1146109665780635cc4fdeb1461098c5780635dd3fc9d146109be5780635f5af1aa146109e457610454565b80634ef233fc116103215780634ef233fc1461081a5780634fd42e171461084057806351a485e41461085d578063522c656b1461091b57806352d84d1e1461094957610454565b8063425fad58146107b25780634a584432146107ba5780634ada90af146107e05780634e0853db146107e857610454565b806324a3d622116103e05780632bc7e29e116103a45780632bc7e29e146107395780632ec041241461075f578063317b0b77146105115780634088c73e1461077c57806341a18d2c1461078457610454565b806324a3d6221461064a57806324aaa2201461065257806326782247146107125780632a6a60651461071a5780632b5d790c1461065257610454565b806310b983381161042757806310b98338146104cf57806312348e961461051157806317db21631461052e578063186db48f1461056857806321af45691461062657610454565b806302c3bcbb1461045957806304ef9d581461049157806308e0225c146104995780630db4b4e5146104c7575b600080fd5b61047f6004803603602081101561046f57600080fd5b50356001600160a01b0316610e04565b60408051918252519081900360200190f35b61047f610e16565b61047f600480360360408110156104af57600080fd5b506001600160a01b0381358116916020013516610e1c565b61047f610e39565b6104fd600480360360408110156104e557600080fd5b506001600160a01b0381358116916020013516610e3f565b604080519115158252519081900360200190f35b61047f6004803603602081101561052757600080fd5b5035610e5f565b6105666004803603606081101561054457600080fd5b506001600160a01b038135811691602081013590911690604001351515610e70565b005b6105666004803603604081101561057e57600080fd5b810190602081018135600160201b81111561059857600080fd5b8201836020820111156105aa57600080fd5b803590602001918460208302840111600160201b831117156105cb57600080fd5b919390929091602081019035600160201b8111156105e857600080fd5b8201836020820111156105fa57600080fd5b803590602001918460208302840111600160201b8311171561061b57600080fd5b509092509050610f35565b61062e610fa8565b604080516001600160a01b039092168252519081900360200190f35b61062e610fb7565b6105666004803603606081101561066857600080fd5b810190602081018135600160201b81111561068257600080fd5b82018360208201111561069457600080fd5b803590602001918460208302840111600160201b831117156106b557600080fd5b919390929091602081019035600160201b8111156106d257600080fd5b8201836020820111156106e457600080fd5b803590602001918460208302840111600160201b8311171561070557600080fd5b9193509150351515610fc6565b61062e61103c565b6104fd6004803603602081101561073057600080fd5b5035151561104b565b61047f6004803603602081101561074f57600080fd5b50356001600160a01b03166110dd565b61047f6004803603602081101561077557600080fd5b50356110ef565b6104fd611191565b61047f6004803603604081101561079a57600080fd5b506001600160a01b038135811691602001351661119a565b6104fd6111b7565b61047f600480360360208110156107d057600080fd5b50356001600160a01b03166111c6565b61047f6111d8565b610566600480360360608110156107fe57600080fd5b506001600160a01b0381351690602081013590604001356111de565b6105666004803603602081101561083057600080fd5b50356001600160a01b03166112c3565b61047f6004803603602081101561085657600080fd5b50356113fd565b6105666004803603604081101561087357600080fd5b810190602081018135600160201b81111561088d57600080fd5b82018360208201111561089f57600080fd5b803590602001918460208302840111600160201b831117156108c057600080fd5b919390929091602081019035600160201b8111156108dd57600080fd5b8201836020820111156108ef57600080fd5b803590602001918460208302840111600160201b8311171561091057600080fd5b509092509050611408565b6105666004803603604081101561093157600080fd5b506001600160a01b0381351690602001351515611475565b61062e6004803603602081101561095f57600080fd5b5035611483565b61047f6004803603602081101561097c57600080fd5b50356001600160a01b03166114aa565b61047f600480360360608110156109a257600080fd5b506001600160a01b0381351690602081013590604001356114b5565b61047f600480360360208110156109d457600080fd5b50356001600160a01b0316611509565b61047f600480360360208110156109fa57600080fd5b50356001600160a01b031661151b565b61056660048036036020811015610a2057600080fd5b50356115e6565b61047f611697565b6104fd61169d565b61062e6116ab565b61062e6116ba565b61047f60048036036020811015610a5d57600080fd5b50356001600160a01b03166116c9565b6104fd60048036036020811015610a8357600080fd5b50356001600160a01b03166116db565b610ab960048036036020811015610aa957600080fd5b50356001600160a01b03166116f0565b6040805193151584526020840192909252151582820152519081900360600190f35b61056660048036036020811015610af157600080fd5b50356001600160a01b0316611716565b61062e611783565b61047f60048036036020811015610b1f57600080fd5b50356001600160a01b0316611792565b61047f61179d565b61062e6117a3565b61047f60048036036020811015610b5557600080fd5b50356001600160a01b03166117b2565b61047f60048036036020811015610b7b57600080fd5b50356001600160a01b031661187c565b61062e611947565b610bb960048036036020811015610ba957600080fd5b50356001600160a01b0316611956565b604080516001600160e01b03909316835263ffffffff90911660208301528051918290030190f35b61062e611980565b61056660048036036020811015610bff57600080fd5b50356001600160a01b031661198f565b61047f60048036036020811015610c2557600080fd5b50356001600160a01b0316611a56565b61047f611a68565b61062e611a6e565b610c4d611a7d565b604080516001600160e01b039092168252519081900360200190f35b61062e611a90565b61062e611a9f565b61047f60048036036060811015610c8f57600080fd5b506001600160a01b03813581169160208101359091169060400135611aae565b61062e611c2b565b61062e60048036036040811015610ccd57600080fd5b506001600160a01b038135169060200135611c3a565b61062e611c6f565b610bb960048036036020811015610d0157600080fd5b50356001600160a01b0316611c7e565b61047f60048036036040811015610d2757600080fd5b506001600160a01b038135169060200135611ca8565b6104fd60048036036040811015610d5357600080fd5b5080356001600160a01b0316906020013560ff16611cb4565b61047f611cf4565b6104fd60048036036040811015610d8a57600080fd5b506001600160a01b0381358116916020013516611cfa565b61047f60048036036020811015610db857600080fd5b50356001600160a01b0316611d1a565b61062e611de5565b61047f611df4565b61047f60048036036040811015610dee57600080fd5b506001600160a01b038135169060200135611dfa565b60276020526000908152604090205481565b60225481565b601360209081526000928352604080842090915290825290205481565b601d5481565b602c60209081526000928352604080842090915290825290205460ff1681565b6000610e6a82611ea5565b92915050565b610e9160405180606001604052806032815260200161317f60329139611fcf565b6015546001600160a01b03838116911614610ec7576001600160a01b0382166000908152600960205260409020610ec7906120f3565b6001600160a01b03838116600081815260326020908152604080832094871680845294825291829020805460ff1916861515908117909155825190815291517fc080966e9e93529edc1b244180c245bc60f3d86f1e690a17651a5e428746a8cd9281900390910190a3505050565b610fa28484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602080880282810182019093528782529093508792508691829185019084908082843760009201919091525061213d92505050565b50505050565b601e546001600160a01b031681565b600a546001600160a01b031681565b6110358585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602080890282810182019093528882529093508892508791829185019084908082843760009201919091525086925061227b915050565b5050505050565b6001546001600160a01b031681565b600061108b6040518060400160405280601881526020017f5f73657450726f746f636f6c50617573656428626f6f6c290000000000000000815250611fcf565b6018805483151562010000810262ff0000199092169190911790915560408051918252517fd7500633dd3ddd74daa7af62f8c8404c7fe4a81da179998db851696bed004b389181900360200190a15090565b60166020526000908152604090205481565b60006017548280821415611138576040805162461bcd60e51b815260206004820152601e60248201526000805160206132d6833981519152604482015290519081900360640190fd5b611140612300565b6017805490859055604080518281526020810187905281517f73747d68b346dce1e932bcd238282e7ac84c01569e1f8d0469c222fdc6e9d5a4929181900390910190a160005b9350505b5050919050565b60185460ff1681565b601260209081526000928352604080842090915290825290205481565b60185462010000900460ff1681565b601f6020526000908152604090205481565b60065481565b601b546001600160a01b03908116908490811682141561122f5760405162461bcd60e51b81526004018080602001828103825260228152602001806132f66022913960400191505060405180910390fd5b611237612300565b61124085612352565b601b546001600160a01b031615611259576112596123a5565b601b80546001600160a01b0319166001600160a01b038716908117909155601c859055601d849055604080518681526020810186905281517f7059037d74ee16b0fb06a4a30f3348dd2635f301f92e373c92899a25a522ef6e929181900390910190a25050505050565b6112cb612300565b6112d481612352565b6000816001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561130f57600080fd5b505afa158015611323573d6000803e3d6000fd5b505050506040513d602081101561133957600080fd5b50516033549091506001600160a01b038083169116146113a0576040805162461bcd60e51b815260206004820152601a60248201527f696e76616c6964207876732076746f6b656e2061646472657373000000000000604482015290519081900360640190fd5b6034546040516001600160a01b038085169216907f2565e1579c0926afb7113edbfd85373e85cadaa3e0346f04de19686a2bb86ed190600090a350603480546001600160a01b0319166001600160a01b0392909216919091179055565b6000610e6a8261256c565b610fa28484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602080880282810182019093528782529093508792508691829185019084908082843760009201919091525061267092505050565b61147f82826127ae565b5050565b600d818154811061149057fe5b6000918252602090912001546001600160a01b0316905081565b6000610e6a82612865565b60008183146114f55760405162461bcd60e51b815260040180806020018281038252603c8152602001806131b1603c913960400191505060405180910390fd5b6114ff8484612930565b90505b9392505050565b602b6020526000908152604090205481565b600a546000906001600160a01b03908116908390811682141561156f5760405162461bcd60e51b81526004018080602001828103825260228152602001806132f66022913960400191505060405180910390fd5b611577612300565b61158084612352565b600a80546001600160a01b038681166001600160a01b0319831681179093556040805191909216808252602082019390935281517f0613b6ee6a04f0d09f390e4d9318894b9f6ac7fd83897cd8d18896ba579c401e929181900390910190a16000611186565b601a54818082141561162d576040805162461bcd60e51b815260206004820152601e60248201526000805160206132d6833981519152604482015290519081900360640190fd5b611635612300565b601b546001600160a01b03161561164e5761164e6123a5565b601a805490849055604080518281526020810186905281517fe81d4ac15e5afa1e708e66664eddc697177423d950d133bda8262d8885e6da3b929181900390910190a150505050565b601c5481565b601854610100900460ff1681565b601b546001600160a01b031681565b6004546001600160a01b031681565b60146020526000908152604090205481565b602d6020526000908152604090205460ff1681565b60096020526000908152604090208054600182015460039092015460ff91821692911683565b61171e612300565b61172781612352565b6033546040516001600160a01b038084169216907ffe7fd0d872def0f65050e9f38fc6691d0c192c694a56f09b04bec5fb2ea61f2b90600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b6015546001600160a01b031681565b6000610e6a82612b2e565b60075481565b6025546001600160a01b031681565b6026546000906001600160a01b0390811690839081168214156118065760405162461bcd60e51b81526004018080602001828103825260228152602001806132f66022913960400191505060405180910390fd5b61180e612300565b61181784612352565b602680546001600160a01b038681166001600160a01b0319831617928390556040805192821680845293909116602083015280517f0f7eb572d1b3053a0a3a33c04151364cf88d163182a5e4e1088cb8e52321e08a9281900390910190a16000611186565b6015546000906001600160a01b0390811690839081168214156118d05760405162461bcd60e51b81526004018080602001828103825260228152602001806132f66022913960400191505060405180910390fd5b6118d8612300565b6118e184612352565b601580546001600160a01b038681166001600160a01b0319831681179093556040805191909216808252602082019390935281517fe1ddcb2dab8e5b03cfc8c67a0d5861d91d16f7bd2612fd381faf4541d212c9b2929181900390910190a16000611186565b6020546001600160a01b031681565b6010602052600090815260409020546001600160e01b03811690600160e01b900463ffffffff1682565b6002546001600160a01b031681565b6025546001600160a01b0390811690829081168214156119e05760405162461bcd60e51b81526004018080602001828103825260228152602001806132f66022913960400191505060405180910390fd5b6119e8612300565b6119f183612352565b602580546001600160a01b038581166001600160a01b0319831681179093556040805191909216808252602082019390935281517fa5ea5616d5f6dbbaa62fdfcf3856723216eed485c394d9e51ec8e6d40e1d1ac1929181900390910190a150505050565b602a6020526000908152604090205481565b60175481565b6033546001600160a01b031690565b6ec097ce7bc90715b34b9f100000000081565b6021546001600160a01b031681565b6031546001600160a01b031681565b602054600090611ac6906001600160a01b0316612ba9565b670de0b6b3a76400008210611b14576040805162461bcd60e51b815260206004820152600f60248201526e70657263656e74203e3d203130302560881b604482015290519081900360640190fd5b611b1d84612352565b611b2683612352565b6020805460218054602280546001600160a01b038a81166001600160a01b0319808816821789558b8316908616179095559188905560408051958316808752968601949094528351929091169390927f29f06ea15931797ebaed313d81d100963dc22cb213cb4ce2737b5a62b1a8b1e892918290030190a1604080516001600160a01b0380851682528816602082015281517f8de763046d7b8f08b6c3d03543de1d615309417842bb5d2d62f110f65809ddac929181900390910190a1604080518281526020810187905281517f0893f8f4101baaabbeb513f96761e7a36eb837403c82cc651c292a4abdc94ed7929181900390910190a16000979650505050505050565b6026546001600160a01b031681565b60086020528160005260406000208181548110611c5357fe5b6000918252602090912001546001600160a01b03169150829050565b6003546001600160a01b031681565b6011602052600090815260409020546001600160e01b03811690600160e01b900463ffffffff1682565b60006115028383612930565b6001600160a01b038216600090815260296020526040812081836008811115611cd957fe5b815260208101919091526040016000205460ff169392505050565b60055481565b603260209081526000928352604080842090915290825290205460ff1681565b6028546000906001600160a01b039081169083908116821415611d6e5760405162461bcd60e51b81526004018080602001828103825260228152602001806132f66022913960400191505060405180910390fd5b611d76612300565b611d7f84612352565b602880546001600160a01b038681166001600160a01b0319831681179093556040805191909216808252602082019390935281517f0f1eca7612e020f6e4582bcead0573eba4b5f7b56668754c6aed82ef12057dd4929181900390910190a16000611186565b6000546001600160a01b031681565b601a5481565b6000611e04612c0b565b60185460ff16158015611e1f5750601854610100900460ff16155b611e60576040805162461bcd60e51b815260206004820152600d60248201526c159052481a5cc81c185d5cd959609a1b604482015290519081900360640190fd5b6015546001600160a01b03163314611e8557611e7e600e6016612c5e565b9050610e6a565b6001600160a01b0383166000908152601660205260408120839055611502565b60006005548280821415611eee576040805162461bcd60e51b815260206004820152601e60248201526000805160206132d6833981519152604482015290519081900360640190fd5b611ef6612300565b611efe61316b565b506040805160208101909152848152611f1561316b565b506040805160208101909152670c7d713b49da00008152611f3461316b565b50604080516020810190915266b1a2bc2ec500008152611f548284612cc4565b80611f645750611f648184612ccb565b15611f7e57611f74600580612c5e565b955050505061118a565b600580549088905560408051828152602081018a905281517f3b9670cf975d26958e754b57098eaa2ac914d8d2a31b83257997b9f346110fd9929181900390910190a1600098975050505050505050565b602854604080516318c5e8ab60e01b81523360048201818152602483019384528551604484015285516001600160a01b03909516946318c5e8ab949293879391606490910190602085019080838360005b83811015612038578181015183820152602001612020565b50505050905090810190601f1680156120655780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561208357600080fd5b505afa158015612097573d6000803e3d6000fd5b505050506040513d60208110156120ad57600080fd5b50516120f0576040805162461bcd60e51b815260206004820152600d60248201526c1858d8d95cdcc819195b9a5959609a1b604482015290519081900360640190fd5b50565b805460ff166120f0576040805162461bcd60e51b81526020600482015260116024820152701b585c9ad95d081b9bdd081b1a5cdd1959607a1b604482015290519081900360640190fd5b61215e6040518060600160405280602981526020016132ad60299139611fcf565b81518151811580159061217057508082145b6121b1576040805162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a59081a5b9c1d5d609a1b604482015290519081900360640190fd5b60005b82811015611035578381815181106121c857fe5b6020026020010151601f60008784815181106121e057fe5b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000208190555084818151811061221857fe5b60200260200101516001600160a01b03167f6f1951b2aad10f3fc81b86d91105b413a5b3f847a34bbc5ce1904201b14438f685838151811061225657fe5b60200260200101516040518082815260200191505060405180910390a26001016121b4565b61229c60405180606001604052806029815260200161321760299139611fcf565b8251825160005b828110156122f85760005b828110156122ef576122e78783815181106122c557fe5b60200260200101518783815181106122d957fe5b602002602001015187612cd2565b6001016122ae565b506001016122a3565b505050505050565b6000546001600160a01b03163314612350576040805162461bcd60e51b815260206004820152600e60248201526d37b7363c9030b236b4b71031b0b760911b604482015290519081900360640190fd5b565b6001600160a01b0381166120f0576040805162461bcd60e51b815260206004820152601560248201527463616e2774206265207a65726f206164647265737360581b604482015290519081900360640190fd5b601c5415806123bc5750601c546123ba612d8a565b105b156123c657612350565b603354604080516370a0823160e01b815230600482015290516001600160a01b039092169160009183916370a0823191602480820192602092909190829003018186803b15801561241657600080fd5b505afa15801561242a573d6000803e3d6000fd5b505050506040513d602081101561244057600080fd5b5051905080612450575050612350565b60008061246661245e612d8a565b601c54612d8e565b90506000612476601a5483612dc8565b90508084106124875780925061248b565b8392505b601d5483101561249f575050505050612350565b6124a7612d8a565b601c55601b546124ca906001600160a01b0387811691168563ffffffff612e0a16565b6040805184815290517ff6d4b8f74d85a6e2d7a50225957b8a6cfec69ad92f5905627260541aa0a5565d9181900360200190a1601b60009054906101000a90046001600160a01b03166001600160a01b031663faa1809e6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561254d57600080fd5b505af1158015612561573d6000803e3d6000fd5b505050505050505050565b600060065482808214156125b5576040805162461bcd60e51b815260206004820152601e60248201526000805160206132d6833981519152604482015290519081900360640190fd5b6125d660405180606001604052806021815260200161324060219139611fcf565b670de0b6b3a7640000841015612626576040805162461bcd60e51b815260206004820152601060248201526f0d2dcc6cadce8d2ecca40784062ca62760831b604482015290519081900360640190fd5b6006805490859055604080518281526020810187905281517faeba5a6c40a8ac138134bff1aaa65debf25971188a58804bad717f82f0ec1316929181900390910190a16000611186565b61269160405180606001604052806029815260200161326160299139611fcf565b8151815181158015906126a357508082145b6126e4576040805162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a59081a5b9c1d5d609a1b604482015290519081900360640190fd5b60005b82811015611035578381815181106126fb57fe5b60200260200101516027600087848151811061271357fe5b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000208190555084818151811061274b57fe5b60200260200101516001600160a01b03167f9e0ad9cee10bdf36b7fbd38910c0bdff0f275ace679b45b922381c2723d676f885838151811061278957fe5b60200260200101516040518082815260200191505060405180910390a26001016126e7565b6127cf60405180606001604052806023815260200161328a60239139611fcf565b6015546001600160a01b03838116911614612805576001600160a01b0382166000908152600960205260409020612805906120f3565b6001600160a01b0382166000818152602d6020908152604091829020805460ff1916851515908117909155825190815291517f03561d5280ebb02280893b1d60978e4a27e7654a149c5d0e7c2cf65389ce16949281900390910190a25050565b6004546000906001600160a01b0390811690839081168214156128b95760405162461bcd60e51b81526004018080602001828103825260228152602001806132f66022913960400191505060405180910390fd5b6128c1612300565b6128ca84612352565b600480546001600160a01b038681166001600160a01b0319831681179093556040805191909216808252602082019390935281517fd52b2b9b7e9ee655fcb95d2e5b9e0c9f69e7ef2b8e9d2d0ea78402d576d22e22929181900390910190a16000611186565b6001600160a01b0382166000908152600960205260408120600101548280821415612990576040805162461bcd60e51b815260206004820152601e60248201526000805160206132d6833981519152604482015290519081900360640190fd5b6129b160405180606001604052806025815260200161331860259139611fcf565b6129ba85612352565b6001600160a01b03851660009081526009602052604090206129db816120f3565b6129e361316b565b5060408051602081019091528581526129fa61316b565b506040805160208101909152670c7d713b49da00008152612a1b8183612cc4565b15612a3657612a2c60066008612c5e565b9550505050612b26565b8615801590612abf5750600480546040805163fc57d4df60e01b81526001600160a01b038c8116948201949094529051929091169163fc57d4df91602480820192602092909190829003018186803b158015612a9157600080fd5b505afa158015612aa5573d6000803e3d6000fd5b505050506040513d6020811015612abb57600080fd5b5051155b15612ad057612a2c600d6009612c5e565b6001830180549088905560408051828152602081018a905281516001600160a01b038c16927f70483e6592cd5182d45ac970e05bc62cdcc90e9d8ef2c2dbe686cf383bcd7fc5928290030190a260009650505050505b505092915050565b6000612b38612300565b612b4182612352565b603180546001600160a01b038481166001600160a01b0319831681179093556040805191909216808252602082019390935281517fcb20dab7409e4fb972d9adccb39530520b226ce6940d85c9523a499b950b6ea3929181900390910190a160009392505050565b6000546001600160a01b0316331480612bca5750336001600160a01b038216145b6120f0576040805162461bcd60e51b815260206004820152600d60248201526c1858d8d95cdcc819195b9a5959609a1b604482015290519081900360640190fd5b60185462010000900460ff1615612350576040805162461bcd60e51b81526020600482015260126024820152711c1c9bdd1bd8dbdb081a5cc81c185d5cd95960721b604482015290519081900360640190fd5b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa0836013811115612c8d57fe5b836018811115612c9957fe5b604080519283526020830191909152600082820152519081900360600190a182601381111561150257fe5b5190511090565b5190511190565b6001600160a01b0383166000908152600960205260409020612cf3906120f3565b6001600160a01b03831660009081526029602052604081208291846008811115612d1957fe5b81526020810191909152604001600020805460ff1916911515919091179055816008811115612d4457fe5b60408051831515815290516001600160a01b038616917f35007a986bcd36d2f73fc7f1b73762e12eadb4406dd163194950fd3b5a6a827d919081900360200190a3505050565b4390565b60006115028383604051806040016040528060158152602001747375627472616374696f6e20756e646572666c6f7760581b815250612e61565b600061150283836040518060400160405280601781526020017f6d756c7469706c69636174696f6e206f766572666c6f77000000000000000000815250612ef8565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052612e5c908490612f77565b505050565b60008184841115612ef05760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612eb5578181015183820152602001612e9d565b50505050905090810190601f168015612ee25780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000831580612f05575082155b15612f1257506000611502565b83830283858281612f1f57fe5b04148390612f6e5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315612eb5578181015183820152602001612e9d565b50949350505050565b612f89826001600160a01b031661312f565b612fda576040805162461bcd60e51b815260206004820152601f60248201527f5361666542455032303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b60006060836001600160a01b0316836040518082805190602001908083835b602083106130185780518252601f199092019160209182019101612ff9565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461307a576040519150601f19603f3d011682016040523d82523d6000602084013e61307f565b606091505b5091509150816130d6576040805162461bcd60e51b815260206004820181905260248201527f5361666542455032303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b805115610fa2578080602001905160208110156130f257600080fd5b5051610fa25760405162461bcd60e51b815260040180806020018281038252602a8152602001806131ed602a913960400191505060405180910390fd5b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061316357508115155b949350505050565b604051806020016040528060008152509056fe5f736574466f726365644c69717569646174696f6e466f725573657228616464726573732c616464726573732c626f6f6c29636f6c6c61746572616c20666163746f7220616e64206c69717569646174696f6e207468726573686f6c64206d757374206265207468652073616d655361666542455032303a204245503230206f7065726174696f6e20646964206e6f7420737563636565645f736574416374696f6e7350617573656428616464726573735b5d2c75696e74385b5d2c626f6f6c295f7365744c69717569646174696f6e496e63656e746976652875696e74323536295f7365744d61726b6574537570706c794361707328616464726573735b5d2c75696e743235365b5d295f736574466f726365644c69717569646174696f6e28616464726573732c626f6f6c295f7365744d61726b6574426f72726f774361707328616464726573735b5d2c75696e743235365b5d296f6c642076616c75652069732073616d65206173206e65772076616c756500006f6c6420616464726573732069732073616d65206173206e657720616464726573735f736574436f6c6c61746572616c466163746f7228616464726573732c75696e7432353629a265627a7a72315820a8733c4dc45d66f1513f5517ede6577eaf52045ef6720dfaa444062d2e59489264736f6c63430005100032",
  "devdoc": {
    "author": "Venus",
    "details": "This facet contains all the setters for the states",
    "methods": {
      "_setAccessControl(address)": {
        "details": "Allows the contract admin to set the address of access control of this contract",
        "params": {
          "newAccessControlAddress": "New address for the access control"
        },
        "return": "uint256 0=success, otherwise will revert"
      },
      "_setActionsPaused(address[],uint8[],bool)": {
        "details": "Allows a privileged role to pause/unpause the protocol action state",
        "params": {
          "actions_": "List of action ids to pause/unpause",
          "markets_": "Markets to pause/unpause the actions on",
          "paused_": "The new paused state (true=paused, false=unpaused)"
        }
      },
      "_setCloseFactor(uint256)": {
        "details": "Allows the contract admin to set the closeFactor used to liquidate borrows",
        "params": {
          "newCloseFactorMantissa": "New close factor, scaled by 1e18"
        },
        "return": "uint256 0=success, otherwise will revert"
      },
      "_setCollateralFactor(address,uint256)": {
        "details": "Allows a privileged role to set the collateralFactorMantissa",
        "params": {
          "newCollateralFactorMantissa": "The new collateral factor, scaled by 1e18",
          "vToken": "The market to set the factor on"
        },
        "return": "uint256 0=success, otherwise a failure. (See ErrorReporter for details)"
      },
      "_setComptrollerLens(address)": {
        "details": "Set ComptrollerLens contract address",
        "params": {
          "comptrollerLens_": "The new ComptrollerLens contract address to be set"
        },
        "return": "uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)"
      },
      "_setForcedLiquidation(address,bool)": {
        "details": "Allows a privileged role to set enable/disable forced liquidations",
        "params": {
          "enable": "Whether to enable forced liquidations",
          "vTokenBorrowed": "Borrowed vToken"
        }
      },
      "_setForcedLiquidationForUser(address,address,bool)": {
        "params": {
          "borrower": "The address of the borrower",
          "enable": "Whether to enable forced liquidations",
          "vTokenBorrowed": "Borrowed vToken"
        }
      },
      "_setLiquidationIncentive(uint256)": {
        "details": "Allows a privileged role to set the liquidationIncentiveMantissa",
        "params": {
          "newLiquidationIncentiveMantissa": "New liquidationIncentive scaled by 1e18"
        },
        "return": "uint256 0=success, otherwise a failure. (See ErrorReporter for details)"
      },
      "_setLiquidatorContract(address)": {
        "details": "Allows the contract admin to update the address of liquidator contract",
        "params": {
          "newLiquidatorContract_": "The new address of the liquidator contract"
        }
      },
      "_setMarketBorrowCaps(address[],uint256[])": {
        "details": "Allows a privileged role to set the borrowing cap for a vToken market. A borrow cap of 0 corresponds to Borrow not allowed",
        "params": {
          "newBorrowCaps": "The new borrow cap values in underlying to be set. A value of 0 corresponds to Borrow not allowed",
          "vTokens": "The addresses of the markets (tokens) to change the borrow caps for"
        }
      },
      "_setMarketSupplyCaps(address[],uint256[])": {
        "details": "Allows a privileged role to set the supply cap for a vToken. A supply cap of 0 corresponds to Minting NotAllowed",
        "params": {
          "newSupplyCaps": "The new supply cap values in underlying to be set. A value of 0 corresponds to Minting NotAllowed",
          "vTokens": "The addresses of the markets (tokens) to change the supply caps for"
        }
      },
      "_setPauseGuardian(address)": {
        "details": "Allows the contract admin to change the Pause Guardian",
        "params": {
          "newPauseGuardian": "The address of the new Pause Guardian"
        },
        "return": "uint256 0=success, otherwise a failure. (See enum Error for details)"
      },
      "_setPriceOracle(address)": {
        "details": "Allows the contract admin to set a new price oracle used by the Comptroller",
        "params": {
          "newOracle": "The new price oracle to set"
        },
        "return": "uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)"
      },
      "_setPrimeToken(address)": {
        "params": {
          "_prime": "The new prime token contract to be set"
        },
        "return": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
      },
      "_setProtocolPaused(bool)": {
        "details": "Allows a privileged role to pause/unpause protocol",
        "params": {
          "state": "The new state (true=paused, false=unpaused)"
        },
        "return": "bool The updated state of the protocol"
      },
      "_setTreasuryData(address,address,uint256)": {
        "params": {
          "newTreasuryAddress": "The new address of the treasury to be set",
          "newTreasuryGuardian": "The new address of the treasury guardian to be set",
          "newTreasuryPercent": "The new treasury percent to be set"
        },
        "return": "uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)"
      },
      "_setVAIController(address)": {
        "details": "Admin function to set a new VAI controller",
        "return": "uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)"
      },
      "_setVAIMintRate(uint256)": {
        "params": {
          "newVAIMintRate": "The new VAI mint rate to be set"
        },
        "return": "uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)"
      },
      "_setVAIVaultInfo(address,uint256,uint256)": {
        "params": {
          "minReleaseAmount_": "The minimum release amount to VAI Vault",
          "releaseStartBlock_": "The start block of release to VAI Vault",
          "vault_": "The address of the VAI Vault"
        }
      },
      "_setVenusVAIVaultRate(uint256)": {
        "params": {
          "venusVAIVaultRate_": "The amount of XVS wei per block to distribute to VAI Vault"
        }
      },
      "_setXVSToken(address)": {
        "params": {
          "xvs_": "The address of the XVS token"
        }
      },
      "_setXVSVToken(address)": {
        "params": {
          "xvsVToken_": "The address of the XVS vToken"
        }
      },
      "actionPaused(address,uint8)": {
        "params": {
          "action": "Action id",
          "market": "vToken address"
        }
      },
      "getXVSAddress()": {
        "return": "The address of XVS token"
      },
      "setActionsPaused(address[],uint8[],bool)": {
        "params": {
          "actions_": "List of action ids to pause/unpause",
          "markets_": "Markets to pause/unpause the actions on",
          "paused_": "The new paused state (true=paused, false=unpaused)"
        }
      },
      "setCloseFactor(uint256)": {
        "params": {
          "newCloseFactorMantissa": "New close factor, scaled by 1e18"
        },
        "return": "uint256 0=success, otherwise will revert"
      },
      "setCollateralFactor(address,uint256,uint256)": {
        "params": {
          "newCollateralFactorMantissa": "The new collateral factor, scaled by 1e18",
          "newLiquidationThresholdMantissa": "The new liquidation threshold, scaled by 1e18",
          "vToken": "The market to set the factor on"
        },
        "return": "uint256 0=success, otherwise a failure. (See ErrorReporter for details)"
      },
      "setForcedLiquidation(address,bool)": {
        "params": {
          "enable": "Whether to enable forced liquidations",
          "vTokenBorrowed": "Borrowed vToken"
        }
      },
      "setLiquidationIncentive(uint256)": {
        "params": {
          "newLiquidationIncentiveMantissa": "New liquidationIncentive scaled by 1e18"
        },
        "return": "uint256 0=success, otherwise a failure. (See ErrorReporter for details)"
      },
      "setMarketBorrowCaps(address[],uint256[])": {
        "params": {
          "newBorrowCaps": "The new borrow cap values in underlying to be set. A value of 0 corresponds to Borrow not allowed",
          "vTokens": "The addresses of the markets (tokens) to change the borrow caps for"
        }
      },
      "setMarketSupplyCaps(address[],uint256[])": {
        "params": {
          "newSupplyCaps": "The new supply cap values in underlying to be set. A value of 0 corresponds to Minting NotAllowed",
          "vTokens": "The addresses of the markets (tokens) to change the supply caps for"
        }
      },
      "setMintedVAIOf(address,uint256)": {
        "params": {
          "amount": "The amount of VAI to set to the account",
          "owner": "The address of the account to set"
        },
        "return": "The number of minted VAI by `owner`"
      },
      "setPriceOracle(address)": {
        "params": {
          "newOracle": "The new price oracle to set"
        },
        "return": "uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)"
      },
      "setPrimeToken(address)": {
        "params": {
          "_prime": "The new prime token contract to be set"
        },
        "return": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
      }
    },
    "title": "SetterFacet"
  },
  "userdoc": {
    "methods": {
      "_setAccessControl(address)": {
        "notice": "Sets the address of the access control of this contract"
      },
      "_setActionsPaused(address[],uint8[],bool)": {
        "notice": "Pause/unpause certain actions"
      },
      "_setCloseFactor(uint256)": {
        "notice": "Sets the closeFactor used when liquidating borrows"
      },
      "_setCollateralFactor(address,uint256)": {
        "notice": "Sets the collateralFactor for a market"
      },
      "_setForcedLiquidation(address,bool)": {
        "notice": "Enables forced liquidations for a market. If forced liquidation is enabled, borrows in the market may be liquidated regardless of the account liquidity"
      },
      "_setForcedLiquidationForUser(address,address,bool)": {
        "notice": "Enables forced liquidations for user's borrows in a certain market. If forced liquidation is enabled, user's borrows in the market may be liquidated regardless of the account liquidity. Forced liquidation may be enabled for a user even if it is not enabled for the entire market."
      },
      "_setLiquidationIncentive(uint256)": {
        "notice": "Sets liquidationIncentive"
      },
      "_setLiquidatorContract(address)": {
        "notice": "Update the address of the liquidator contract"
      },
      "_setMarketBorrowCaps(address[],uint256[])": {
        "notice": "Set the given borrow caps for the given vToken market Borrowing that brings total borrows to or above borrow cap will revert"
      },
      "_setMarketSupplyCaps(address[],uint256[])": {
        "notice": "Set the given supply caps for the given vToken market Supply that brings total Supply to or above supply cap will revert"
      },
      "_setPauseGuardian(address)": {
        "notice": "Admin function to change the Pause Guardian"
      },
      "_setPriceOracle(address)": {
        "notice": "Sets a new price oracle for the comptroller"
      },
      "_setPrimeToken(address)": {
        "notice": "Sets the prime token contract for the comptroller"
      },
      "_setProtocolPaused(bool)": {
        "notice": "Set whole protocol pause/unpause state"
      },
      "_setTreasuryData(address,address,uint256)": {
        "notice": "Set the treasury data."
      },
      "_setVAIController(address)": {
        "notice": "Sets a new VAI controller"
      },
      "_setVAIMintRate(uint256)": {
        "notice": "Set the VAI mint rate"
      },
      "_setVAIVaultInfo(address,uint256,uint256)": {
        "notice": "Set the VAI Vault infos"
      },
      "_setVenusVAIVaultRate(uint256)": {
        "notice": "Set the amount of XVS distributed per block to VAI Vault"
      },
      "_setXVSToken(address)": {
        "notice": "Set the address of the XVS token"
      },
      "_setXVSVToken(address)": {
        "notice": "Set the address of the XVS vToken"
      },
      "actionPaused(address,uint8)": {
        "notice": "Checks if a certain action is paused on a market"
      },
      "getXVSAddress()": {
        "notice": "Returns the XVS address"
      },
      "setActionsPaused(address[],uint8[],bool)": {
        "notice": "Alias to _setActionsPaused to support the Isolated Lending Comptroller Interface"
      },
      "setCloseFactor(uint256)": {
        "notice": "Alias to _setCloseFactor to support the Isolated Lending Comptroller Interface"
      },
      "setCollateralFactor(address,uint256,uint256)": {
        "notice": "Alias to _setCollateralFactor to support the Isolated Lending Comptroller Interface"
      },
      "setForcedLiquidation(address,bool)": {
        "notice": "Alias to _setForcedLiquidation to support the Isolated Lending Comptroller Interface"
      },
      "setLiquidationIncentive(uint256)": {
        "notice": "Alias to _setLiquidationIncentive to support the Isolated Lending Comptroller Interface"
      },
      "setMarketBorrowCaps(address[],uint256[])": {
        "notice": "Alias to _setMarketBorrowCaps to support the Isolated Lending Comptroller Interface"
      },
      "setMarketSupplyCaps(address[],uint256[])": {
        "notice": "Alias to _setMarketSupplyCaps to support the Isolated Lending Comptroller Interface"
      },
      "setMintedVAIOf(address,uint256)": {
        "notice": "Set the minted VAI amount of the `owner`"
      },
      "setPriceOracle(address)": {
        "notice": "Alias to _setPriceOracle to support the Isolated Lending Comptroller Interface"
      },
      "setPrimeToken(address)": {
        "notice": "Alias to _setPrimeToken to support the Isolated Lending Comptroller Interface"
      }
    },
    "notice": "This facet contract contains all the configurational setter functions"
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2551,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2553,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "pendingAdmin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2555,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "comptrollerImplementation",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2557,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "pendingComptrollerImplementation",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2564,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "oracle",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(PriceOracle)12814"
      },
      {
        "astId": 2566,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "closeFactorMantissa",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2568,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "liquidationIncentiveMantissa",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2570,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "maxAssets",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2575,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "accountAssets",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_array(t_contract(VToken)23952)dyn_storage)"
      },
      {
        "astId": 2590,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "markets",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_struct(Market)2586_storage)"
      },
      {
        "astId": 2592,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "pauseGuardian",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 2594,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "_mintGuardianPaused",
        "offset": 20,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 2596,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "_borrowGuardianPaused",
        "offset": 21,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 2598,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "transferGuardianPaused",
        "offset": 22,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 2600,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "seizeGuardianPaused",
        "offset": 23,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 2604,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "mintGuardianPaused",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2608,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "borrowGuardianPaused",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2616,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "allMarkets",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_contract(VToken)23952)dyn_storage"
      },
      {
        "astId": 2618,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "venusRate",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 2622,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "venusSpeeds",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2626,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "venusSupplyState",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_struct(VenusMarketState)2613_storage)"
      },
      {
        "astId": 2630,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "venusBorrowState",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_struct(VenusMarketState)2613_storage)"
      },
      {
        "astId": 2636,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "venusSupplierIndex",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2642,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "venusBorrowerIndex",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2646,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "venusAccrued",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2648,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "vaiController",
        "offset": 0,
        "slot": "21",
        "type": "t_contract(VAIControllerInterface)16112"
      },
      {
        "astId": 2652,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "mintedVAIs",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2654,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "vaiMintRate",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 2656,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "mintVAIGuardianPaused",
        "offset": 0,
        "slot": "24",
        "type": "t_bool"
      },
      {
        "astId": 2658,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "repayVAIGuardianPaused",
        "offset": 1,
        "slot": "24",
        "type": "t_bool"
      },
      {
        "astId": 2660,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "protocolPaused",
        "offset": 2,
        "slot": "24",
        "type": "t_bool"
      },
      {
        "astId": 2662,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "venusVAIRate",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 2667,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "venusVAIVaultRate",
        "offset": 0,
        "slot": "26",
        "type": "t_uint256"
      },
      {
        "astId": 2669,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "vaiVaultAddress",
        "offset": 0,
        "slot": "27",
        "type": "t_address"
      },
      {
        "astId": 2671,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "releaseStartBlock",
        "offset": 0,
        "slot": "28",
        "type": "t_uint256"
      },
      {
        "astId": 2673,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "minReleaseAmount",
        "offset": 0,
        "slot": "29",
        "type": "t_uint256"
      },
      {
        "astId": 2678,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "borrowCapGuardian",
        "offset": 0,
        "slot": "30",
        "type": "t_address"
      },
      {
        "astId": 2682,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "borrowCaps",
        "offset": 0,
        "slot": "31",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2687,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "treasuryGuardian",
        "offset": 0,
        "slot": "32",
        "type": "t_address"
      },
      {
        "astId": 2689,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "treasuryAddress",
        "offset": 0,
        "slot": "33",
        "type": "t_address"
      },
      {
        "astId": 2691,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "treasuryPercent",
        "offset": 0,
        "slot": "34",
        "type": "t_uint256"
      },
      {
        "astId": 2698,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "venusContributorSpeeds",
        "offset": 0,
        "slot": "35",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2702,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "lastContributorBlock",
        "offset": 0,
        "slot": "36",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2707,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "liquidatorContract",
        "offset": 0,
        "slot": "37",
        "type": "t_address"
      },
      {
        "astId": 2712,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "comptrollerLens",
        "offset": 0,
        "slot": "38",
        "type": "t_contract(ComptrollerLensInterface)2526"
      },
      {
        "astId": 2719,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "supplyCaps",
        "offset": 0,
        "slot": "39",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2724,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "accessControl",
        "offset": 0,
        "slot": "40",
        "type": "t_address"
      },
      {
        "astId": 2730,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "_actionPaused",
        "offset": 0,
        "slot": "41",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 2737,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "venusBorrowSpeeds",
        "offset": 0,
        "slot": "42",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2741,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "venusSupplySpeeds",
        "offset": 0,
        "slot": "43",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2750,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "approvedDelegates",
        "offset": 0,
        "slot": "44",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2757,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "isForcedLiquidationEnabled",
        "offset": 0,
        "slot": "45",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2775,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "_selectorToFacetAndPosition",
        "offset": 0,
        "slot": "46",
        "type": "t_mapping(t_bytes4,t_struct(FacetAddressAndPosition)2765_storage)"
      },
      {
        "astId": 2779,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "_facetFunctionSelectors",
        "offset": 0,
        "slot": "47",
        "type": "t_mapping(t_address,t_struct(FacetFunctionSelectors)2771_storage)"
      },
      {
        "astId": 2782,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "_facetAddresses",
        "offset": 0,
        "slot": "48",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2787,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "prime",
        "offset": 0,
        "slot": "49",
        "type": "t_contract(IPrime)12991"
      },
      {
        "astId": 2796,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "isForcedLiquidationEnabledForUser",
        "offset": 0,
        "slot": "50",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2801,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "xvs",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 2803,
        "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
        "label": "xvsVToken",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes4)dyn_storage": {
        "base": "t_bytes4",
        "encoding": "dynamic_array",
        "label": "bytes4[]",
        "numberOfBytes": "32"
      },
      "t_array(t_contract(VToken)23952)dyn_storage": {
        "base": "t_contract(VToken)23952",
        "encoding": "dynamic_array",
        "label": "contract VToken[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_contract(ComptrollerLensInterface)2526": {
        "encoding": "inplace",
        "label": "contract ComptrollerLensInterface",
        "numberOfBytes": "20"
      },
      "t_contract(IPrime)12991": {
        "encoding": "inplace",
        "label": "contract IPrime",
        "numberOfBytes": "20"
      },
      "t_contract(PriceOracle)12814": {
        "encoding": "inplace",
        "label": "contract PriceOracle",
        "numberOfBytes": "20"
      },
      "t_contract(VAIControllerInterface)16112": {
        "encoding": "inplace",
        "label": "contract VAIControllerInterface",
        "numberOfBytes": "20"
      },
      "t_contract(VToken)23952": {
        "encoding": "inplace",
        "label": "contract VToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_contract(VToken)23952)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract VToken[])",
        "numberOfBytes": "32",
        "value": "t_array(t_contract(VToken)23952)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_struct(FacetFunctionSelectors)2771_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ComptrollerV13Storage.FacetFunctionSelectors)",
        "numberOfBytes": "32",
        "value": "t_struct(FacetFunctionSelectors)2771_storage"
      },
      "t_mapping(t_address,t_struct(Market)2586_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ComptrollerV1Storage.Market)",
        "numberOfBytes": "32",
        "value": "t_struct(Market)2586_storage"
      },
      "t_mapping(t_address,t_struct(VenusMarketState)2613_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ComptrollerV1Storage.VenusMarketState)",
        "numberOfBytes": "32",
        "value": "t_struct(VenusMarketState)2613_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_struct(FacetAddressAndPosition)2765_storage)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => struct ComptrollerV13Storage.FacetAddressAndPosition)",
        "numberOfBytes": "32",
        "value": "t_struct(FacetAddressAndPosition)2765_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(FacetAddressAndPosition)2765_storage": {
        "encoding": "inplace",
        "label": "struct ComptrollerV13Storage.FacetAddressAndPosition",
        "members": [
          {
            "astId": 2762,
            "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
            "label": "facetAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2764,
            "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
            "label": "functionSelectorPosition",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(FacetFunctionSelectors)2771_storage": {
        "encoding": "inplace",
        "label": "struct ComptrollerV13Storage.FacetFunctionSelectors",
        "members": [
          {
            "astId": 2768,
            "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
            "label": "functionSelectors",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes4)dyn_storage"
          },
          {
            "astId": 2770,
            "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
            "label": "facetAddressPosition",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Market)2586_storage": {
        "encoding": "inplace",
        "label": "struct ComptrollerV1Storage.Market",
        "members": [
          {
            "astId": 2577,
            "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
            "label": "isListed",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2579,
            "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
            "label": "collateralFactorMantissa",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2583,
            "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
            "label": "accountMembership",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 2585,
            "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
            "label": "isVenus",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(VenusMarketState)2613_storage": {
        "encoding": "inplace",
        "label": "struct ComptrollerV1Storage.VenusMarketState",
        "members": [
          {
            "astId": 2610,
            "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
            "label": "index",
            "offset": 0,
            "slot": "0",
            "type": "t_uint224"
          },
          {
            "astId": 2612,
            "contract": "contracts/Comptroller/Diamond/facets/SetterFacet.sol:SetterFacet",
            "label": "block",
            "offset": 28,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}