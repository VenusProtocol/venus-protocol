{
  "address": "0x549ECe7d8Fe25343189EB09F6214B0d9Bc072F06",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "comptroller_",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "vBnb_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "wBNB_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "comptrollerLens_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        }
      ],
      "name": "AllowlistEntryNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        }
      ],
      "name": "AlreadyAllowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "AlreadyRestricted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "errorCode",
          "type": "uint256"
        }
      ],
      "name": "LiquidationFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        }
      ],
      "name": "LiquidationNotAllowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        }
      ],
      "name": "MarketNotListed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "NoRestrictionsExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "errorCode",
          "type": "uint256"
        }
      ],
      "name": "SnapshotError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxTreasuryPercentMantissa",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "treasuryPercentMantissa_",
          "type": "uint256"
        }
      ],
      "name": "TreasuryPercentTooHigh",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "calledContract",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "methodSignature",
          "type": "string"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaiDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minLiquidatableVAI",
          "type": "uint256"
        }
      ],
      "name": "VAIDebtTooHigh",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "VTokenTransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expected",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        }
      ],
      "name": "WrongTransactionAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddressNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        }
      ],
      "name": "AllowlistEntryAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        }
      ],
      "name": "AllowlistEntryRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ForceVAILiquidationPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ForceVAILiquidationResumed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vTokenBorrowed",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "vTokenCollateral",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seizeTokensForTreasury",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seizeTokensForLiquidator",
          "type": "uint256"
        }
      ],
      "name": "LiquidateBorrowedTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "LiquidationRestricted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "LiquidationRestrictionsDisabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAccessControlManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAccessControlManager",
          "type": "address"
        }
      ],
      "name": "NewAccessControlManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPercent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPercent",
          "type": "uint256"
        }
      ],
      "name": "NewLiquidationTreasuryPercent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMinLiquidatableVAI",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinLiquidatableVAI",
          "type": "uint256"
        }
      ],
      "name": "NewMinLiquidatableVAI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPendingRedeemChunkLength",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPendingRedeemChunkLength",
          "type": "uint256"
        }
      ],
      "name": "NewPendingRedeemChunkLength",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldProtocolShareReserve",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newProtocolShareReserves",
          "type": "address"
        }
      ],
      "name": "NewProtocolShareReserve",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reducedAmount",
          "type": "uint256"
        }
      ],
      "name": "ProtocolLiquidationIncentiveTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accessControlManager",
      "outputs": [
        {
          "internalType": "contract IAccessControlManagerV8",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        }
      ],
      "name": "addToAllowlist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedLiquidatorsByAccount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comptroller",
      "outputs": [
        {
          "internalType": "contract IComptroller",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comptrollerLens",
      "outputs": [
        {
          "internalType": "contract ComptrollerLensInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "forceVAILiquidate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treasuryPercentMantissa_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "accessControlManager_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "protocolShareReserve_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "internalType": "contract IVToken",
          "name": "vTokenCollateral",
          "type": "address"
        }
      ],
      "name": "liquidateBorrow",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "liquidationRestricted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minLiquidatableVAI",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseForceVAILiquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pendingRedeem",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolShareReserve",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reduceReserves",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        }
      ],
      "name": "removeFromAllowlist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "restrictLiquidation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resumeForceVAILiquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "accessControlManager_",
          "type": "address"
        }
      ],
      "name": "setAccessControlManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minLiquidatableVAI_",
          "type": "uint256"
        }
      ],
      "name": "setMinLiquidatableVAI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newLength_",
          "type": "uint256"
        }
      ],
      "name": "setPendingRedeemChunkLength",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "protocolShareReserve_",
          "type": "address"
        }
      ],
      "name": "setProtocolShareReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newTreasuryPercentMantissa",
          "type": "uint256"
        }
      ],
      "name": "setTreasuryPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryPercentMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "unrestrictLiquidation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vBnb",
      "outputs": [
        {
          "internalType": "contract IVBNB",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaiController",
      "outputs": [
        {
          "internalType": "contract IVAIController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wBNB",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0043eec8a7c87bb104a0b5e595a00b90a787e46d54802910076b3cdee50d1e03",
  "receipt": {
    "to": null,
    "from": "0x33C6476F88eeA28D7E7900F759B4597704Ef95B7",
    "contractAddress": "0x549ECe7d8Fe25343189EB09F6214B0d9Bc072F06",
    "transactionIndex": 0,
    "gasUsed": "2866231",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x218f3e69914c38adeb83b026e3a232c804d7d94dcfa399229e88f58bd0e1ed34",
    "transactionHash": "0x0043eec8a7c87bb104a0b5e595a00b90a787e46d54802910076b3cdee50d1e03",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 64647602,
        "transactionHash": "0x0043eec8a7c87bb104a0b5e595a00b90a787e46d54802910076b3cdee50d1e03",
        "address": "0x549ECe7d8Fe25343189EB09F6214B0d9Bc072F06",
        "topics": ["0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0x218f3e69914c38adeb83b026e3a232c804d7d94dcfa399229e88f58bd0e1ed34"
      }
    ],
    "blockNumber": 64647602,
    "cumulativeGasUsed": "2866231",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x94d1820b2D1c7c7452A163983Dc888CEC546b77D",
    "0x2E7222e51c0f6e98610A1543Aa3836E092CDe62c",
    "0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd",
    "0x8AEA11B6b414Ce39F086563CeFA4e154368f9eFb"
  ],
  "numDeployments": 2,
  "solcInputHash": "afad615deb23556b23fa1a0101f6bced",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"comptroller_\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"vBnb_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wBNB_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"comptrollerLens_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"AllowlistEntryNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"AlreadyAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"AlreadyRestricted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"LiquidationFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"LiquidationNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"}],\"name\":\"MarketNotListed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"NoRestrictionsExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"SnapshotError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTreasuryPercentMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryPercentMantissa_\",\"type\":\"uint256\"}],\"name\":\"TreasuryPercentTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"calledContract\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"methodSignature\",\"type\":\"string\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaiDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLiquidatableVAI\",\"type\":\"uint256\"}],\"name\":\"VAIDebtTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VTokenTransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"WrongTransactionAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"AllowlistEntryAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"AllowlistEntryRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ForceVAILiquidationPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ForceVAILiquidationResumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vTokenBorrowed\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vTokenCollateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seizeTokensForTreasury\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seizeTokensForLiquidator\",\"type\":\"uint256\"}],\"name\":\"LiquidateBorrowedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"LiquidationRestricted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"LiquidationRestrictionsDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAccessControlManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAccessControlManager\",\"type\":\"address\"}],\"name\":\"NewAccessControlManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPercent\",\"type\":\"uint256\"}],\"name\":\"NewLiquidationTreasuryPercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMinLiquidatableVAI\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinLiquidatableVAI\",\"type\":\"uint256\"}],\"name\":\"NewMinLiquidatableVAI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPendingRedeemChunkLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPendingRedeemChunkLength\",\"type\":\"uint256\"}],\"name\":\"NewPendingRedeemChunkLength\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldProtocolShareReserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newProtocolShareReserves\",\"type\":\"address\"}],\"name\":\"NewProtocolShareReserve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reducedAmount\",\"type\":\"uint256\"}],\"name\":\"ProtocolLiquidationIncentiveTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accessControlManager\",\"outputs\":[{\"internalType\":\"contract IAccessControlManagerV8\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"addToAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedLiquidatorsByAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contract IComptroller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptrollerLens\",\"outputs\":[{\"internalType\":\"contract ComptrollerLensInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceVAILiquidate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"treasuryPercentMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"accessControlManager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"protocolShareReserve_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IVToken\",\"name\":\"vTokenCollateral\",\"type\":\"address\"}],\"name\":\"liquidateBorrow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidationRestricted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLiquidatableVAI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseForceVAILiquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingRedeem\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolShareReserve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reduceReserves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"removeFromAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"restrictLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resumeForceVAILiquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accessControlManager_\",\"type\":\"address\"}],\"name\":\"setAccessControlManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minLiquidatableVAI_\",\"type\":\"uint256\"}],\"name\":\"setMinLiquidatableVAI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLength_\",\"type\":\"uint256\"}],\"name\":\"setPendingRedeemChunkLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"protocolShareReserve_\",\"type\":\"address\"}],\"name\":\"setProtocolShareReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTreasuryPercentMantissa\",\"type\":\"uint256\"}],\"name\":\"setTreasuryPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryPercentMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"unrestrictLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vBnb\",\"outputs\":[{\"internalType\":\"contract IVBNB\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaiController\",\"outputs\":[{\"internalType\":\"contract IVAIController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"addToAllowlist(address,address)\":{\"params\":{\"borrower\":\"The address of the liquidator\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\",\"params\":{\"comptrollerLens_\":\"The address of the ComptrollerLens contract\",\"comptroller_\":\"The address of the Comptroller contract\",\"vBnb_\":\"The address of the VBNB\",\"wBNB_\":\"The address of wBNB\"}},\"initialize(uint256,address,address)\":{\"params\":{\"accessControlManager_\":\"address of access control manager\",\"protocolShareReserve_\":\"The address of the protocol share reserve contract\",\"treasuryPercentMantissa_\":\"Treasury share, scaled by 1e18 (e.g. 0.2 * 1e18 for 20%)\"}},\"liquidateBorrow(address,address,uint256,address)\":{\"params\":{\"borrower\":\"The address of the borrower\",\"repayAmount\":\"The amount to repay on behalf of the borrower\",\"vToken\":\"Borrowed vToken\",\"vTokenCollateral\":\"The collateral to seize\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"removeFromAllowlist(address,address)\":{\"params\":{\"borrower\":\"The address of the liquidator\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"restrictLiquidation(address)\":{\"details\":\"Use {addTo,removeFrom}AllowList to configure the allowed addresses.\",\"params\":{\"borrower\":\"The address of the borrower\"}},\"setAccessControlManager(address)\":{\"custom:access\":\"Only Governance\",\"custom:event\":\"Emits NewAccessControlManager event\",\"details\":\"Admin function to set address of AccessControlManager\",\"params\":{\"accessControlManager_\":\"The new address of the AccessControlManager\"}},\"setMinLiquidatableVAI(uint256)\":{\"params\":{\"minLiquidatableVAI_\":\"New address for the access control\"}},\"setPendingRedeemChunkLength(uint256)\":{\"params\":{\"newLength_\":\"Length of the chunk\"}},\"setProtocolShareReserve(address)\":{\"params\":{\"protocolShareReserve_\":\"The address of the protocol share reserve contract\"}},\"setTreasuryPercent(uint256)\":{\"params\":{\"newTreasuryPercentMantissa\":\"New treasury percent (scaled by 10^18).\"}},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"unrestrictLiquidation(address)\":{\"details\":\"Does not impact the allowedLiquidatorsByAccount mapping for the borrower, just turns off the check.\",\"params\":{\"borrower\":\"The address of the borrower\"}}},\"stateVariables\":{\"MANTISSA_ONE\":{\"details\":\"A unit (literal one) in EXP_SCALE, usually used in additions/subtractions\"},\"comptroller\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\"},\"comptrollerLens\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\"},\"vBnb\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\"},\"vaiController\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\"},\"wBNB\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\"}},\"version\":1},\"userdoc\":{\"errors\":{\"AllowlistEntryNotFound(address,address)\":[{\"notice\":\"Thrown if trying to remove a liquidator that is not in the allowedLiquidatorsByAccount mapping\"}],\"AlreadyAllowed(address,address)\":[{\"notice\":\"Thrown if the liquidator is already in the allowedLiquidatorsByAccount mapping\"}],\"AlreadyRestricted(address)\":[{\"notice\":\"Thrown if trying to restrict liquidations for an already restricted borrower\"}],\"LiquidationFailed(uint256)\":[{\"notice\":\"Thrown if the liquidation is not successful (the error code is from TokenErrorReporter)\"}],\"LiquidationNotAllowed(address,address)\":[{\"notice\":\"Thrown if the liquidation is restricted and the liquidator is not in the allowedLiquidatorsByAccount mapping\"}],\"MarketNotListed(address)\":[{\"notice\":\"Thrown when vToken is not listed\"}],\"NoRestrictionsExist(address)\":[{\"notice\":\"Thrown if trying to unrestrict liquidations for a borrower that is not restricted\"}],\"SnapshotError(uint256)\":[{\"notice\":\"Thrown when the liquidation snapshot fails\"}],\"TreasuryPercentTooHigh(uint256,uint256)\":[{\"notice\":\"Thrown if trying to set treasury percent larger than the liquidation profit\"}],\"Unauthorized(address,address,string)\":[{\"notice\":\"Thrown when the action is prohibited by AccessControlManager\"}],\"VAIDebtTooHigh(uint256,uint256)\":[{\"notice\":\"Thrown if trying to liquidate any token when VAI debt is too high\"}],\"VTokenTransferFailed(address,address,uint256)\":[{\"notice\":\"Thrown if VToken transfer fails after the liquidation\"}],\"WrongTransactionAmount(uint256,uint256)\":[{\"notice\":\"Thrown if BNB amount sent with the transaction doesn't correspond to the         intended BNB repayment\"}],\"ZeroAddressNotAllowed()\":[{\"notice\":\"Thrown if the supplied address is a zero address where it is not allowed\"}]},\"events\":{\"AllowlistEntryAdded(address,address)\":{\"notice\":\"Emitted when a liquidator is added to the allowedLiquidatorsByAccount mapping\"},\"AllowlistEntryRemoved(address,address)\":{\"notice\":\"Emitted when a liquidator is removed from the allowedLiquidatorsByAccount mapping\"},\"ForceVAILiquidationPaused(address)\":{\"notice\":\"Emitted when force liquidation is paused\"},\"ForceVAILiquidationResumed(address)\":{\"notice\":\"Emitted when force liquidation is resumed\"},\"LiquidateBorrowedTokens(address,address,uint256,address,address,uint256,uint256)\":{\"notice\":\"Emitted when a borrow is liquidated\"},\"LiquidationRestricted(address)\":{\"notice\":\"Emitted when the liquidation is restricted for a borrower\"},\"LiquidationRestrictionsDisabled(address)\":{\"notice\":\"Emitted when the liquidation restrictions are removed for a borrower\"},\"NewAccessControlManager(address,address)\":{\"notice\":\"Emitted when access control manager contract address is changed\"},\"NewLiquidationTreasuryPercent(uint256,uint256)\":{\"notice\":\"Emitted when the percent of the seized amount that goes to treasury changes.\"},\"NewMinLiquidatableVAI(uint256,uint256)\":{\"notice\":\"Emitted when the amount of minLiquidatableVAI is updated\"},\"NewPendingRedeemChunkLength(uint256,uint256)\":{\"notice\":\"Emitted when the length of chunk gets updated\"},\"NewProtocolShareReserve(address,address)\":{\"notice\":\"Emitted when new address of protocol share reserve is set\"},\"ProtocolLiquidationIncentiveTransferred(address,address,uint256)\":{\"notice\":\"Emitted when reserves are reduced from liquidator contract to protocol share reserves\"}},\"kind\":\"user\",\"methods\":{\"accessControlManager()\":{\"notice\":\"Returns the address of the access control manager contract\"},\"addToAllowlist(address,address)\":{\"notice\":\"An admin function to add the liquidator to the allowedLiquidatorsByAccount mapping for a certain         borrower. If the liquidations are restricted, only liquidators from the         allowedLiquidatorsByAccount mapping can participate in liquidating the positions of this borrower.\"},\"allowedLiquidatorsByAccount(address,address)\":{\"notice\":\"Mapping of addresses allowed to liquidate an account if liquidationRestricted[borrower] == true\"},\"comptroller()\":{\"notice\":\"Address of Venus Unitroller contract.\"},\"comptrollerLens()\":{\"notice\":\"Address of Venus ComptrollerLens contract.\"},\"constructor\":{\"notice\":\"Constructor for the implementation contract. Sets immutable variables.\"},\"forceVAILiquidate()\":{\"notice\":\"check for liquidation of VAI\"},\"initialize(uint256,address,address)\":{\"notice\":\"Initializer for the implementation contract.\"},\"liquidateBorrow(address,address,uint256,address)\":{\"notice\":\"Liquidates a borrow and splits the seized amount between protocol share reserve and         liquidator. The liquidators should use this interface instead of calling         vToken.liquidateBorrow(...) directly.Checks force VAI liquidation first; vToken should be address of vaiController if vaiDebt is greater than thresholdFor BNB borrows msg.value should be equal to repayAmount; otherwise msg.value      should be zero.\"},\"liquidationRestricted(address)\":{\"notice\":\"Whether the liquidations are restricted to enabled allowedLiquidatorsByAccount addresses only\"},\"minLiquidatableVAI()\":{\"notice\":\"minimum amount of VAI liquidation threshold\"},\"pauseForceVAILiquidate()\":{\"notice\":\"Pause Force Liquidation of VAI\"},\"pendingRedeem(uint256)\":{\"notice\":\"assests whose redeem is pending to reduce reserves\"},\"protocolShareReserve()\":{\"notice\":\"protocol share reserve contract address\"},\"reduceReserves()\":{\"notice\":\"Reduce the reserves of the pending accumulated reserves\"},\"removeFromAllowlist(address,address)\":{\"notice\":\"An admin function to remove the liquidator from the allowedLiquidatorsByAccount mapping of a certain         borrower. If the liquidations are restricted, this liquidator will not be         able to liquidate the positions of this borrower.\"},\"restrictLiquidation(address)\":{\"notice\":\"An admin function to restrict liquidations to allowed addresses only.\"},\"resumeForceVAILiquidate()\":{\"notice\":\"Resume Force Liquidation of VAI\"},\"setAccessControlManager(address)\":{\"notice\":\"Sets the address of AccessControlManager\"},\"setMinLiquidatableVAI(uint256)\":{\"notice\":\"Sets the threshold for minimum amount of vaiLiquidate\"},\"setPendingRedeemChunkLength(uint256)\":{\"notice\":\"Length of the pendingRedeem array to be consider while redeeming in Liquidation transaction\"},\"setProtocolShareReserve(address)\":{\"notice\":\"Sets protocol share reserve contract address\"},\"setTreasuryPercent(uint256)\":{\"notice\":\"Sets the new percent of the seized amount that goes to treasury. Should         be less than or equal to comptroller.liquidationIncentiveMantissa().sub(1e18).\"},\"treasuryPercentMantissa()\":{\"notice\":\"Percent of seized amount that goes to treasury.\"},\"unrestrictLiquidation(address)\":{\"notice\":\"An admin function to remove restrictions for liquidations.\"},\"vBnb()\":{\"notice\":\"Address of vBNB contract.\"},\"vaiController()\":{\"notice\":\"Address of VAIUnitroller contract.\"},\"wBNB()\":{\"notice\":\"Address of wBNB contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Liquidator/Liquidator.sol\":\"Liquidator\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9140dabc466abab21b48b72dbda26736b1183a310d0e677d3719d201df026510\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2025ccf05f6f1f2fd4e078e552836f525a1864e3854ed555047cd732320ab29b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x07e881de3b9f6d2c07909f193f24b96c7fe4ea60013260f3f25aecd8bab3c2f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x23b997be73d3dd46885262704f0f8cfc7273fdadfe303d37969a9561373972b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@venusprotocol/governance-contracts/contracts/Governance/AccessControlledV8.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\n\\nimport \\\"./IAccessControlManagerV8.sol\\\";\\n\\n/**\\n * @title AccessControlledV8\\n * @author Venus\\n * @notice This contract is helper between access control manager and actual contract. This contract further inherited by other contract (using solidity 0.8.13)\\n * to integrate access controlled mechanism. It provides initialise methods and verifying access methods.\\n */\\nabstract contract AccessControlledV8 is Initializable, Ownable2StepUpgradeable {\\n    /// @notice Access control manager contract\\n    IAccessControlManagerV8 private _accessControlManager;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n\\n    /// @notice Emitted when access control manager contract address is changed\\n    event NewAccessControlManager(address oldAccessControlManager, address newAccessControlManager);\\n\\n    /// @notice Thrown when the action is prohibited by AccessControlManager\\n    error Unauthorized(address sender, address calledContract, string methodSignature);\\n\\n    function __AccessControlled_init(address accessControlManager_) internal onlyInitializing {\\n        __Ownable2Step_init();\\n        __AccessControlled_init_unchained(accessControlManager_);\\n    }\\n\\n    function __AccessControlled_init_unchained(address accessControlManager_) internal onlyInitializing {\\n        _setAccessControlManager(accessControlManager_);\\n    }\\n\\n    /**\\n     * @notice Sets the address of AccessControlManager\\n     * @dev Admin function to set address of AccessControlManager\\n     * @param accessControlManager_ The new address of the AccessControlManager\\n     * @custom:event Emits NewAccessControlManager event\\n     * @custom:access Only Governance\\n     */\\n    function setAccessControlManager(address accessControlManager_) external onlyOwner {\\n        _setAccessControlManager(accessControlManager_);\\n    }\\n\\n    /**\\n     * @notice Returns the address of the access control manager contract\\n     */\\n    function accessControlManager() external view returns (IAccessControlManagerV8) {\\n        return _accessControlManager;\\n    }\\n\\n    /**\\n     * @dev Internal function to set address of AccessControlManager\\n     * @param accessControlManager_ The new address of the AccessControlManager\\n     */\\n    function _setAccessControlManager(address accessControlManager_) internal {\\n        require(address(accessControlManager_) != address(0), \\\"invalid acess control manager address\\\");\\n        address oldAccessControlManager = address(_accessControlManager);\\n        _accessControlManager = IAccessControlManagerV8(accessControlManager_);\\n        emit NewAccessControlManager(oldAccessControlManager, accessControlManager_);\\n    }\\n\\n    /**\\n     * @notice Reverts if the call is not allowed by AccessControlManager\\n     * @param signature Method signature\\n     */\\n    function _checkAccessAllowed(string memory signature) internal view {\\n        bool isAllowedToCall = _accessControlManager.isAllowedToCall(msg.sender, signature);\\n\\n        if (!isAllowedToCall) {\\n            revert Unauthorized(msg.sender, address(this), signature);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dcf283925f4dddc23ca0ee71d2cb96a9dd6e4cf08061b69fde1697ea39dc514\",\"license\":\"BSD-3-Clause\"},\"@venusprotocol/governance-contracts/contracts/Governance/IAccessControlManagerV8.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.25;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\n/**\\n * @title IAccessControlManagerV8\\n * @author Venus\\n * @notice Interface implemented by the `AccessControlManagerV8` contract.\\n */\\ninterface IAccessControlManagerV8 is IAccessControl {\\n    function giveCallPermission(address contractAddress, string calldata functionSig, address accountToPermit) external;\\n\\n    function revokeCallPermission(\\n        address contractAddress,\\n        string calldata functionSig,\\n        address accountToRevoke\\n    ) external;\\n\\n    function isAllowedToCall(address account, string calldata functionSig) external view returns (bool);\\n\\n    function hasPermission(\\n        address account,\\n        address contractAddress,\\n        string calldata functionSig\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xaa29b098440d0b3a131c5ecdf25ce548790c1b5ac7bf9b5c0264b6af6f7a1e0b\",\"license\":\"BSD-3-Clause\"},\"@venusprotocol/oracle/contracts/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.25;\\n\\ninterface OracleInterface {\\n    function getPrice(address asset) external view returns (uint256);\\n}\\n\\ninterface ResilientOracleInterface is OracleInterface {\\n    function updatePrice(address vToken) external;\\n\\n    function updateAssetPrice(address asset) external;\\n\\n    function getUnderlyingPrice(address vToken) external view returns (uint256);\\n}\\n\\ninterface TwapInterface is OracleInterface {\\n    function updateTwap(address asset) external returns (uint256);\\n}\\n\\ninterface BoundValidatorInterface {\\n    function validatePriceWithAnchorPrice(\\n        address asset,\\n        uint256 reporterPrice,\\n        uint256 anchorPrice\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2432799b0d824fc701beb4c30146e912b9aeecf77b5c1635dde6c5fbe6bfc3a7\",\"license\":\"BSD-3-Clause\"},\"@venusprotocol/solidity-utilities/contracts/validators.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\n/// @notice Thrown if the supplied address is a zero address where it is not allowed\\nerror ZeroAddressNotAllowed();\\n\\n/// @notice Thrown if the supplied value is 0 where it is not allowed\\nerror ZeroValueNotAllowed();\\n\\n/// @notice Checks if the provided address is nonzero, reverts otherwise\\n/// @param address_ Address to check\\n/// @custom:error ZeroAddressNotAllowed is thrown if the provided address is a zero address\\nfunction ensureNonzeroAddress(address address_) pure {\\n    if (address_ == address(0)) {\\n        revert ZeroAddressNotAllowed();\\n    }\\n}\\n\\n/// @notice Checks if the provided value is nonzero, reverts otherwise\\n/// @param value_ Value to check\\n/// @custom:error ZeroValueNotAllowed is thrown if the provided value is 0\\nfunction ensureNonzeroValue(uint256 value_) pure {\\n    if (value_ == 0) {\\n        revert ZeroValueNotAllowed();\\n    }\\n}\\n\",\"keccak256\":\"0xdb88e14d50dd21889ca3329d755673d022c47e8da005b6a545c7f69c2c4b7b86\",\"license\":\"BSD-3-Clause\"},\"contracts/Comptroller/ComptrollerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.25;\\n\\nimport { ResilientOracleInterface } from \\\"@venusprotocol/oracle/contracts/interfaces/OracleInterface.sol\\\";\\n\\nimport { VToken } from \\\"../Tokens/VTokens/VToken.sol\\\";\\nimport { VAIControllerInterface } from \\\"../Tokens/VAI/VAIControllerInterface.sol\\\";\\nimport { LiquidationManager } from \\\"../LiquidationManager.sol\\\";\\nimport { ComptrollerLensInterface } from \\\"./ComptrollerLensInterface.sol\\\";\\nimport { WeightFunction } from \\\"./Diamond/interfaces/IFacetBase.sol\\\";\\n\\nenum Action {\\n    MINT,\\n    REDEEM,\\n    BORROW,\\n    REPAY,\\n    SEIZE,\\n    LIQUIDATE,\\n    TRANSFER,\\n    ENTER_MARKET,\\n    EXIT_MARKET\\n}\\n\\ninterface ComptrollerInterface {\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\n    function isComptroller() external pure returns (bool);\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata vTokens) external returns (uint[] memory);\\n\\n    function exitMarket(address vToken) external returns (uint);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(address vToken, address minter, uint mintAmount) external returns (uint);\\n\\n    function mintVerify(address vToken, address minter, uint mintAmount, uint mintTokens) external;\\n\\n    function redeemAllowed(address vToken, address redeemer, uint redeemTokens) external returns (uint);\\n\\n    function redeemVerify(address vToken, address redeemer, uint redeemAmount, uint redeemTokens) external;\\n\\n    function borrowAllowed(address vToken, address borrower, uint borrowAmount) external returns (uint);\\n\\n    function borrowVerify(address vToken, address borrower, uint borrowAmount) external;\\n\\n    function executeFlashLoan(\\n        address payable initiator,\\n        address payable receiver,\\n        VToken[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata modes,\\n        address onBehalfOf,\\n        bytes calldata param\\n    ) external;\\n\\n    function repayBorrowAllowed(\\n        address vToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount\\n    ) external returns (uint);\\n\\n    function repayBorrowVerify(\\n        address vToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount,\\n        uint borrowerIndex\\n    ) external;\\n\\n    function liquidateBorrowAllowed(\\n        address vTokenBorrowed,\\n        address vTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount\\n    ) external returns (uint);\\n\\n    function liquidateBorrowAllowed(\\n        address vTokenBorrowed,\\n        address vTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        ComptrollerLensInterface.AccountSnapshot memory snapshot\\n    ) external returns (uint);\\n\\n    function liquidateBorrowVerify(\\n        address vTokenBorrowed,\\n        address vTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        uint seizeTokens\\n    ) external;\\n\\n    function seizeAllowed(\\n        address vTokenCollateral,\\n        address vTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens\\n    ) external returns (uint);\\n\\n    function seizeVerify(\\n        address vTokenCollateral,\\n        address vTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens\\n    ) external;\\n\\n    function transferAllowed(address vToken, address src, address dst, uint transferTokens) external returns (uint);\\n\\n    function transferVerify(address vToken, address src, address dst, uint transferTokens) external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address borrower,\\n        address vTokenBorrowed,\\n        address vTokenCollateral,\\n        uint repayAmount\\n    ) external view returns (uint, uint);\\n\\n    function liquidateCalculateSeizeTokens(\\n        address vTokenBorrowed,\\n        address vTokenCollateral,\\n        uint repayAmount,\\n        uint liquidationIncentiveMantissa\\n    ) external view returns (uint, uint);\\n\\n    function setMintedVAIOf(address owner, uint amount) external returns (uint);\\n\\n    function liquidateVAICalculateSeizeTokens(\\n        address vTokenCollateral,\\n        uint repayAmount,\\n        uint liquidationIncentiveMantissa\\n    ) external view returns (uint, uint);\\n\\n    function liquidateVAICalculateSeizeTokens(\\n        address borrower,\\n        address vTokenCollateral,\\n        uint repayAmount\\n    ) external view returns (uint, uint);\\n\\n    function getXVSAddress() external view returns (address);\\n\\n    function markets(address) external view returns (bool, uint, bool, uint, uint);\\n\\n    function oracle() external view returns (ResilientOracleInterface);\\n\\n    function liquidationManager() external view returns (LiquidationManager);\\n\\n    function getAccountLiquidity(address) external view returns (uint, uint, uint);\\n\\n    function getAssetsIn(address) external view returns (VToken[] memory);\\n\\n    function claimVenus(address) external;\\n\\n    function venusAccrued(address) external view returns (uint);\\n\\n    function venusSupplySpeeds(address) external view returns (uint);\\n\\n    function venusBorrowSpeeds(address) external view returns (uint);\\n\\n    function getAllMarkets() external view returns (VToken[] memory);\\n\\n    function venusSupplierIndex(address, address) external view returns (uint);\\n\\n    function venusInitialIndex() external view returns (uint224);\\n\\n    function venusBorrowerIndex(address, address) external view returns (uint);\\n\\n    function venusBorrowState(address) external view returns (uint224, uint32);\\n\\n    function venusSupplyState(address) external view returns (uint224, uint32);\\n\\n    function approvedDelegates(address borrower, address delegate) external view returns (bool);\\n\\n    function vaiController() external view returns (VAIControllerInterface);\\n\\n    function oldLiquidationIncentiveMantissa() external view returns (uint);\\n\\n    function protocolPaused() external view returns (bool);\\n\\n    function actionPaused(address market, Action action) external view returns (bool);\\n\\n    function mintedVAIs(address user) external view returns (uint);\\n\\n    function vaiMintRate() external view returns (uint);\\n\\n    function getDynamicLiquidationIncentive(address borrower, address market) external view returns (uint256);\\n\\n    function getDynamicLiquidationIncentive(\\n        address market,\\n        uint256 liquidationThresholdAvg,\\n        uint256 healthFactor\\n    ) external view returns (uint256);\\n\\n    function getCollateralFactor(address vToken) external view returns (uint256);\\n\\n    function getLiquidationThreshold(address vToken) external view returns (uint256);\\n\\n    function getHypotheticalHealthSnapshot(\\n        address account,\\n        VToken vTokenModify,\\n        uint redeemTokens,\\n        uint borrowAmount\\n    ) external view returns (uint256, ComptrollerLensInterface.AccountSnapshot memory);\\n\\n    function authorizedFlashLoan(address account) external view returns (bool);\\n\\n    function delegateAuthorizationFlashloan(\\n        address account,\\n        address market,\\n        address delegate\\n    ) external view returns (bool);\\n    function userPoolId(address account) external view returns (uint96);\\n\\n    function getLiquidationIncentive(address vToken) external view returns (uint256);\\n\\n    function getEffectiveLiquidationIncentive(address account, address vToken) external view returns (uint256);\\n\\n    function getEffectiveLtvFactor(\\n        address account,\\n        address vToken,\\n        WeightFunction weightingStrategy\\n    ) external view returns (uint256);\\n\\n    function lastPoolId() external view returns (uint96);\\n\\n    function pools(uint96 poolId) external view returns (string memory label);\\n\\n    function getPoolVTokens(uint96 poolId) external view returns (address[] memory);\\n\\n    function poolMarkets(\\n        uint96 poolId,\\n        address vToken\\n    )\\n        external\\n        view\\n        returns (\\n            bool isListed,\\n            uint256 collateralFactorMantissa,\\n            bool isVenus,\\n            uint256 liquidationThresholdMantissa,\\n            uint256 maxLiquidationIncentiveMantissa,\\n            uint96 marketPoolId,\\n            bool isBorrowAllowed\\n        );\\n}\\n\\ninterface IVAIVault {\\n    function updatePendingRewards() external;\\n}\\n\\ninterface IComptroller {\\n    function liquidationIncentiveMantissa() external view returns (uint);\\n\\n    /*** Treasury Data ***/\\n    function treasuryAddress() external view returns (address);\\n\\n    function treasuryPercent() external view returns (uint);\\n}\\n\",\"keccak256\":\"0xe8b22068aee7b4d111e6b6abd07b5dc0f873cc57d23b8f389e93a746abece9e7\",\"license\":\"BSD-3-Clause\"},\"contracts/Comptroller/ComptrollerLensInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.25;\\n\\nimport { VToken } from \\\"../Tokens/VTokens/VToken.sol\\\";\\nimport { WeightFunction } from \\\"./Diamond/interfaces/IFacetBase.sol\\\";\\n\\ninterface ComptrollerLensInterface {\\n    struct AccountSnapshot {\\n        // Total collateral value supplied by the account (USD, scaled by 1e18)\\n        uint256 totalCollateral;\\n        // Collateral value weighted by each asset's liquidation threshold or collateral factor (USD, scaled by 1e18)\\n        uint256 weightedCollateral;\\n        // Total borrowed value by the account (USD, scaled by 1e18)\\n        uint256 borrows;\\n        // Amount of excess collateral available for borrowing (USD, scaled by 1e18)\\n        uint256 liquidity;\\n        // Amount by which the account is undercollateralized (USD, scaled by 1e18)\\n        uint256 shortfall;\\n        // Average liquidation threshold across all supplied assets (scaled by 1e18)\\n        uint256 liquidationThresholdAvg;\\n        // Health factor of the account, used to assess liquidation risk (scaled by 1e18)\\n        uint256 healthFactor;\\n        // Dynamic liquidation incentive factor applied during liquidations (scaled by 1e18)\\n        uint256 dynamicLiquidationIncentiveMantissa;\\n    }\\n\\n    // Just need to make borrower first then comptroller\\n    function liquidateCalculateSeizeTokens(\\n        address comptroller,\\n        address borrower,\\n        address vTokenBorrowed,\\n        address vTokenCollateral,\\n        uint256 actualRepayAmount\\n    ) external view returns (uint256, uint256);\\n\\n    function liquidateCalculateSeizeTokens(\\n        address comptroller,\\n        address vTokenBorrowed,\\n        address vTokenCollateral,\\n        uint256 actualRepayAmount,\\n        uint256 liquidationIncentiveMantissa\\n    ) external view returns (uint256, uint256);\\n\\n    function liquidateVAICalculateSeizeTokens(\\n        address comptroller,\\n        address vTokenCollateral,\\n        uint256 actualRepayAmount,\\n        uint256 liquidationIncentiveMantissa\\n    ) external view returns (uint256, uint256);\\n\\n    function liquidateVAICalculateSeizeTokens(\\n        address comptroller,\\n        address borrower,\\n        address vTokenCollateral,\\n        uint256 actualRepayAmount\\n    ) external view returns (uint256, uint256);\\n\\n    function getHypotheticalAccountLiquidity(\\n        address comptroller,\\n        address account,\\n        VToken vTokenModify,\\n        uint256 redeemTokens,\\n        uint256 borrowAmount,\\n        WeightFunction weightingStrategy\\n    ) external view returns (uint256, uint256, uint256);\\n\\n    function getAccountHealthSnapshot(\\n        address comptroller,\\n        address account,\\n        VToken vTokenModify,\\n        uint256 redeemTokens,\\n        uint256 borrowAmount,\\n        WeightFunction weightingStrategy\\n    ) external view returns (uint256, AccountSnapshot memory);\\n}\\n\",\"keccak256\":\"0x8cd7d089771480417651bd476a9071b899b4e239e1ddcc2d4eb0b324b99a0676\",\"license\":\"BSD-3-Clause\"},\"contracts/Comptroller/Diamond/interfaces/IFacetBase.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.25;\\n\\nimport { Action } from \\\"../../../Comptroller/ComptrollerInterface.sol\\\";\\nimport { PoolMarketId } from \\\"../../../Comptroller/Types/PoolMarketId.sol\\\";\\n\\nimport { VToken } from \\\"../../../Tokens/VTokens/VToken.sol\\\";\\nimport { Action } from \\\"../../../Comptroller/ComptrollerInterface.sol\\\";\\nimport { ComptrollerLensInterface } from \\\"../../../Comptroller/ComptrollerLensInterface.sol\\\";\\n\\nenum WeightFunction {\\n    /// @notice Use the collateral factor of the asset for weighting\\n    USE_COLLATERAL_FACTOR,\\n    /// @notice Use the liquidation threshold of the asset for weighting\\n    USE_LIQUIDATION_THRESHOLD\\n}\\n\\ninterface IFacetBase {\\n    /**\\n     * @notice The initial XVS rewards index for a market\\n     */\\n    function venusInitialIndex() external pure returns (uint224);\\n\\n    /**\\n     * @notice Checks if a certain action is paused on a market\\n     * @param action Action id\\n     * @param market vToken address\\n     */\\n    function actionPaused(address market, Action action) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the XVS address\\n     * @return The address of XVS token\\n     */\\n    function getXVSAddress() external view returns (address);\\n\\n    function getHypotheticalHealthSnapshot(\\n        address account,\\n        VToken vTokenModify,\\n        uint256 redeemTokens,\\n        uint256 borrowAmount,\\n        WeightFunction weightingStrategy\\n    ) external view returns (uint256 err, ComptrollerLensInterface.AccountSnapshot memory snapshot);\\n\\n    function getPoolMarketIndex(uint96 poolId, address vToken) external pure returns (PoolMarketId);\\n\\n    function corePoolId() external pure returns (uint96);\\n}\\n\",\"keccak256\":\"0x64042449bdb749431618bf1d0cfe2171d13ffa9c91f31af5bd3542cc27555c52\",\"license\":\"BSD-3-Clause\"},\"contracts/Comptroller/Types/PoolMarketId.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.25;\\n\\n/// @notice Strongly-typed identifier for pool markets mapping keys\\n/// @dev Underlying storage is bytes32: first 12 bytes (96 bits) = poolId, last 20 bytes = vToken address\\ntype PoolMarketId is bytes32;\\n\\n \",\"keccak256\":\"0xf68bde30ddd6f8bf08194b493991c2a2ebd3814972f93a804beb9b366004cbe3\",\"license\":\"BSD-3-Clause\"},\"contracts/FlashLoan/interfaces/IFlashLoanSimpleReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\n/// @title IFlashLoanSimpleReceiver\\n/// @notice Interface for flashLoan receiver contract, which execute custom logic with flash-borrowed asset.\\n/// @dev This interface defines the method that must be implemented by any contract wishing to interact with the flashLoan system.\\n///      Contracts must ensure they have the means to repay both the flashLoan amount and the associated premium (fee).\\ninterface IFlashLoanSimpleReceiver {\\n    /**\\n     * @notice Executes an operation after receiving the flash-borrowed asset\\n     * @dev Ensure that the contract can return the debt + premium, e.g., has\\n     *      enough funds to repay and has to transfer the debt + premium to the VToken\\n     * @param asset The address of the flash-borrowed asset\\n     * @param amount The amount of the flash-borrowed asset\\n     * @param premium The premium (fee) associated with flash-borrowed asset.\\n     * @param initiator The address that initiated the flashLoan operation\\n     * @param param The byte-encoded param passed when initiating the flashLoan\\n     * @return True if the execution of the operation succeeds, false otherwise\\n     */\\n    function executeOperation(\\n        address asset,\\n        uint256 amount,\\n        uint256 premium,\\n        address initiator,\\n        bytes calldata param\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xd7e485aafe271a740b8ee0f1f0848f57272c69410ade7d419baad8c709cb12d4\",\"license\":\"BSD-3-Clause\"},\"contracts/InterestRateModels/InterestRateModelV8.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\n/**\\n * @title Venus's InterestRateModelV8 Interface\\n * @author Venus\\n */\\nabstract contract InterestRateModelV8 {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    bool public constant isInterestRateModel = true;\\n\\n    /**\\n     * @notice Calculates the current borrow interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amnount of reserves the market has\\n     * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getBorrowRate(uint256 cash, uint256 borrows, uint256 reserves) external view virtual returns (uint256);\\n\\n    /**\\n     * @notice Calculates the current supply interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amnount of reserves the market has\\n     * @param reserveFactorMantissa The current reserve factor the market has\\n     * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getSupplyRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves,\\n        uint256 reserveFactorMantissa\\n    ) external view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x4d5595e761d50a1431c34b39e72dde6c09b0ebccdbe8c5c4e12c8a2ac7b796e1\",\"license\":\"BSD-3-Clause\"},\"contracts/InterfacesV8.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.25;\\n\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport { ResilientOracleInterface } from \\\"@venusprotocol/oracle/contracts/interfaces/OracleInterface.sol\\\";\\nimport { ComptrollerLensInterface } from \\\"./Comptroller/ComptrollerLensInterface.sol\\\";\\n\\ninterface IVToken is IERC20Upgradeable {\\n    function accrueInterest() external returns (uint256);\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n    function borrowBalanceCurrent(address borrower) external returns (uint256);\\n\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n    function comptroller() external view returns (IComptroller);\\n\\n    function borrowBalanceStored(address account) external view returns (uint256);\\n}\\n\\ninterface IVBep20 is IVToken {\\n    function borrowBehalf(address borrower, uint256 borrowAmount) external returns (uint256);\\n\\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\\n\\n    function liquidateBorrow(\\n        address borrower,\\n        uint256 repayAmount,\\n        IVToken vTokenCollateral,\\n        ComptrollerLensInterface.AccountSnapshot memory snapshot\\n    ) external returns (uint256);\\n\\n    function underlying() external view returns (address);\\n}\\n\\ninterface IVBNB is IVToken {\\n    function repayBorrowBehalf(address borrower) external payable;\\n\\n    function liquidateBorrow(address borrower, IVToken vTokenCollateral) external payable;\\n}\\n\\ninterface IVAIController {\\n    function accrueVAIInterest() external;\\n\\n    function liquidateVAI(\\n        address borrower,\\n        uint256 repayAmount,\\n        IVToken vTokenCollateral,\\n        ComptrollerLensInterface.AccountSnapshot memory snapshot\\n    ) external returns (uint256, uint256);\\n\\n    function repayVAIBehalf(address borrower, uint256 amount) external returns (uint256, uint256);\\n\\n    function getVAIAddress() external view returns (address);\\n\\n    function getVAIRepayAmount(address borrower) external view returns (uint256);\\n}\\n\\ninterface IComptroller {\\n    enum Action {\\n        MINT,\\n        REDEEM,\\n        BORROW,\\n        REPAY,\\n        SEIZE,\\n        LIQUIDATE,\\n        TRANSFER,\\n        ENTER_MARKET,\\n        EXIT_MARKET\\n    }\\n\\n    function _setActionsPaused(address[] calldata markets_, Action[] calldata actions_, bool paused_) external;\\n\\n    function liquidationIncentiveMantissa() external view returns (uint256);\\n\\n    function getDynamicLiquidationIncentive(address borrower, address vToken) external view returns (uint256);\\n\\n    function getDynamicLiquidationIncentive(\\n        address vToken,\\n        uint256 liquidationThresholdAvg,\\n        uint256 healthFactor\\n    ) external view returns (uint256);\\n\\n    function getCollateralFactor(address vToken) external view returns (uint256);\\n\\n    function getLiquidationThreshold(address vToken) external view returns (uint256);\\n\\n    function vaiController() external view returns (IVAIController);\\n\\n    function liquidatorContract() external view returns (address);\\n\\n    function oracle() external view returns (ResilientOracleInterface);\\n\\n    function actionPaused(address market, Action action) external view returns (bool);\\n\\n    function markets(address) external view returns (bool, uint256, bool);\\n\\n    function isForcedLiquidationEnabled(address) external view returns (bool);\\n\\n    function getEffectiveLiquidationIncentive(address account, address vToken) external view returns (uint256);\\n}\\n\\ninterface ILiquidator {\\n    function restrictLiquidation(address borrower) external;\\n\\n    function unrestrictLiquidation(address borrower) external;\\n\\n    function addToAllowlist(address borrower, address liquidator) external;\\n\\n    function removeFromAllowlist(address borrower, address liquidator) external;\\n\\n    function liquidateBorrow(\\n        address vToken,\\n        address borrower,\\n        uint256 repayAmount,\\n        IVToken vTokenCollateral\\n    ) external payable;\\n\\n    function setTreasuryPercent(uint256 newTreasuryPercentMantissa) external;\\n\\n    function treasuryPercentMantissa() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe6702eb4c137d9c3f6451ab3be352018219e69611fb93c22202ff3c0e5c2162a\",\"license\":\"BSD-3-Clause\"},\"contracts/LiquidationManager.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.25;\\n\\nimport { ExponentialNoError } from \\\"./Utils/ExponentialNoError.sol\\\";\\nimport \\\"@venusprotocol/governance-contracts/contracts/Governance/AccessControlledV8.sol\\\";\\n\\n/**\\n * @title LiquidationManager\\n * @dev This contract provides functions to manage liquidations in the venus protocol.\\n * It calculates close factors, dynamic liquidation incentives, and the number of tokens to seize during liquidation.\\n * It also checks if a liquidation is toxic based on average liquidation threshold and health factor.\\n * @author Venus\\n * @notice This contract is designed to be used in conjunction with the venus protocol's liquidation process.\\n */\\ncontract LiquidationManager is AccessControlledV8, ExponentialNoError {\\n    /// @notice Base close factor, scaled by 1e18 (e.g., 0.05e18 for 5%)\\n    uint256 public immutable baseCloseFactorMantissa;\\n\\n    /// @notice Default close factor, scaled by 1e18 (e.g., 5e17 for 50%)\\n    uint256 public immutable defaultCloseFactorMantissa;\\n\\n    /// @notice Target health factor, scaled by 1e18 (e.g., 1.5e18 for 1.5)\\n    uint256 public immutable targetHealthFactor;\\n\\n    /// @notice Indicates whether the dynamic close factor is enabled for a given market.\\n    /// @dev Maps a market address to a boolean flag for dynamic close factor activation.\\n    mapping(address => bool) public dynamicCloseFactorEnabled;\\n\\n    /// @notice Indicates whether the dynamic liquidation incentive is enabled for a given market.\\n    /// @dev Maps a market address to a boolean flag for dynamic liquidation incentive activation.\\n    mapping(address => bool) public dynamicLiquidationIncentiveEnabled;\\n\\n    /// @notice Emitted when the dynamic close factor is enabled or disabled for a market.\\n    event DynamicCloseFactorEnabledSet(address indexed market, bool enabled);\\n\\n    /// @notice Emitted when the dynamic liquidation incentive is enabled or disabled for a market.\\n    event DynamicLiquidationIncentiveEnabledSet(address indexed market, bool enabled);\\n\\n    /**\\n     * @notice Error thrown when collateral exceeds borrow capacity\\n     */\\n    error CollateralExceedsBorrowCapacity();\\n\\n    /**\\n     * @notice Error thrown when the provided base close factor is invalid.\\n     */\\n    error InvalidBaseCloseFactor();\\n\\n    /**\\n     * @notice Error thrown when the provided default close factor is invalid.\\n     */\\n    error InvalidDefaultCloseFactor();\\n\\n    /**\\n     * @notice Error thrown when the provided target health factor is invalid.\\n     */\\n    error InvalidTargetHealthFactor();\\n\\n    /**\\n     * @notice Error thrown when the specified market is not listed.\\n     * @param market The address of the market that is not listed.\\n     */\\n    error MarketNotListed(address market);\\n\\n    /**\\n     * @notice Constructor for the LiquidationManager contract.\\n     * @param baseCloseFactorMantissa_ The base close factor, scaled by 1e18.\\n     * @param defaultCloseFactorMantissa_ The default close factor, scaled by 1e18.\\n     * @param targetHealthFactor_ The target health factor, scaled by 1e18.\\n     * @dev Ensures that the provided addresses are non-zero and that the close factors and health factor are within valid ranges.\\n     *      Reverts with `InvalidBaseCloseFactor` if `_baseCloseFactorMantissa` is invalid.\\n     *      Reverts with `InvalidDefaultCloseFactor` if `_defaultCloseFactorMantissa` is invalid.\\n     *      Reverts with `InvalidTargetHealthFactor` if `_targetHealthFactor` is invalid.\\n     */\\n    constructor(uint256 baseCloseFactorMantissa_, uint256 defaultCloseFactorMantissa_, uint256 targetHealthFactor_) {\\n        if (baseCloseFactorMantissa_ > mantissaOne || baseCloseFactorMantissa_ > defaultCloseFactorMantissa_) {\\n            revert InvalidBaseCloseFactor();\\n        }\\n        if (defaultCloseFactorMantissa_ > mantissaOne) {\\n            revert InvalidDefaultCloseFactor();\\n        }\\n        if (targetHealthFactor_ < mantissaOne) {\\n            revert InvalidTargetHealthFactor();\\n        }\\n\\n        baseCloseFactorMantissa = baseCloseFactorMantissa_;\\n        defaultCloseFactorMantissa = defaultCloseFactorMantissa_;\\n        targetHealthFactor = targetHealthFactor_;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract with the access control manager.\\n     * @param accessControlManager_ The address of the access control manager contract.\\n     */\\n    function initialize(address accessControlManager_) external initializer {\\n        __AccessControlled_init(accessControlManager_);\\n    }\\n\\n    /**\\n     * @notice Enables or disables the dynamic close factor for a specific market.\\n     * @param market The address of the market to update.\\n     * @param enabled Boolean indicating whether the dynamic close factor should be enabled or disabled.\\n     * @custom:event DynamicCloseFactorEnabledSet\\n     */\\n    function setDynamicCloseFactorEnabled(address market, bool enabled) external {\\n        _checkAccessAllowed(\\\"setDynamicCloseFactorEnabled(address,bool)\\\");\\n        dynamicCloseFactorEnabled[market] = enabled;\\n        emit DynamicCloseFactorEnabledSet(market, enabled);\\n    }\\n\\n    /**\\n     * @notice Enables or disables the dynamic liquidation incentive for a specific market.\\n     * @param market The address of the market to update.\\n     * @param enabled Boolean indicating whether the dynamic liquidation incentive should be enabled or disabled.\\n     * @custom:event DynamicLiquidationIncentiveEnabledSet\\n     */\\n    function setDynamicLiquidationIncentiveEnabled(address market, bool enabled) external {\\n        _checkAccessAllowed(\\\"setDynamicLiquidationIncentiveEnabled(address,bool)\\\");\\n        dynamicLiquidationIncentiveEnabled[market] = enabled;\\n        emit DynamicLiquidationIncentiveEnabledSet(market, enabled);\\n    }\\n\\n    /**\\n     * @notice Calculate the close factor for a liquidation\\n     * @param borrowBalance The borrow balance of the borrower\\n     * @param wtAvg The weighted average of the collateral\\n     * @param totalCollateral The total collateral available for liquidation\\n     * @param dynamicLiquidationIncentive The dynamic liquidation incentive, scaled by 1e18\\n     * @param maxLiquidationIncentive The maximum liquidation incentive allowed\\n     * @return closeFactor The calculated close factor, scaled by 1e18\\n     */\\n    function calculateDynamicCloseFactor(\\n        address market,\\n        uint256 borrowBalance,\\n        uint256 wtAvg,\\n        uint256 totalCollateral,\\n        uint256 dynamicLiquidationIncentive,\\n        uint256 maxLiquidationIncentive\\n    ) external view returns (uint256 closeFactor) {\\n        if (!dynamicCloseFactorEnabled[market]) {\\n            // Use default close factor if dynamic close factor is not enabled\\n            return defaultCloseFactorMantissa;\\n        }\\n\\n        if (dynamicLiquidationIncentive == maxLiquidationIncentive) {\\n            // Prevent underflow\\n            if (wtAvg * totalCollateral > borrowBalance * mantissaOne) {\\n                revert CollateralExceedsBorrowCapacity();\\n            }\\n\\n            uint256 numerator = (borrowBalance * targetHealthFactor - wtAvg * totalCollateral) / mantissaOne;\\n            uint256 denominator = borrowBalance *\\n                (targetHealthFactor - ((wtAvg * maxLiquidationIncentive) / mantissaOne));\\n\\n            uint256 dynamicCloseFactor = numerator / denominator;\\n            uint256 dynamicBaseCloseFactor = baseCloseFactorMantissa * (mantissaOne - dynamicCloseFactor);\\n            closeFactor = add_(dynamicCloseFactor, dynamicBaseCloseFactor);\\n            closeFactor = closeFactor > mantissaOne ? mantissaOne : closeFactor;\\n        } else {\\n            closeFactor = mantissaOne; // Liquidate 100% if unhealthy\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate the dynamic liquidation incentive based on health factor and average liquidation threshold\\n     * @param healthFactor The health factor of the borrower\\n     * @param liquidationThresholdAvg The average liquidation threshold of the collateral\\n     * @param maxLiquidationIncentiveMantissa The maximum liquidation incentive allowed, scaled by 1e18\\n     * @return incentive The calculated dynamic liquidation incentive, scaled by 1e18\\n     */\\n    function calculateDynamicLiquidationIncentive(\\n        address market,\\n        uint256 healthFactor,\\n        uint256 liquidationThresholdAvg,\\n        uint256 maxLiquidationIncentiveMantissa\\n    ) external view returns (uint256 incentive) {\\n        if (!dynamicLiquidationIncentiveEnabled[market]) {\\n            return maxLiquidationIncentiveMantissa;\\n        }\\n\\n        uint256 value = (healthFactor * mantissaOne) / liquidationThresholdAvg;\\n        return value > maxLiquidationIncentiveMantissa ? maxLiquidationIncentiveMantissa : value;\\n    }\\n}\\n\",\"keccak256\":\"0x60b7e37b9274800da3ea4b988a97f28246a9daa04b55f7b15978c728961e4508\",\"license\":\"BSD-3-Clause\"},\"contracts/Liquidator/Liquidator.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\nimport { ReentrancyGuardUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport { Ownable2StepUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport { SafeERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport { ensureNonzeroAddress } from \\\"@venusprotocol/solidity-utilities/contracts/validators.sol\\\";\\nimport { AccessControlledV8 } from \\\"@venusprotocol/governance-contracts/contracts/Governance/AccessControlledV8.sol\\\";\\nimport { IProtocolShareReserve } from \\\"../external/IProtocolShareReserve.sol\\\";\\nimport { IWBNB } from \\\"../external/IWBNB.sol\\\";\\nimport { LiquidatorStorage } from \\\"./LiquidatorStorage.sol\\\";\\nimport { IComptroller, IVToken, IVBep20, IVBNB, IVAIController } from \\\"../InterfacesV8.sol\\\";\\nimport { ComptrollerLensInterface } from \\\"../Comptroller/ComptrollerLensInterface.sol\\\";\\nimport { VToken } from \\\"../Tokens/VTokens/VToken.sol\\\";\\nimport { WeightFunction } from \\\"../Comptroller/Diamond/interfaces/IFacetBase.sol\\\";\\n\\ncontract Liquidator is Ownable2StepUpgradeable, ReentrancyGuardUpgradeable, LiquidatorStorage, AccessControlledV8 {\\n    /// @notice Address of vBNB contract.\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    IVBNB public immutable vBnb;\\n\\n    /// @notice Address of Venus Unitroller contract.\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    IComptroller public immutable comptroller;\\n\\n    /// @notice Address of VAIUnitroller contract.\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    IVAIController public immutable vaiController;\\n\\n    /// @notice Address of wBNB contract\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address public immutable wBNB;\\n\\n    /// @notice Address of Venus ComptrollerLens contract.\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    ComptrollerLensInterface public immutable comptrollerLens;\\n\\n    /// @dev A unit (literal one) in EXP_SCALE, usually used in additions/subtractions\\n    uint256 internal constant MANTISSA_ONE = 1e18;\\n\\n    /* Events */\\n\\n    /// @notice Emitted when the percent of the seized amount that goes to treasury changes.\\n    event NewLiquidationTreasuryPercent(uint256 oldPercent, uint256 newPercent);\\n\\n    /// @notice Emitted when a borrow is liquidated\\n    event LiquidateBorrowedTokens(\\n        address indexed liquidator,\\n        address indexed borrower,\\n        uint256 repayAmount,\\n        address vTokenBorrowed,\\n        address indexed vTokenCollateral,\\n        uint256 seizeTokensForTreasury,\\n        uint256 seizeTokensForLiquidator\\n    );\\n\\n    /// @notice Emitted when the liquidation is restricted for a borrower\\n    event LiquidationRestricted(address indexed borrower);\\n\\n    /// @notice Emitted when the liquidation restrictions are removed for a borrower\\n    event LiquidationRestrictionsDisabled(address indexed borrower);\\n\\n    /// @notice Emitted when a liquidator is added to the allowedLiquidatorsByAccount mapping\\n    event AllowlistEntryAdded(address indexed borrower, address indexed liquidator);\\n\\n    /// @notice Emitted when a liquidator is removed from the allowedLiquidatorsByAccount mapping\\n    event AllowlistEntryRemoved(address indexed borrower, address indexed liquidator);\\n\\n    /// @notice Emitted when the amount of minLiquidatableVAI is updated\\n    event NewMinLiquidatableVAI(uint256 oldMinLiquidatableVAI, uint256 newMinLiquidatableVAI);\\n\\n    /// @notice Emitted when the length of chunk gets updated\\n    event NewPendingRedeemChunkLength(uint256 oldPendingRedeemChunkLength, uint256 newPendingRedeemChunkLength);\\n\\n    /// @notice Emitted when force liquidation is paused\\n    event ForceVAILiquidationPaused(address indexed sender);\\n\\n    /// @notice Emitted when force liquidation is resumed\\n    event ForceVAILiquidationResumed(address indexed sender);\\n\\n    /// @notice Emitted when new address of protocol share reserve is set\\n    event NewProtocolShareReserve(address indexed oldProtocolShareReserve, address indexed newProtocolShareReserves);\\n\\n    /// @notice Emitted when reserves are reduced from liquidator contract to protocol share reserves\\n    event ProtocolLiquidationIncentiveTransferred(address indexed sender, address indexed token, uint256 reducedAmount);\\n\\n    /* Errors */\\n\\n    /// @notice Thrown if the liquidation is restricted and the liquidator is not in the allowedLiquidatorsByAccount mapping\\n    error LiquidationNotAllowed(address borrower, address liquidator);\\n\\n    /// @notice Thrown if VToken transfer fails after the liquidation\\n    error VTokenTransferFailed(address from, address to, uint256 amount);\\n\\n    /// @notice Thrown if the liquidation is not successful (the error code is from TokenErrorReporter)\\n    error LiquidationFailed(uint256 errorCode);\\n\\n    /// @notice Thrown if trying to restrict liquidations for an already restricted borrower\\n    error AlreadyRestricted(address borrower);\\n\\n    /// @notice Thrown if trying to unrestrict liquidations for a borrower that is not restricted\\n    error NoRestrictionsExist(address borrower);\\n\\n    /// @notice Thrown if the liquidator is already in the allowedLiquidatorsByAccount mapping\\n    error AlreadyAllowed(address borrower, address liquidator);\\n\\n    /// @notice Thrown if trying to remove a liquidator that is not in the allowedLiquidatorsByAccount mapping\\n    error AllowlistEntryNotFound(address borrower, address liquidator);\\n\\n    /// @notice Thrown if BNB amount sent with the transaction doesn't correspond to the\\n    ///         intended BNB repayment\\n    error WrongTransactionAmount(uint256 expected, uint256 actual);\\n\\n    /// @notice Thrown if trying to set treasury percent larger than the liquidation profit\\n    error TreasuryPercentTooHigh(uint256 maxTreasuryPercentMantissa, uint256 treasuryPercentMantissa_);\\n\\n    /// @notice Thrown if trying to liquidate any token when VAI debt is too high\\n    error VAIDebtTooHigh(uint256 vaiDebt, uint256 minLiquidatableVAI);\\n\\n    /// @notice Thrown when vToken is not listed\\n    error MarketNotListed(address vToken);\\n\\n    /// @notice Thrown when the liquidation snapshot fails\\n    error SnapshotError(uint256 errorCode);\\n\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    /// @notice Constructor for the implementation contract. Sets immutable variables.\\n    /// @param comptroller_ The address of the Comptroller contract\\n    /// @param vBnb_ The address of the VBNB\\n    /// @param wBNB_ The address of wBNB\\n    /// @param comptrollerLens_ The address of the ComptrollerLens contract\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address comptroller_, address payable vBnb_, address wBNB_, address comptrollerLens_) {\\n        ensureNonzeroAddress(vBnb_);\\n        ensureNonzeroAddress(comptroller_);\\n        ensureNonzeroAddress(wBNB_);\\n        ensureNonzeroAddress(comptrollerLens_);\\n        vBnb = IVBNB(vBnb_);\\n        wBNB = wBNB_;\\n        comptroller = IComptroller(comptroller_);\\n        comptrollerLens = ComptrollerLensInterface(comptrollerLens_);\\n        vaiController = IVAIController(IComptroller(comptroller_).vaiController());\\n        _disableInitializers();\\n    }\\n\\n    receive() external payable {}\\n\\n    /// @notice Initializer for the implementation contract.\\n    /// @param treasuryPercentMantissa_ Treasury share, scaled by 1e18 (e.g. 0.2 * 1e18 for 20%)\\n    /// @param accessControlManager_ address of access control manager\\n    /// @param protocolShareReserve_ The address of the protocol share reserve contract\\n    function initialize(\\n        uint256 treasuryPercentMantissa_,\\n        address accessControlManager_,\\n        address protocolShareReserve_\\n    ) external virtual reinitializer(2) {\\n        __Liquidator_init(treasuryPercentMantissa_, accessControlManager_, protocolShareReserve_);\\n    }\\n\\n    /// @dev Liquidator initializer for derived contracts.\\n    /// @param treasuryPercentMantissa_ Treasury share, scaled by 1e18 (e.g. 0.2 * 1e18 for 20%)\\n    /// @param accessControlManager_ address of access control manager\\n    /// @param protocolShareReserve_ The address of the protocol share reserve contract\\n    function __Liquidator_init(\\n        uint256 treasuryPercentMantissa_,\\n        address accessControlManager_,\\n        address protocolShareReserve_\\n    ) internal onlyInitializing {\\n        __Ownable2Step_init();\\n        __ReentrancyGuard_init();\\n        __Liquidator_init_unchained(treasuryPercentMantissa_, protocolShareReserve_);\\n        __AccessControlled_init_unchained(accessControlManager_);\\n    }\\n\\n    /// @dev Liquidator initializer for derived contracts that doesn't call parent initializers.\\n    /// @param treasuryPercentMantissa_ Treasury share, scaled by 1e18 (e.g. 0.2 * 1e18 for 20%)\\n    /// @param protocolShareReserve_ The address of the protocol share reserve contract\\n    function __Liquidator_init_unchained(\\n        uint256 treasuryPercentMantissa_,\\n        address protocolShareReserve_\\n    ) internal onlyInitializing {\\n        validateTreasuryPercentMantissa(treasuryPercentMantissa_);\\n        treasuryPercentMantissa = treasuryPercentMantissa_;\\n        _setProtocolShareReserve(protocolShareReserve_);\\n    }\\n\\n    /// @notice An admin function to restrict liquidations to allowed addresses only.\\n    /// @dev Use {addTo,removeFrom}AllowList to configure the allowed addresses.\\n    /// @param borrower The address of the borrower\\n    function restrictLiquidation(address borrower) external {\\n        _checkAccessAllowed(\\\"restrictLiquidation(address)\\\");\\n        if (liquidationRestricted[borrower]) {\\n            revert AlreadyRestricted(borrower);\\n        }\\n        liquidationRestricted[borrower] = true;\\n        emit LiquidationRestricted(borrower);\\n    }\\n\\n    /// @notice An admin function to remove restrictions for liquidations.\\n    /// @dev Does not impact the allowedLiquidatorsByAccount mapping for the borrower, just turns off the check.\\n    /// @param borrower The address of the borrower\\n    function unrestrictLiquidation(address borrower) external {\\n        _checkAccessAllowed(\\\"unrestrictLiquidation(address)\\\");\\n        if (!liquidationRestricted[borrower]) {\\n            revert NoRestrictionsExist(borrower);\\n        }\\n        liquidationRestricted[borrower] = false;\\n        emit LiquidationRestrictionsDisabled(borrower);\\n    }\\n\\n    /// @notice An admin function to add the liquidator to the allowedLiquidatorsByAccount mapping for a certain\\n    ///         borrower. If the liquidations are restricted, only liquidators from the\\n    ///         allowedLiquidatorsByAccount mapping can participate in liquidating the positions of this borrower.\\n    /// @param borrower The address of the borrower\\n    /// @param borrower The address of the liquidator\\n    function addToAllowlist(address borrower, address liquidator) external {\\n        _checkAccessAllowed(\\\"addToAllowlist(address,address)\\\");\\n        if (allowedLiquidatorsByAccount[borrower][liquidator]) {\\n            revert AlreadyAllowed(borrower, liquidator);\\n        }\\n        allowedLiquidatorsByAccount[borrower][liquidator] = true;\\n        emit AllowlistEntryAdded(borrower, liquidator);\\n    }\\n\\n    /// @notice An admin function to remove the liquidator from the allowedLiquidatorsByAccount mapping of a certain\\n    ///         borrower. If the liquidations are restricted, this liquidator will not be\\n    ///         able to liquidate the positions of this borrower.\\n    /// @param borrower The address of the borrower\\n    /// @param borrower The address of the liquidator\\n    function removeFromAllowlist(address borrower, address liquidator) external {\\n        _checkAccessAllowed(\\\"removeFromAllowlist(address,address)\\\");\\n        if (!allowedLiquidatorsByAccount[borrower][liquidator]) {\\n            revert AllowlistEntryNotFound(borrower, liquidator);\\n        }\\n        allowedLiquidatorsByAccount[borrower][liquidator] = false;\\n        emit AllowlistEntryRemoved(borrower, liquidator);\\n    }\\n\\n    /// @notice Liquidates a borrow and splits the seized amount between protocol share reserve and\\n    ///         liquidator. The liquidators should use this interface instead of calling\\n    ///         vToken.liquidateBorrow(...) directly.\\n    /// @notice Checks force VAI liquidation first; vToken should be address of vaiController if vaiDebt is greater than threshold\\n    /// @notice For BNB borrows msg.value should be equal to repayAmount; otherwise msg.value\\n    ///      should be zero.\\n    /// @param vToken Borrowed vToken\\n    /// @param borrower The address of the borrower\\n    /// @param repayAmount The amount to repay on behalf of the borrower\\n    /// @param vTokenCollateral The collateral to seize\\n    function liquidateBorrow(\\n        address vToken,\\n        address borrower,\\n        uint256 repayAmount,\\n        IVToken vTokenCollateral\\n    ) external payable nonReentrant {\\n        ensureNonzeroAddress(borrower);\\n        checkRestrictions(borrower, msg.sender);\\n        (bool isListed, , ) = IComptroller(comptroller).markets(address(vTokenCollateral));\\n        if (!isListed) {\\n            revert MarketNotListed(address(vTokenCollateral));\\n        }\\n\\n        ComptrollerLensInterface.AccountSnapshot memory snapshot = _getHealthSnapshot(\\n            borrower,\\n            address(vTokenCollateral),\\n            repayAmount\\n        );\\n        uint256 totalIncentive = comptroller.getDynamicLiquidationIncentive(\\n            address(vTokenCollateral),\\n            snapshot.liquidationThresholdAvg,\\n            snapshot.healthFactor\\n        );\\n        snapshot.dynamicLiquidationIncentiveMantissa = totalIncentive;\\n\\n        _checkForceVAILiquidate(vToken, borrower);\\n        uint256 ourBalanceBefore = vTokenCollateral.balanceOf(address(this));\\n        if (vToken == address(vBnb)) {\\n            if (repayAmount != msg.value) {\\n                revert WrongTransactionAmount(repayAmount, msg.value);\\n            }\\n            vBnb.liquidateBorrow{ value: msg.value }(borrower, vTokenCollateral);\\n        } else {\\n            if (msg.value != 0) {\\n                revert WrongTransactionAmount(0, msg.value);\\n            }\\n            if (vToken == address(vaiController)) {\\n                _liquidateVAI(borrower, repayAmount, vTokenCollateral, snapshot);\\n            } else {\\n                _liquidateBep20(IVBep20(vToken), borrower, repayAmount, vTokenCollateral, snapshot);\\n            }\\n        }\\n        uint256 ourBalanceAfter = vTokenCollateral.balanceOf(address(this));\\n        (uint256 ours, uint256 theirs) = _distributeLiquidationIncentive(\\n            vTokenCollateral,\\n            (ourBalanceAfter - ourBalanceBefore),\\n            totalIncentive\\n        );\\n        _reduceReservesInternal();\\n        emit LiquidateBorrowedTokens(\\n            msg.sender,\\n            borrower,\\n            repayAmount,\\n            vToken,\\n            address(vTokenCollateral),\\n            ours,\\n            theirs\\n        );\\n    }\\n\\n    /// @notice Sets the new percent of the seized amount that goes to treasury. Should\\n    ///         be less than or equal to comptroller.liquidationIncentiveMantissa().sub(1e18).\\n    /// @param newTreasuryPercentMantissa New treasury percent (scaled by 10^18).\\n    function setTreasuryPercent(uint256 newTreasuryPercentMantissa) external {\\n        _checkAccessAllowed(\\\"setTreasuryPercent(uint256)\\\");\\n        validateTreasuryPercentMantissa(newTreasuryPercentMantissa);\\n        emit NewLiquidationTreasuryPercent(treasuryPercentMantissa, newTreasuryPercentMantissa);\\n        treasuryPercentMantissa = newTreasuryPercentMantissa;\\n    }\\n\\n    /**\\n     * @notice Sets protocol share reserve contract address\\n     * @param protocolShareReserve_ The address of the protocol share reserve contract\\n     */\\n    function setProtocolShareReserve(address payable protocolShareReserve_) external onlyOwner {\\n        _setProtocolShareReserve(protocolShareReserve_);\\n    }\\n\\n    /**\\n     * @notice Reduce the reserves of the pending accumulated reserves\\n     */\\n    function reduceReserves() external nonReentrant {\\n        _reduceReservesInternal();\\n    }\\n\\n    function _reduceReservesInternal() internal {\\n        uint256 _pendingRedeemLength = pendingRedeem.length;\\n        uint256 range = _pendingRedeemLength >= pendingRedeemChunkLength\\n            ? pendingRedeemChunkLength\\n            : _pendingRedeemLength;\\n        for (uint256 index = range; index > 0; ) {\\n            address vToken = pendingRedeem[index - 1];\\n            uint256 vTokenBalance_ = IVToken(vToken).balanceOf(address(this));\\n            if (_redeemUnderlying(vToken, vTokenBalance_)) {\\n                if (vToken == address(vBnb)) {\\n                    _reduceBnbReserves();\\n                } else {\\n                    _reduceVTokenReserves(vToken);\\n                }\\n                pendingRedeem[index - 1] = pendingRedeem[pendingRedeem.length - 1];\\n                pendingRedeem.pop();\\n            }\\n            unchecked {\\n                index--;\\n            }\\n        }\\n    }\\n\\n    /// @dev Transfers BEP20 tokens to self, then approves vToken to take these tokens.\\n    function _liquidateBep20(\\n        IVBep20 vToken,\\n        address borrower,\\n        uint256 repayAmount,\\n        IVToken vTokenCollateral,\\n        ComptrollerLensInterface.AccountSnapshot memory snapshot\\n    ) internal {\\n        (bool isListed, , ) = IComptroller(comptroller).markets(address(vToken));\\n        if (!isListed) {\\n            revert MarketNotListed(address(vToken));\\n        }\\n\\n        IERC20Upgradeable borrowedToken = IERC20Upgradeable(vToken.underlying());\\n        uint256 actualRepayAmount = _transferBep20(borrowedToken, msg.sender, address(this), repayAmount);\\n        borrowedToken.safeApprove(address(vToken), 0);\\n        borrowedToken.safeApprove(address(vToken), actualRepayAmount);\\n        requireNoError(vToken.liquidateBorrow(borrower, actualRepayAmount, vTokenCollateral, snapshot));\\n    }\\n\\n    /// @dev Transfers BEP20 tokens to self, then approves VAI to take these tokens.\\n    function _liquidateVAI(\\n        address borrower,\\n        uint256 repayAmount,\\n        IVToken vTokenCollateral,\\n        ComptrollerLensInterface.AccountSnapshot memory snapshot\\n    ) internal {\\n        IERC20Upgradeable vai = IERC20Upgradeable(vaiController.getVAIAddress());\\n        vai.safeTransferFrom(msg.sender, address(this), repayAmount);\\n        vai.safeApprove(address(vaiController), 0);\\n        vai.safeApprove(address(vaiController), repayAmount);\\n\\n        (uint256 err, ) = vaiController.liquidateVAI(borrower, repayAmount, vTokenCollateral, snapshot);\\n        requireNoError(err);\\n    }\\n\\n    /// @dev Distribute seized collateral between liquidator and protocol share reserve\\n    function _distributeLiquidationIncentive(\\n        IVToken vTokenCollateral,\\n        uint256 seizedAmount,\\n        uint256 totalIncentive\\n    ) internal returns (uint256 ours, uint256 theirs) {\\n        (ours, theirs) = _splitLiquidationIncentive(seizedAmount, totalIncentive);\\n        // (ours, theirs) = _splitLiquidationIncentive(borrower, address(vTokenCollateral), seizedAmount);\\n        if (!vTokenCollateral.transfer(msg.sender, theirs)) {\\n            revert VTokenTransferFailed(address(this), msg.sender, theirs);\\n        }\\n\\n        if (ours > 0 && !_redeemUnderlying(address(vTokenCollateral), ours)) {\\n            // Check if asset is already present in pendingRedeem array\\n            uint256 index;\\n            for (index; index < pendingRedeem.length; ) {\\n                if (pendingRedeem[index] == address(vTokenCollateral)) {\\n                    break;\\n                }\\n                unchecked {\\n                    index++;\\n                }\\n            }\\n            if (index == pendingRedeem.length) {\\n                pendingRedeem.push(address(vTokenCollateral));\\n            }\\n        } else {\\n            if (address(vTokenCollateral) == address(vBnb)) {\\n                _reduceBnbReserves();\\n            } else {\\n                _reduceVTokenReserves(address(vTokenCollateral));\\n            }\\n        }\\n    }\\n\\n    /// @dev Wraps BNB to wBNB and sends to protocol share reserve\\n    function _reduceBnbReserves() private {\\n        uint256 bnbBalance = address(this).balance;\\n        IWBNB(wBNB).deposit{ value: bnbBalance }();\\n        IERC20Upgradeable(wBNB).safeTransfer(protocolShareReserve, bnbBalance);\\n        IProtocolShareReserve(protocolShareReserve).updateAssetsState(\\n            address(comptroller),\\n            wBNB,\\n            IProtocolShareReserve.IncomeType.LIQUIDATION\\n        );\\n        emit ProtocolLiquidationIncentiveTransferred(msg.sender, wBNB, bnbBalance);\\n    }\\n\\n    /// @dev Redeem seized collateral to underlying assets\\n    function _redeemUnderlying(address vToken, uint256 amount) private returns (bool) {\\n        try IVToken(address(vToken)).redeem(amount) returns (uint256 response) {\\n            if (response == 0) {\\n                return true;\\n            } else {\\n                return false;\\n            }\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    /// @dev Transfers seized collateral other than BNB to protocol share reserve\\n    function _reduceVTokenReserves(address vToken) private {\\n        address underlying = IVBep20(vToken).underlying();\\n        uint256 underlyingBalance = IERC20Upgradeable(underlying).balanceOf(address(this));\\n        IERC20Upgradeable(underlying).safeTransfer(protocolShareReserve, underlyingBalance);\\n        IProtocolShareReserve(protocolShareReserve).updateAssetsState(\\n            address(comptroller),\\n            underlying,\\n            IProtocolShareReserve.IncomeType.LIQUIDATION\\n        );\\n        emit ProtocolLiquidationIncentiveTransferred(msg.sender, underlying, underlyingBalance);\\n    }\\n\\n    /// @dev Transfers tokens and returns the actual transfer amount\\n    function _transferBep20(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal returns (uint256) {\\n        uint256 prevBalance = token.balanceOf(to);\\n        token.safeTransferFrom(from, to, amount);\\n        return token.balanceOf(to) - prevBalance;\\n    }\\n\\n    /// @dev Computes the amounts that would go to treasury and to the liquidator.\\n    function _splitLiquidationIncentive(\\n        uint256 seizedAmount,\\n        uint256 totalIncentive\\n    ) internal view returns (uint256 ours, uint256 theirs) {\\n        uint256 bonusMantissa = totalIncentive - MANTISSA_ONE;\\n\\n        // Our share is % of bonus portion only\\n        uint256 bonusAmount = (seizedAmount * bonusMantissa) / totalIncentive;\\n        ours = (bonusAmount * treasuryPercentMantissa) / MANTISSA_ONE;\\n\\n        theirs = seizedAmount - ours;\\n    }\\n\\n    function requireNoError(uint256 errCode) internal pure {\\n        if (errCode == uint256(0)) {\\n            return;\\n        }\\n\\n        revert LiquidationFailed(errCode);\\n    }\\n\\n    function _getHealthSnapshot(\\n        address borrower,\\n        address vTokenCollateral,\\n        uint256 repayAmount\\n    ) internal view returns (ComptrollerLensInterface.AccountSnapshot memory) {\\n        (uint256 err, ComptrollerLensInterface.AccountSnapshot memory snapshot) = comptrollerLens\\n            .getAccountHealthSnapshot(\\n                address(comptroller),\\n                borrower,\\n                VToken(vTokenCollateral),\\n                0,\\n                repayAmount,\\n                WeightFunction.USE_LIQUIDATION_THRESHOLD\\n            );\\n        if (err != 0) revert SnapshotError(err);\\n        return snapshot;\\n    }\\n\\n    function checkRestrictions(address borrower, address liquidator) internal view {\\n        if (liquidationRestricted[borrower] && !allowedLiquidatorsByAccount[borrower][liquidator]) {\\n            revert LiquidationNotAllowed(borrower, liquidator);\\n        }\\n    }\\n\\n    function validateTreasuryPercentMantissa(uint256 treasuryPercentMantissa_) internal view {\\n        if (treasuryPercentMantissa_ > MANTISSA_ONE) {\\n            revert TreasuryPercentTooHigh(MANTISSA_ONE, treasuryPercentMantissa_);\\n        }\\n    }\\n\\n    /// @dev Checks liquidation action in comptroller and vaiDebt with minLiquidatableVAI threshold\\n    function _checkForceVAILiquidate(address vToken_, address borrower_) private view {\\n        uint256 _vaiDebt = vaiController.getVAIRepayAmount(borrower_);\\n        bool _isVAILiquidationPaused = comptroller.actionPaused(address(vaiController), IComptroller.Action.LIQUIDATE);\\n        bool _isForcedLiquidationEnabled = comptroller.isForcedLiquidationEnabled(vToken_);\\n        if (\\n            _isForcedLiquidationEnabled ||\\n            _isVAILiquidationPaused ||\\n            !forceVAILiquidate ||\\n            _vaiDebt < minLiquidatableVAI ||\\n            vToken_ == address(vaiController)\\n        ) return;\\n        revert VAIDebtTooHigh(_vaiDebt, minLiquidatableVAI);\\n    }\\n\\n    function _setProtocolShareReserve(address protocolShareReserve_) internal {\\n        ensureNonzeroAddress(protocolShareReserve_);\\n        emit NewProtocolShareReserve(protocolShareReserve, protocolShareReserve_);\\n        protocolShareReserve = protocolShareReserve_;\\n    }\\n\\n    /**\\n     * @notice Sets the threshold for minimum amount of vaiLiquidate\\n     * @param minLiquidatableVAI_ New address for the access control\\n     */\\n    function setMinLiquidatableVAI(uint256 minLiquidatableVAI_) external {\\n        _checkAccessAllowed(\\\"setMinLiquidatableVAI(uint256)\\\");\\n        emit NewMinLiquidatableVAI(minLiquidatableVAI, minLiquidatableVAI_);\\n        minLiquidatableVAI = minLiquidatableVAI_;\\n    }\\n\\n    /**\\n     * @notice Length of the pendingRedeem array to be consider while redeeming in Liquidation transaction\\n     * @param newLength_ Length of the chunk\\n     */\\n    function setPendingRedeemChunkLength(uint256 newLength_) external {\\n        _checkAccessAllowed(\\\"setPendingRedeemChunkLength(uint256)\\\");\\n        require(newLength_ > 0, \\\"Invalid chunk size\\\");\\n        emit NewPendingRedeemChunkLength(pendingRedeemChunkLength, newLength_);\\n        pendingRedeemChunkLength = newLength_;\\n    }\\n\\n    /**\\n     * @notice Pause Force Liquidation of VAI\\n     */\\n    function pauseForceVAILiquidate() external {\\n        _checkAccessAllowed(\\\"pauseForceVAILiquidate()\\\");\\n        require(forceVAILiquidate, \\\"Force Liquidation of VAI is already Paused\\\");\\n        forceVAILiquidate = false;\\n        emit ForceVAILiquidationPaused(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Resume Force Liquidation of VAI\\n     */\\n    function resumeForceVAILiquidate() external {\\n        _checkAccessAllowed(\\\"resumeForceVAILiquidate()\\\");\\n        require(!forceVAILiquidate, \\\"Force Liquidation of VAI is already resumed\\\");\\n        forceVAILiquidate = true;\\n        emit ForceVAILiquidationResumed(msg.sender);\\n    }\\n\\n    function renounceOwnership() public override {}\\n}\\n\",\"keccak256\":\"0x41a5637e17de2396858b25627368b3f87127845a607bc0f425fca806fba135ab\",\"license\":\"BSD-3-Clause\"},\"contracts/Liquidator/LiquidatorStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\ncontract LiquidatorStorage {\\n    /* State */\\n\\n    /// @notice Percent of seized amount that goes to treasury.\\n    uint256 public treasuryPercentMantissa;\\n\\n    /// @notice Mapping of addresses allowed to liquidate an account if liquidationRestricted[borrower] == true\\n    mapping(address => mapping(address => bool)) public allowedLiquidatorsByAccount;\\n\\n    /// @notice Whether the liquidations are restricted to enabled allowedLiquidatorsByAccount addresses only\\n    mapping(address => bool) public liquidationRestricted;\\n\\n    /// @notice minimum amount of VAI liquidation threshold\\n    uint256 public minLiquidatableVAI;\\n\\n    /// @notice check for liquidation of VAI\\n    bool public forceVAILiquidate;\\n\\n    /// @notice assests whose redeem is pending to reduce reserves\\n    address[] public pendingRedeem;\\n\\n    /// @notice protocol share reserve contract address\\n    address public protocolShareReserve;\\n\\n    /// @dev Size of chunk to consider when redeeming underlying at the time of liquidation\\n    uint256 internal pendingRedeemChunkLength;\\n\\n    /// @notice gap to prevent collision in inheritance\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf915710b8c751ddcd3ebb963c13198643dd66144bf4b28f76809cb9b427d5318\",\"license\":\"BSD-3-Clause\"},\"contracts/Tokens/VAI/VAIControllerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.25;\\n\\nimport { VTokenInterface } from \\\"../VTokens/VTokenInterfaces.sol\\\";\\nimport { ComptrollerLensInterface } from \\\"../../Comptroller/ComptrollerLensInterface.sol\\\";\\n\\ninterface VAIControllerInterface {\\n    function mintVAI(uint256 mintVAIAmount) external returns (uint256);\\n\\n    function repayVAI(uint256 amount) external returns (uint256, uint256);\\n\\n    function repayVAIBehalf(address borrower, uint256 amount) external returns (uint256, uint256);\\n\\n    function liquidateVAI(\\n        address borrower,\\n        uint256 repayAmount,\\n        VTokenInterface vTokenCollateral,\\n        ComptrollerLensInterface.AccountSnapshot memory snapshot\\n    ) external returns (uint256, uint256);\\n\\n    function getMintableVAI(address minter) external view returns (uint256, uint256);\\n\\n    function getVAIAddress() external view returns (address);\\n\\n    function getVAIRepayAmount(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x869d5b805de3d3e1b2bc920f907efe4f559c9c6774aed86593ac758775c8411a\",\"license\":\"BSD-3-Clause\"},\"contracts/Tokens/VTokens/VToken.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.25;\\n\\nimport { IAccessControlManagerV8 } from \\\"@venusprotocol/governance-contracts/contracts/Governance/IAccessControlManagerV8.sol\\\";\\nimport { IProtocolShareReserve } from \\\"../../external/IProtocolShareReserve.sol\\\";\\nimport { ComptrollerInterface, IComptroller } from \\\"../../Comptroller/ComptrollerInterface.sol\\\";\\nimport { TokenErrorReporter } from \\\"../../Utils/ErrorReporter.sol\\\";\\nimport { Exponential } from \\\"../../Utils/Exponential.sol\\\";\\nimport { InterestRateModelV8 } from \\\"../../InterestRateModels/InterestRateModelV8.sol\\\";\\nimport { VTokenInterface } from \\\"./VTokenInterfaces.sol\\\";\\nimport { ComptrollerLensInterface } from \\\"../../Comptroller/ComptrollerLensInterface.sol\\\";\\nimport { IFlashLoanSimpleReceiver } from \\\"../../FlashLoan/interfaces/IFlashLoanSimpleReceiver.sol\\\";\\n\\n/**\\n * @title Venus's vToken Contract\\n * @notice Abstract base for vTokens\\n * @author Venus\\n */\\nabstract contract VToken is VTokenInterface, Exponential, TokenErrorReporter {\\n    struct MintLocalVars {\\n        MathError mathErr;\\n        uint exchangeRateMantissa;\\n        uint mintTokens;\\n        uint totalSupplyNew;\\n        uint accountTokensNew;\\n        uint actualMintAmount;\\n    }\\n\\n    struct RedeemLocalVars {\\n        MathError mathErr;\\n        uint exchangeRateMantissa;\\n        uint redeemTokens;\\n        uint redeemAmount;\\n        uint totalSupplyNew;\\n        uint accountTokensNew;\\n    }\\n\\n    struct BorrowLocalVars {\\n        MathError mathErr;\\n        uint accountBorrows;\\n        uint accountBorrowsNew;\\n        uint totalBorrowsNew;\\n    }\\n\\n    struct RepayBorrowLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint repayAmount;\\n        uint borrowerIndex;\\n        uint accountBorrows;\\n        uint accountBorrowsNew;\\n        uint totalBorrowsNew;\\n        uint actualRepayAmount;\\n    }\\n\\n    /*** Reentrancy Guard ***/\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     */\\n    modifier nonReentrant() {\\n        require(_notEntered, \\\"re-entered\\\");\\n        _notEntered = false;\\n        _;\\n        _notEntered = true; // get a gas-refund post-Istanbul\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    // @custom:event Emits Transfer event\\n    function transfer(address dst, uint256 amount) external override nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, msg.sender, dst, amount) == uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    // @custom:event Emits Transfer event\\n    function transferFrom(address src, address dst, uint256 amount) external override nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, src, dst, amount) == uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (type(uint256).max means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    // @custom:event Emits Approval event on successful approve\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\n        transferAllowances[msg.sender][spender] = amount;\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the underlying balance of the `owner`\\n     * @dev This also accrues interest in a transaction\\n     * @param owner The address of the account to query\\n     * @return The amount of underlying owned by `owner`\\n     */\\n    function balanceOfUnderlying(address owner) external override returns (uint) {\\n        Exp memory exchangeRate = Exp({ mantissa: exchangeRateCurrent() });\\n        (MathError mErr, uint balance) = mulScalarTruncate(exchangeRate, accountTokens[owner]);\\n        ensureNoMathError(mErr);\\n        return balance;\\n    }\\n\\n    /**\\n     * @notice Returns the current total borrows plus accrued interest\\n     * @return The total borrows with interest\\n     */\\n    function totalBorrowsCurrent() external override nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return totalBorrows;\\n    }\\n\\n    /**\\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\\n     * @param account The address whose balance should be calculated after updating borrowIndex\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceCurrent(address account) external override nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return borrowBalanceStored(account);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Will fail unless called by another vToken during the process of liquidation.\\n     *  Its absolutely critical to use msg.sender as the borrowed vToken and not a parameter.\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of vTokens to seize\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits Transfer event\\n    function seize(\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens\\n    ) external override nonReentrant returns (uint) {\\n        return seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\n    }\\n\\n    /**\\n     * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n     * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n     * @param newPendingAdmin New pending admin.\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits NewPendingAdmin event with old and new admin addresses\\n    function _setPendingAdmin(address payable newPendingAdmin) external override returns (uint) {\\n        // Check caller = admin\\n        ensureAdmin(msg.sender);\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n     * @dev Admin function for pending admin to accept role and update admin\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits NewAdmin event on successful acceptance\\n    // @custom:event Emits NewPendingAdmin event with null new pending admin\\n    function _acceptAdmin() external override returns (uint) {\\n        // Check caller is pendingAdmin\\n        if (msg.sender != pendingAdmin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\\n        }\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = payable(address(0));\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice accrues interest and sets a new reserve factor for the protocol using `_setReserveFactorFresh`\\n     * @dev Governor function to accrue interest and set a new reserve factor\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits NewReserveFactor event\\n    function _setReserveFactor(uint newReserveFactorMantissa_) external override nonReentrant returns (uint) {\\n        ensureAllowed(\\\"_setReserveFactor(uint256)\\\");\\n        checkAccrueInterest(FailureInfo.SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED);\\n\\n        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\\n        return _setReserveFactorFresh(newReserveFactorMantissa_);\\n    }\\n\\n    /**\\n     * @notice Sets the address of the access control manager of this contract\\n     * @dev Admin function to set the access control address\\n     * @param newAccessControlManagerAddress New address for the access control\\n     * @return uint 0=success, otherwise will revert\\n     */\\n    function setAccessControlManager(address newAccessControlManagerAddress) external returns (uint) {\\n        // Check caller is admin\\n        ensureAdmin(msg.sender);\\n\\n        ensureNonZeroAddress(newAccessControlManagerAddress);\\n\\n        emit NewAccessControlManager(accessControlManager, newAccessControlManagerAddress);\\n        accessControlManager = newAccessControlManagerAddress;\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring to protocol share reserve\\n     * @param reduceAmount_ Amount of reduction to reserves\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits ReservesReduced event\\n    function _reduceReserves(uint reduceAmount_) external virtual override nonReentrant returns (uint) {\\n        ensureAllowed(\\\"_reduceReserves(uint256)\\\");\\n        checkAccrueInterest(FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED);\\n\\n        // If reserves were reduced in accrueInterest\\n        if (reduceReservesBlockNumber == block.number) return (uint(Error.NO_ERROR));\\n        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n        return _reduceReservesFresh(reduceAmount_);\\n    }\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return The number of tokens allowed to be spent (type(uint256).max means infinite)\\n     */\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\n        return transferAllowances[owner][spender];\\n    }\\n\\n    /**\\n     * @notice Get the token balance of the `owner`\\n     * @param owner The address of the account to query\\n     * @return The number of tokens owned by `owner`\\n     */\\n    function balanceOf(address owner) external view override returns (uint256) {\\n        return accountTokens[owner];\\n    }\\n\\n    /**\\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\\n     * @dev This is used by comptroller to more efficiently perform liquidity checks.\\n     * @param account Address of the account to snapshot\\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\n     */\\n    function getAccountSnapshot(address account) external view override returns (uint, uint, uint, uint) {\\n        uint borrowBalance;\\n        uint exchangeRateMantissa;\\n\\n        MathError mErr;\\n\\n        (mErr, borrowBalance) = borrowBalanceStoredInternal(account);\\n        if (mErr != MathError.NO_ERROR) {\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\n        }\\n\\n        (mErr, exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (mErr != MathError.NO_ERROR) {\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\n        }\\n\\n        return (uint(Error.NO_ERROR), accountTokens[account], borrowBalance, exchangeRateMantissa);\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block supply interest rate for this vToken\\n     * @return The supply interest rate per block, scaled by 1e18\\n     */\\n    function supplyRatePerBlock() external view override returns (uint) {\\n        return interestRateModel.getSupplyRate(getCashPrior(), totalBorrows, totalReserves, reserveFactorMantissa);\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block borrow interest rate for this vToken\\n     * @return The borrow interest rate per block, scaled by 1e18\\n     */\\n    function borrowRatePerBlock() external view override returns (uint) {\\n        return interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, totalReserves);\\n    }\\n\\n    /**\\n     * @notice Get cash balance of this vToken in the underlying asset\\n     * @return The quantity of underlying asset owned by this contract\\n     */\\n    function getCash() external view override returns (uint) {\\n        return getCashPrior();\\n    }\\n\\n    /**\\n     * @notice Governance function to set new threshold of block difference after which funds will be sent to the protocol share reserve\\n     * @param newReduceReservesBlockDelta_ block difference value\\n     */\\n    function setReduceReservesBlockDelta(uint256 newReduceReservesBlockDelta_) external {\\n        require(newReduceReservesBlockDelta_ > 0, \\\"Invalid Input\\\");\\n        ensureAllowed(\\\"setReduceReservesBlockDelta(uint256)\\\");\\n        emit NewReduceReservesBlockDelta(reduceReservesBlockDelta, newReduceReservesBlockDelta_);\\n        reduceReservesBlockDelta = newReduceReservesBlockDelta_;\\n    }\\n\\n    /**\\n     * @notice Sets protocol share reserve contract address\\n     * @param protcolShareReserve_ The address of protocol share reserve contract\\n     */\\n    function setProtocolShareReserve(address payable protcolShareReserve_) external {\\n        // Check caller is admin\\n        ensureAdmin(msg.sender);\\n        ensureNonZeroAddress(protcolShareReserve_);\\n        emit NewProtocolShareReserve(protocolShareReserve, protcolShareReserve_);\\n        protocolShareReserve = protcolShareReserve_;\\n    }\\n\\n    /**\\n     * @notice Transfers the underlying asset to the specified address.\\n     * @dev Can only be called by the Comptroller contract. This function performs the actual transfer of the underlying\\n     *      asset by calling the `doTransferOut` internal function.\\n     * @param to The address to which the underlying asset is to be transferred.\\n     * @param amount The amount of the underlying asset to transfer.\\n     * requirements\\n     *      - The caller must be the Comptroller contract.\\n     * custom:reverts\\n     *      - Reverts with \\\"Invalid Comptroller\\\" if the caller is not the Comptroller.\\n     * custom:event Emits TransferOutUnderlying event on successful transfer of amount to receiver\\n     */\\n    function transferOutUnderlying(\\n        address payable to,\\n        uint256 amount\\n    ) external nonReentrant returns (uint256 balanceBeforeRepayFlashloan) {\\n        if (msg.sender != address(comptroller)) {\\n            revert(\\\"Invalid comptroller\\\");\\n        }\\n\\n        flashLoanAmount += amount;\\n        doTransferOut(to, amount);\\n\\n        balanceBeforeRepayFlashloan = getCashPrior();\\n        emit TransferOutUnderlying(underlying, to, amount);\\n    }\\n\\n    /**\\n     * @notice Transfers the underlying asset from the specified address.\\n     * @dev Can only be called by the Comptroller contract. This function performs the actual transfer of the underlying\\n     *      asset by calling the `doTransferIn` internal function.\\n     * @param from The address from which the underlying asset is to be transferred.\\n     * @param amount The amount of the underlying asset to transfer.\\n     * @param fee The accrued fee\\n     * @param balanceBefore Cash before transfer in\\n     * requirements\\n     *      - The caller must be the Comptroller contract.\\n     * custom:reverts\\n     *      - Reverts with \\\"Invalid Comptroller\\\" if the caller is not the Comptroller.\\n     * custom:event Emits TransferOutUnderlying event on successful transfer of amount to receiver\\n     */\\n    function transferInUnderlyingAndVerify(\\n        address payable from,\\n        uint256 amount,\\n        uint256 fee,\\n        uint256 balanceBefore\\n    ) external nonReentrant {\\n        if (msg.sender != address(comptroller)) {\\n            revert(\\\"Invalid comptroller\\\");\\n        }\\n\\n        uint256 repayment = amount + fee;\\n        doTransferIn(from, repayment);\\n        flashLoanAmount -= amount;\\n\\n        if ((getCashPrior() - balanceBefore) < repayment) revert InsufficientRepaymentBalance();\\n\\n        emit TransferInUnderlyingAndVerify(underlying, from, repayment);\\n    }\\n\\n    /**\\n     * @notice Executes a flashLoan operation.\\n     * @dev Transfers the amount to the receiver contract and ensures that the total repayment (amount + fee)\\n     *      is returned by the receiver contract after the operation. The function performs checks to ensure the validity\\n     *      of parameters, that flashLoan is enabled for the given asset, and that the total repayment is sufficient.\\n     *      Reverts on invalid parameters, disabled flashLoans, or insufficient repayment.\\n     * @param initiator The address that initiated the flash loan.\\n     * @param receiver The address of the contract that will receive the flashLoan and execute the operation.\\n     * @param amount The amount of asset to be loaned.\\n     * @param param Additional encoded parameters passed with the flash loan.\\n     * custom:requirements\\n     *      - The `receiver` address must not be the zero address.\\n     *      - FlashLoans must be enabled for the asset.\\n     *      - The `receiver` contract must repay the loan with the appropriate fee.\\n     * custom:reverts\\n     *      - Reverts with `Flash loan not authorized for this account` if the initiator is not authorized for flash loans.\\n     *      - Reverts with `FlashLoan not enabled` if flashLoans are disabled for any of the requested assets.\\n     *      - Reverts with `Execute flashLoan failed` if the receiver contract fails to execute the operation.\\n     *      - Reverts with `Insufficient repayment balance` if the repayment (amount + fee) is insufficient after the operation.\\n     * custom:event Emits FlashLoanExecuted event on success\\n     */\\n    function executeFlashLoan(\\n        address initiator,\\n        address payable receiver,\\n        uint256 amount,\\n        bytes calldata param\\n    ) external nonReentrant returns (uint256) {\\n        if (!isFlashLoanEnabled) revert FlashLoanNotEnabled();\\n        ensureNonZeroAddress(receiver);\\n\\n        // Check if the caller is authorized to execute flash loans\\n        if (!comptroller.authorizedFlashLoan(initiator)) revert FlashLoanNotAuthorized();\\n\\n        // Tracks the flashLoan amount before transferring amount to the receiver\\n        flashLoanAmount += amount;\\n\\n        // Transfer the underlying asset to the receiver\\n        doTransferOut(receiver, amount);\\n\\n        uint256 balanceBefore = getCashPrior();\\n        (uint256 protocolFee, uint256 supplierFee) = calculateFlashLoanFee(amount);\\n        uint256 fee = protocolFee + supplierFee;\\n        uint256 repayAmount = amount + fee;\\n\\n        // Call the execute operation on receiver contract\\n        if (!IFlashLoanSimpleReceiver(receiver).executeOperation(underlying, amount, fee, msg.sender, param))\\n            revert ExecuteFlashLoanFailed();\\n\\n        doTransferIn(receiver, repayAmount);\\n        flashLoanAmount -= amount;\\n\\n        if ((getCashPrior() - balanceBefore) < repayAmount) revert InsufficientRepaymentBalance();\\n\\n        // Transfer protocol fee to protocol share reserve\\n        doTransferOut(protocolShareReserve, protocolFee);\\n\\n        IProtocolShareReserve(protocolShareReserve).updateAssetsState(\\n            address(comptroller),\\n            underlying,\\n            IProtocolShareReserve.IncomeType.FLASHLOAN\\n        );\\n\\n        emit FlashLoanExecuted(receiver, underlying, amount);\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Enable or disable flash loan for the market\\n     * custom:access Only Governance\\n     * custom:event Emits ToggleFlashLoanEnabled event on success\\n     */\\n    function _toggleFlashLoan() external returns (uint256) {\\n        ensureAllowed(\\\"_toggleFlashLoan()\\\");\\n        isFlashLoanEnabled = !isFlashLoanEnabled;\\n\\n        emit ToggleFlashLoanEnabled(!isFlashLoanEnabled, isFlashLoanEnabled);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Update flashLoan fee mantissa\\n     * @param protocolFeeMantissa_ FlashLoan protocol fee mantissa, transferred to protocol share reserve\\n     * @param supplierFeeMantissa_ FlashLoan supplier fee mantissa, transferred to the supplier of the asset\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     * custom:access Only Governance\\n     * custom:event Emits FlashLoanFeeUpdated event on success\\n     */\\n    function _setFlashLoanFeeMantissa(\\n        uint256 protocolFeeMantissa_,\\n        uint256 supplierFeeMantissa_\\n    ) external returns (uint256) {\\n        // update the signature\\n        ensureAllowed(\\\"_setFlashLoanFeeMantissa(uint256,uint256)\\\");\\n\\n        emit FlashLoanFeeUpdated(\\n            flashLoanProtocolFeeMantissa,\\n            protocolFeeMantissa_,\\n            flashLoanSupplierFeeMantissa,\\n            supplierFeeMantissa_\\n        );\\n        flashLoanProtocolFeeMantissa = protocolFeeMantissa_;\\n        flashLoanSupplierFeeMantissa = supplierFeeMantissa_;\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Initialize the money market\\n     * @param comptroller_ The address of the Comptroller\\n     * @param interestRateModel_ The address of the interest rate model\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n     * @param name_ EIP-20 name of this token\\n     * @param symbol_ EIP-20 symbol of this token\\n     * @param decimals_ EIP-20 decimal precision of this token\\n     */\\n    function initialize(\\n        ComptrollerInterface comptroller_,\\n        InterestRateModelV8 interestRateModel_,\\n        uint initialExchangeRateMantissa_,\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) public {\\n        ensureAdmin(msg.sender);\\n        require(\\n            accrualBlockNumber == 0 && borrowIndex == 0 && (initialExchangeRateMantissa_ > 0),\\n            \\\"market may only be initialized once\\\"\\n        );\\n\\n        // Set initial exchange rate\\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\\n\\n        // Set the comptroller\\n        uint ComptrollerErr = _setComptroller(comptroller_);\\n\\n        // Initialize block number and borrow index (block number mocks depend on comptroller being set)\\n        accrualBlockNumber = block.number;\\n        borrowIndex = mantissaOne;\\n\\n        // Set the interest rate model (depends on block number / borrow index)\\n        uint InterestModelErr = _setInterestRateModelFresh(interestRateModel_);\\n        require(\\n            (ComptrollerErr == uint(Error.NO_ERROR)) && (InterestModelErr == uint(Error.NO_ERROR)),\\n            \\\"comptroller or interest model initialization failed\\\"\\n        );\\n\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = decimals_;\\n\\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @notice Accrue interest then return the up-to-date exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateCurrent() public override nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return exchangeRateStored();\\n    }\\n\\n    /**\\n     * @notice Applies accrued interest to total borrows and reserves\\n     * @dev This calculates interest accrued from the last checkpointed block\\n     * up to the current block and writes new checkpoint to storage and\\n     * reduce spread reserves to protocol share reserve\\n     * if currentBlock - reduceReservesBlockNumber >= blockDelta\\n     */\\n    // @custom:event Emits AccrueInterest event\\n    function accrueInterest() public virtual override returns (uint) {\\n        /* Remember the initial block number */\\n        uint currentBlockNumber = block.number;\\n        uint accrualBlockNumberPrior = accrualBlockNumber;\\n\\n        /* Short-circuit accumulating 0 interest */\\n        if (accrualBlockNumberPrior == currentBlockNumber) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        /* Read the previous values out of storage */\\n        uint cashPrior = getCashPrior();\\n        uint borrowsPrior = totalBorrows;\\n        uint reservesPrior = totalReserves;\\n        uint borrowIndexPrior = borrowIndex;\\n\\n        /* Calculate the current borrow interest rate */\\n        uint borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior, borrowsPrior, reservesPrior);\\n        require(borrowRateMantissa <= borrowRateMaxMantissa, \\\"borrow rate is absurdly high\\\");\\n\\n        /* Calculate the number of blocks elapsed since the last accrual */\\n        (MathError mathErr, uint blockDelta) = subUInt(currentBlockNumber, accrualBlockNumberPrior);\\n        ensureNoMathError(mathErr);\\n\\n        /*\\n         * Calculate the interest accumulated into borrows and reserves and the new index:\\n         *  simpleInterestFactor = borrowRate * blockDelta\\n         *  interestAccumulated = simpleInterestFactor * totalBorrows\\n         *  totalBorrowsNew = interestAccumulated + totalBorrows\\n         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\\n         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\\n         */\\n\\n        Exp memory simpleInterestFactor;\\n        uint interestAccumulated;\\n        uint totalBorrowsNew;\\n        uint totalReservesNew;\\n        uint borrowIndexNew;\\n\\n        (mathErr, simpleInterestFactor) = mulScalar(Exp({ mantissa: borrowRateMantissa }), blockDelta);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\\n                    uint(mathErr)\\n                );\\n        }\\n\\n        (mathErr, interestAccumulated) = mulScalarTruncate(simpleInterestFactor, borrowsPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\\n                    uint(mathErr)\\n                );\\n        }\\n\\n        (mathErr, totalBorrowsNew) = addUInt(interestAccumulated, borrowsPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\\n                    uint(mathErr)\\n                );\\n        }\\n\\n        (mathErr, totalReservesNew) = mulScalarTruncateAddUInt(\\n            Exp({ mantissa: reserveFactorMantissa }),\\n            interestAccumulated,\\n            reservesPrior\\n        );\\n        if (mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\\n                    uint(mathErr)\\n                );\\n        }\\n\\n        (mathErr, borrowIndexNew) = mulScalarTruncateAddUInt(simpleInterestFactor, borrowIndexPrior, borrowIndexPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\\n                    uint(mathErr)\\n                );\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accrualBlockNumber = currentBlockNumber;\\n        borrowIndex = borrowIndexNew;\\n        totalBorrows = totalBorrowsNew;\\n        totalReserves = totalReservesNew;\\n\\n        (mathErr, blockDelta) = subUInt(currentBlockNumber, reduceReservesBlockNumber);\\n        ensureNoMathError(mathErr);\\n        if (blockDelta >= reduceReservesBlockDelta) {\\n            reduceReservesBlockNumber = currentBlockNumber;\\n            if (cashPrior < totalReservesNew) {\\n                _reduceReservesFresh(cashPrior);\\n            } else {\\n                _reduceReservesFresh(totalReservesNew);\\n            }\\n        }\\n\\n        /* We emit an AccrueInterest event */\\n        emit AccrueInterest(cashPrior, interestAccumulated, borrowIndexNew, totalBorrowsNew);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets a new comptroller for the market\\n     * @dev Admin function to set a new comptroller\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits NewComptroller event\\n    function _setComptroller(ComptrollerInterface newComptroller) public override returns (uint) {\\n        // Check caller is admin\\n        ensureAdmin(msg.sender);\\n\\n        // Ensure invoke comptroller.isComptroller() returns true\\n        require(newComptroller.isComptroller(), \\\"marker method returned false\\\");\\n\\n        // Emit NewComptroller(oldComptroller, newComptroller)\\n        emit NewComptroller(comptroller, newComptroller);\\n\\n        // Set market's comptroller to newComptroller\\n        comptroller = newComptroller;\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and updates the interest rate model using _setInterestRateModelFresh\\n     * @dev Governance function to accrue interest and update the interest rate model\\n     * @param newInterestRateModel_ The new interest rate model to use\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function _setInterestRateModel(InterestRateModelV8 newInterestRateModel_) public override returns (uint) {\\n        ensureAllowed(\\\"_setInterestRateModel(address)\\\");\\n        checkAccrueInterest(FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED);\\n\\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\\n        return _setInterestRateModelFresh(newInterestRateModel_);\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the VToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStored() public view override returns (uint) {\\n        (MathError err, uint result) = exchangeRateStoredInternal();\\n        ensureNoMathError(err);\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceStored(address account) public view override returns (uint) {\\n        (MathError err, uint result) = borrowBalanceStoredInternal(account);\\n        ensureNoMathError(err);\\n        return result;\\n    }\\n\\n    /**\\n     * @notice open a debt position for the borrower\\n     * @param borrower The address of the borrower\\n     * @param borrowAmount The amount of underlying asset to borrow\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     * @dev This function checks if the borrow is allowed, accrues interest, and updates the borrower's balance.\\n     *      It also emits a Borrow event and calls the comptroller's borrowVerify function.\\n     *      It reverts if the borrow is not allowed, if the market's block number is not current, or if the protocol has insufficient cash.\\n     */\\n    function borrowDebtPosition(address borrower, uint borrowAmount) external override returns (uint256) {\\n        /* Revert if borrow not allowed */\\n        uint allowed = comptroller.borrowAllowed(address(this), borrower, borrowAmount);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.BORROW_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != block.number) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.BORROW_FRESHNESS_CHECK);\\n        }\\n\\n        /* Revert if protocol has insufficient underlying cash */\\n        if (getCashPrior() < borrowAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.BORROW_CASH_NOT_AVAILABLE);\\n        }\\n\\n        BorrowLocalVars memory vars;\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on overflow:\\n         *  accountBorrowsNew = accountBorrows + borrowAmount\\n         *  totalBorrowsNew = totalBorrows + borrowAmount\\n         */\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n        ensureNoMathError(vars.mathErr);\\n\\n        (vars.mathErr, vars.accountBorrowsNew) = addUInt(vars.accountBorrows, borrowAmount);\\n        ensureNoMathError(vars.mathErr);\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = addUInt(totalBorrows, borrowAmount);\\n        ensureNoMathError(vars.mathErr);\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /* We emit a Borrow event */\\n        emit Borrow(borrower, borrowAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense and prime accrue interest hook */\\n        comptroller.borrowVerify(address(this), borrower, borrowAmount);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Calculates the protocol fee and supplier fee for a flash loan.\\n     * @param amount The amount of the flash loan.\\n     * @return protocolFee The portion of the fee allocated to the protocol.\\n     * @return supplierFee The portion of the fee allocated to the supplier.\\n     * @dev This function reverts if flash loans are not enabled.\\n     */\\n    function calculateFlashLoanFee(uint256 amount) public view returns (uint256, uint256) {\\n        MathError mErr;\\n        uint256 protocolFee;\\n        uint256 supplierFee;\\n\\n        (mErr, protocolFee) = mulScalarTruncate(Exp({ mantissa: amount }), flashLoanProtocolFeeMantissa);\\n        ensureNoMathError(mErr);\\n\\n        (mErr, supplierFee) = mulScalarTruncate(Exp({ mantissa: amount }), flashLoanSupplierFeeMantissa);\\n        ensureNoMathError(mErr);\\n\\n        return (protocolFee, supplierFee);\\n    }\\n\\n    /**\\n     * @notice Transfers `tokens` tokens from `src` to `dst` by `spender`\\n     * @dev Called by both `transfer` and `transferFrom` internally\\n     * @param spender The address of the account performing the transfer\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param tokens The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferTokens(address spender, address src, address dst, uint tokens) internal returns (uint) {\\n        /* Fail if transfer not allowed */\\n        uint allowed = comptroller.transferAllowed(address(this), src, dst, tokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.TRANSFER_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Do not allow self-transfers */\\n        if (src == dst) {\\n            return fail(Error.BAD_INPUT, FailureInfo.TRANSFER_NOT_ALLOWED);\\n        }\\n\\n        /* Get the allowance, infinite for the account owner */\\n        uint startingAllowance = 0;\\n        if (spender == src) {\\n            startingAllowance = type(uint256).max;\\n        } else {\\n            startingAllowance = transferAllowances[src][spender];\\n        }\\n\\n        /* Do the calculations, checking for {under,over}flow */\\n        MathError mathErr;\\n        uint allowanceNew;\\n        uint srvTokensNew;\\n        uint dstTokensNew;\\n\\n        (mathErr, allowanceNew) = subUInt(startingAllowance, tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ALLOWED);\\n        }\\n\\n        (mathErr, srvTokensNew) = subUInt(accountTokens[src], tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ENOUGH);\\n        }\\n\\n        (mathErr, dstTokensNew) = addUInt(accountTokens[dst], tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_TOO_MUCH);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        accountTokens[src] = srvTokensNew;\\n        accountTokens[dst] = dstTokensNew;\\n\\n        /* Eat some of the allowance (if necessary) */\\n        if (startingAllowance != type(uint256).max) {\\n            transferAllowances[src][spender] = allowanceNew;\\n        }\\n\\n        /* We emit a Transfer event */\\n        emit Transfer(src, dst, tokens);\\n\\n        comptroller.transferVerify(address(this), src, dst, tokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receives vTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintInternal(uint mintAmount) internal nonReentrant returns (uint, uint) {\\n        checkAccrueInterest(FailureInfo.MINT_ACCRUE_INTEREST_FAILED);\\n\\n        // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\n        return mintFresh(msg.sender, mintAmount);\\n    }\\n\\n    /**\\n     * @notice User supplies assets into the market and receives vTokens in exchange\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param minter The address of the account which is supplying the assets\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintFresh(address minter, uint mintAmount) internal returns (uint, uint) {\\n        /* Fail if mint not allowed */\\n        uint allowed = comptroller.mintAllowed(address(this), minter, mintAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != block.number) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK), 0);\\n        }\\n\\n        MintLocalVars memory vars;\\n\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr)), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         *  We call `doTransferIn` for the minter and the mintAmount.\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\n         *  side-effects occurred. The function returns the amount actually transferred,\\n         *  in case of a fee. On success, the vToken holds an additional `actualMintAmount`\\n         *  of cash.\\n         */\\n        vars.actualMintAmount = doTransferIn(minter, mintAmount);\\n\\n        /*\\n         * We get the current exchange rate and calculate the number of vTokens to be minted:\\n         *  mintTokens = actualMintAmount / exchangeRate\\n         */\\n\\n        (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(\\n            vars.actualMintAmount,\\n            Exp({ mantissa: vars.exchangeRateMantissa })\\n        );\\n        ensureNoMathError(vars.mathErr);\\n\\n        /*\\n         * We calculate the new total supply of vTokens and minter token balance, checking for overflow:\\n         *  totalSupplyNew = totalSupply + mintTokens\\n         *  accountTokensNew = accountTokens[minter] + mintTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = addUInt(totalSupply, vars.mintTokens);\\n        ensureNoMathError(vars.mathErr);\\n        (vars.mathErr, vars.accountTokensNew) = addUInt(accountTokens[minter], vars.mintTokens);\\n        ensureNoMathError(vars.mathErr);\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[minter] = vars.accountTokensNew;\\n\\n        /* We emit a Mint event, and a Transfer event */\\n        emit Mint(minter, vars.actualMintAmount, vars.mintTokens, vars.accountTokensNew);\\n        emit Transfer(address(this), minter, vars.mintTokens);\\n\\n        /* We call the defense and prime accrue interest hook */\\n        comptroller.mintVerify(address(this), minter, vars.actualMintAmount, vars.mintTokens);\\n\\n        return (uint(Error.NO_ERROR), vars.actualMintAmount);\\n    }\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receiver receives vTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param receiver The address of the account which is receiving the vTokens\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintBehalfInternal(address receiver, uint mintAmount) internal nonReentrant returns (uint, uint) {\\n        checkAccrueInterest(FailureInfo.MINT_ACCRUE_INTEREST_FAILED);\\n\\n        // mintBelahfFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\n        return mintBehalfFresh(msg.sender, receiver, mintAmount);\\n    }\\n\\n    /**\\n     * @notice Payer supplies assets into the market and receiver receives vTokens in exchange\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param payer The address of the account which is paying the underlying token\\n     * @param receiver The address of the account which is receiving vToken\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintBehalfFresh(address payer, address receiver, uint mintAmount) internal returns (uint, uint) {\\n        ensureNonZeroAddress(receiver);\\n        /* Fail if mint not allowed */\\n        uint allowed = comptroller.mintAllowed(address(this), receiver, mintAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != block.number) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK), 0);\\n        }\\n\\n        MintLocalVars memory vars;\\n\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr)), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         *  We call `doTransferIn` for the payer and the mintAmount.\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\n         *  side-effects occurred. The function returns the amount actually transferred,\\n         *  in case of a fee. On success, the vToken holds an additional `actualMintAmount`\\n         *  of cash.\\n         */\\n        vars.actualMintAmount = doTransferIn(payer, mintAmount);\\n\\n        /*\\n         * We get the current exchange rate and calculate the number of vTokens to be minted:\\n         *  mintTokens = actualMintAmount / exchangeRate\\n         */\\n\\n        (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(\\n            vars.actualMintAmount,\\n            Exp({ mantissa: vars.exchangeRateMantissa })\\n        );\\n        ensureNoMathError(vars.mathErr);\\n\\n        /*\\n         * We calculate the new total supply of vTokens and receiver token balance, checking for overflow:\\n         *  totalSupplyNew = totalSupply + mintTokens\\n         *  accountTokensNew = accountTokens[receiver] + mintTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = addUInt(totalSupply, vars.mintTokens);\\n        ensureNoMathError(vars.mathErr);\\n\\n        (vars.mathErr, vars.accountTokensNew) = addUInt(accountTokens[receiver], vars.mintTokens);\\n        ensureNoMathError(vars.mathErr);\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[receiver] = vars.accountTokensNew;\\n\\n        /* We emit a MintBehalf event, and a Transfer event */\\n        emit MintBehalf(payer, receiver, vars.actualMintAmount, vars.mintTokens, vars.accountTokensNew);\\n        emit Transfer(address(this), receiver, vars.mintTokens);\\n\\n        /* We call the defense and prime accrue interest hook */\\n        comptroller.mintVerify(address(this), receiver, vars.actualMintAmount, vars.mintTokens);\\n\\n        return (uint(Error.NO_ERROR), vars.actualMintAmount);\\n    }\\n\\n    /**\\n     * @notice Redeemer redeems vTokens in exchange for the underlying assets, transferred to the receiver. Redeemer and receiver can be the same\\n     *   address, or different addresses if the receiver was previously approved by the redeemer as a valid delegate (see MarketFacet.updateDelegate)\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemer The address of the account which is redeeming the tokens\\n     * @param receiver The receiver of the tokens\\n     * @param redeemTokens The number of vTokens to redeem into underlying\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function redeemInternal(\\n        address redeemer,\\n        address payable receiver,\\n        uint redeemTokens\\n    ) internal nonReentrant returns (uint) {\\n        checkAccrueInterest(FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(redeemer, receiver, redeemTokens, 0);\\n    }\\n\\n    /**\\n     * @notice Sender redeems underlying assets on behalf of some other address. This function is only available\\n     *   for senders, explicitly marked as delegates of the supplier using `comptroller.updateDelegate`\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemer The address of the account which is redeeming the tokens\\n     * @param receiver The receiver of the tokens, if called by a delegate\\n     * @param redeemAmount The amount of underlying to receive from redeeming vTokens\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function redeemUnderlyingInternal(\\n        address redeemer,\\n        address payable receiver,\\n        uint redeemAmount\\n    ) internal nonReentrant returns (uint) {\\n        checkAccrueInterest(FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(redeemer, receiver, 0, redeemAmount);\\n    }\\n\\n    /**\\n     * @notice Redeemer redeems vTokens in exchange for the underlying assets, transferred to the receiver. Redeemer and receiver can be the same\\n     *   address, or different addresses if the receiver was previously approved by the redeemer as a valid delegate (see MarketFacet.updateDelegate)\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param redeemer The address of the account which is redeeming the tokens\\n     * @param receiver The receiver of the tokens\\n     * @param redeemTokensIn The number of vTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @param redeemAmountIn The number of underlying tokens to receive from redeeming vTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // solhint-disable-next-line code-complexity\\n    function redeemFresh(\\n        address redeemer,\\n        address payable receiver,\\n        uint redeemTokensIn,\\n        uint redeemAmountIn\\n    ) internal returns (uint) {\\n        require(redeemTokensIn == 0 || redeemAmountIn == 0, \\\"one of redeemTokensIn or redeemAmountIn must be zero\\\");\\n\\n        RedeemLocalVars memory vars;\\n\\n        /* exchangeRate = invoke Exchange Rate Stored() */\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        ensureNoMathError(vars.mathErr);\\n\\n        /* If redeemTokensIn > 0: */\\n        if (redeemTokensIn > 0) {\\n            /*\\n             * We calculate the exchange rate and the amount of underlying to be redeemed:\\n             *  redeemTokens = redeemTokensIn\\n             *  redeemAmount = redeemTokensIn x exchangeRateCurrent\\n             */\\n            vars.redeemTokens = redeemTokensIn;\\n\\n            (vars.mathErr, vars.redeemAmount) = mulScalarTruncate(\\n                Exp({ mantissa: vars.exchangeRateMantissa }),\\n                redeemTokensIn\\n            );\\n            ensureNoMathError(vars.mathErr);\\n        } else {\\n            /*\\n             * We get the current exchange rate and calculate the amount to be redeemed:\\n             *  redeemTokens = redeemAmountIn / exchangeRate\\n             *  redeemAmount = redeemAmountIn\\n             */\\n\\n            (vars.mathErr, vars.redeemTokens) = divScalarByExpTruncate(\\n                redeemAmountIn,\\n                Exp({ mantissa: vars.exchangeRateMantissa })\\n            );\\n            ensureNoMathError(vars.mathErr);\\n\\n            vars.redeemAmount = redeemAmountIn;\\n        }\\n\\n        /* Fail if redeem not allowed */\\n        uint allowed = comptroller.redeemAllowed(address(this), redeemer, vars.redeemTokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REDEEM_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != block.number) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDEEM_FRESHNESS_CHECK);\\n        }\\n\\n        /*\\n         * We calculate the new total supply and redeemer balance, checking for underflow:\\n         *  totalSupplyNew = totalSupply - redeemTokens\\n         *  accountTokensNew = accountTokens[redeemer] - redeemTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = subUInt(totalSupply, vars.redeemTokens);\\n        ensureNoMathError(vars.mathErr);\\n\\n        (vars.mathErr, vars.accountTokensNew) = subUInt(accountTokens[redeemer], vars.redeemTokens);\\n        ensureNoMathError(vars.mathErr);\\n\\n        /* Fail gracefully if protocol has insufficient cash */\\n        if (getCashPrior() < vars.redeemAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDEEM_CASH_NOT_AVAILABLE);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[redeemer] = vars.accountTokensNew;\\n\\n        /*\\n         * We invoke doTransferOut for the receiver and the redeemAmount.\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\n         *  On success, the vToken has redeemAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n\\n        uint feeAmount;\\n        uint remainedAmount;\\n        if (IComptroller(address(comptroller)).treasuryPercent() != 0) {\\n            (vars.mathErr, feeAmount) = mulUInt(\\n                vars.redeemAmount,\\n                IComptroller(address(comptroller)).treasuryPercent()\\n            );\\n            ensureNoMathError(vars.mathErr);\\n\\n            (vars.mathErr, feeAmount) = divUInt(feeAmount, 1e18);\\n            ensureNoMathError(vars.mathErr);\\n\\n            (vars.mathErr, remainedAmount) = subUInt(vars.redeemAmount, feeAmount);\\n            ensureNoMathError(vars.mathErr);\\n\\n            address payable treasuryAddress = payable(IComptroller(address(comptroller)).treasuryAddress());\\n            doTransferOut(treasuryAddress, feeAmount);\\n\\n            emit RedeemFee(redeemer, feeAmount, vars.redeemTokens);\\n        } else {\\n            remainedAmount = vars.redeemAmount;\\n        }\\n\\n        doTransferOut(receiver, remainedAmount);\\n\\n        /* We emit a Transfer event, and a Redeem event */\\n        emit Transfer(redeemer, address(this), vars.redeemTokens);\\n        emit Redeem(redeemer, remainedAmount, vars.redeemTokens, vars.accountTokensNew);\\n\\n        /* We call the defense and prime accrue interest hook */\\n        comptroller.redeemVerify(address(this), redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Receiver gets the borrow on behalf of the borrower address\\n     * @param borrower The borrower, on behalf of whom to borrow\\n     * @param receiver The account that would receive the funds (can be the same as the borrower)\\n     * @param borrowAmount The amount of the underlying asset to borrow\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function borrowInternal(\\n        address borrower,\\n        address payable receiver,\\n        uint borrowAmount\\n    ) internal nonReentrant returns (uint) {\\n        checkAccrueInterest(FailureInfo.BORROW_ACCRUE_INTEREST_FAILED);\\n\\n        // borrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return borrowFresh(borrower, receiver, borrowAmount);\\n    }\\n\\n    /**\\n     * @notice Receiver gets the borrow on behalf of the borrower address\\n     * @dev Before calling this function, ensure that the interest has been accrued\\n     * @param borrower The borrower, on behalf of whom to borrow\\n     * @param receiver The account that would receive the funds (can be the same as the borrower)\\n     * @param borrowAmount The amount of the underlying asset to borrow\\n     * @return uint Returns 0 on success, otherwise revert (see ErrorReporter.sol for details).\\n     */\\n    function borrowFresh(address borrower, address payable receiver, uint borrowAmount) internal returns (uint) {\\n        /* Revert if borrow not allowed */\\n        uint allowed = comptroller.borrowAllowed(address(this), borrower, borrowAmount);\\n\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.BORROW_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != block.number) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.BORROW_FRESHNESS_CHECK);\\n        }\\n\\n        /* Revert if protocol has insufficient underlying cash */\\n        if (getCashPrior() < borrowAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.BORROW_CASH_NOT_AVAILABLE);\\n        }\\n\\n        BorrowLocalVars memory vars;\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on overflow:\\n         *  accountBorrowsNew = accountBorrows + borrowAmount\\n         *  totalBorrowsNew = totalBorrows + borrowAmount\\n         */\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n        ensureNoMathError(vars.mathErr);\\n\\n        (vars.mathErr, vars.accountBorrowsNew) = addUInt(vars.accountBorrows, borrowAmount);\\n        ensureNoMathError(vars.mathErr);\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = addUInt(totalBorrows, borrowAmount);\\n        ensureNoMathError(vars.mathErr);\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /*\\n         * We invoke doTransferOut for the receiver and the borrowAmount.\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\n         *  On success, the vToken borrowAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(receiver, borrowAmount);\\n\\n        /* We emit a Borrow event */\\n        emit Borrow(borrower, borrowAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense and prime accrue interest hook */\\n        comptroller.borrowVerify(address(this), borrower, borrowAmount);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender repays their own borrow\\n     * @param repayAmount The amount to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowInternal(uint repayAmount) internal nonReentrant returns (uint, uint) {\\n        checkAccrueInterest(FailureInfo.REPAY_BORROW_ACCRUE_INTEREST_FAILED);\\n\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        return repayBorrowFresh(msg.sender, msg.sender, repayAmount);\\n    }\\n\\n    /**\\n     * @notice Sender repays a borrow belonging to another borrowing account\\n     * @param borrower The account with the debt being payed off\\n     * @param repayAmount The amount to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowBehalfInternal(address borrower, uint repayAmount) internal nonReentrant returns (uint, uint) {\\n        checkAccrueInterest(FailureInfo.REPAY_BEHALF_ACCRUE_INTEREST_FAILED);\\n\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        return repayBorrowFresh(msg.sender, borrower, repayAmount);\\n    }\\n\\n    /**\\n     * @notice Borrows are repaid by another user (possibly the borrower).\\n     * @param payer The account paying off the borrow\\n     * @param borrower The account with the debt being payed off\\n     * @param repayAmount The amount of undelrying tokens being returned\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowFresh(address payer, address borrower, uint repayAmount) internal returns (uint, uint) {\\n        /* Fail if repayBorrow not allowed */\\n        uint allowed = comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount);\\n        if (allowed != 0) {\\n            return (\\n                failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION, allowed),\\n                0\\n            );\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != block.number) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.REPAY_BORROW_FRESHNESS_CHECK), 0);\\n        }\\n\\n        RepayBorrowLocalVars memory vars;\\n\\n        /* We remember the original borrowerIndex for verification purposes */\\n        vars.borrowerIndex = accountBorrows[borrower].interestIndex;\\n\\n        /* We fetch the amount the borrower owes, with accumulated interest */\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n        ensureNoMathError(vars.mathErr);\\n\\n        /* If repayAmount == type(uint256).max, repayAmount = accountBorrows */\\n        if (repayAmount == type(uint256).max) {\\n            vars.repayAmount = vars.accountBorrows;\\n        } else {\\n            vars.repayAmount = repayAmount;\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the payer and the repayAmount\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\n         *  On success, the vToken holds an additional repayAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *   it returns the amount actually transferred, in case of a fee.\\n         */\\n        vars.actualRepayAmount = doTransferIn(payer, vars.repayAmount);\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on underflow:\\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\\n         */\\n        (vars.mathErr, vars.accountBorrowsNew) = subUInt(vars.accountBorrows, vars.actualRepayAmount);\\n        ensureNoMathError(vars.mathErr);\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = subUInt(totalBorrows, vars.actualRepayAmount);\\n        ensureNoMathError(vars.mathErr);\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /* We emit a RepayBorrow event */\\n        emit RepayBorrow(payer, borrower, vars.actualRepayAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense and prime accrue interest hook */\\n        comptroller.repayBorrowVerify(address(this), payer, borrower, vars.actualRepayAmount, vars.borrowerIndex);\\n\\n        return (uint(Error.NO_ERROR), vars.actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice The sender liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this vToken to be liquidated\\n     * @param vTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateBorrowInternal(\\n        address borrower,\\n        uint repayAmount,\\n        VTokenInterface vTokenCollateral\\n    ) internal nonReentrant returns (uint, uint) {\\n        checkAccrueInterest(FailureInfo.LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED);\\n\\n        uint error = vTokenCollateral.accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED), 0);\\n        }\\n\\n        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return liquidateBorrowFresh(msg.sender, borrower, repayAmount, vTokenCollateral);\\n    }\\n\\n    /**\\n     * @notice The sender liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this vToken to be liquidated\\n     * @param vTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @param snapshot The account snapshot of the borrower\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateBorrowInternal(\\n        address borrower,\\n        uint repayAmount,\\n        VTokenInterface vTokenCollateral,\\n        ComptrollerLensInterface.AccountSnapshot memory snapshot\\n    ) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED), 0);\\n        }\\n\\n        error = vTokenCollateral.accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED), 0);\\n        }\\n\\n        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return liquidateBorrowFresh(msg.sender, borrower, repayAmount, vTokenCollateral, snapshot);\\n    }\\n\\n    /**\\n     * @notice The liquidator liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param liquidator The address repaying the borrow and seizing collateral\\n     * @param borrower The borrower of this vToken to be liquidated\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @param vTokenCollateral The market in which to seize collateral from the borrower\\n     * @param snapshot The account snapshot of the borrower\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    // solhint-disable-next-line code-complexity\\n    function liquidateBorrowFresh(\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        VTokenInterface vTokenCollateral,\\n        ComptrollerLensInterface.AccountSnapshot memory snapshot\\n    ) internal returns (uint, uint) {\\n        /* Fail if liquidate not allowed */\\n        uint errorCode;\\n        errorCode = comptroller.liquidateBorrowAllowed(\\n            address(this),\\n            address(vTokenCollateral),\\n            liquidator,\\n            borrower,\\n            repayAmount,\\n            snapshot\\n        );\\n        if (errorCode != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION, errorCode), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != block.number) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_FRESHNESS_CHECK), 0);\\n        }\\n\\n        /* Verify vTokenCollateral market's block number equals current block number */\\n        if (vTokenCollateral.accrualBlockNumber() != block.number) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK), 0);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            return (fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER), 0);\\n        }\\n\\n        /* Fail if repayAmount = 0 */\\n        if (repayAmount == 0) {\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO), 0);\\n        }\\n\\n        /* Fail if repayAmount = -1 */\\n        if (repayAmount == type(uint256).max) {\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX), 0);\\n        }\\n\\n        /* Fail if repayBorrow fails */\\n        uint actualRepayAmount;\\n        (errorCode, actualRepayAmount) = repayBorrowFresh(liquidator, borrower, repayAmount);\\n        if (errorCode != uint(Error.NO_ERROR)) {\\n            return (fail(Error(errorCode), FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We calculate the number of collateral tokens that will be seized */\\n        uint seizeTokens;\\n        (errorCode, seizeTokens) = comptroller.liquidateCalculateSeizeTokens(\\n            address(this),\\n            address(vTokenCollateral),\\n            actualRepayAmount,\\n            snapshot.dynamicLiquidationIncentiveMantissa\\n        );\\n        require(errorCode == uint(Error.NO_ERROR), \\\"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\\\");\\n\\n        /* Revert if borrower collateral token balance < seizeTokens */\\n        require(vTokenCollateral.balanceOf(borrower) >= seizeTokens, \\\"LIQUIDATE_SEIZE_TOO_MUCH\\\");\\n\\n        // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\n        if (address(vTokenCollateral) == address(this)) {\\n            errorCode = seizeInternal(address(this), liquidator, borrower, seizeTokens);\\n        } else {\\n            errorCode = vTokenCollateral.seize(liquidator, borrower, seizeTokens);\\n        }\\n\\n        /* Revert if seize tokens fails (since we cannot be sure of side effects) */\\n        require(errorCode == uint(Error.NO_ERROR), \\\"token seizure failed\\\");\\n\\n        /* We emit a LiquidateBorrow event */\\n        emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, address(vTokenCollateral), seizeTokens);\\n\\n        /* We call the defense and prime accrue interest hook */\\n        comptroller.liquidateBorrowVerify(\\n            address(this),\\n            address(vTokenCollateral),\\n            liquidator,\\n            borrower,\\n            actualRepayAmount,\\n            seizeTokens\\n        );\\n\\n        return (uint(Error.NO_ERROR), actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice The liquidator liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this vToken to be liquidated\\n     * @param liquidator The address repaying the borrow and seizing collateral\\n     * @param vTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    // solhint-disable-next-line code-complexity\\n    function liquidateBorrowFresh(\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        VTokenInterface vTokenCollateral\\n    ) internal returns (uint, uint) {\\n        /* Fail if liquidate not allowed */\\n        uint allowed = comptroller.liquidateBorrowAllowed(\\n            address(this),\\n            address(vTokenCollateral),\\n            liquidator,\\n            borrower,\\n            repayAmount\\n        );\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != block.number) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_FRESHNESS_CHECK), 0);\\n        }\\n\\n        /* Verify vTokenCollateral market's block number equals current block number */\\n        if (vTokenCollateral.accrualBlockNumber() != block.number) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK), 0);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            return (fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER), 0);\\n        }\\n\\n        /* Fail if repayAmount = 0 */\\n        if (repayAmount == 0) {\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO), 0);\\n        }\\n\\n        /* Fail if repayAmount = type(uint256).max */\\n        if (repayAmount == type(uint256).max) {\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX), 0);\\n        }\\n\\n        /* Fail if repayBorrow fails */\\n        uint err;\\n        uint actualRepayAmount;\\n        (err, actualRepayAmount) = repayBorrowFresh(liquidator, borrower, repayAmount);\\n        if (err != uint(Error.NO_ERROR)) {\\n            return (fail(Error(err), FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We calculate the number of collateral tokens that will be seized */\\n        (, uint seizeTokens) = comptroller.liquidateCalculateSeizeTokens(\\n            borrower,\\n            address(this),\\n            address(vTokenCollateral),\\n            actualRepayAmount\\n        );\\n\\n        require(\\n            (err == uint(Error.NO_ERROR)) && (vTokenCollateral.balanceOf(borrower) >= seizeTokens),\\n            \\\"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED or LIQUIDATE_SEIZE_TOO_MUCH\\\"\\n        );\\n\\n        // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\n        if (address(vTokenCollateral) == address(this)) {\\n            err = seizeInternal(address(this), liquidator, borrower, seizeTokens);\\n        } else {\\n            err = vTokenCollateral.seize(liquidator, borrower, seizeTokens);\\n        }\\n\\n        /* Revert if seize tokens fails (since we cannot be sure of side effects) */\\n        require(err == uint(Error.NO_ERROR), \\\"token seizure failed\\\");\\n\\n        /* We emit a LiquidateBorrow event */\\n        emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, address(vTokenCollateral), seizeTokens);\\n\\n        /* We call the defense and prime accrue interest hook */\\n        comptroller.liquidateBorrowVerify(\\n            address(this),\\n            address(vTokenCollateral),\\n            liquidator,\\n            borrower,\\n            actualRepayAmount,\\n            seizeTokens\\n        );\\n\\n        return (uint(Error.NO_ERROR), actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another vToken.\\n     *  Its absolutely critical to use msg.sender as the seizer vToken and not a parameter.\\n     * @param seizerToken The contract seizing the collateral (i.e. borrowed vToken)\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of vTokens to seize\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function seizeInternal(\\n        address seizerToken,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens\\n    ) internal returns (uint) {\\n        /* Fail if seize not allowed */\\n        uint allowed = comptroller.seizeAllowed(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_SEIZE_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            return fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER);\\n        }\\n\\n        MathError mathErr;\\n        uint borrowerTokensNew;\\n        uint liquidatorTokensNew;\\n\\n        /*\\n         * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\\n         *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\\n         *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\\n         */\\n        (mathErr, borrowerTokensNew) = subUInt(accountTokens[borrower], seizeTokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, liquidatorTokensNew) = addUInt(accountTokens[liquidator], seizeTokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED, uint(mathErr));\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accountTokens[borrower] = borrowerTokensNew;\\n        accountTokens[liquidator] = liquidatorTokensNew;\\n\\n        /* Emit a Transfer event */\\n        emit Transfer(borrower, liquidator, seizeTokens);\\n\\n        /* We call the defense and prime accrue interest hook */\\n        comptroller.seizeVerify(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets a new reserve factor for the protocol (requires fresh interest accrual)\\n     * @dev Governance function to set a new reserve factor\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function _setReserveFactorFresh(uint newReserveFactorMantissa) internal returns (uint) {\\n        // Verify market's block number equals current block number\\n        if (accrualBlockNumber != block.number) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK);\\n        }\\n\\n        // Check newReserveFactor \\u2264 maxReserveFactor\\n        if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\\n            return fail(Error.BAD_INPUT, FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);\\n        }\\n\\n        uint oldReserveFactorMantissa = reserveFactorMantissa;\\n        reserveFactorMantissa = newReserveFactorMantissa;\\n\\n        emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and adds reserves by transferring from `msg.sender`\\n     * @param addAmount Amount of addition to reserves\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function _addReservesInternal(uint addAmount) internal nonReentrant returns (uint) {\\n        checkAccrueInterest(FailureInfo.ADD_RESERVES_ACCRUE_INTEREST_FAILED);\\n        uint error;\\n\\n        // _addReservesFresh emits reserve-addition-specific logs on errors, so we don't need to.\\n        (error, ) = _addReservesFresh(addAmount);\\n        return error;\\n    }\\n\\n    /**\\n     * @notice Add reserves by transferring from caller\\n     * @dev Requires fresh interest accrual\\n     * @param addAmount Amount of addition to reserves\\n     * @return (uint, uint) An error code (0=success, otherwise a failure (see ErrorReporter.sol for details)) and the actual amount added, net token fees\\n     */\\n    function _addReservesFresh(uint addAmount) internal returns (uint, uint) {\\n        // totalReserves + actualAddAmount\\n        uint totalReservesNew;\\n        uint actualAddAmount;\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != block.number) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.ADD_RESERVES_FRESH_CHECK), actualAddAmount);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the caller and the addAmount\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\n         *  On success, the vToken holds an additional addAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *  it returns the amount actually transferred, in case of a fee.\\n         */\\n\\n        actualAddAmount = doTransferIn(msg.sender, addAmount);\\n\\n        totalReservesNew = totalReserves + actualAddAmount;\\n\\n        /* Revert on overflow */\\n        require(totalReservesNew >= totalReserves, \\\"add reserves unexpected overflow\\\");\\n\\n        // Store reserves[n+1] = reserves[n] + actualAddAmount\\n        totalReserves = totalReservesNew;\\n\\n        /* Emit NewReserves(admin, actualAddAmount, reserves[n+1]) */\\n        emit ReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\\n\\n        /* Return (NO_ERROR, actualAddAmount) */\\n        return (uint(Error.NO_ERROR), actualAddAmount);\\n    }\\n\\n    /**\\n     * @notice Reduces reserves by transferring to protocol share reserve contract\\n     * @dev Requires fresh interest accrual\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function _reduceReservesFresh(uint reduceAmount) internal virtual returns (uint) {\\n        if (reduceAmount == 0) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != block.number) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);\\n        }\\n\\n        // Fail gracefully if protocol has insufficient underlying cash\\n        if (getCashPrior() < reduceAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);\\n        }\\n\\n        // Check reduceAmount \\u2264 reserves[n] (totalReserves)\\n        if (reduceAmount > totalReserves) {\\n            return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        // Store reserves[n+1] = reserves[n] - reduceAmount\\n        totalReserves = totalReserves - reduceAmount;\\n\\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n        doTransferOut(protocolShareReserve, reduceAmount);\\n\\n        IProtocolShareReserve(protocolShareReserve).updateAssetsState(\\n            address(comptroller),\\n            underlying,\\n            IProtocolShareReserve.IncomeType.SPREAD\\n        );\\n\\n        emit ReservesReduced(protocolShareReserve, reduceAmount, totalReserves);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice updates the interest rate model (requires fresh interest accrual)\\n     * @dev Governance function to update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function _setInterestRateModelFresh(InterestRateModelV8 newInterestRateModel) internal returns (uint) {\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != block.number) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK);\\n        }\\n\\n        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\\n        require(newInterestRateModel.isInterestRateModel(), \\\"marker method returned false\\\");\\n\\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\\n        emit NewMarketInterestRateModel(interestRateModel, newInterestRateModel);\\n\\n        // Set the interest rate model to newInterestRateModel\\n        interestRateModel = newInterestRateModel;\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /*** Safe Token ***/\\n\\n    /**\\n     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\n     *  This may revert due to insufficient balance or insufficient allowance.\\n     */\\n    function doTransferIn(address from, uint amount) internal virtual returns (uint);\\n\\n    /**\\n     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure rather than reverting.\\n     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\\n     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\\n     */\\n    function doTransferOut(address payable to, uint amount) internal virtual;\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return Tuple of error code and the calculated balance or 0 if error code is non-zero\\n     */\\n    function borrowBalanceStoredInternal(address account) internal view returns (MathError, uint) {\\n        /* Note: we do not assert that the market is up to date */\\n        MathError mathErr;\\n        uint principalTimesIndex;\\n        uint result;\\n\\n        /* Get borrowBalance and borrowIndex */\\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\n\\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\\n         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\n         */\\n        if (borrowSnapshot.principal == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        /* Calculate new borrow balance using the interest index:\\n         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\n         */\\n        (mathErr, principalTimesIndex) = mulUInt(borrowSnapshot.principal, borrowIndex);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        (mathErr, result) = divUInt(principalTimesIndex, borrowSnapshot.interestIndex);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, result);\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the vToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return Tuple of error code and calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStoredInternal() internal view virtual returns (MathError, uint) {\\n        uint _totalSupply = totalSupply;\\n        if (_totalSupply == 0) {\\n            /*\\n             * If there are no tokens minted:\\n             *  exchangeRate = initialExchangeRate\\n             */\\n            return (MathError.NO_ERROR, initialExchangeRateMantissa);\\n        } else {\\n            /*\\n             * Otherwise:\\n             *  exchangeRate = (totalCash + totalBorrows + flashLoanAmount - totalReserves) / totalSupply\\n             */\\n            uint totalCash = getCashPrior();\\n            uint cashPlusBorrowsMinusReserves;\\n            Exp memory exchangeRate;\\n            MathError mathErr;\\n\\n            (mathErr, cashPlusBorrowsMinusReserves) = addThenSubUInt(\\n                totalCash + flashLoanAmount,\\n                totalBorrows,\\n                totalReserves\\n            );\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n\\n            (mathErr, exchangeRate) = getExp(cashPlusBorrowsMinusReserves, _totalSupply);\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n\\n            return (MathError.NO_ERROR, exchangeRate.mantissa);\\n        }\\n    }\\n\\n    function ensureAllowed(string memory functionSig) private view {\\n        require(\\n            IAccessControlManagerV8(accessControlManager).isAllowedToCall(msg.sender, functionSig),\\n            \\\"access denied\\\"\\n        );\\n    }\\n\\n    function ensureAdmin(address caller_) private view {\\n        require(caller_ == admin, \\\"Unauthorized\\\");\\n    }\\n\\n    function ensureNoMathError(MathError mErr) private pure {\\n        require(mErr == MathError.NO_ERROR, \\\"math error\\\");\\n    }\\n\\n    function ensureNonZeroAddress(address address_) private pure {\\n        require(address_ != address(0), \\\"zero address\\\");\\n    }\\n\\n    function ensureAccrueInterest() private {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n    }\\n\\n    function checkAccrueInterest(FailureInfo info) private returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reserve factor change failed.\\n            return fail(Error(error), info);\\n        }\\n    }\\n\\n    /*** Safe Token ***/\\n\\n    /**\\n     * @notice Gets balance of this contract in terms of the underlying\\n     * @dev This excludes the value of the current message, if any\\n     * @return The quantity of underlying owned by this contract\\n     */\\n    function getCashPrior() internal view virtual returns (uint);\\n}\\n\",\"keccak256\":\"0x38d1adc39dd33684c71a22abb12c6db74160853fab203146a267714dbf3f13cc\",\"license\":\"BSD-3-Clause\"},\"contracts/Tokens/VTokens/VTokenInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.25;\\n\\nimport { ComptrollerInterface } from \\\"../../Comptroller/ComptrollerInterface.sol\\\";\\nimport { InterestRateModelV8 } from \\\"../../InterestRateModels/InterestRateModelV8.sol\\\";\\nimport { ComptrollerLensInterface } from \\\"../../Comptroller/ComptrollerLensInterface.sol\\\";\\n\\ncontract VTokenStorageBase {\\n    /**\\n     * @notice Container for borrow balance information\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n     */\\n    struct BorrowSnapshot {\\n        uint principal;\\n        uint interestIndex;\\n    }\\n\\n    /**\\n     * @dev Guard variable for re-entrancy checks\\n     */\\n    bool internal _notEntered;\\n\\n    /**\\n     * @notice EIP-20 token name for this token\\n     */\\n    string public name;\\n\\n    /**\\n     * @notice EIP-20 token symbol for this token\\n     */\\n    string public symbol;\\n\\n    /**\\n     * @notice EIP-20 token decimals for this token\\n     */\\n    uint8 public decimals;\\n\\n    /**\\n     * @notice Maximum borrow rate that can ever be applied (.0005% / block)\\n     */\\n\\n    uint internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n    /**\\n     * @notice Maximum fraction of interest that can be set aside for reserves\\n     */\\n    uint internal constant reserveFactorMaxMantissa = 1e18;\\n\\n    /**\\n     * @notice Administrator for this contract\\n     */\\n    address payable public admin;\\n\\n    /**\\n     * @notice Pending administrator for this contract\\n     */\\n    address payable public pendingAdmin;\\n\\n    /**\\n     * @notice Contract which oversees inter-vToken operations\\n     */\\n    ComptrollerInterface public comptroller;\\n\\n    /**\\n     * @notice Model which tells what the current interest rate should be\\n     */\\n    InterestRateModelV8 public interestRateModel;\\n\\n    /**\\n     * @notice Initial exchange rate used when minting the first VTokens (used when totalSupply = 0)\\n     */\\n    uint internal initialExchangeRateMantissa;\\n\\n    /**\\n     * @notice Fraction of interest currently set aside for reserves\\n     */\\n    uint public reserveFactorMantissa;\\n\\n    /**\\n     * @notice Block number that interest was last accrued at\\n     */\\n    uint public accrualBlockNumber;\\n\\n    /**\\n     * @notice Accumulator of the total earned interest rate since the opening of the market\\n     */\\n    uint public borrowIndex;\\n\\n    /**\\n     * @notice Total amount of outstanding borrows of the underlying in this market\\n     */\\n    uint public totalBorrows;\\n\\n    /**\\n     * @notice Total amount of reserves of the underlying held in this market\\n     */\\n    uint public totalReserves;\\n\\n    /**\\n     * @notice Total number of tokens in circulation\\n     */\\n    uint public totalSupply;\\n\\n    /**\\n     * @notice Official record of token balances for each account\\n     */\\n    mapping(address => uint) internal accountTokens;\\n\\n    /**\\n     * @notice Approved token transfer amounts on behalf of others\\n     */\\n    mapping(address => mapping(address => uint)) internal transferAllowances;\\n\\n    /**\\n     * @notice Mapping of account addresses to outstanding borrow balances\\n     */\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\n\\n    /**\\n     * @notice Underlying asset for this VToken\\n     */\\n    address public underlying;\\n\\n    /**\\n     * @notice Implementation address for this contract\\n     */\\n    address public implementation;\\n\\n    /**\\n     * @notice delta block after which reserves will be reduced\\n     */\\n    uint public reduceReservesBlockDelta;\\n\\n    /**\\n     * @notice last block number at which reserves were reduced\\n     */\\n    uint public reduceReservesBlockNumber;\\n\\n    /**\\n     * @notice address of protocol share reserve contract\\n     */\\n    address payable public protocolShareReserve;\\n\\n    /**\\n     * @notice address of accessControlManager\\n     */\\n\\n    address public accessControlManager;\\n}\\n\\ncontract VTokenStorage is VTokenStorageBase {\\n    /**\\n     * @notice flashLoan is enabled for this market or not\\n     */\\n    bool public isFlashLoanEnabled;\\n\\n    /**\\n     * @notice fee percentage collected by protocol on flashLoan\\n     */\\n    uint256 public flashLoanProtocolFeeMantissa;\\n\\n    /**\\n     * @notice fee percentage collected by supplier on flashLoan\\n     */\\n    uint256 public flashLoanSupplierFeeMantissa;\\n\\n    /**\\n     * @notice Amount of flashLoan taken by the receiver\\n     * @dev This is used to track the amount of flashLoan taken in the current transaction\\n     */\\n    uint256 public flashLoanAmount;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[46] private __gap;\\n}\\n\\nabstract contract VTokenInterface is VTokenStorage {\\n    /**\\n     * @notice Indicator that this is a vToken contract (for inspection)\\n     */\\n    bool public constant isVToken = true;\\n\\n    /*** Market Events ***/\\n\\n    /**\\n     * @notice Event emitted when interest is accrued\\n     */\\n    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when tokens are minted\\n     */\\n    event Mint(address minter, uint mintAmount, uint mintTokens, uint256 totalSupply);\\n\\n    /**\\n     * @notice Event emitted when tokens are minted behalf by payer to receiver\\n     */\\n    event MintBehalf(address payer, address receiver, uint mintAmount, uint mintTokens, uint256 totalSupply);\\n\\n    /**\\n     * @notice Event emitted when tokens are redeemed\\n     */\\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens, uint256 totalSupply);\\n\\n    /**\\n     * @notice Event emitted when tokens are redeemed and fee is transferred\\n     */\\n    event RedeemFee(address redeemer, uint feeAmount, uint redeemTokens);\\n\\n    /**\\n     * @notice Event emitted when underlying is borrowed\\n     */\\n    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is repaid\\n     */\\n    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is liquidated\\n     */\\n    event LiquidateBorrow(\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        address vTokenCollateral,\\n        uint seizeTokens\\n    );\\n\\n    /*** Admin Events ***/\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is changed\\n     */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is accepted, which means admin has been updated\\n     */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    /**\\n     * @notice Event emitted when comptroller is changed\\n     */\\n    event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\n\\n    /**\\n     * @notice Event emitted when interestRateModel is changed\\n     */\\n    event NewMarketInterestRateModel(\\n        InterestRateModelV8 oldInterestRateModel,\\n        InterestRateModelV8 newInterestRateModel\\n    );\\n\\n    /**\\n     * @notice Event emitted when the reserve factor is changed\\n     */\\n    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\\n\\n    /**\\n     * @notice Event emitted when the reserves are added\\n     */\\n    event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice Event emitted when the reserves are reduced\\n     */\\n    event ReservesReduced(address protocolShareReserve, uint reduceAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice EIP20 Transfer event\\n     */\\n    event Transfer(address indexed from, address indexed to, uint amount);\\n\\n    /**\\n     * @notice EIP20 Approval event\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\n\\n    /**\\n     * @notice Event emitted when block delta for reduce reserves get updated\\n     */\\n    event NewReduceReservesBlockDelta(uint256 oldReduceReservesBlockDelta, uint256 newReduceReservesBlockDelta);\\n\\n    /**\\n     * @notice Event emitted when address of ProtocolShareReserve contract get updated\\n     */\\n    event NewProtocolShareReserve(address indexed oldProtocolShareReserve, address indexed newProtocolShareReserve);\\n\\n    /**\\n     * @notice Emitted when access control address is changed by admin\\n     */\\n    event NewAccessControlManager(address oldAccessControlAddress, address newAccessControlAddress);\\n\\n    /**\\n     * @notice Event emitted when flashLoanEnabled status is changed\\n     */\\n    event ToggleFlashLoanEnabled(bool previousStatus, bool newStatus);\\n\\n    /**\\n     * @notice Event emitted when flashLoan is executed\\n     */\\n    event FlashLoanExecuted(address receiver, address underlying, uint256 amount);\\n\\n    /**\\n     * @notice Event emitted when asset is transferred to receiver\\n     */\\n    event TransferOutUnderlying(address asset, address receiver, uint256 amount);\\n\\n    /**\\n     * @notice Event emitted when asset is transferred from sender and verified\\n     */\\n    event TransferInUnderlyingAndVerify(address asset, address sender, uint256 amount);\\n\\n    /**\\n     * @notice Event emitted when flashLoan fee mantissa is updated\\n     */\\n    event FlashLoanFeeUpdated(\\n        uint256 oldFlashLoanProtocolFeeMantissa,\\n        uint256 newFlashLoanProtocolFeeMantissa,\\n        uint256 oldFlashLoanSupplierFeeMantissa,\\n        uint256 newFlashLoanSupplierFeeMantissa\\n    );\\n\\n    /*** Flash Loan Error***/\\n\\n    error FlashLoanNotAuthorized();\\n\\n    error FlashLoanNotEnabled();\\n\\n    error ExecuteFlashLoanFailed();\\n\\n    error InsufficientRepaymentBalance();\\n\\n    /*** User Interface ***/\\n\\n    function transfer(address dst, uint amount) external virtual returns (bool);\\n\\n    function transferFrom(address src, address dst, uint amount) external virtual returns (bool);\\n\\n    function approve(address spender, uint amount) external virtual returns (bool);\\n\\n    function balanceOfUnderlying(address owner) external virtual returns (uint);\\n\\n    function totalBorrowsCurrent() external virtual returns (uint);\\n\\n    function borrowBalanceCurrent(address account) external virtual returns (uint);\\n\\n    function seize(address liquidator, address borrower, uint seizeTokens) external virtual returns (uint);\\n\\n    /*** Admin Function ***/\\n    function _setPendingAdmin(address payable newPendingAdmin) external virtual returns (uint);\\n\\n    /*** Admin Function ***/\\n    function _acceptAdmin() external virtual returns (uint);\\n\\n    /*** Admin Function ***/\\n    function _setReserveFactor(uint newReserveFactorMantissa) external virtual returns (uint);\\n\\n    /*** Admin Function ***/\\n    function _reduceReserves(uint reduceAmount) external virtual returns (uint);\\n\\n    function borrowDebtPosition(address borrower, uint borrowAmount) external virtual returns (uint);\\n\\n    function balanceOf(address owner) external view virtual returns (uint);\\n\\n    function allowance(address owner, address spender) external view virtual returns (uint);\\n\\n    function getAccountSnapshot(address account) external view virtual returns (uint, uint, uint, uint);\\n\\n    function borrowRatePerBlock() external view virtual returns (uint);\\n\\n    function supplyRatePerBlock() external view virtual returns (uint);\\n\\n    function getCash() external view virtual returns (uint);\\n\\n    function exchangeRateCurrent() public virtual returns (uint);\\n\\n    function accrueInterest() public virtual returns (uint);\\n\\n    /*** Admin Function ***/\\n    function _setComptroller(ComptrollerInterface newComptroller) public virtual returns (uint);\\n\\n    /*** Admin Function ***/\\n    function _setInterestRateModel(InterestRateModelV8 newInterestRateModel) public virtual returns (uint);\\n\\n    function borrowBalanceStored(address account) public view virtual returns (uint);\\n\\n    function exchangeRateStored() public view virtual returns (uint);\\n}\\n\\ninterface VBep20Interface {\\n    /*** User Interface ***/\\n\\n    function mint(uint mintAmount) external returns (uint);\\n\\n    function mintBehalf(address receiver, uint mintAmount) external returns (uint);\\n\\n    function redeem(uint redeemTokens) external returns (uint);\\n\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\n\\n    function borrow(uint borrowAmount) external returns (uint);\\n\\n    function repayBorrow(uint repayAmount) external returns (uint);\\n\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\\n\\n    function liquidateBorrow(\\n        address borrower,\\n        uint repayAmount,\\n        VTokenInterface vTokenCollateral,\\n        ComptrollerLensInterface.AccountSnapshot memory snapshot\\n    ) external returns (uint);\\n\\n    /*** Admin Functions ***/\\n\\n    function _addReserves(uint addAmount) external returns (uint);\\n}\\n\\ninterface VDelegatorInterface {\\n    /**\\n     * @notice Emitted when implementation is changed\\n     */\\n    event NewImplementation(address oldImplementation, address newImplementation);\\n\\n    /**\\n     * @notice Called by the admin to update the implementation of the delegator\\n     * @param implementation_ The address of the new implementation for delegation\\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\n     */\\n    function _setImplementation(\\n        address implementation_,\\n        bool allowResign,\\n        bytes memory becomeImplementationData\\n    ) external;\\n}\\n\\ninterface VDelegateInterface {\\n    /**\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\n     * @param data The encoded bytes data for any initialization\\n     */\\n    function _becomeImplementation(bytes memory data) external;\\n\\n    /**\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\n     */\\n    function _resignImplementation() external;\\n}\\n\",\"keccak256\":\"0x4c00aa1a62cdc8ce310f5a425acce4367209920384eabe27f64d8c2e205dc945\",\"license\":\"BSD-3-Clause\"},\"contracts/Utils/CarefulMath.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\n/**\\n * @title Careful Math\\n * @author Venus\\n * @notice Derived from OpenZeppelin's SafeMath library\\n *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\\n */\\ncontract CarefulMath {\\n    /**\\n     * @dev Possible error codes that we can return\\n     */\\n    enum MathError {\\n        NO_ERROR,\\n        DIVISION_BY_ZERO,\\n        INTEGER_OVERFLOW,\\n        INTEGER_UNDERFLOW\\n    }\\n\\n    /**\\n     * @dev Multiplies two numbers, returns an error on overflow.\\n     */\\n    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (a == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        uint c;\\n        unchecked {\\n            c = a * b;\\n        }\\n\\n        if (c / a != b) {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        } else {\\n            return (MathError.NO_ERROR, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, truncating the quotient.\\n     */\\n    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b == 0) {\\n            return (MathError.DIVISION_BY_ZERO, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, a / b);\\n    }\\n\\n    /**\\n     * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\\n     */\\n    function subUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b <= a) {\\n            unchecked {\\n                return (MathError.NO_ERROR, a - b);\\n            }\\n        } else {\\n            return (MathError.INTEGER_UNDERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Adds two numbers, returns an error on overflow.\\n     */\\n    function addUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        uint c;\\n        unchecked {\\n            c = a + b;\\n        }\\n\\n        if (c >= a) {\\n            return (MathError.NO_ERROR, c);\\n        } else {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev add a and b and then subtract c\\n     */\\n    function addThenSubUInt(uint a, uint b, uint c) internal pure returns (MathError, uint) {\\n        (MathError err0, uint sum) = addUInt(a, b);\\n\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, 0);\\n        }\\n\\n        return subUInt(sum, c);\\n    }\\n}\\n\",\"keccak256\":\"0xb7ca049dc6f4a31c8994ad5fd2093b9f7f60c21495ff8386c7802ef13d9858a7\",\"license\":\"BSD-3-Clause\"},\"contracts/Utils/ErrorReporter.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\nimport { WeightFunction } from \\\"../Comptroller/Diamond/interfaces/IFacetBase.sol\\\";\\n\\ncontract ComptrollerErrorReporter {\\n    /// @notice Thrown when You are already in the selected pool.\\n    error AlreadyInSelectedPool();\\n\\n    /// @notice Thrown when One or more of your assets are not compatible with the selected pool.\\n    error IncompatibleBorrowedAssets();\\n\\n    /// @notice Thrown when Switching to this pool would fail the liquidity check or lead to liquidation.\\n    error LiquidityCheckFailed(uint256 errorCode, uint256 shortfall);\\n\\n    /// @notice Thrown when trying to modify the core pool (poolId == 0)\\n    error CorePoolModificationNotAllowed();\\n\\n    /// @notice Thrown when input array lengths do not match\\n    error ArrayLengthMismatch();\\n\\n    /// @notice Thrown when market trying to add in a pool is not listed in the core pool\\n    error MarketNotListedInCorePool();\\n\\n    /// @notice Thrown when market is not set in the _poolMarkets mapping\\n    error MarketConfigNotFound();\\n\\n    /// @notice Thrown when borrowing is not allowed in the selected pool for a given market.\\n    error BorrowNotAllowedInPool();\\n\\n    /// @notice Thrown when trying to remove a market that is not listed in the given pool.\\n    error PoolMarketNotFound(uint96 poolId, address vToken);\\n\\n    /// @notice Thrown when a given pool ID does not exist\\n    error PoolDoesNotExist(uint96 poolId);\\n\\n    /// @notice Thrown when the pool label is empty\\n    error EmptyPoolLabel();\\n\\n    /// @notice Thrown when a vToken is already listed in the specified pool\\n    error MarketAlreadyListed(uint96 poolId, address vToken);\\n\\n    /// @notice Thrown when an invalid weighting strategy is provided\\n    error InvalidWeightingStrategy(WeightFunction strategy);\\n\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        COMPTROLLER_MISMATCH,\\n        INSUFFICIENT_SHORTFALL,\\n        INSUFFICIENT_LIQUIDITY,\\n        INVALID_CLOSE_FACTOR,\\n        INVALID_COLLATERAL_FACTOR,\\n        INVALID_LIQUIDATION_INCENTIVE,\\n        MARKET_NOT_ENTERED, // no longer possible\\n        MARKET_NOT_LISTED,\\n        MARKET_ALREADY_LISTED,\\n        MATH_ERROR,\\n        NONZERO_BORROW_BALANCE,\\n        PRICE_ERROR,\\n        REJECTION,\\n        SNAPSHOT_ERROR,\\n        TOO_MANY_ASSETS,\\n        TOO_MUCH_REPAY,\\n        INSUFFICIENT_BALANCE_FOR_VAI,\\n        MARKET_NOT_COLLATERAL,\\n        INVALID_LIQUIDATION_THRESHOLD\\n    }\\n\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n        EXIT_MARKET_BALANCE_OWED,\\n        EXIT_MARKET_REJECTION,\\n        SET_CLOSE_FACTOR_OWNER_CHECK,\\n        SET_CLOSE_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\n        SET_COLLATERAL_FACTOR_VALIDATION_LIQUIDATION_THRESHOLD,\\n        SET_IMPLEMENTATION_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n        SET_PRICE_ORACLE_OWNER_CHECK,\\n        SUPPORT_MARKET_EXISTS,\\n        SUPPORT_MARKET_OWNER_CHECK,\\n        SET_PAUSE_GUARDIAN_OWNER_CHECK,\\n        SET_VAI_MINT_RATE_CHECK,\\n        SET_VAICONTROLLER_OWNER_CHECK,\\n        SET_MINTED_VAI_REJECTION,\\n        SET_TREASURY_OWNER_CHECK,\\n        UNLIST_MARKET_NOT_LISTED,\\n        SET_LIQUIDATION_THRESHOLD_VALIDATION,\\n        COLLATERAL_FACTOR_GREATER_THAN_LIQUIDATION_THRESHOLD\\n    }\\n\\n    /**\\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n     **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n     */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n     */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\\n\\ncontract TokenErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        BAD_INPUT,\\n        COMPTROLLER_REJECTION,\\n        COMPTROLLER_CALCULATION_ERROR,\\n        INTEREST_RATE_MODEL_ERROR,\\n        INVALID_ACCOUNT_PAIR,\\n        INVALID_CLOSE_AMOUNT_REQUESTED,\\n        INVALID_COLLATERAL_FACTOR,\\n        MATH_ERROR,\\n        MARKET_NOT_FRESH,\\n        MARKET_NOT_LISTED,\\n        TOKEN_INSUFFICIENT_ALLOWANCE,\\n        TOKEN_INSUFFICIENT_BALANCE,\\n        TOKEN_INSUFFICIENT_CASH,\\n        TOKEN_TRANSFER_IN_FAILED,\\n        TOKEN_TRANSFER_OUT_FAILED,\\n        TOKEN_PRICE_ERROR\\n    }\\n\\n    /*\\n     * Note: FailureInfo (but not Error) is kept in alphabetical order\\n     *       This is because FailureInfo grows significantly faster, and\\n     *       the order of Error has some meaning, while the order of FailureInfo\\n     *       is entirely arbitrary.\\n     */\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\\n        BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        BORROW_ACCRUE_INTEREST_FAILED,\\n        BORROW_CASH_NOT_AVAILABLE,\\n        BORROW_FRESHNESS_CHECK,\\n        BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        BORROW_MARKET_NOT_LISTED,\\n        BORROW_COMPTROLLER_REJECTION,\\n        LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\n        LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\n        LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\n        LIQUIDATE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\n        LIQUIDATE_FRESHNESS_CHECK,\\n        LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\n        LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_SEIZE_TOO_MUCH,\\n        MINT_ACCRUE_INTEREST_FAILED,\\n        MINT_COMPTROLLER_REJECTION,\\n        MINT_EXCHANGE_CALCULATION_FAILED,\\n        MINT_EXCHANGE_RATE_READ_FAILED,\\n        MINT_FRESHNESS_CHECK,\\n        MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        MINT_TRANSFER_IN_FAILED,\\n        MINT_TRANSFER_IN_NOT_POSSIBLE,\\n        REDEEM_ACCRUE_INTEREST_FAILED,\\n        REDEEM_COMPTROLLER_REJECTION,\\n        REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_RATE_READ_FAILED,\\n        REDEEM_FRESHNESS_CHECK,\\n        REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\\n        REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\\n        REDUCE_RESERVES_ADMIN_CHECK,\\n        REDUCE_RESERVES_CASH_NOT_AVAILABLE,\\n        REDUCE_RESERVES_FRESH_CHECK,\\n        REDUCE_RESERVES_VALIDATION,\\n        REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_COMPTROLLER_REJECTION,\\n        REPAY_BORROW_FRESHNESS_CHECK,\\n        REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COMPTROLLER_OWNER_CHECK,\\n        SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\\n        SET_INTEREST_RATE_MODEL_FRESH_CHECK,\\n        SET_INTEREST_RATE_MODEL_OWNER_CHECK,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_ORACLE_MARKET_NOT_LISTED,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\\n        SET_RESERVE_FACTOR_ADMIN_CHECK,\\n        SET_RESERVE_FACTOR_FRESH_CHECK,\\n        SET_RESERVE_FACTOR_BOUNDS_CHECK,\\n        TRANSFER_COMPTROLLER_REJECTION,\\n        TRANSFER_NOT_ALLOWED,\\n        TRANSFER_NOT_ENOUGH,\\n        TRANSFER_TOO_MUCH,\\n        ADD_RESERVES_ACCRUE_INTEREST_FAILED,\\n        ADD_RESERVES_FRESH_CHECK,\\n        ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE,\\n        TOKEN_GET_UNDERLYING_PRICE_ERROR,\\n        REPAY_VAI_COMPTROLLER_REJECTION,\\n        REPAY_VAI_FRESHNESS_CHECK,\\n        VAI_MINT_EXCHANGE_CALCULATION_FAILED,\\n        SFT_MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        REDEEM_CASH_NOT_AVAILABLE\\n    }\\n\\n    /**\\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n     **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n     */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n     */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\\n\\ncontract VAIControllerErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED, // The sender is not authorized to perform this action.\\n        REJECTION, // The action would violate the comptroller, vaicontroller policy.\\n        SNAPSHOT_ERROR, // The comptroller could not get the account borrows and exchange rate from the market.\\n        PRICE_ERROR, // The comptroller could not obtain a required price of an asset.\\n        MATH_ERROR, // A math calculation error occurred.\\n        INSUFFICIENT_BALANCE_FOR_VAI // Caller does not have sufficient balance to mint VAI.\\n    }\\n\\n    enum FailureInfo {\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n        SET_COMPTROLLER_OWNER_CHECK,\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n        VAI_MINT_REJECTION,\\n        VAI_BURN_REJECTION,\\n        VAI_LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\n        VAI_LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\n        VAI_LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\n        VAI_LIQUIDATE_COMPTROLLER_REJECTION,\\n        VAI_LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\n        VAI_LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\n        VAI_LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\n        VAI_LIQUIDATE_FRESHNESS_CHECK,\\n        VAI_LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\n        VAI_LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\n        VAI_LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\n        VAI_LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\n        VAI_LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\n        VAI_LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\n        VAI_LIQUIDATE_SEIZE_TOO_MUCH,\\n        MINT_FEE_CALCULATION_FAILED,\\n        SET_TREASURY_OWNER_CHECK\\n    }\\n\\n    /**\\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n     **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n     */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n     */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\\n\",\"keccak256\":\"0x240371c5cfe64848be7633b01509d0d571779ff502c692e25e2d667bc7d2834d\",\"license\":\"BSD-3-Clause\"},\"contracts/Utils/Exponential.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\nimport { CarefulMath } from \\\"./CarefulMath.sol\\\";\\nimport { ExponentialNoError } from \\\"./ExponentialNoError.sol\\\";\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Venus\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract Exponential is CarefulMath, ExponentialNoError {\\n    /**\\n     * @dev Creates an exponential from numerator and denominator values.\\n     *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\\n     *            or if `denom` is zero.\\n     */\\n    function getExp(uint num, uint denom) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint scaledNumerator) = mulUInt(num, expScale);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({ mantissa: 0 }));\\n        }\\n\\n        (MathError err1, uint rational) = divUInt(scaledNumerator, denom);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({ mantissa: 0 }));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({ mantissa: rational }));\\n    }\\n\\n    /**\\n     * @dev Adds two exponentials, returning a new exponential.\\n     */\\n    function addExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        (MathError error, uint result) = addUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({ mantissa: result }));\\n    }\\n\\n    /**\\n     * @dev Subtracts two exponentials, returning a new exponential.\\n     */\\n    function subExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        (MathError error, uint result) = subUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({ mantissa: result }));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, returning a new Exp.\\n     */\\n    function mulScalar(Exp memory a, uint scalar) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint scaledMantissa) = mulUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({ mantissa: 0 }));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({ mantissa: scaledMantissa }));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mulScalarTruncate(Exp memory a, uint scalar) internal pure returns (MathError, uint) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(product));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mulScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) internal pure returns (MathError, uint) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return addUInt(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Divide an Exp by a scalar, returning a new Exp.\\n     */\\n    function divScalar(Exp memory a, uint scalar) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint descaledMantissa) = divUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({ mantissa: 0 }));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({ mantissa: descaledMantissa }));\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, returning a new Exp.\\n     */\\n    function divScalarByExp(uint scalar, Exp memory divisor) internal pure returns (MathError, Exp memory) {\\n        /*\\n          We are doing this as:\\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\\n\\n          How it works:\\n          Exp = a / b;\\n          Scalar = s;\\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\\n        */\\n        (MathError err0, uint numerator) = mulUInt(expScale, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({ mantissa: 0 }));\\n        }\\n        return getExp(numerator, divisor.mantissa);\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\\n     */\\n    function divScalarByExpTruncate(uint scalar, Exp memory divisor) internal pure returns (MathError, uint) {\\n        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(fraction));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials, returning a new exponential.\\n     */\\n    function mulExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({ mantissa: 0 }));\\n        }\\n\\n        // We add half the scale before dividing so that we get rounding instead of truncation.\\n        //  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717\\n        // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\\n        (MathError err1, uint doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({ mantissa: 0 }));\\n        }\\n\\n        (MathError err2, uint product) = divUInt(doubleScaledProductWithHalfScale, expScale);\\n        // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\\n        assert(err2 == MathError.NO_ERROR);\\n\\n        return (MathError.NO_ERROR, Exp({ mantissa: product }));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\\n     */\\n    function mulExp(uint a, uint b) internal pure returns (MathError, Exp memory) {\\n        return mulExp(Exp({ mantissa: a }), Exp({ mantissa: b }));\\n    }\\n\\n    /**\\n     * @dev Multiplies three exponentials, returning a new exponential.\\n     */\\n    function mulExp3(Exp memory a, Exp memory b, Exp memory c) internal pure returns (MathError, Exp memory) {\\n        (MathError err, Exp memory ab) = mulExp(a, b);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, ab);\\n        }\\n        return mulExp(ab, c);\\n    }\\n\\n    /**\\n     * @dev Divides two exponentials, returning a new exponential.\\n     *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\\n     *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\\n     */\\n    function divExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        return getExp(a.mantissa, b.mantissa);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9b293a09a3ec69ac16f58dce449a553b44121eb9aad666a777d8f6f4ae83f0\",\"license\":\"BSD-3-Clause\"},\"contracts/Utils/ExponentialNoError.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract ExponentialNoError {\\n    uint internal constant expScale = 1e18;\\n    uint internal constant doubleScale = 1e36;\\n    uint internal constant halfExpScale = expScale / 2;\\n    uint internal constant mantissaOne = expScale;\\n\\n    struct Exp {\\n        uint mantissa;\\n    }\\n\\n    struct Double {\\n        uint mantissa;\\n    }\\n\\n    /**\\n     * @dev Truncates the given exp to a whole number value.\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n     */\\n    function truncate(Exp memory exp) internal pure returns (uint) {\\n        // Note: We are not using careful math here as we're performing a division that cannot fail\\n        return exp.mantissa / expScale;\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mul_ScalarTruncate(Exp memory a, uint scalar) internal pure returns (uint) {\\n        Exp memory product = mul_(a, scalar);\\n        return truncate(product);\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mul_ScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) internal pure returns (uint) {\\n        Exp memory product = mul_(a, scalar);\\n        return add_(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Checks if first Exp is less than second Exp.\\n     */\\n    function lessThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n        return left.mantissa < right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp <= right Exp.\\n     */\\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n        return left.mantissa <= right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp > right Exp.\\n     */\\n    function greaterThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n        return left.mantissa > right.mantissa;\\n    }\\n\\n    /**\\n     * @dev returns true if Exp is exactly zero\\n     */\\n    function isZeroExp(Exp memory value) internal pure returns (bool) {\\n        return value.mantissa == 0;\\n    }\\n\\n    function safe224(uint n, string memory errorMessage) internal pure returns (uint224) {\\n        require(n < 2 ** 224, errorMessage);\\n        return uint224(n);\\n    }\\n\\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2 ** 32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function add_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: add_(a.mantissa, b.mantissa) });\\n    }\\n\\n    function add_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({ mantissa: add_(a.mantissa, b.mantissa) });\\n    }\\n\\n    function add_(uint a, uint b) internal pure returns (uint) {\\n        return add_(a, b, \\\"addition overflow\\\");\\n    }\\n\\n    function add_(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: sub_(a.mantissa, b.mantissa) });\\n    }\\n\\n    function sub_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({ mantissa: sub_(a.mantissa, b.mantissa) });\\n    }\\n\\n    function sub_(uint a, uint b) internal pure returns (uint) {\\n        return sub_(a, b, \\\"subtraction underflow\\\");\\n    }\\n\\n    function sub_(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function mul_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: mul_(a.mantissa, b.mantissa) / expScale });\\n    }\\n\\n    function mul_(Exp memory a, uint b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: mul_(a.mantissa, b) });\\n    }\\n\\n    function mul_(uint a, Exp memory b) internal pure returns (uint) {\\n        return mul_(a, b.mantissa) / expScale;\\n    }\\n\\n    function mul_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({ mantissa: mul_(a.mantissa, b.mantissa) / doubleScale });\\n    }\\n\\n    function mul_(Double memory a, uint b) internal pure returns (Double memory) {\\n        return Double({ mantissa: mul_(a.mantissa, b) });\\n    }\\n\\n    function mul_(uint a, Double memory b) internal pure returns (uint) {\\n        return mul_(a, b.mantissa) / doubleScale;\\n    }\\n\\n    function mul_(uint a, uint b) internal pure returns (uint) {\\n        return mul_(a, b, \\\"multiplication overflow\\\");\\n    }\\n\\n    function mul_(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        uint c = a * b;\\n        require(c / a == b, errorMessage);\\n        return c;\\n    }\\n\\n    function div_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: div_(mul_(a.mantissa, expScale), b.mantissa) });\\n    }\\n\\n    function div_(Exp memory a, uint b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: div_(a.mantissa, b) });\\n    }\\n\\n    function div_(uint a, Exp memory b) internal pure returns (uint) {\\n        return div_(mul_(a, expScale), b.mantissa);\\n    }\\n\\n    function div_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({ mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa) });\\n    }\\n\\n    function div_(Double memory a, uint b) internal pure returns (Double memory) {\\n        return Double({ mantissa: div_(a.mantissa, b) });\\n    }\\n\\n    function div_(uint a, Double memory b) internal pure returns (uint) {\\n        return div_(mul_(a, doubleScale), b.mantissa);\\n    }\\n\\n    function div_(uint a, uint b) internal pure returns (uint) {\\n        return div_(a, b, \\\"divide by zero\\\");\\n    }\\n\\n    function div_(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    function fraction(uint a, uint b) internal pure returns (Double memory) {\\n        return Double({ mantissa: div_(mul_(a, doubleScale), b) });\\n    }\\n}\\n\",\"keccak256\":\"0xce75802a56763fb96b2046b374127f080a425cfe3634670767ec040ccb6ea7e0\",\"license\":\"BSD-3-Clause\"},\"contracts/external/IProtocolShareReserve.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.25;\\n\\ninterface IProtocolShareReserve {\\n    enum IncomeType {\\n        SPREAD,\\n        LIQUIDATION,\\n        FLASHLOAN\\n    }\\n\\n    function updateAssetsState(address comptroller, address asset, IncomeType incomeType) external;\\n}\\n\",\"keccak256\":\"0x01b2f2afbc3fa148f93d4563fa06e0639899b04599f3d95a3df79eaff79db137\",\"license\":\"BSD-3-Clause\"},\"contracts/external/IWBNB.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.25;\\n\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IWBNB is IERC20Upgradeable {\\n    function deposit() external payable;\\n}\\n\",\"keccak256\":\"0x73026d4d447f4c3a92656b79935c407a931b26ea32f6c6c24925cd8f5dd0b41c\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x610120604052348015610010575f80fd5b5060405161357338038061357383398101604081905261002f916101ea565b610038836100f0565b610041846100f0565b61004a826100f0565b610053816100f0565b6001600160a01b0380841660805282811660e05284811660a08190529082166101005260408051639254f5e560e01b81529051639254f5e5916004808201926020929091908290030181865afa1580156100af573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906100d39190610246565b6001600160a01b031660c0526100e761011a565b50505050610268565b6001600160a01b038116610117576040516342bcdf7f60e11b815260040160405180910390fd5b50565b5f54610100900460ff16156101855760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b5f5460ff908116146101d4575f805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6001600160a01b0381168114610117575f80fd5b5f805f80608085870312156101fd575f80fd5b8451610208816101d6565b6020860151909450610219816101d6565b604086015190935061022a816101d6565b606086015190925061023b816101d6565b939692955090935050565b5f60208284031215610256575f80fd5b8151610261816101d6565b9392505050565b60805160a05160c05160e0516101005161321f6103545f395f818161056d01526116ee01525f818161053a01528181612584015281816126010152818161267701526126dd01525f818161045501528181610be1015281816117f401528181611893015281816119ca01528181611a3401528181611ad801528181611b0c0152611b4a01525f818161033e01528181610906015281816109e80152818161171d015281816118640152818161193401528181611bf901528181612655015261284301525f81816102f301528181610ad201528181610b5901528181611f1c0152612039015261321f5ff3fe6080604052600436106101de575f3560e01c80638da5cb5b116100fd578063b8332db711610092578063e9a44fd911610062578063e9a44fd9146105ac578063f2fde38b146105cb578063f52421b3146105ea578063f7dcd96e14610609575f80fd5b8063b8332db714610515578063d02eb3f414610529578063d3270f991461055c578063e30c39781461058f575f80fd5b8063b09c7742116100cd578063b09c774214610496578063b26461de146104aa578063b4988fd0146104d8578063b4a0bdf3146104f7575f80fd5b80638da5cb5b146104125780638e3525fc1461042f5780639254f5e514610444578063a093796a14610477575f80fd5b80635fe3b567116101735780637debe3fe116101435780637debe3fe146103925780638722ddf2146103b15780638765adcb146103d457806389a2bc25146103f3575f80fd5b80635fe3b5671461032d57806364fd707814610360578063715018a61461037357806379ba50971461037e575f80fd5b806336eab4ae116101ae57806336eab4ae1461025c57806344b3716a1461028a57806347a6a971146102c35780635ba3792d146102e2575f80fd5b80630d060ea8146101e95780630e32cb86146101ff578063107568df1461021e57806311ec4b7a1461023d575f80fd5b366101e557005b5f80fd5b3480156101f4575f80fd5b506101fd610628565b005b34801561020a575f80fd5b506101fd610219366004612c7b565b610706565b348015610229575f80fd5b506101fd610238366004612c7b565b61071a565b348015610248575f80fd5b506101fd610257366004612c7b565b61072b565b348015610267575f80fd5b5060cd546102759060ff1681565b60405190151581526020015b60405180910390f35b348015610295575f80fd5b506102756102a4366004612c9d565b60ca60209081525f928352604080842090915290825290205460ff1681565b3480156102ce575f80fd5b506101fd6102dd366004612c9d565b6107f8565b3480156102ed575f80fd5b506103157f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610281565b348015610338575f80fd5b506103157f000000000000000000000000000000000000000000000000000000000000000081565b6101fd61036e366004612cd4565b6108ca565b3480156101fd575f80fd5b348015610389575f80fd5b506101fd610d35565b34801561039d575f80fd5b506101fd6103ac366004612c9d565b610dac565b3480156103bc575f80fd5b506103c660cc5481565b604051908152602001610281565b3480156103df575f80fd5b506101fd6103ee366004612c7b565b610e9f565b3480156103fe575f80fd5b506101fd61040d366004612d24565b610f68565b34801561041d575f80fd5b506033546001600160a01b0316610315565b34801561043a575f80fd5b506103c660c95481565b34801561044f575f80fd5b506103157f000000000000000000000000000000000000000000000000000000000000000081565b348015610482575f80fd5b506101fd610491366004612d24565b610ff0565b3480156104a1575f80fd5b506101fd611096565b3480156104b5575f80fd5b506102756104c4366004612c7b565b60cb6020525f908152604090205460ff1681565b3480156104e3575f80fd5b506101fd6104f2366004612d3b565b611174565b348015610502575f80fd5b50610102546001600160a01b0316610315565b348015610520575f80fd5b506101fd61125b565b348015610534575f80fd5b506103157f000000000000000000000000000000000000000000000000000000000000000081565b348015610567575f80fd5b506103157f000000000000000000000000000000000000000000000000000000000000000081565b34801561059a575f80fd5b506065546001600160a01b0316610315565b3480156105b7575f80fd5b5060cf54610315906001600160a01b031681565b3480156105d6575f80fd5b506101fd6105e5366004612c7b565b611275565b3480156105f5575f80fd5b506101fd610604366004612d24565b6112e6565b348015610614575f80fd5b50610315610623366004612d24565b611365565b6106666040518060400160405280601881526020017f7061757365466f7263655641494c69717569646174652829000000000000000081525061138d565b60cd5460ff166106d05760405162461bcd60e51b815260206004820152602a60248201527f466f726365204c69717569646174696f6e206f662056414920697320616c726560448201526918591e4814185d5cd95960b21b60648201526084015b60405180910390fd5b60cd805460ff1916905560405133907f42388332be4beb2ad2ff83017119b9d702ce7fbaf67e18e53a137508cf967e43905f90a2565b61070e611429565b61071781611483565b50565b610722611429565b61071781611549565b6107696040518060400160405280601c81526020017f72657374726963744c69717569646174696f6e2861646472657373290000000081525061138d565b6001600160a01b0381165f90815260cb602052604090205460ff16156107ad5760405163404fe9fb60e11b81526001600160a01b03821660048201526024016106c7565b6001600160a01b0381165f81815260cb6020526040808220805460ff19166001179055517f614c47c82976e8f145409efb6366fe2cefa323f389ed9354649262e38dbb35899190a250565b6108196040518060600160405280602481526020016131a26024913961138d565b6001600160a01b038083165f90815260ca602090815260408083209385168352929052205460ff166108715760405163435aad4360e01b81526001600160a01b038084166004830152821660248201526044016106c7565b6001600160a01b038083165f81815260ca6020908152604080832094861680845294909152808220805460ff19169055517f6b0d38eafddac0d37e0aff8f4bbd5f3a3cfe124b8eabea27558bffc931ac05b59190a35050565b6108d26115ad565b6108db83611606565b6108e5833361162d565b604051638e8f294b60e01b81526001600160a01b0382811660048301525f917f000000000000000000000000000000000000000000000000000000000000000090911690638e8f294b90602401606060405180830381865afa15801561094d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109719190612d8e565b505090508061099e57604051635a9a1eb960e11b81526001600160a01b03831660048201526024016106c7565b5f6109aa8584866116aa565b60a081015160c0820151604051630f645d0160e11b81526001600160a01b038781166004830152602482019390935260448101919091529192505f917f000000000000000000000000000000000000000000000000000000000000000090911690631ec8ba0290606401602060405180830381865afa158015610a2f573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a539190612dc7565b60e083018190529050610a6687876117d3565b6040516370a0823160e01b81523060048201525f906001600160a01b038616906370a0823190602401602060405180830381865afa158015610aaa573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ace9190612dc7565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316886001600160a01b031603610bb857348614610b325760405163dd97100160e01b8152600481018790523460248201526044016106c7565b604051635572051560e11b81526001600160a01b03888116600483015286811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063aae40a2a9034906044015f604051808303818588803b158015610b9c575f80fd5b505af1158015610bae573d5f803e3d5ffd5b5050505050610c36565b3415610bdf5760405163dd97100160e01b81525f60048201523460248201526044016106c7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316886001600160a01b031603610c2957610c2487878786611a31565b610c36565b610c368888888887611bd8565b6040516370a0823160e01b81523060048201525f906001600160a01b038716906370a0823190602401602060405180830381865afa158015610c7a573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c9e9190612dc7565b90505f80610cb688610cb08686612df2565b87611db0565b91509150610cc2611f71565b604080518a81526001600160a01b038d8116602083015291810184905260608101839052818a16918c169033907fdd091524d794aecdb5235b2d816620c2598790835e0f3849808504c2dcb4f1a99060800160405180910390a450505050505050610d2d6001609755565b50505050565b565b60655433906001600160a01b03168114610da35760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b60648201526084016106c7565b6107178161214a565b610dea6040518060400160405280601f81526020017f616464546f416c6c6f776c69737428616464726573732c61646472657373290081525061138d565b6001600160a01b038083165f90815260ca602090815260408083209385168352929052205460ff1615610e435760405163071df39160e01b81526001600160a01b038084166004830152821660248201526044016106c7565b6001600160a01b038083165f81815260ca6020908152604080832094861680845294909152808220805460ff19166001179055517ffe40417b78788808c927141f806ef5082e7bba0f7790f2e85b811621a91094339190a35050565b610edd6040518060400160405280601e81526020017f756e72657374726963744c69717569646174696f6e286164647265737329000081525061138d565b6001600160a01b0381165f90815260cb602052604090205460ff16610f2057604051633bf9d98960e11b81526001600160a01b03821660048201526024016106c7565b6001600160a01b0381165f81815260cb6020526040808220805460ff19169055517fe1f03de94d16c262d2f0e89a1c42ede8899d540ac992cf53495a5cf29c2896af9190a250565b610fa66040518060400160405280601b81526020017f736574547265617375727950657263656e742875696e7432353629000000000081525061138d565b610faf81612163565b60c95460408051918252602082018390527f0e9a1641744b21c49e4183ab9ce941d420e05a05a446c71875fb07814f362c1a910160405180910390a160c955565b6110116040518060600160405280602481526020016131c66024913961138d565b5f81116110555760405162461bcd60e51b8152602060048201526012602482015271496e76616c6964206368756e6b2073697a6560701b60448201526064016106c7565b60d05460408051918252602082018390527fe5eef53e396f0cb79322e15e72b6c6613ae3e62c9079f5a12f2c410867c28b2c910160405180910390a160d055565b6110d46040518060400160405280601981526020017f726573756d65466f7263655641494c697175696461746528290000000000000081525061138d565b60cd5460ff161561113b5760405162461bcd60e51b815260206004820152602b60248201527f466f726365204c69717569646174696f6e206f662056414920697320616c726560448201526a18591e481c995cdd5b595960aa1b60648201526084016106c7565b60cd805460ff1916600117905560405133907fd4b8f320ada24d048ee6c25c53a31aa20b2ea37fa25542e6e239c80d31d5b60b905f90a2565b5f54600290610100900460ff1615801561119457505f5460ff8083169116105b6111f75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106c7565b5f805461ffff191660ff83161761010017905561121584848461219d565b5f805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050565b6112636115ad565b61126b611f71565b610d336001609755565b61127d611429565b606580546001600160a01b0383166001600160a01b031990911681179091556112ae6033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6113246040518060400160405280601e81526020017f7365744d696e4c6971756964617461626c655641492875696e7432353629000081525061138d565b60cc5460408051918252602082018390527f8df018dc5fe866d192a3f4d9f16dbfdb38f58a7470a65b92262ccc008c55fff0910160405180910390a160cc55565b60ce8181548110611374575f80fd5b5f918252602090912001546001600160a01b0316905081565b610102546040516318c5e8ab60e01b81525f916001600160a01b0316906318c5e8ab906113c09033908690600401612e33565b602060405180830381865afa1580156113db573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113ff9190612e56565b90508061142557333083604051634a3fa29360e01b81526004016106c793929190612e6f565b5050565b6033546001600160a01b03163314610d335760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106c7565b6001600160a01b0381166114e75760405162461bcd60e51b815260206004820152602560248201527f696e76616c696420616365737320636f6e74726f6c206d616e61676572206164604482015264647265737360d81b60648201526084016106c7565b61010280546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f66fd58e82f7b31a2a5c30e0888f3093efe4e111b00cd2b0c31fe014601293aa0910160405180910390a15050565b61155281611606565b60cf546040516001600160a01b038084169216907fafec95c8612496c3ecf5dddc71e393528fe29bd145fbaf9c6b496d78d7e2d79b905f90a360cf80546001600160a01b0319166001600160a01b0392909216919091179055565b6002609754036115ff5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106c7565b6002609755565b6001600160a01b038116610717576040516342bcdf7f60e11b815260040160405180910390fd5b6001600160a01b0382165f90815260cb602052604090205460ff16801561167957506001600160a01b038083165f90815260ca602090815260408083209385168352929052205460ff16155b156114255760405163074c80eb60e51b81526001600160a01b038084166004830152821660248201526044016106c7565b6116ea6040518061010001604052805f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81525090565b5f807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166376bde0117f000000000000000000000000000000000000000000000000000000000000000088885f8960016040518763ffffffff1660e01b815260040161176396959493929190612eae565b61012060405180830381865afa15801561177f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906117a39190612efd565b91509150815f146117ca57604051639678800960e01b8152600481018390526024016106c7565b95945050505050565b604051633c617c9160e11b81526001600160a01b0382811660048301525f917f0000000000000000000000000000000000000000000000000000000000000000909116906378c2f92290602401602060405180830381865afa15801561183b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061185f9190612dc7565b90505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e85a29607f000000000000000000000000000000000000000000000000000000000000000060056040518363ffffffff1660e01b81526004016118d1929190612fb4565b602060405180830381865afa1580156118ec573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906119109190612e56565b60405163460d60c560e11b81526001600160a01b0386811660048301529192505f917f00000000000000000000000000000000000000000000000000000000000000001690638c1ac18a90602401602060405180830381865afa158015611979573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061199d9190612e56565b905080806119a85750815b806119b6575060cd5460ff16155b806119c2575060cc5483105b806119fe57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b0316145b15611a0a575050505050565b60cc546040516329eb1e8760e01b81526106c7918591600401918252602082015260400190565b5f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cbeb2b286040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a8e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611ab29190612fe1565b9050611ac96001600160a01b0382163330876121e6565b611afd6001600160a01b0382167f00000000000000000000000000000000000000000000000000000000000000005f612251565b611b316001600160a01b0382167f000000000000000000000000000000000000000000000000000000000000000086612251565b604051639680e96160e01b81525f906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639680e96190611b85908990899089908990600401612ffc565b60408051808303815f875af1158015611ba0573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611bc49190613078565b509050611bd081612364565b505050505050565b604051638e8f294b60e01b81526001600160a01b0386811660048301525f917f000000000000000000000000000000000000000000000000000000000000000090911690638e8f294b90602401606060405180830381865afa158015611c40573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611c649190612d8e565b5050905080611c9157604051635a9a1eb960e11b81526001600160a01b03871660048201526024016106c7565b5f866001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611cce573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611cf29190612fe1565b90505f611d0182333089612388565b9050611d176001600160a01b038316895f612251565b611d2b6001600160a01b0383168983612251565b60405163579fb75760e01b8152611da6906001600160a01b038a169063579fb75790611d61908b9086908b908b90600401612ffc565b6020604051808303815f875af1158015611d7d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611da19190612dc7565b612364565b5050505050505050565b5f80611dbc848461248c565b60405163a9059cbb60e01b81523360048201526024810182905291935091506001600160a01b0386169063a9059cbb906044016020604051808303815f875af1158015611e0b573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611e2f9190612e56565b611e5b5760405163241165bb60e21b8152306004820152336024820152604481018290526064016106c7565b5f82118015611e715750611e6f85836124f3565b155b15611f1a575f5b60ce54811015611ec057856001600160a01b031660ce8281548110611e9f57611e9f61309a565b5f918252602090912001546001600160a01b031614611ec057600101611e78565b60ce548103611f145760ce80546001810182555f919091527fd36cd1c74ef8d7326d8021b776c18fb5a5724b7f7bc93c2f42e43e10ef27d12a0180546001600160a01b0319166001600160a01b0388161790555b50611f69565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b031603611f6057611f5b61257e565b611f69565b611f6985612732565b935093915050565b60ce5460d0545f90821015611f865781611f8a565b60d0545b9050805b801561213e575f60ce611fa2600184612df2565b81548110611fb257611fb261309a565b5f9182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a0823190602401602060405180830381865afa158015612002573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906120269190612dc7565b905061203282826124f3565b15612134577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03160361207d5761207861257e565b612086565b61208682612732565b60ce805461209690600190612df2565b815481106120a6576120a661309a565b5f918252602090912001546001600160a01b031660ce6120c7600186612df2565b815481106120d7576120d761309a565b905f5260205f20015f6101000a8154816001600160a01b0302191690836001600160a01b0316021790555060ce805480612113576121136130ae565b5f8281526020902081015f1990810180546001600160a01b03191690550190555b50505f1901611f8e565b505050565b6001609755565b606580546001600160a01b0319169055610717816128e2565b670de0b6b3a764000081111561071757604051635659cb3b60e01b8152670de0b6b3a76400006004820152602481018290526044016106c7565b5f54610100900460ff166121c35760405162461bcd60e51b81526004016106c7906130c2565b6121cb612933565b6121d3612961565b6121dd838261298f565b61213e826129cc565b6040516001600160a01b0380851660248301528316604482015260648101829052610d2d9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526129f2565b8015806122c95750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156122a3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906122c79190612dc7565b155b6123345760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016106c7565b6040516001600160a01b03831660248201526044810182905261213e90849063095ea7b360e01b9060640161221a565b8061236c5750565b60405163125a96ab60e01b8152600481018290526024016106c7565b6040516370a0823160e01b81526001600160a01b0383811660048301525f9182918716906370a0823190602401602060405180830381865afa1580156123d0573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906123f49190612dc7565b905061240b6001600160a01b0387168686866121e6565b6040516370a0823160e01b81526001600160a01b0385811660048301528291908816906370a0823190602401602060405180830381865afa158015612452573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906124769190612dc7565b6124809190612df2565b9150505b949350505050565b5f80806124a1670de0b6b3a764000085612df2565b90505f846124af838861310d565b6124b99190613124565b9050670de0b6b3a764000060c954826124d2919061310d565b6124dc9190613124565b93506124e88487612df2565b925050509250929050565b60405163db006a7560e01b8152600481018290525f906001600160a01b0384169063db006a75906024016020604051808303815f875af1925050508015612557575060408051601f3d908101601f1916820190925261255491810190612dc7565b60015b61256257505f612578565b805f03612573576001915050612578565b5f9150505b92915050565b5f4790507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004015f604051808303818588803b1580156125db575f80fd5b505af11580156125ed573d5f803e3d5ffd5b505060cf5461262d93506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116935016905083612ac5565b60cf546040516305bebb3b60e21b81526001600160a01b03909116906316faecec906126a2907f0000000000000000000000000000000000000000000000000000000000000000907f000000000000000000000000000000000000000000000000000000000000000090600190600401613143565b5f604051808303815f87803b1580156126b9575f80fd5b505af11580156126cb573d5f803e3d5ffd5b50506040518381526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692503391507fb68163184d017d69dff908f587b51f68dc2689426509efd546fbf77b518cc8769060200160405180910390a350565b5f816001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561276f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906127939190612fe1565b6040516370a0823160e01b81523060048201529091505f906001600160a01b038316906370a0823190602401602060405180830381865afa1580156127da573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906127fe9190612dc7565b60cf5490915061281b906001600160a01b03848116911683612ac5565b60cf546040516305bebb3b60e21b81526001600160a01b03909116906316faecec90612870907f0000000000000000000000000000000000000000000000000000000000000000908690600190600401613143565b5f604051808303815f87803b158015612887575f80fd5b505af1158015612899573d5f803e3d5ffd5b50506040518381526001600160a01b03851692503391507fb68163184d017d69dff908f587b51f68dc2689426509efd546fbf77b518cc8769060200160405180910390a3505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b5f54610100900460ff166129595760405162461bcd60e51b81526004016106c7906130c2565b610d33612af5565b5f54610100900460ff166129875760405162461bcd60e51b81526004016106c7906130c2565b610d33612b24565b5f54610100900460ff166129b55760405162461bcd60e51b81526004016106c7906130c2565b6129be82612163565b60c982905561142581611549565b5f54610100900460ff1661070e5760405162461bcd60e51b81526004016106c7906130c2565b5f612a46826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612b4a9092919063ffffffff16565b905080515f1480612a66575080806020019051810190612a669190612e56565b61213e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106c7565b6040516001600160a01b03831660248201526044810182905261213e90849063a9059cbb60e01b9060640161221a565b5f54610100900460ff16612b1b5760405162461bcd60e51b81526004016106c7906130c2565b610d333361214a565b5f54610100900460ff166121435760405162461bcd60e51b81526004016106c7906130c2565b606061248484845f85855f80866001600160a01b03168587604051612b6f9190613179565b5f6040518083038185875af1925050503d805f8114612ba9576040519150601f19603f3d011682016040523d82523d5f602084013e612bae565b606091505b5091509150612bbf87838387612bca565b979650505050505050565b60608315612c385782515f03612c31576001600160a01b0385163b612c315760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106c7565b5081612484565b6124848383815115612c4d5781518083602001fd5b8060405162461bcd60e51b81526004016106c7919061318f565b6001600160a01b0381168114610717575f80fd5b5f60208284031215612c8b575f80fd5b8135612c9681612c67565b9392505050565b5f8060408385031215612cae575f80fd5b8235612cb981612c67565b91506020830135612cc981612c67565b809150509250929050565b5f805f8060808587031215612ce7575f80fd5b8435612cf281612c67565b93506020850135612d0281612c67565b9250604085013591506060850135612d1981612c67565b939692955090935050565b5f60208284031215612d34575f80fd5b5035919050565b5f805f60608486031215612d4d575f80fd5b833592506020840135612d5f81612c67565b91506040840135612d6f81612c67565b809150509250925092565b80518015158114612d89575f80fd5b919050565b5f805f60608486031215612da0575f80fd5b612da984612d7a565b925060208401519150612dbe60408501612d7a565b90509250925092565b5f60208284031215612dd7575f80fd5b5051919050565b634e487b7160e01b5f52601160045260245ffd5b8181038181111561257857612578612dde565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b6001600160a01b03831681526040602082018190525f9061248490830184612e05565b5f60208284031215612e66575f80fd5b612c9682612d7a565b6001600160a01b038481168252831660208201526060604082018190525f906117ca90830184612e05565b634e487b7160e01b5f52602160045260245ffd5b6001600160a01b038781168252868116602083015285166040820152606081018490526080810183905260c0810160028310612eec57612eec612e9a565b8260a0830152979650505050505050565b5f80828403610120811215612f10575f80fd5b8351925061010080601f1983011215612f27575f80fd5b604051915080820182811067ffffffffffffffff82111715612f5757634e487b7160e01b5f52604160045260245ffd5b80604052506020850151825260408501516020830152606085015160408301526080850151606083015260a0850151608083015260c085015160a083015260e085015160c08301528085015160e083015250809150509250929050565b6001600160a01b03831681526040810160098310612fd457612fd4612e9a565b8260208301529392505050565b5f60208284031215612ff1575f80fd5b8151612c9681612c67565b5f6101608201905060018060a01b0380871683528560208401528085166040840152508251606083015260208301516080830152604083015160a0830152606083015160c0830152608083015160e083015260a083015161010083015260c083015161012083015260e083015161014083015295945050505050565b5f8060408385031215613089575f80fd5b505080516020909101519092909150565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52603160045260245ffd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b808202811582820484141761257857612578612dde565b5f8261313e57634e487b7160e01b5f52601260045260245ffd5b500490565b6001600160a01b03848116825283166020820152606081016003831061316b5761316b612e9a565b826040830152949350505050565b5f82518060208501845e5f920191825250919050565b602081525f612c966020830184612e0556fe72656d6f766546726f6d416c6c6f776c69737428616464726573732c616464726573732973657450656e64696e6752656465656d4368756e6b4c656e6774682875696e7432353629a2646970667358221220864384fbde0b8ca2ccfefde1cfcf3a4b6fb113c8dea99e6aff6d4a2e124f33b064736f6c63430008190033",
  "deployedBytecode": "0x6080604052600436106101de575f3560e01c80638da5cb5b116100fd578063b8332db711610092578063e9a44fd911610062578063e9a44fd9146105ac578063f2fde38b146105cb578063f52421b3146105ea578063f7dcd96e14610609575f80fd5b8063b8332db714610515578063d02eb3f414610529578063d3270f991461055c578063e30c39781461058f575f80fd5b8063b09c7742116100cd578063b09c774214610496578063b26461de146104aa578063b4988fd0146104d8578063b4a0bdf3146104f7575f80fd5b80638da5cb5b146104125780638e3525fc1461042f5780639254f5e514610444578063a093796a14610477575f80fd5b80635fe3b567116101735780637debe3fe116101435780637debe3fe146103925780638722ddf2146103b15780638765adcb146103d457806389a2bc25146103f3575f80fd5b80635fe3b5671461032d57806364fd707814610360578063715018a61461037357806379ba50971461037e575f80fd5b806336eab4ae116101ae57806336eab4ae1461025c57806344b3716a1461028a57806347a6a971146102c35780635ba3792d146102e2575f80fd5b80630d060ea8146101e95780630e32cb86146101ff578063107568df1461021e57806311ec4b7a1461023d575f80fd5b366101e557005b5f80fd5b3480156101f4575f80fd5b506101fd610628565b005b34801561020a575f80fd5b506101fd610219366004612c7b565b610706565b348015610229575f80fd5b506101fd610238366004612c7b565b61071a565b348015610248575f80fd5b506101fd610257366004612c7b565b61072b565b348015610267575f80fd5b5060cd546102759060ff1681565b60405190151581526020015b60405180910390f35b348015610295575f80fd5b506102756102a4366004612c9d565b60ca60209081525f928352604080842090915290825290205460ff1681565b3480156102ce575f80fd5b506101fd6102dd366004612c9d565b6107f8565b3480156102ed575f80fd5b506103157f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610281565b348015610338575f80fd5b506103157f000000000000000000000000000000000000000000000000000000000000000081565b6101fd61036e366004612cd4565b6108ca565b3480156101fd575f80fd5b348015610389575f80fd5b506101fd610d35565b34801561039d575f80fd5b506101fd6103ac366004612c9d565b610dac565b3480156103bc575f80fd5b506103c660cc5481565b604051908152602001610281565b3480156103df575f80fd5b506101fd6103ee366004612c7b565b610e9f565b3480156103fe575f80fd5b506101fd61040d366004612d24565b610f68565b34801561041d575f80fd5b506033546001600160a01b0316610315565b34801561043a575f80fd5b506103c660c95481565b34801561044f575f80fd5b506103157f000000000000000000000000000000000000000000000000000000000000000081565b348015610482575f80fd5b506101fd610491366004612d24565b610ff0565b3480156104a1575f80fd5b506101fd611096565b3480156104b5575f80fd5b506102756104c4366004612c7b565b60cb6020525f908152604090205460ff1681565b3480156104e3575f80fd5b506101fd6104f2366004612d3b565b611174565b348015610502575f80fd5b50610102546001600160a01b0316610315565b348015610520575f80fd5b506101fd61125b565b348015610534575f80fd5b506103157f000000000000000000000000000000000000000000000000000000000000000081565b348015610567575f80fd5b506103157f000000000000000000000000000000000000000000000000000000000000000081565b34801561059a575f80fd5b506065546001600160a01b0316610315565b3480156105b7575f80fd5b5060cf54610315906001600160a01b031681565b3480156105d6575f80fd5b506101fd6105e5366004612c7b565b611275565b3480156105f5575f80fd5b506101fd610604366004612d24565b6112e6565b348015610614575f80fd5b50610315610623366004612d24565b611365565b6106666040518060400160405280601881526020017f7061757365466f7263655641494c69717569646174652829000000000000000081525061138d565b60cd5460ff166106d05760405162461bcd60e51b815260206004820152602a60248201527f466f726365204c69717569646174696f6e206f662056414920697320616c726560448201526918591e4814185d5cd95960b21b60648201526084015b60405180910390fd5b60cd805460ff1916905560405133907f42388332be4beb2ad2ff83017119b9d702ce7fbaf67e18e53a137508cf967e43905f90a2565b61070e611429565b61071781611483565b50565b610722611429565b61071781611549565b6107696040518060400160405280601c81526020017f72657374726963744c69717569646174696f6e2861646472657373290000000081525061138d565b6001600160a01b0381165f90815260cb602052604090205460ff16156107ad5760405163404fe9fb60e11b81526001600160a01b03821660048201526024016106c7565b6001600160a01b0381165f81815260cb6020526040808220805460ff19166001179055517f614c47c82976e8f145409efb6366fe2cefa323f389ed9354649262e38dbb35899190a250565b6108196040518060600160405280602481526020016131a26024913961138d565b6001600160a01b038083165f90815260ca602090815260408083209385168352929052205460ff166108715760405163435aad4360e01b81526001600160a01b038084166004830152821660248201526044016106c7565b6001600160a01b038083165f81815260ca6020908152604080832094861680845294909152808220805460ff19169055517f6b0d38eafddac0d37e0aff8f4bbd5f3a3cfe124b8eabea27558bffc931ac05b59190a35050565b6108d26115ad565b6108db83611606565b6108e5833361162d565b604051638e8f294b60e01b81526001600160a01b0382811660048301525f917f000000000000000000000000000000000000000000000000000000000000000090911690638e8f294b90602401606060405180830381865afa15801561094d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109719190612d8e565b505090508061099e57604051635a9a1eb960e11b81526001600160a01b03831660048201526024016106c7565b5f6109aa8584866116aa565b60a081015160c0820151604051630f645d0160e11b81526001600160a01b038781166004830152602482019390935260448101919091529192505f917f000000000000000000000000000000000000000000000000000000000000000090911690631ec8ba0290606401602060405180830381865afa158015610a2f573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a539190612dc7565b60e083018190529050610a6687876117d3565b6040516370a0823160e01b81523060048201525f906001600160a01b038616906370a0823190602401602060405180830381865afa158015610aaa573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ace9190612dc7565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316886001600160a01b031603610bb857348614610b325760405163dd97100160e01b8152600481018790523460248201526044016106c7565b604051635572051560e11b81526001600160a01b03888116600483015286811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063aae40a2a9034906044015f604051808303818588803b158015610b9c575f80fd5b505af1158015610bae573d5f803e3d5ffd5b5050505050610c36565b3415610bdf5760405163dd97100160e01b81525f60048201523460248201526044016106c7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316886001600160a01b031603610c2957610c2487878786611a31565b610c36565b610c368888888887611bd8565b6040516370a0823160e01b81523060048201525f906001600160a01b038716906370a0823190602401602060405180830381865afa158015610c7a573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c9e9190612dc7565b90505f80610cb688610cb08686612df2565b87611db0565b91509150610cc2611f71565b604080518a81526001600160a01b038d8116602083015291810184905260608101839052818a16918c169033907fdd091524d794aecdb5235b2d816620c2598790835e0f3849808504c2dcb4f1a99060800160405180910390a450505050505050610d2d6001609755565b50505050565b565b60655433906001600160a01b03168114610da35760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b60648201526084016106c7565b6107178161214a565b610dea6040518060400160405280601f81526020017f616464546f416c6c6f776c69737428616464726573732c61646472657373290081525061138d565b6001600160a01b038083165f90815260ca602090815260408083209385168352929052205460ff1615610e435760405163071df39160e01b81526001600160a01b038084166004830152821660248201526044016106c7565b6001600160a01b038083165f81815260ca6020908152604080832094861680845294909152808220805460ff19166001179055517ffe40417b78788808c927141f806ef5082e7bba0f7790f2e85b811621a91094339190a35050565b610edd6040518060400160405280601e81526020017f756e72657374726963744c69717569646174696f6e286164647265737329000081525061138d565b6001600160a01b0381165f90815260cb602052604090205460ff16610f2057604051633bf9d98960e11b81526001600160a01b03821660048201526024016106c7565b6001600160a01b0381165f81815260cb6020526040808220805460ff19169055517fe1f03de94d16c262d2f0e89a1c42ede8899d540ac992cf53495a5cf29c2896af9190a250565b610fa66040518060400160405280601b81526020017f736574547265617375727950657263656e742875696e7432353629000000000081525061138d565b610faf81612163565b60c95460408051918252602082018390527f0e9a1641744b21c49e4183ab9ce941d420e05a05a446c71875fb07814f362c1a910160405180910390a160c955565b6110116040518060600160405280602481526020016131c66024913961138d565b5f81116110555760405162461bcd60e51b8152602060048201526012602482015271496e76616c6964206368756e6b2073697a6560701b60448201526064016106c7565b60d05460408051918252602082018390527fe5eef53e396f0cb79322e15e72b6c6613ae3e62c9079f5a12f2c410867c28b2c910160405180910390a160d055565b6110d46040518060400160405280601981526020017f726573756d65466f7263655641494c697175696461746528290000000000000081525061138d565b60cd5460ff161561113b5760405162461bcd60e51b815260206004820152602b60248201527f466f726365204c69717569646174696f6e206f662056414920697320616c726560448201526a18591e481c995cdd5b595960aa1b60648201526084016106c7565b60cd805460ff1916600117905560405133907fd4b8f320ada24d048ee6c25c53a31aa20b2ea37fa25542e6e239c80d31d5b60b905f90a2565b5f54600290610100900460ff1615801561119457505f5460ff8083169116105b6111f75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106c7565b5f805461ffff191660ff83161761010017905561121584848461219d565b5f805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050565b6112636115ad565b61126b611f71565b610d336001609755565b61127d611429565b606580546001600160a01b0383166001600160a01b031990911681179091556112ae6033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6113246040518060400160405280601e81526020017f7365744d696e4c6971756964617461626c655641492875696e7432353629000081525061138d565b60cc5460408051918252602082018390527f8df018dc5fe866d192a3f4d9f16dbfdb38f58a7470a65b92262ccc008c55fff0910160405180910390a160cc55565b60ce8181548110611374575f80fd5b5f918252602090912001546001600160a01b0316905081565b610102546040516318c5e8ab60e01b81525f916001600160a01b0316906318c5e8ab906113c09033908690600401612e33565b602060405180830381865afa1580156113db573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113ff9190612e56565b90508061142557333083604051634a3fa29360e01b81526004016106c793929190612e6f565b5050565b6033546001600160a01b03163314610d335760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106c7565b6001600160a01b0381166114e75760405162461bcd60e51b815260206004820152602560248201527f696e76616c696420616365737320636f6e74726f6c206d616e61676572206164604482015264647265737360d81b60648201526084016106c7565b61010280546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f66fd58e82f7b31a2a5c30e0888f3093efe4e111b00cd2b0c31fe014601293aa0910160405180910390a15050565b61155281611606565b60cf546040516001600160a01b038084169216907fafec95c8612496c3ecf5dddc71e393528fe29bd145fbaf9c6b496d78d7e2d79b905f90a360cf80546001600160a01b0319166001600160a01b0392909216919091179055565b6002609754036115ff5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106c7565b6002609755565b6001600160a01b038116610717576040516342bcdf7f60e11b815260040160405180910390fd5b6001600160a01b0382165f90815260cb602052604090205460ff16801561167957506001600160a01b038083165f90815260ca602090815260408083209385168352929052205460ff16155b156114255760405163074c80eb60e51b81526001600160a01b038084166004830152821660248201526044016106c7565b6116ea6040518061010001604052805f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81525090565b5f807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166376bde0117f000000000000000000000000000000000000000000000000000000000000000088885f8960016040518763ffffffff1660e01b815260040161176396959493929190612eae565b61012060405180830381865afa15801561177f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906117a39190612efd565b91509150815f146117ca57604051639678800960e01b8152600481018390526024016106c7565b95945050505050565b604051633c617c9160e11b81526001600160a01b0382811660048301525f917f0000000000000000000000000000000000000000000000000000000000000000909116906378c2f92290602401602060405180830381865afa15801561183b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061185f9190612dc7565b90505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e85a29607f000000000000000000000000000000000000000000000000000000000000000060056040518363ffffffff1660e01b81526004016118d1929190612fb4565b602060405180830381865afa1580156118ec573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906119109190612e56565b60405163460d60c560e11b81526001600160a01b0386811660048301529192505f917f00000000000000000000000000000000000000000000000000000000000000001690638c1ac18a90602401602060405180830381865afa158015611979573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061199d9190612e56565b905080806119a85750815b806119b6575060cd5460ff16155b806119c2575060cc5483105b806119fe57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b0316145b15611a0a575050505050565b60cc546040516329eb1e8760e01b81526106c7918591600401918252602082015260400190565b5f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cbeb2b286040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a8e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611ab29190612fe1565b9050611ac96001600160a01b0382163330876121e6565b611afd6001600160a01b0382167f00000000000000000000000000000000000000000000000000000000000000005f612251565b611b316001600160a01b0382167f000000000000000000000000000000000000000000000000000000000000000086612251565b604051639680e96160e01b81525f906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639680e96190611b85908990899089908990600401612ffc565b60408051808303815f875af1158015611ba0573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611bc49190613078565b509050611bd081612364565b505050505050565b604051638e8f294b60e01b81526001600160a01b0386811660048301525f917f000000000000000000000000000000000000000000000000000000000000000090911690638e8f294b90602401606060405180830381865afa158015611c40573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611c649190612d8e565b5050905080611c9157604051635a9a1eb960e11b81526001600160a01b03871660048201526024016106c7565b5f866001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611cce573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611cf29190612fe1565b90505f611d0182333089612388565b9050611d176001600160a01b038316895f612251565b611d2b6001600160a01b0383168983612251565b60405163579fb75760e01b8152611da6906001600160a01b038a169063579fb75790611d61908b9086908b908b90600401612ffc565b6020604051808303815f875af1158015611d7d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611da19190612dc7565b612364565b5050505050505050565b5f80611dbc848461248c565b60405163a9059cbb60e01b81523360048201526024810182905291935091506001600160a01b0386169063a9059cbb906044016020604051808303815f875af1158015611e0b573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611e2f9190612e56565b611e5b5760405163241165bb60e21b8152306004820152336024820152604481018290526064016106c7565b5f82118015611e715750611e6f85836124f3565b155b15611f1a575f5b60ce54811015611ec057856001600160a01b031660ce8281548110611e9f57611e9f61309a565b5f918252602090912001546001600160a01b031614611ec057600101611e78565b60ce548103611f145760ce80546001810182555f919091527fd36cd1c74ef8d7326d8021b776c18fb5a5724b7f7bc93c2f42e43e10ef27d12a0180546001600160a01b0319166001600160a01b0388161790555b50611f69565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b031603611f6057611f5b61257e565b611f69565b611f6985612732565b935093915050565b60ce5460d0545f90821015611f865781611f8a565b60d0545b9050805b801561213e575f60ce611fa2600184612df2565b81548110611fb257611fb261309a565b5f9182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a0823190602401602060405180830381865afa158015612002573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906120269190612dc7565b905061203282826124f3565b15612134577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03160361207d5761207861257e565b612086565b61208682612732565b60ce805461209690600190612df2565b815481106120a6576120a661309a565b5f918252602090912001546001600160a01b031660ce6120c7600186612df2565b815481106120d7576120d761309a565b905f5260205f20015f6101000a8154816001600160a01b0302191690836001600160a01b0316021790555060ce805480612113576121136130ae565b5f8281526020902081015f1990810180546001600160a01b03191690550190555b50505f1901611f8e565b505050565b6001609755565b606580546001600160a01b0319169055610717816128e2565b670de0b6b3a764000081111561071757604051635659cb3b60e01b8152670de0b6b3a76400006004820152602481018290526044016106c7565b5f54610100900460ff166121c35760405162461bcd60e51b81526004016106c7906130c2565b6121cb612933565b6121d3612961565b6121dd838261298f565b61213e826129cc565b6040516001600160a01b0380851660248301528316604482015260648101829052610d2d9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526129f2565b8015806122c95750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156122a3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906122c79190612dc7565b155b6123345760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016106c7565b6040516001600160a01b03831660248201526044810182905261213e90849063095ea7b360e01b9060640161221a565b8061236c5750565b60405163125a96ab60e01b8152600481018290526024016106c7565b6040516370a0823160e01b81526001600160a01b0383811660048301525f9182918716906370a0823190602401602060405180830381865afa1580156123d0573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906123f49190612dc7565b905061240b6001600160a01b0387168686866121e6565b6040516370a0823160e01b81526001600160a01b0385811660048301528291908816906370a0823190602401602060405180830381865afa158015612452573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906124769190612dc7565b6124809190612df2565b9150505b949350505050565b5f80806124a1670de0b6b3a764000085612df2565b90505f846124af838861310d565b6124b99190613124565b9050670de0b6b3a764000060c954826124d2919061310d565b6124dc9190613124565b93506124e88487612df2565b925050509250929050565b60405163db006a7560e01b8152600481018290525f906001600160a01b0384169063db006a75906024016020604051808303815f875af1925050508015612557575060408051601f3d908101601f1916820190925261255491810190612dc7565b60015b61256257505f612578565b805f03612573576001915050612578565b5f9150505b92915050565b5f4790507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004015f604051808303818588803b1580156125db575f80fd5b505af11580156125ed573d5f803e3d5ffd5b505060cf5461262d93506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116935016905083612ac5565b60cf546040516305bebb3b60e21b81526001600160a01b03909116906316faecec906126a2907f0000000000000000000000000000000000000000000000000000000000000000907f000000000000000000000000000000000000000000000000000000000000000090600190600401613143565b5f604051808303815f87803b1580156126b9575f80fd5b505af11580156126cb573d5f803e3d5ffd5b50506040518381526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692503391507fb68163184d017d69dff908f587b51f68dc2689426509efd546fbf77b518cc8769060200160405180910390a350565b5f816001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561276f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906127939190612fe1565b6040516370a0823160e01b81523060048201529091505f906001600160a01b038316906370a0823190602401602060405180830381865afa1580156127da573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906127fe9190612dc7565b60cf5490915061281b906001600160a01b03848116911683612ac5565b60cf546040516305bebb3b60e21b81526001600160a01b03909116906316faecec90612870907f0000000000000000000000000000000000000000000000000000000000000000908690600190600401613143565b5f604051808303815f87803b158015612887575f80fd5b505af1158015612899573d5f803e3d5ffd5b50506040518381526001600160a01b03851692503391507fb68163184d017d69dff908f587b51f68dc2689426509efd546fbf77b518cc8769060200160405180910390a3505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b5f54610100900460ff166129595760405162461bcd60e51b81526004016106c7906130c2565b610d33612af5565b5f54610100900460ff166129875760405162461bcd60e51b81526004016106c7906130c2565b610d33612b24565b5f54610100900460ff166129b55760405162461bcd60e51b81526004016106c7906130c2565b6129be82612163565b60c982905561142581611549565b5f54610100900460ff1661070e5760405162461bcd60e51b81526004016106c7906130c2565b5f612a46826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612b4a9092919063ffffffff16565b905080515f1480612a66575080806020019051810190612a669190612e56565b61213e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106c7565b6040516001600160a01b03831660248201526044810182905261213e90849063a9059cbb60e01b9060640161221a565b5f54610100900460ff16612b1b5760405162461bcd60e51b81526004016106c7906130c2565b610d333361214a565b5f54610100900460ff166121435760405162461bcd60e51b81526004016106c7906130c2565b606061248484845f85855f80866001600160a01b03168587604051612b6f9190613179565b5f6040518083038185875af1925050503d805f8114612ba9576040519150601f19603f3d011682016040523d82523d5f602084013e612bae565b606091505b5091509150612bbf87838387612bca565b979650505050505050565b60608315612c385782515f03612c31576001600160a01b0385163b612c315760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106c7565b5081612484565b6124848383815115612c4d5781518083602001fd5b8060405162461bcd60e51b81526004016106c7919061318f565b6001600160a01b0381168114610717575f80fd5b5f60208284031215612c8b575f80fd5b8135612c9681612c67565b9392505050565b5f8060408385031215612cae575f80fd5b8235612cb981612c67565b91506020830135612cc981612c67565b809150509250929050565b5f805f8060808587031215612ce7575f80fd5b8435612cf281612c67565b93506020850135612d0281612c67565b9250604085013591506060850135612d1981612c67565b939692955090935050565b5f60208284031215612d34575f80fd5b5035919050565b5f805f60608486031215612d4d575f80fd5b833592506020840135612d5f81612c67565b91506040840135612d6f81612c67565b809150509250925092565b80518015158114612d89575f80fd5b919050565b5f805f60608486031215612da0575f80fd5b612da984612d7a565b925060208401519150612dbe60408501612d7a565b90509250925092565b5f60208284031215612dd7575f80fd5b5051919050565b634e487b7160e01b5f52601160045260245ffd5b8181038181111561257857612578612dde565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b6001600160a01b03831681526040602082018190525f9061248490830184612e05565b5f60208284031215612e66575f80fd5b612c9682612d7a565b6001600160a01b038481168252831660208201526060604082018190525f906117ca90830184612e05565b634e487b7160e01b5f52602160045260245ffd5b6001600160a01b038781168252868116602083015285166040820152606081018490526080810183905260c0810160028310612eec57612eec612e9a565b8260a0830152979650505050505050565b5f80828403610120811215612f10575f80fd5b8351925061010080601f1983011215612f27575f80fd5b604051915080820182811067ffffffffffffffff82111715612f5757634e487b7160e01b5f52604160045260245ffd5b80604052506020850151825260408501516020830152606085015160408301526080850151606083015260a0850151608083015260c085015160a083015260e085015160c08301528085015160e083015250809150509250929050565b6001600160a01b03831681526040810160098310612fd457612fd4612e9a565b8260208301529392505050565b5f60208284031215612ff1575f80fd5b8151612c9681612c67565b5f6101608201905060018060a01b0380871683528560208401528085166040840152508251606083015260208301516080830152604083015160a0830152606083015160c0830152608083015160e083015260a083015161010083015260c083015161012083015260e083015161014083015295945050505050565b5f8060408385031215613089575f80fd5b505080516020909101519092909150565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52603160045260245ffd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b808202811582820484141761257857612578612dde565b5f8261313e57634e487b7160e01b5f52601260045260245ffd5b500490565b6001600160a01b03848116825283166020820152606081016003831061316b5761316b612e9a565b826040830152949350505050565b5f82518060208501845e5f920191825250919050565b602081525f612c966020830184612e0556fe72656d6f766546726f6d416c6c6f776c69737428616464726573732c616464726573732973657450656e64696e6752656465656d4368756e6b4c656e6774682875696e7432353629a2646970667358221220864384fbde0b8ca2ccfefde1cfcf3a4b6fb113c8dea99e6aff6d4a2e124f33b064736f6c63430008190033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "addToAllowlist(address,address)": {
        "params": {
          "borrower": "The address of the liquidator"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor",
        "params": {
          "comptrollerLens_": "The address of the ComptrollerLens contract",
          "comptroller_": "The address of the Comptroller contract",
          "vBnb_": "The address of the VBNB",
          "wBNB_": "The address of wBNB"
        }
      },
      "initialize(uint256,address,address)": {
        "params": {
          "accessControlManager_": "address of access control manager",
          "protocolShareReserve_": "The address of the protocol share reserve contract",
          "treasuryPercentMantissa_": "Treasury share, scaled by 1e18 (e.g. 0.2 * 1e18 for 20%)"
        }
      },
      "liquidateBorrow(address,address,uint256,address)": {
        "params": {
          "borrower": "The address of the borrower",
          "repayAmount": "The amount to repay on behalf of the borrower",
          "vToken": "Borrowed vToken",
          "vTokenCollateral": "The collateral to seize"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "removeFromAllowlist(address,address)": {
        "params": {
          "borrower": "The address of the liquidator"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "restrictLiquidation(address)": {
        "details": "Use {addTo,removeFrom}AllowList to configure the allowed addresses.",
        "params": {
          "borrower": "The address of the borrower"
        }
      },
      "setAccessControlManager(address)": {
        "custom:access": "Only Governance",
        "custom:event": "Emits NewAccessControlManager event",
        "details": "Admin function to set address of AccessControlManager",
        "params": {
          "accessControlManager_": "The new address of the AccessControlManager"
        }
      },
      "setMinLiquidatableVAI(uint256)": {
        "params": {
          "minLiquidatableVAI_": "New address for the access control"
        }
      },
      "setPendingRedeemChunkLength(uint256)": {
        "params": {
          "newLength_": "Length of the chunk"
        }
      },
      "setProtocolShareReserve(address)": {
        "params": {
          "protocolShareReserve_": "The address of the protocol share reserve contract"
        }
      },
      "setTreasuryPercent(uint256)": {
        "params": {
          "newTreasuryPercentMantissa": "New treasury percent (scaled by 10^18)."
        }
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      },
      "unrestrictLiquidation(address)": {
        "details": "Does not impact the allowedLiquidatorsByAccount mapping for the borrower, just turns off the check.",
        "params": {
          "borrower": "The address of the borrower"
        }
      }
    },
    "stateVariables": {
      "MANTISSA_ONE": {
        "details": "A unit (literal one) in EXP_SCALE, usually used in additions/subtractions"
      },
      "comptroller": {
        "custom:oz-upgrades-unsafe-allow": "state-variable-immutable"
      },
      "comptrollerLens": {
        "custom:oz-upgrades-unsafe-allow": "state-variable-immutable"
      },
      "vBnb": {
        "custom:oz-upgrades-unsafe-allow": "state-variable-immutable"
      },
      "vaiController": {
        "custom:oz-upgrades-unsafe-allow": "state-variable-immutable"
      },
      "wBNB": {
        "custom:oz-upgrades-unsafe-allow": "state-variable-immutable"
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AllowlistEntryNotFound(address,address)": [
        {
          "notice": "Thrown if trying to remove a liquidator that is not in the allowedLiquidatorsByAccount mapping"
        }
      ],
      "AlreadyAllowed(address,address)": [
        {
          "notice": "Thrown if the liquidator is already in the allowedLiquidatorsByAccount mapping"
        }
      ],
      "AlreadyRestricted(address)": [
        {
          "notice": "Thrown if trying to restrict liquidations for an already restricted borrower"
        }
      ],
      "LiquidationFailed(uint256)": [
        {
          "notice": "Thrown if the liquidation is not successful (the error code is from TokenErrorReporter)"
        }
      ],
      "LiquidationNotAllowed(address,address)": [
        {
          "notice": "Thrown if the liquidation is restricted and the liquidator is not in the allowedLiquidatorsByAccount mapping"
        }
      ],
      "MarketNotListed(address)": [
        {
          "notice": "Thrown when vToken is not listed"
        }
      ],
      "NoRestrictionsExist(address)": [
        {
          "notice": "Thrown if trying to unrestrict liquidations for a borrower that is not restricted"
        }
      ],
      "SnapshotError(uint256)": [
        {
          "notice": "Thrown when the liquidation snapshot fails"
        }
      ],
      "TreasuryPercentTooHigh(uint256,uint256)": [
        {
          "notice": "Thrown if trying to set treasury percent larger than the liquidation profit"
        }
      ],
      "Unauthorized(address,address,string)": [
        {
          "notice": "Thrown when the action is prohibited by AccessControlManager"
        }
      ],
      "VAIDebtTooHigh(uint256,uint256)": [
        {
          "notice": "Thrown if trying to liquidate any token when VAI debt is too high"
        }
      ],
      "VTokenTransferFailed(address,address,uint256)": [
        {
          "notice": "Thrown if VToken transfer fails after the liquidation"
        }
      ],
      "WrongTransactionAmount(uint256,uint256)": [
        {
          "notice": "Thrown if BNB amount sent with the transaction doesn't correspond to the         intended BNB repayment"
        }
      ],
      "ZeroAddressNotAllowed()": [
        {
          "notice": "Thrown if the supplied address is a zero address where it is not allowed"
        }
      ]
    },
    "events": {
      "AllowlistEntryAdded(address,address)": {
        "notice": "Emitted when a liquidator is added to the allowedLiquidatorsByAccount mapping"
      },
      "AllowlistEntryRemoved(address,address)": {
        "notice": "Emitted when a liquidator is removed from the allowedLiquidatorsByAccount mapping"
      },
      "ForceVAILiquidationPaused(address)": {
        "notice": "Emitted when force liquidation is paused"
      },
      "ForceVAILiquidationResumed(address)": {
        "notice": "Emitted when force liquidation is resumed"
      },
      "LiquidateBorrowedTokens(address,address,uint256,address,address,uint256,uint256)": {
        "notice": "Emitted when a borrow is liquidated"
      },
      "LiquidationRestricted(address)": {
        "notice": "Emitted when the liquidation is restricted for a borrower"
      },
      "LiquidationRestrictionsDisabled(address)": {
        "notice": "Emitted when the liquidation restrictions are removed for a borrower"
      },
      "NewAccessControlManager(address,address)": {
        "notice": "Emitted when access control manager contract address is changed"
      },
      "NewLiquidationTreasuryPercent(uint256,uint256)": {
        "notice": "Emitted when the percent of the seized amount that goes to treasury changes."
      },
      "NewMinLiquidatableVAI(uint256,uint256)": {
        "notice": "Emitted when the amount of minLiquidatableVAI is updated"
      },
      "NewPendingRedeemChunkLength(uint256,uint256)": {
        "notice": "Emitted when the length of chunk gets updated"
      },
      "NewProtocolShareReserve(address,address)": {
        "notice": "Emitted when new address of protocol share reserve is set"
      },
      "ProtocolLiquidationIncentiveTransferred(address,address,uint256)": {
        "notice": "Emitted when reserves are reduced from liquidator contract to protocol share reserves"
      }
    },
    "kind": "user",
    "methods": {
      "accessControlManager()": {
        "notice": "Returns the address of the access control manager contract"
      },
      "addToAllowlist(address,address)": {
        "notice": "An admin function to add the liquidator to the allowedLiquidatorsByAccount mapping for a certain         borrower. If the liquidations are restricted, only liquidators from the         allowedLiquidatorsByAccount mapping can participate in liquidating the positions of this borrower."
      },
      "allowedLiquidatorsByAccount(address,address)": {
        "notice": "Mapping of addresses allowed to liquidate an account if liquidationRestricted[borrower] == true"
      },
      "comptroller()": {
        "notice": "Address of Venus Unitroller contract."
      },
      "comptrollerLens()": {
        "notice": "Address of Venus ComptrollerLens contract."
      },
      "constructor": {
        "notice": "Constructor for the implementation contract. Sets immutable variables."
      },
      "forceVAILiquidate()": {
        "notice": "check for liquidation of VAI"
      },
      "initialize(uint256,address,address)": {
        "notice": "Initializer for the implementation contract."
      },
      "liquidateBorrow(address,address,uint256,address)": {
        "notice": "Liquidates a borrow and splits the seized amount between protocol share reserve and         liquidator. The liquidators should use this interface instead of calling         vToken.liquidateBorrow(...) directly.Checks force VAI liquidation first; vToken should be address of vaiController if vaiDebt is greater than thresholdFor BNB borrows msg.value should be equal to repayAmount; otherwise msg.value      should be zero."
      },
      "liquidationRestricted(address)": {
        "notice": "Whether the liquidations are restricted to enabled allowedLiquidatorsByAccount addresses only"
      },
      "minLiquidatableVAI()": {
        "notice": "minimum amount of VAI liquidation threshold"
      },
      "pauseForceVAILiquidate()": {
        "notice": "Pause Force Liquidation of VAI"
      },
      "pendingRedeem(uint256)": {
        "notice": "assests whose redeem is pending to reduce reserves"
      },
      "protocolShareReserve()": {
        "notice": "protocol share reserve contract address"
      },
      "reduceReserves()": {
        "notice": "Reduce the reserves of the pending accumulated reserves"
      },
      "removeFromAllowlist(address,address)": {
        "notice": "An admin function to remove the liquidator from the allowedLiquidatorsByAccount mapping of a certain         borrower. If the liquidations are restricted, this liquidator will not be         able to liquidate the positions of this borrower."
      },
      "restrictLiquidation(address)": {
        "notice": "An admin function to restrict liquidations to allowed addresses only."
      },
      "resumeForceVAILiquidate()": {
        "notice": "Resume Force Liquidation of VAI"
      },
      "setAccessControlManager(address)": {
        "notice": "Sets the address of AccessControlManager"
      },
      "setMinLiquidatableVAI(uint256)": {
        "notice": "Sets the threshold for minimum amount of vaiLiquidate"
      },
      "setPendingRedeemChunkLength(uint256)": {
        "notice": "Length of the pendingRedeem array to be consider while redeeming in Liquidation transaction"
      },
      "setProtocolShareReserve(address)": {
        "notice": "Sets protocol share reserve contract address"
      },
      "setTreasuryPercent(uint256)": {
        "notice": "Sets the new percent of the seized amount that goes to treasury. Should         be less than or equal to comptroller.liquidationIncentiveMantissa().sub(1e18)."
      },
      "treasuryPercentMantissa()": {
        "notice": "Percent of seized amount that goes to treasury."
      },
      "unrestrictLiquidation(address)": {
        "notice": "An admin function to remove restrictions for liquidations."
      },
      "vBnb()": {
        "notice": "Address of vBNB contract."
      },
      "vaiController()": {
        "notice": "Address of VAIUnitroller contract."
      },
      "wBNB()": {
        "notice": "Address of wBNB contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 246,
        "contract": "contracts/Liquidator/Liquidator.sol:Liquidator",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 249,
        "contract": "contracts/Liquidator/Liquidator.sol:Liquidator",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1363,
        "contract": "contracts/Liquidator/Liquidator.sol:Liquidator",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 118,
        "contract": "contracts/Liquidator/Liquidator.sol:Liquidator",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 238,
        "contract": "contracts/Liquidator/Liquidator.sol:Liquidator",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11,
        "contract": "contracts/Liquidator/Liquidator.sol:Liquidator",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 105,
        "contract": "contracts/Liquidator/Liquidator.sol:Liquidator",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 423,
        "contract": "contracts/Liquidator/Liquidator.sol:Liquidator",
        "label": "_status",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 492,
        "contract": "contracts/Liquidator/Liquidator.sol:Liquidator",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 23106,
        "contract": "contracts/Liquidator/Liquidator.sol:Liquidator",
        "label": "treasuryPercentMantissa",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 23113,
        "contract": "contracts/Liquidator/Liquidator.sol:Liquidator",
        "label": "allowedLiquidatorsByAccount",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 23118,
        "contract": "contracts/Liquidator/Liquidator.sol:Liquidator",
        "label": "liquidationRestricted",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 23121,
        "contract": "contracts/Liquidator/Liquidator.sol:Liquidator",
        "label": "minLiquidatableVAI",
        "offset": 0,
        "slot": "204",
        "type": "t_uint256"
      },
      {
        "astId": 23124,
        "contract": "contracts/Liquidator/Liquidator.sol:Liquidator",
        "label": "forceVAILiquidate",
        "offset": 0,
        "slot": "205",
        "type": "t_bool"
      },
      {
        "astId": 23128,
        "contract": "contracts/Liquidator/Liquidator.sol:Liquidator",
        "label": "pendingRedeem",
        "offset": 0,
        "slot": "206",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 23131,
        "contract": "contracts/Liquidator/Liquidator.sol:Liquidator",
        "label": "protocolShareReserve",
        "offset": 0,
        "slot": "207",
        "type": "t_address"
      },
      {
        "astId": 23134,
        "contract": "contracts/Liquidator/Liquidator.sol:Liquidator",
        "label": "pendingRedeemChunkLength",
        "offset": 0,
        "slot": "208",
        "type": "t_uint256"
      },
      {
        "astId": 23139,
        "contract": "contracts/Liquidator/Liquidator.sol:Liquidator",
        "label": "__gap",
        "offset": 0,
        "slot": "209",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3582,
        "contract": "contracts/Liquidator/Liquidator.sol:Liquidator",
        "label": "_accessControlManager",
        "offset": 0,
        "slot": "258",
        "type": "t_contract(IAccessControlManagerV8)3767"
      },
      {
        "astId": 3587,
        "contract": "contracts/Liquidator/Liquidator.sol:Liquidator",
        "label": "__gap",
        "offset": 0,
        "slot": "259",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAccessControlManagerV8)3767": {
        "encoding": "inplace",
        "label": "contract IAccessControlManagerV8",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
