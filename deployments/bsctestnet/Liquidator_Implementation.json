{
  "address": "0xe442A62E3B1956EC5B42e06aA0E293A0cB300406",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "comptroller_",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "vBnb_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "wBNB_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        }
      ],
      "name": "AllowlistEntryNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        }
      ],
      "name": "AlreadyAllowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "AlreadyRestricted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "errorCode",
          "type": "uint256"
        }
      ],
      "name": "LiquidationFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        }
      ],
      "name": "LiquidationNotAllowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        }
      ],
      "name": "MarketNotListed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "NoRestrictionsExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxTreasuryPercentMantissa",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "treasuryPercentMantissa_",
          "type": "uint256"
        }
      ],
      "name": "TreasuryPercentTooHigh",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "calledContract",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "methodSignature",
          "type": "string"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaiDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minLiquidatableVAI",
          "type": "uint256"
        }
      ],
      "name": "VAIDebtTooHigh",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "VTokenTransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expected",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        }
      ],
      "name": "WrongTransactionAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddressNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        }
      ],
      "name": "AllowlistEntryAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        }
      ],
      "name": "AllowlistEntryRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ForceVAILiquidationPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ForceVAILiquidationResumed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vTokenBorrowed",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "vTokenCollateral",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seizeTokensForTreasury",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seizeTokensForLiquidator",
          "type": "uint256"
        }
      ],
      "name": "LiquidateBorrowedTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "LiquidationRestricted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "LiquidationRestrictionsDisabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAccessControlManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAccessControlManager",
          "type": "address"
        }
      ],
      "name": "NewAccessControlManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPercent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPercent",
          "type": "uint256"
        }
      ],
      "name": "NewLiquidationTreasuryPercent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMinLiquidatableVAI",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinLiquidatableVAI",
          "type": "uint256"
        }
      ],
      "name": "NewMinLiquidatableVAI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPendingRedeemChunkLength",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPendingRedeemChunkLength",
          "type": "uint256"
        }
      ],
      "name": "NewPendingRedeemChunkLength",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldProtocolShareReserve",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newProtocolShareReserves",
          "type": "address"
        }
      ],
      "name": "NewProtocolShareReserve",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reducedAmount",
          "type": "uint256"
        }
      ],
      "name": "ProtocolLiquidationIncentiveTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accessControlManager",
      "outputs": [
        {
          "internalType": "contract IAccessControlManagerV8",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        }
      ],
      "name": "addToAllowlist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedLiquidatorsByAccount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comptroller",
      "outputs": [
        {
          "internalType": "contract IComptroller",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "forceVAILiquidate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treasuryPercentMantissa_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "accessControlManager_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "protocolShareReserve_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "internalType": "contract IVToken",
          "name": "vTokenCollateral",
          "type": "address"
        }
      ],
      "name": "liquidateBorrow",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "liquidationRestricted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minLiquidatableVAI",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseForceVAILiquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pendingRedeem",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolShareReserve",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reduceReserves",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        }
      ],
      "name": "removeFromAllowlist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "restrictLiquidation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resumeForceVAILiquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "accessControlManager_",
          "type": "address"
        }
      ],
      "name": "setAccessControlManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minLiquidatableVAI_",
          "type": "uint256"
        }
      ],
      "name": "setMinLiquidatableVAI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newLength_",
          "type": "uint256"
        }
      ],
      "name": "setPendingRedeemChunkLength",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "protocolShareReserve_",
          "type": "address"
        }
      ],
      "name": "setProtocolShareReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newTreasuryPercentMantissa",
          "type": "uint256"
        }
      ],
      "name": "setTreasuryPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryPercentMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "unrestrictLiquidation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vBnb",
      "outputs": [
        {
          "internalType": "contract IVBNB",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaiController",
      "outputs": [
        {
          "internalType": "contract IVAIController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wBNB",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf6261e9c8a58b6bd5807a8d867c867e5d2d9fa0fcadb09fc1a84dc39cd2532b5",
  "receipt": {
    "to": null,
    "from": "0x464779C41C5f1Be598853C1F87bCC7087Ea75f28",
    "contractAddress": "0xe442A62E3B1956EC5B42e06aA0E293A0cB300406",
    "transactionIndex": 0,
    "gasUsed": "2713218",
    "logsBloom": "0x
    "blockHash": "0x7a10ffb6d2495dbb4f6a2ff7ee4c6882132ee22239cc21737ac818f569dd656f",
    "transactionHash": "0xf6261e9c8a58b6bd5807a8d867c867e5d2d9fa0fcadb09fc1a84dc39cd2532b5",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 64680503,
        "transactionHash": "0xf6261e9c8a58b6bd5807a8d867c867e5d2d9fa0fcadb09fc1a84dc39cd2532b5",
        "address": "0xe442A62E3B1956EC5B42e06aA0E293A0cB300406",
        "topics": ["0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0x7a10ffb6d2495dbb4f6a2ff7ee4c6882132ee22239cc21737ac818f569dd656f"
      }
    ],
    "blockNumber": 64680503,
    "cumulativeGasUsed": "2713218",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x94d1820b2D1c7c7452A163983Dc888CEC546b77D",
    "0x2E7222e51c0f6e98610A1543Aa3836E092CDe62c",
    "0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd"
  ],
  "numDeployments": 1,
  "solcInputHash": "ba77843cff9e1425bead54101e438cee",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"comptroller_\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"vBnb_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wBNB_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"AllowlistEntryNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"AlreadyAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"AlreadyRestricted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"LiquidationFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"LiquidationNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"}],\"name\":\"MarketNotListed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"NoRestrictionsExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTreasuryPercentMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryPercentMantissa_\",\"type\":\"uint256\"}],\"name\":\"TreasuryPercentTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"calledContract\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"methodSignature\",\"type\":\"string\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaiDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLiquidatableVAI\",\"type\":\"uint256\"}],\"name\":\"VAIDebtTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VTokenTransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"WrongTransactionAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"AllowlistEntryAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"AllowlistEntryRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ForceVAILiquidationPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ForceVAILiquidationResumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vTokenBorrowed\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vTokenCollateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seizeTokensForTreasury\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seizeTokensForLiquidator\",\"type\":\"uint256\"}],\"name\":\"LiquidateBorrowedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"LiquidationRestricted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"LiquidationRestrictionsDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAccessControlManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAccessControlManager\",\"type\":\"address\"}],\"name\":\"NewAccessControlManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPercent\",\"type\":\"uint256\"}],\"name\":\"NewLiquidationTreasuryPercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMinLiquidatableVAI\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinLiquidatableVAI\",\"type\":\"uint256\"}],\"name\":\"NewMinLiquidatableVAI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPendingRedeemChunkLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPendingRedeemChunkLength\",\"type\":\"uint256\"}],\"name\":\"NewPendingRedeemChunkLength\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldProtocolShareReserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newProtocolShareReserves\",\"type\":\"address\"}],\"name\":\"NewProtocolShareReserve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reducedAmount\",\"type\":\"uint256\"}],\"name\":\"ProtocolLiquidationIncentiveTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accessControlManager\",\"outputs\":[{\"internalType\":\"contract IAccessControlManagerV8\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"addToAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedLiquidatorsByAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contract IComptroller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceVAILiquidate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"treasuryPercentMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"accessControlManager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"protocolShareReserve_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IVToken\",\"name\":\"vTokenCollateral\",\"type\":\"address\"}],\"name\":\"liquidateBorrow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidationRestricted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLiquidatableVAI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseForceVAILiquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingRedeem\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolShareReserve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reduceReserves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"removeFromAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"restrictLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resumeForceVAILiquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accessControlManager_\",\"type\":\"address\"}],\"name\":\"setAccessControlManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minLiquidatableVAI_\",\"type\":\"uint256\"}],\"name\":\"setMinLiquidatableVAI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLength_\",\"type\":\"uint256\"}],\"name\":\"setPendingRedeemChunkLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"protocolShareReserve_\",\"type\":\"address\"}],\"name\":\"setProtocolShareReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTreasuryPercentMantissa\",\"type\":\"uint256\"}],\"name\":\"setTreasuryPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryPercentMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"unrestrictLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vBnb\",\"outputs\":[{\"internalType\":\"contract IVBNB\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaiController\",\"outputs\":[{\"internalType\":\"contract IVAIController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"addToAllowlist(address,address)\":{\"params\":{\"borrower\":\"The address of the liquidator\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\",\"params\":{\"comptroller_\":\"The address of the Comptroller contract\",\"vBnb_\":\"The address of the VBNB\",\"wBNB_\":\"The address of wBNB\"}},\"initialize(uint256,address,address)\":{\"params\":{\"accessControlManager_\":\"address of access control manager\",\"protocolShareReserve_\":\"The address of the protocol share reserve contract\",\"treasuryPercentMantissa_\":\"Treasury share, scaled by 1e18 (e.g. 0.2 * 1e18 for 20%)\"}},\"liquidateBorrow(address,address,uint256,address)\":{\"params\":{\"borrower\":\"The address of the borrower\",\"repayAmount\":\"The amount to repay on behalf of the borrower\",\"vToken\":\"Borrowed vToken\",\"vTokenCollateral\":\"The collateral to seize\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"removeFromAllowlist(address,address)\":{\"params\":{\"borrower\":\"The address of the liquidator\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"restrictLiquidation(address)\":{\"details\":\"Use {addTo,removeFrom}AllowList to configure the allowed addresses.\",\"params\":{\"borrower\":\"The address of the borrower\"}},\"setAccessControlManager(address)\":{\"custom:access\":\"Only Governance\",\"custom:event\":\"Emits NewAccessControlManager event\",\"details\":\"Admin function to set address of AccessControlManager\",\"params\":{\"accessControlManager_\":\"The new address of the AccessControlManager\"}},\"setMinLiquidatableVAI(uint256)\":{\"params\":{\"minLiquidatableVAI_\":\"New address for the access control\"}},\"setPendingRedeemChunkLength(uint256)\":{\"params\":{\"newLength_\":\"Length of the chunk\"}},\"setProtocolShareReserve(address)\":{\"params\":{\"protocolShareReserve_\":\"The address of the protocol share reserve contract\"}},\"setTreasuryPercent(uint256)\":{\"params\":{\"newTreasuryPercentMantissa\":\"New treasury percent (scaled by 10^18).\"}},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"unrestrictLiquidation(address)\":{\"details\":\"Does not impact the allowedLiquidatorsByAccount mapping for the borrower, just turns off the check.\",\"params\":{\"borrower\":\"The address of the borrower\"}}},\"stateVariables\":{\"MANTISSA_ONE\":{\"details\":\"A unit (literal one) in EXP_SCALE, usually used in additions/subtractions\"},\"comptroller\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\"},\"vBnb\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\"},\"vaiController\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\"},\"wBNB\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\"}},\"version\":1},\"userdoc\":{\"errors\":{\"AllowlistEntryNotFound(address,address)\":[{\"notice\":\"Thrown if trying to remove a liquidator that is not in the allowedLiquidatorsByAccount mapping\"}],\"AlreadyAllowed(address,address)\":[{\"notice\":\"Thrown if the liquidator is already in the allowedLiquidatorsByAccount mapping\"}],\"AlreadyRestricted(address)\":[{\"notice\":\"Thrown if trying to restrict liquidations for an already restricted borrower\"}],\"LiquidationFailed(uint256)\":[{\"notice\":\"Thrown if the liquidation is not successful (the error code is from TokenErrorReporter)\"}],\"LiquidationNotAllowed(address,address)\":[{\"notice\":\"Thrown if the liquidation is restricted and the liquidator is not in the allowedLiquidatorsByAccount mapping\"}],\"MarketNotListed(address)\":[{\"notice\":\"Thrown when vToken is not listed\"}],\"NoRestrictionsExist(address)\":[{\"notice\":\"Thrown if trying to unrestrict liquidations for a borrower that is not restricted\"}],\"TreasuryPercentTooHigh(uint256,uint256)\":[{\"notice\":\"Thrown if trying to set treasury percent larger than the liquidation profit\"}],\"Unauthorized(address,address,string)\":[{\"notice\":\"Thrown when the action is prohibited by AccessControlManager\"}],\"VAIDebtTooHigh(uint256,uint256)\":[{\"notice\":\"Thrown if trying to liquidate any token when VAI debt is too high\"}],\"VTokenTransferFailed(address,address,uint256)\":[{\"notice\":\"Thrown if VToken transfer fails after the liquidation\"}],\"WrongTransactionAmount(uint256,uint256)\":[{\"notice\":\"Thrown if BNB amount sent with the transaction doesn't correspond to the         intended BNB repayment\"}],\"ZeroAddressNotAllowed()\":[{\"notice\":\"Thrown if the supplied address is a zero address where it is not allowed\"}]},\"events\":{\"AllowlistEntryAdded(address,address)\":{\"notice\":\"Emitted when a liquidator is added to the allowedLiquidatorsByAccount mapping\"},\"AllowlistEntryRemoved(address,address)\":{\"notice\":\"Emitted when a liquidator is removed from the allowedLiquidatorsByAccount mapping\"},\"ForceVAILiquidationPaused(address)\":{\"notice\":\"Emitted when force liquidation is paused\"},\"ForceVAILiquidationResumed(address)\":{\"notice\":\"Emitted when force liquidation is resumed\"},\"LiquidateBorrowedTokens(address,address,uint256,address,address,uint256,uint256)\":{\"notice\":\"Emitted when a borrow is liquidated\"},\"LiquidationRestricted(address)\":{\"notice\":\"Emitted when the liquidation is restricted for a borrower\"},\"LiquidationRestrictionsDisabled(address)\":{\"notice\":\"Emitted when the liquidation restrictions are removed for a borrower\"},\"NewAccessControlManager(address,address)\":{\"notice\":\"Emitted when access control manager contract address is changed\"},\"NewLiquidationTreasuryPercent(uint256,uint256)\":{\"notice\":\"Emitted when the percent of the seized amount that goes to treasury changes.\"},\"NewMinLiquidatableVAI(uint256,uint256)\":{\"notice\":\"Emitted when the amount of minLiquidatableVAI is updated\"},\"NewPendingRedeemChunkLength(uint256,uint256)\":{\"notice\":\"Emitted when the length of chunk gets updated\"},\"NewProtocolShareReserve(address,address)\":{\"notice\":\"Emitted when new address of protocol share reserve is set\"},\"ProtocolLiquidationIncentiveTransferred(address,address,uint256)\":{\"notice\":\"Emitted when reserves are reduced from liquidator contract to protocol share reserves\"}},\"kind\":\"user\",\"methods\":{\"accessControlManager()\":{\"notice\":\"Returns the address of the access control manager contract\"},\"addToAllowlist(address,address)\":{\"notice\":\"An admin function to add the liquidator to the allowedLiquidatorsByAccount mapping for a certain         borrower. If the liquidations are restricted, only liquidators from the         allowedLiquidatorsByAccount mapping can participate in liquidating the positions of this borrower.\"},\"allowedLiquidatorsByAccount(address,address)\":{\"notice\":\"Mapping of addresses allowed to liquidate an account if liquidationRestricted[borrower] == true\"},\"comptroller()\":{\"notice\":\"Address of Venus Unitroller contract.\"},\"constructor\":{\"notice\":\"Constructor for the implementation contract. Sets immutable variables.\"},\"forceVAILiquidate()\":{\"notice\":\"check for liquidation of VAI\"},\"initialize(uint256,address,address)\":{\"notice\":\"Initializer for the implementation contract.\"},\"liquidateBorrow(address,address,uint256,address)\":{\"notice\":\"Liquidates a borrow and splits the seized amount between protocol share reserve and         liquidator. The liquidators should use this interface instead of calling         vToken.liquidateBorrow(...) directly.Checks force VAI liquidation first; vToken should be address of vaiController if vaiDebt is greater than thresholdFor BNB borrows msg.value should be equal to repayAmount; otherwise msg.value      should be zero.\"},\"liquidationRestricted(address)\":{\"notice\":\"Whether the liquidations are restricted to enabled allowedLiquidatorsByAccount addresses only\"},\"minLiquidatableVAI()\":{\"notice\":\"minimum amount of VAI liquidation threshold\"},\"pauseForceVAILiquidate()\":{\"notice\":\"Pause Force Liquidation of VAI\"},\"pendingRedeem(uint256)\":{\"notice\":\"assests whose redeem is pending to reduce reserves\"},\"protocolShareReserve()\":{\"notice\":\"protocol share reserve contract address\"},\"reduceReserves()\":{\"notice\":\"Reduce the reserves of the pending accumulated reserves\"},\"removeFromAllowlist(address,address)\":{\"notice\":\"An admin function to remove the liquidator from the allowedLiquidatorsByAccount mapping of a certain         borrower. If the liquidations are restricted, this liquidator will not be         able to liquidate the positions of this borrower.\"},\"restrictLiquidation(address)\":{\"notice\":\"An admin function to restrict liquidations to allowed addresses only.\"},\"resumeForceVAILiquidate()\":{\"notice\":\"Resume Force Liquidation of VAI\"},\"setAccessControlManager(address)\":{\"notice\":\"Sets the address of AccessControlManager\"},\"setMinLiquidatableVAI(uint256)\":{\"notice\":\"Sets the threshold for minimum amount of vaiLiquidate\"},\"setPendingRedeemChunkLength(uint256)\":{\"notice\":\"Length of the pendingRedeem array to be consider while redeeming in Liquidation transaction\"},\"setProtocolShareReserve(address)\":{\"notice\":\"Sets protocol share reserve contract address\"},\"setTreasuryPercent(uint256)\":{\"notice\":\"Sets the new percent of the seized amount that goes to treasury. Should         be less than or equal to comptroller.liquidationIncentiveMantissa().sub(1e18).\"},\"treasuryPercentMantissa()\":{\"notice\":\"Percent of seized amount that goes to treasury.\"},\"unrestrictLiquidation(address)\":{\"notice\":\"An admin function to remove restrictions for liquidations.\"},\"vBnb()\":{\"notice\":\"Address of vBNB contract.\"},\"vaiController()\":{\"notice\":\"Address of VAIUnitroller contract.\"},\"wBNB()\":{\"notice\":\"Address of wBNB contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Liquidator/Liquidator.sol\":\"Liquidator\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9140dabc466abab21b48b72dbda26736b1183a310d0e677d3719d201df026510\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2025ccf05f6f1f2fd4e078e552836f525a1864e3854ed555047cd732320ab29b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x07e881de3b9f6d2c07909f193f24b96c7fe4ea60013260f3f25aecd8bab3c2f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x23b997be73d3dd46885262704f0f8cfc7273fdadfe303d37969a9561373972b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@venusprotocol/governance-contracts/contracts/Governance/AccessControlledV8.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\n\\nimport \\\"./IAccessControlManagerV8.sol\\\";\\n\\n/**\\n * @title AccessControlledV8\\n * @author Venus\\n * @notice This contract is helper between access control manager and actual contract. This contract further inherited by other contract (using solidity 0.8.13)\\n * to integrate access controlled mechanism. It provides initialise methods and verifying access methods.\\n */\\nabstract contract AccessControlledV8 is Initializable, Ownable2StepUpgradeable {\\n    /// @notice Access control manager contract\\n    IAccessControlManagerV8 private _accessControlManager;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n\\n    /// @notice Emitted when access control manager contract address is changed\\n    event NewAccessControlManager(address oldAccessControlManager, address newAccessControlManager);\\n\\n    /// @notice Thrown when the action is prohibited by AccessControlManager\\n    error Unauthorized(address sender, address calledContract, string methodSignature);\\n\\n    function __AccessControlled_init(address accessControlManager_) internal onlyInitializing {\\n        __Ownable2Step_init();\\n        __AccessControlled_init_unchained(accessControlManager_);\\n    }\\n\\n    function __AccessControlled_init_unchained(address accessControlManager_) internal onlyInitializing {\\n        _setAccessControlManager(accessControlManager_);\\n    }\\n\\n    /**\\n     * @notice Sets the address of AccessControlManager\\n     * @dev Admin function to set address of AccessControlManager\\n     * @param accessControlManager_ The new address of the AccessControlManager\\n     * @custom:event Emits NewAccessControlManager event\\n     * @custom:access Only Governance\\n     */\\n    function setAccessControlManager(address accessControlManager_) external onlyOwner {\\n        _setAccessControlManager(accessControlManager_);\\n    }\\n\\n    /**\\n     * @notice Returns the address of the access control manager contract\\n     */\\n    function accessControlManager() external view returns (IAccessControlManagerV8) {\\n        return _accessControlManager;\\n    }\\n\\n    /**\\n     * @dev Internal function to set address of AccessControlManager\\n     * @param accessControlManager_ The new address of the AccessControlManager\\n     */\\n    function _setAccessControlManager(address accessControlManager_) internal {\\n        require(address(accessControlManager_) != address(0), \\\"invalid acess control manager address\\\");\\n        address oldAccessControlManager = address(_accessControlManager);\\n        _accessControlManager = IAccessControlManagerV8(accessControlManager_);\\n        emit NewAccessControlManager(oldAccessControlManager, accessControlManager_);\\n    }\\n\\n    /**\\n     * @notice Reverts if the call is not allowed by AccessControlManager\\n     * @param signature Method signature\\n     */\\n    function _checkAccessAllowed(string memory signature) internal view {\\n        bool isAllowedToCall = _accessControlManager.isAllowedToCall(msg.sender, signature);\\n\\n        if (!isAllowedToCall) {\\n            revert Unauthorized(msg.sender, address(this), signature);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dcf283925f4dddc23ca0ee71d2cb96a9dd6e4cf08061b69fde1697ea39dc514\",\"license\":\"BSD-3-Clause\"},\"@venusprotocol/governance-contracts/contracts/Governance/IAccessControlManagerV8.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.25;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\n/**\\n * @title IAccessControlManagerV8\\n * @author Venus\\n * @notice Interface implemented by the `AccessControlManagerV8` contract.\\n */\\ninterface IAccessControlManagerV8 is IAccessControl {\\n    function giveCallPermission(address contractAddress, string calldata functionSig, address accountToPermit) external;\\n\\n    function revokeCallPermission(\\n        address contractAddress,\\n        string calldata functionSig,\\n        address accountToRevoke\\n    ) external;\\n\\n    function isAllowedToCall(address account, string calldata functionSig) external view returns (bool);\\n\\n    function hasPermission(\\n        address account,\\n        address contractAddress,\\n        string calldata functionSig\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xaa29b098440d0b3a131c5ecdf25ce548790c1b5ac7bf9b5c0264b6af6f7a1e0b\",\"license\":\"BSD-3-Clause\"},\"@venusprotocol/oracle/contracts/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.25;\\n\\ninterface OracleInterface {\\n    function getPrice(address asset) external view returns (uint256);\\n}\\n\\ninterface ResilientOracleInterface is OracleInterface {\\n    function updatePrice(address vToken) external;\\n\\n    function updateAssetPrice(address asset) external;\\n\\n    function getUnderlyingPrice(address vToken) external view returns (uint256);\\n}\\n\\ninterface TwapInterface is OracleInterface {\\n    function updateTwap(address asset) external returns (uint256);\\n}\\n\\ninterface BoundValidatorInterface {\\n    function validatePriceWithAnchorPrice(\\n        address asset,\\n        uint256 reporterPrice,\\n        uint256 anchorPrice\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2432799b0d824fc701beb4c30146e912b9aeecf77b5c1635dde6c5fbe6bfc3a7\",\"license\":\"BSD-3-Clause\"},\"@venusprotocol/solidity-utilities/contracts/validators.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\n/// @notice Thrown if the supplied address is a zero address where it is not allowed\\nerror ZeroAddressNotAllowed();\\n\\n/// @notice Thrown if the supplied value is 0 where it is not allowed\\nerror ZeroValueNotAllowed();\\n\\n/// @notice Checks if the provided address is nonzero, reverts otherwise\\n/// @param address_ Address to check\\n/// @custom:error ZeroAddressNotAllowed is thrown if the provided address is a zero address\\nfunction ensureNonzeroAddress(address address_) pure {\\n    if (address_ == address(0)) {\\n        revert ZeroAddressNotAllowed();\\n    }\\n}\\n\\n/// @notice Checks if the provided value is nonzero, reverts otherwise\\n/// @param value_ Value to check\\n/// @custom:error ZeroValueNotAllowed is thrown if the provided value is 0\\nfunction ensureNonzeroValue(uint256 value_) pure {\\n    if (value_ == 0) {\\n        revert ZeroValueNotAllowed();\\n    }\\n}\\n\",\"keccak256\":\"0xdb88e14d50dd21889ca3329d755673d022c47e8da005b6a545c7f69c2c4b7b86\",\"license\":\"BSD-3-Clause\"},\"contracts/InterfacesV8.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.25;\\n\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport { ResilientOracleInterface } from \\\"@venusprotocol/oracle/contracts/interfaces/OracleInterface.sol\\\";\\n\\ninterface IVToken is IERC20Upgradeable {\\n    function accrueInterest() external returns (uint256);\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n    function borrowBalanceCurrent(address borrower) external returns (uint256);\\n\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n    function comptroller() external view returns (IComptroller);\\n\\n    function borrowBalanceStored(address account) external view returns (uint256);\\n}\\n\\ninterface IVBep20 is IVToken {\\n    function borrowBehalf(address borrower, uint256 borrowAmount) external returns (uint256);\\n\\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\\n\\n    function liquidateBorrow(\\n        address borrower,\\n        uint256 repayAmount,\\n        IVToken vTokenCollateral\\n    ) external returns (uint256);\\n\\n    function underlying() external view returns (address);\\n}\\n\\ninterface IVBNB is IVToken {\\n    function repayBorrowBehalf(address borrower) external payable;\\n\\n    function liquidateBorrow(address borrower, IVToken vTokenCollateral) external payable;\\n}\\n\\ninterface IVAIController {\\n    function accrueVAIInterest() external;\\n\\n    function liquidateVAI(\\n        address borrower,\\n        uint256 repayAmount,\\n        IVToken vTokenCollateral\\n    ) external returns (uint256, uint256);\\n\\n    function repayVAIBehalf(address borrower, uint256 amount) external returns (uint256, uint256);\\n\\n    function getVAIAddress() external view returns (address);\\n\\n    function getVAIRepayAmount(address borrower) external view returns (uint256);\\n}\\n\\ninterface IComptroller {\\n    enum Action {\\n        MINT,\\n        REDEEM,\\n        BORROW,\\n        REPAY,\\n        SEIZE,\\n        LIQUIDATE,\\n        TRANSFER,\\n        ENTER_MARKET,\\n        EXIT_MARKET\\n    }\\n\\n    function _setActionsPaused(address[] calldata markets_, Action[] calldata actions_, bool paused_) external;\\n\\n    function liquidationIncentiveMantissa() external view returns (uint256);\\n\\n    function vaiController() external view returns (IVAIController);\\n\\n    function liquidatorContract() external view returns (address);\\n\\n    function oracle() external view returns (ResilientOracleInterface);\\n\\n    function actionPaused(address market, Action action) external view returns (bool);\\n\\n    function markets(address) external view returns (bool, uint256, bool);\\n\\n    function isForcedLiquidationEnabled(address) external view returns (bool);\\n}\\n\\ninterface ILiquidator {\\n    function restrictLiquidation(address borrower) external;\\n\\n    function unrestrictLiquidation(address borrower) external;\\n\\n    function addToAllowlist(address borrower, address liquidator) external;\\n\\n    function removeFromAllowlist(address borrower, address liquidator) external;\\n\\n    function liquidateBorrow(\\n        address vToken,\\n        address borrower,\\n        uint256 repayAmount,\\n        IVToken vTokenCollateral\\n    ) external payable;\\n\\n    function setTreasuryPercent(uint256 newTreasuryPercentMantissa) external;\\n\\n    function treasuryPercentMantissa() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb4325c3616d74e120fdab84d54dd33b104048d2d2cd3d9ce1d94ca39fd385194\",\"license\":\"BSD-3-Clause\"},\"contracts/Liquidator/Liquidator.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\nimport { ReentrancyGuardUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport { Ownable2StepUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport { SafeERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport { ensureNonzeroAddress } from \\\"@venusprotocol/solidity-utilities/contracts/validators.sol\\\";\\nimport { AccessControlledV8 } from \\\"@venusprotocol/governance-contracts/contracts/Governance/AccessControlledV8.sol\\\";\\nimport { IProtocolShareReserve } from \\\"../external/IProtocolShareReserve.sol\\\";\\nimport { IWBNB } from \\\"../external/IWBNB.sol\\\";\\nimport { LiquidatorStorage } from \\\"./LiquidatorStorage.sol\\\";\\nimport { IComptroller, IVToken, IVBep20, IVBNB, IVAIController } from \\\"../InterfacesV8.sol\\\";\\n\\ncontract Liquidator is Ownable2StepUpgradeable, ReentrancyGuardUpgradeable, LiquidatorStorage, AccessControlledV8 {\\n    /// @notice Address of vBNB contract.\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    IVBNB public immutable vBnb;\\n\\n    /// @notice Address of Venus Unitroller contract.\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    IComptroller public immutable comptroller;\\n\\n    /// @notice Address of VAIUnitroller contract.\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    IVAIController public immutable vaiController;\\n\\n    /// @notice Address of wBNB contract\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address public immutable wBNB;\\n\\n    /// @dev A unit (literal one) in EXP_SCALE, usually used in additions/subtractions\\n    uint256 internal constant MANTISSA_ONE = 1e18;\\n\\n    /* Events */\\n\\n    /// @notice Emitted when the percent of the seized amount that goes to treasury changes.\\n    event NewLiquidationTreasuryPercent(uint256 oldPercent, uint256 newPercent);\\n\\n    /// @notice Emitted when a borrow is liquidated\\n    event LiquidateBorrowedTokens(\\n        address indexed liquidator,\\n        address indexed borrower,\\n        uint256 repayAmount,\\n        address vTokenBorrowed,\\n        address indexed vTokenCollateral,\\n        uint256 seizeTokensForTreasury,\\n        uint256 seizeTokensForLiquidator\\n    );\\n\\n    /// @notice Emitted when the liquidation is restricted for a borrower\\n    event LiquidationRestricted(address indexed borrower);\\n\\n    /// @notice Emitted when the liquidation restrictions are removed for a borrower\\n    event LiquidationRestrictionsDisabled(address indexed borrower);\\n\\n    /// @notice Emitted when a liquidator is added to the allowedLiquidatorsByAccount mapping\\n    event AllowlistEntryAdded(address indexed borrower, address indexed liquidator);\\n\\n    /// @notice Emitted when a liquidator is removed from the allowedLiquidatorsByAccount mapping\\n    event AllowlistEntryRemoved(address indexed borrower, address indexed liquidator);\\n\\n    /// @notice Emitted when the amount of minLiquidatableVAI is updated\\n    event NewMinLiquidatableVAI(uint256 oldMinLiquidatableVAI, uint256 newMinLiquidatableVAI);\\n\\n    /// @notice Emitted when the length of chunk gets updated\\n    event NewPendingRedeemChunkLength(uint256 oldPendingRedeemChunkLength, uint256 newPendingRedeemChunkLength);\\n\\n    /// @notice Emitted when force liquidation is paused\\n    event ForceVAILiquidationPaused(address indexed sender);\\n\\n    /// @notice Emitted when force liquidation is resumed\\n    event ForceVAILiquidationResumed(address indexed sender);\\n\\n    /// @notice Emitted when new address of protocol share reserve is set\\n    event NewProtocolShareReserve(address indexed oldProtocolShareReserve, address indexed newProtocolShareReserves);\\n\\n    /// @notice Emitted when reserves are reduced from liquidator contract to protocol share reserves\\n    event ProtocolLiquidationIncentiveTransferred(address indexed sender, address indexed token, uint256 reducedAmount);\\n\\n    /* Errors */\\n\\n    /// @notice Thrown if the liquidation is restricted and the liquidator is not in the allowedLiquidatorsByAccount mapping\\n    error LiquidationNotAllowed(address borrower, address liquidator);\\n\\n    /// @notice Thrown if VToken transfer fails after the liquidation\\n    error VTokenTransferFailed(address from, address to, uint256 amount);\\n\\n    /// @notice Thrown if the liquidation is not successful (the error code is from TokenErrorReporter)\\n    error LiquidationFailed(uint256 errorCode);\\n\\n    /// @notice Thrown if trying to restrict liquidations for an already restricted borrower\\n    error AlreadyRestricted(address borrower);\\n\\n    /// @notice Thrown if trying to unrestrict liquidations for a borrower that is not restricted\\n    error NoRestrictionsExist(address borrower);\\n\\n    /// @notice Thrown if the liquidator is already in the allowedLiquidatorsByAccount mapping\\n    error AlreadyAllowed(address borrower, address liquidator);\\n\\n    /// @notice Thrown if trying to remove a liquidator that is not in the allowedLiquidatorsByAccount mapping\\n    error AllowlistEntryNotFound(address borrower, address liquidator);\\n\\n    /// @notice Thrown if BNB amount sent with the transaction doesn't correspond to the\\n    ///         intended BNB repayment\\n    error WrongTransactionAmount(uint256 expected, uint256 actual);\\n\\n    /// @notice Thrown if trying to set treasury percent larger than the liquidation profit\\n    error TreasuryPercentTooHigh(uint256 maxTreasuryPercentMantissa, uint256 treasuryPercentMantissa_);\\n\\n    /// @notice Thrown if trying to liquidate any token when VAI debt is too high\\n    error VAIDebtTooHigh(uint256 vaiDebt, uint256 minLiquidatableVAI);\\n\\n    /// @notice Thrown when vToken is not listed\\n    error MarketNotListed(address vToken);\\n\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    /// @notice Constructor for the implementation contract. Sets immutable variables.\\n    /// @param comptroller_ The address of the Comptroller contract\\n    /// @param vBnb_ The address of the VBNB\\n    /// @param wBNB_ The address of wBNB\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address comptroller_, address payable vBnb_, address wBNB_) {\\n        ensureNonzeroAddress(vBnb_);\\n        ensureNonzeroAddress(comptroller_);\\n        ensureNonzeroAddress(wBNB_);\\n        vBnb = IVBNB(vBnb_);\\n        wBNB = wBNB_;\\n        comptroller = IComptroller(comptroller_);\\n        vaiController = IVAIController(IComptroller(comptroller_).vaiController());\\n        _disableInitializers();\\n    }\\n\\n    receive() external payable {}\\n\\n    /// @notice Initializer for the implementation contract.\\n    /// @param treasuryPercentMantissa_ Treasury share, scaled by 1e18 (e.g. 0.2 * 1e18 for 20%)\\n    /// @param accessControlManager_ address of access control manager\\n    /// @param protocolShareReserve_ The address of the protocol share reserve contract\\n    function initialize(\\n        uint256 treasuryPercentMantissa_,\\n        address accessControlManager_,\\n        address protocolShareReserve_\\n    ) external virtual reinitializer(2) {\\n        __Liquidator_init(treasuryPercentMantissa_, accessControlManager_, protocolShareReserve_);\\n    }\\n\\n    /// @dev Liquidator initializer for derived contracts.\\n    /// @param treasuryPercentMantissa_ Treasury share, scaled by 1e18 (e.g. 0.2 * 1e18 for 20%)\\n    /// @param accessControlManager_ address of access control manager\\n    /// @param protocolShareReserve_ The address of the protocol share reserve contract\\n    function __Liquidator_init(\\n        uint256 treasuryPercentMantissa_,\\n        address accessControlManager_,\\n        address protocolShareReserve_\\n    ) internal onlyInitializing {\\n        __Ownable2Step_init();\\n        __ReentrancyGuard_init();\\n        __Liquidator_init_unchained(treasuryPercentMantissa_, protocolShareReserve_);\\n        __AccessControlled_init_unchained(accessControlManager_);\\n    }\\n\\n    /// @dev Liquidator initializer for derived contracts that doesn't call parent initializers.\\n    /// @param treasuryPercentMantissa_ Treasury share, scaled by 1e18 (e.g. 0.2 * 1e18 for 20%)\\n    /// @param protocolShareReserve_ The address of the protocol share reserve contract\\n    function __Liquidator_init_unchained(\\n        uint256 treasuryPercentMantissa_,\\n        address protocolShareReserve_\\n    ) internal onlyInitializing {\\n        validateTreasuryPercentMantissa(treasuryPercentMantissa_);\\n        treasuryPercentMantissa = treasuryPercentMantissa_;\\n        _setProtocolShareReserve(protocolShareReserve_);\\n    }\\n\\n    /// @notice An admin function to restrict liquidations to allowed addresses only.\\n    /// @dev Use {addTo,removeFrom}AllowList to configure the allowed addresses.\\n    /// @param borrower The address of the borrower\\n    function restrictLiquidation(address borrower) external {\\n        _checkAccessAllowed(\\\"restrictLiquidation(address)\\\");\\n        if (liquidationRestricted[borrower]) {\\n            revert AlreadyRestricted(borrower);\\n        }\\n        liquidationRestricted[borrower] = true;\\n        emit LiquidationRestricted(borrower);\\n    }\\n\\n    /// @notice An admin function to remove restrictions for liquidations.\\n    /// @dev Does not impact the allowedLiquidatorsByAccount mapping for the borrower, just turns off the check.\\n    /// @param borrower The address of the borrower\\n    function unrestrictLiquidation(address borrower) external {\\n        _checkAccessAllowed(\\\"unrestrictLiquidation(address)\\\");\\n        if (!liquidationRestricted[borrower]) {\\n            revert NoRestrictionsExist(borrower);\\n        }\\n        liquidationRestricted[borrower] = false;\\n        emit LiquidationRestrictionsDisabled(borrower);\\n    }\\n\\n    /// @notice An admin function to add the liquidator to the allowedLiquidatorsByAccount mapping for a certain\\n    ///         borrower. If the liquidations are restricted, only liquidators from the\\n    ///         allowedLiquidatorsByAccount mapping can participate in liquidating the positions of this borrower.\\n    /// @param borrower The address of the borrower\\n    /// @param borrower The address of the liquidator\\n    function addToAllowlist(address borrower, address liquidator) external {\\n        _checkAccessAllowed(\\\"addToAllowlist(address,address)\\\");\\n        if (allowedLiquidatorsByAccount[borrower][liquidator]) {\\n            revert AlreadyAllowed(borrower, liquidator);\\n        }\\n        allowedLiquidatorsByAccount[borrower][liquidator] = true;\\n        emit AllowlistEntryAdded(borrower, liquidator);\\n    }\\n\\n    /// @notice An admin function to remove the liquidator from the allowedLiquidatorsByAccount mapping of a certain\\n    ///         borrower. If the liquidations are restricted, this liquidator will not be\\n    ///         able to liquidate the positions of this borrower.\\n    /// @param borrower The address of the borrower\\n    /// @param borrower The address of the liquidator\\n    function removeFromAllowlist(address borrower, address liquidator) external {\\n        _checkAccessAllowed(\\\"removeFromAllowlist(address,address)\\\");\\n        if (!allowedLiquidatorsByAccount[borrower][liquidator]) {\\n            revert AllowlistEntryNotFound(borrower, liquidator);\\n        }\\n        allowedLiquidatorsByAccount[borrower][liquidator] = false;\\n        emit AllowlistEntryRemoved(borrower, liquidator);\\n    }\\n\\n    /// @notice Liquidates a borrow and splits the seized amount between protocol share reserve and\\n    ///         liquidator. The liquidators should use this interface instead of calling\\n    ///         vToken.liquidateBorrow(...) directly.\\n    /// @notice Checks force VAI liquidation first; vToken should be address of vaiController if vaiDebt is greater than threshold\\n    /// @notice For BNB borrows msg.value should be equal to repayAmount; otherwise msg.value\\n    ///      should be zero.\\n    /// @param vToken Borrowed vToken\\n    /// @param borrower The address of the borrower\\n    /// @param repayAmount The amount to repay on behalf of the borrower\\n    /// @param vTokenCollateral The collateral to seize\\n    function liquidateBorrow(\\n        address vToken,\\n        address borrower,\\n        uint256 repayAmount,\\n        IVToken vTokenCollateral\\n    ) external payable nonReentrant {\\n        ensureNonzeroAddress(borrower);\\n        checkRestrictions(borrower, msg.sender);\\n        (bool isListed, , ) = IComptroller(comptroller).markets(address(vTokenCollateral));\\n        if (!isListed) {\\n            revert MarketNotListed(address(vTokenCollateral));\\n        }\\n\\n        _checkForceVAILiquidate(vToken, borrower);\\n        uint256 ourBalanceBefore = vTokenCollateral.balanceOf(address(this));\\n        if (vToken == address(vBnb)) {\\n            if (repayAmount != msg.value) {\\n                revert WrongTransactionAmount(repayAmount, msg.value);\\n            }\\n            vBnb.liquidateBorrow{ value: msg.value }(borrower, vTokenCollateral);\\n        } else {\\n            if (msg.value != 0) {\\n                revert WrongTransactionAmount(0, msg.value);\\n            }\\n            if (vToken == address(vaiController)) {\\n                _liquidateVAI(borrower, repayAmount, vTokenCollateral);\\n            } else {\\n                _liquidateBep20(IVBep20(vToken), borrower, repayAmount, vTokenCollateral);\\n            }\\n        }\\n        uint256 ourBalanceAfter = vTokenCollateral.balanceOf(address(this));\\n        uint256 seizedAmount = ourBalanceAfter - ourBalanceBefore;\\n        (uint256 ours, uint256 theirs) = _distributeLiquidationIncentive(vTokenCollateral, seizedAmount);\\n        _reduceReservesInternal();\\n        emit LiquidateBorrowedTokens(\\n            msg.sender,\\n            borrower,\\n            repayAmount,\\n            vToken,\\n            address(vTokenCollateral),\\n            ours,\\n            theirs\\n        );\\n    }\\n\\n    /// @notice Sets the new percent of the seized amount that goes to treasury. Should\\n    ///         be less than or equal to comptroller.liquidationIncentiveMantissa().sub(1e18).\\n    /// @param newTreasuryPercentMantissa New treasury percent (scaled by 10^18).\\n    function setTreasuryPercent(uint256 newTreasuryPercentMantissa) external {\\n        _checkAccessAllowed(\\\"setTreasuryPercent(uint256)\\\");\\n        validateTreasuryPercentMantissa(newTreasuryPercentMantissa);\\n        emit NewLiquidationTreasuryPercent(treasuryPercentMantissa, newTreasuryPercentMantissa);\\n        treasuryPercentMantissa = newTreasuryPercentMantissa;\\n    }\\n\\n    /**\\n     * @notice Sets protocol share reserve contract address\\n     * @param protocolShareReserve_ The address of the protocol share reserve contract\\n     */\\n    function setProtocolShareReserve(address payable protocolShareReserve_) external onlyOwner {\\n        _setProtocolShareReserve(protocolShareReserve_);\\n    }\\n\\n    /**\\n     * @notice Reduce the reserves of the pending accumulated reserves\\n     */\\n    function reduceReserves() external nonReentrant {\\n        _reduceReservesInternal();\\n    }\\n\\n    function _reduceReservesInternal() internal {\\n        uint256 _pendingRedeemLength = pendingRedeem.length;\\n        uint256 range = _pendingRedeemLength >= pendingRedeemChunkLength\\n            ? pendingRedeemChunkLength\\n            : _pendingRedeemLength;\\n        for (uint256 index = range; index > 0; ) {\\n            address vToken = pendingRedeem[index - 1];\\n            uint256 vTokenBalance_ = IVToken(vToken).balanceOf(address(this));\\n            if (_redeemUnderlying(vToken, vTokenBalance_)) {\\n                if (vToken == address(vBnb)) {\\n                    _reduceBnbReserves();\\n                } else {\\n                    _reduceVTokenReserves(vToken);\\n                }\\n                pendingRedeem[index - 1] = pendingRedeem[pendingRedeem.length - 1];\\n                pendingRedeem.pop();\\n            }\\n            unchecked {\\n                index--;\\n            }\\n        }\\n    }\\n\\n    /// @dev Transfers BEP20 tokens to self, then approves vToken to take these tokens.\\n    function _liquidateBep20(IVBep20 vToken, address borrower, uint256 repayAmount, IVToken vTokenCollateral) internal {\\n        (bool isListed, , ) = IComptroller(comptroller).markets(address(vToken));\\n        if (!isListed) {\\n            revert MarketNotListed(address(vToken));\\n        }\\n\\n        IERC20Upgradeable borrowedToken = IERC20Upgradeable(vToken.underlying());\\n        uint256 actualRepayAmount = _transferBep20(borrowedToken, msg.sender, address(this), repayAmount);\\n        borrowedToken.safeApprove(address(vToken), 0);\\n        borrowedToken.safeApprove(address(vToken), actualRepayAmount);\\n        requireNoError(vToken.liquidateBorrow(borrower, actualRepayAmount, vTokenCollateral));\\n    }\\n\\n    /// @dev Transfers BEP20 tokens to self, then approves VAI to take these tokens.\\n    function _liquidateVAI(address borrower, uint256 repayAmount, IVToken vTokenCollateral) internal {\\n        IERC20Upgradeable vai = IERC20Upgradeable(vaiController.getVAIAddress());\\n        vai.safeTransferFrom(msg.sender, address(this), repayAmount);\\n        vai.safeApprove(address(vaiController), 0);\\n        vai.safeApprove(address(vaiController), repayAmount);\\n\\n        (uint256 err, ) = vaiController.liquidateVAI(borrower, repayAmount, vTokenCollateral);\\n        requireNoError(err);\\n    }\\n\\n    /// @dev Distribute seized collateral between liquidator and protocol share reserve\\n    function _distributeLiquidationIncentive(\\n        IVToken vTokenCollateral,\\n        uint256 seizedAmount\\n    ) internal returns (uint256 ours, uint256 theirs) {\\n        (ours, theirs) = _splitLiquidationIncentive(seizedAmount);\\n        if (!vTokenCollateral.transfer(msg.sender, theirs)) {\\n            revert VTokenTransferFailed(address(this), msg.sender, theirs);\\n        }\\n\\n        if (ours > 0 && !_redeemUnderlying(address(vTokenCollateral), ours)) {\\n            // Check if asset is already present in pendingRedeem array\\n            uint256 index;\\n            for (index; index < pendingRedeem.length; ) {\\n                if (pendingRedeem[index] == address(vTokenCollateral)) {\\n                    break;\\n                }\\n                unchecked {\\n                    index++;\\n                }\\n            }\\n            if (index == pendingRedeem.length) {\\n                pendingRedeem.push(address(vTokenCollateral));\\n            }\\n        } else {\\n            if (address(vTokenCollateral) == address(vBnb)) {\\n                _reduceBnbReserves();\\n            } else {\\n                _reduceVTokenReserves(address(vTokenCollateral));\\n            }\\n        }\\n    }\\n\\n    /// @dev Wraps BNB to wBNB and sends to protocol share reserve\\n    function _reduceBnbReserves() private {\\n        uint256 bnbBalance = address(this).balance;\\n        IWBNB(wBNB).deposit{ value: bnbBalance }();\\n        IERC20Upgradeable(wBNB).safeTransfer(protocolShareReserve, bnbBalance);\\n        IProtocolShareReserve(protocolShareReserve).updateAssetsState(\\n            address(comptroller),\\n            wBNB,\\n            IProtocolShareReserve.IncomeType.LIQUIDATION\\n        );\\n        emit ProtocolLiquidationIncentiveTransferred(msg.sender, wBNB, bnbBalance);\\n    }\\n\\n    /// @dev Redeem seized collateral to underlying assets\\n    function _redeemUnderlying(address vToken, uint256 amount) private returns (bool) {\\n        try IVToken(address(vToken)).redeem(amount) returns (uint256 response) {\\n            if (response == 0) {\\n                return true;\\n            } else {\\n                return false;\\n            }\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    /// @dev Transfers seized collateral other than BNB to protocol share reserve\\n    function _reduceVTokenReserves(address vToken) private {\\n        address underlying = IVBep20(vToken).underlying();\\n        uint256 underlyingBalance = IERC20Upgradeable(underlying).balanceOf(address(this));\\n        IERC20Upgradeable(underlying).safeTransfer(protocolShareReserve, underlyingBalance);\\n        IProtocolShareReserve(protocolShareReserve).updateAssetsState(\\n            address(comptroller),\\n            underlying,\\n            IProtocolShareReserve.IncomeType.LIQUIDATION\\n        );\\n        emit ProtocolLiquidationIncentiveTransferred(msg.sender, underlying, underlyingBalance);\\n    }\\n\\n    /// @dev Transfers tokens and returns the actual transfer amount\\n    function _transferBep20(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal returns (uint256) {\\n        uint256 prevBalance = token.balanceOf(to);\\n        token.safeTransferFrom(from, to, amount);\\n        return token.balanceOf(to) - prevBalance;\\n    }\\n\\n    /// @dev Computes the amounts that would go to treasury and to the liquidator.\\n    function _splitLiquidationIncentive(uint256 seizedAmount) internal view returns (uint256 ours, uint256 theirs) {\\n        uint256 totalIncentive = comptroller.liquidationIncentiveMantissa();\\n        ours = (seizedAmount * treasuryPercentMantissa) / totalIncentive;\\n        theirs = seizedAmount - ours;\\n    }\\n\\n    function requireNoError(uint256 errCode) internal pure {\\n        if (errCode == uint256(0)) {\\n            return;\\n        }\\n\\n        revert LiquidationFailed(errCode);\\n    }\\n\\n    function checkRestrictions(address borrower, address liquidator) internal view {\\n        if (liquidationRestricted[borrower] && !allowedLiquidatorsByAccount[borrower][liquidator]) {\\n            revert LiquidationNotAllowed(borrower, liquidator);\\n        }\\n    }\\n\\n    function validateTreasuryPercentMantissa(uint256 treasuryPercentMantissa_) internal view {\\n        uint256 maxTreasuryPercentMantissa = comptroller.liquidationIncentiveMantissa() - MANTISSA_ONE;\\n        if (treasuryPercentMantissa_ > maxTreasuryPercentMantissa) {\\n            revert TreasuryPercentTooHigh(maxTreasuryPercentMantissa, treasuryPercentMantissa_);\\n        }\\n    }\\n\\n    /// @dev Checks liquidation action in comptroller and vaiDebt with minLiquidatableVAI threshold\\n    function _checkForceVAILiquidate(address vToken_, address borrower_) private view {\\n        uint256 _vaiDebt = vaiController.getVAIRepayAmount(borrower_);\\n        bool _isVAILiquidationPaused = comptroller.actionPaused(address(vaiController), IComptroller.Action.LIQUIDATE);\\n        bool _isForcedLiquidationEnabled = comptroller.isForcedLiquidationEnabled(vToken_);\\n        if (\\n            _isForcedLiquidationEnabled ||\\n            _isVAILiquidationPaused ||\\n            !forceVAILiquidate ||\\n            _vaiDebt < minLiquidatableVAI ||\\n            vToken_ == address(vaiController)\\n        ) return;\\n        revert VAIDebtTooHigh(_vaiDebt, minLiquidatableVAI);\\n    }\\n\\n    function _setProtocolShareReserve(address protocolShareReserve_) internal {\\n        ensureNonzeroAddress(protocolShareReserve_);\\n        emit NewProtocolShareReserve(protocolShareReserve, protocolShareReserve_);\\n        protocolShareReserve = protocolShareReserve_;\\n    }\\n\\n    /**\\n     * @notice Sets the threshold for minimum amount of vaiLiquidate\\n     * @param minLiquidatableVAI_ New address for the access control\\n     */\\n    function setMinLiquidatableVAI(uint256 minLiquidatableVAI_) external {\\n        _checkAccessAllowed(\\\"setMinLiquidatableVAI(uint256)\\\");\\n        emit NewMinLiquidatableVAI(minLiquidatableVAI, minLiquidatableVAI_);\\n        minLiquidatableVAI = minLiquidatableVAI_;\\n    }\\n\\n    /**\\n     * @notice Length of the pendingRedeem array to be consider while redeeming in Liquidation transaction\\n     * @param newLength_ Length of the chunk\\n     */\\n    function setPendingRedeemChunkLength(uint256 newLength_) external {\\n        _checkAccessAllowed(\\\"setPendingRedeemChunkLength(uint256)\\\");\\n        require(newLength_ > 0, \\\"Invalid chunk size\\\");\\n        emit NewPendingRedeemChunkLength(pendingRedeemChunkLength, newLength_);\\n        pendingRedeemChunkLength = newLength_;\\n    }\\n\\n    /**\\n     * @notice Pause Force Liquidation of VAI\\n     */\\n    function pauseForceVAILiquidate() external {\\n        _checkAccessAllowed(\\\"pauseForceVAILiquidate()\\\");\\n        require(forceVAILiquidate, \\\"Force Liquidation of VAI is already Paused\\\");\\n        forceVAILiquidate = false;\\n        emit ForceVAILiquidationPaused(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Resume Force Liquidation of VAI\\n     */\\n    function resumeForceVAILiquidate() external {\\n        _checkAccessAllowed(\\\"resumeForceVAILiquidate()\\\");\\n        require(!forceVAILiquidate, \\\"Force Liquidation of VAI is already resumed\\\");\\n        forceVAILiquidate = true;\\n        emit ForceVAILiquidationResumed(msg.sender);\\n    }\\n\\n    function renounceOwnership() public override {}\\n}\\n\",\"keccak256\":\"0x3a87c0e671f958709753cc7f024dd610fb04abcc69c5e7b402d4802b8cce80c1\",\"license\":\"BSD-3-Clause\"},\"contracts/Liquidator/LiquidatorStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\ncontract LiquidatorStorage {\\n    /* State */\\n\\n    /// @notice Percent of seized amount that goes to treasury.\\n    uint256 public treasuryPercentMantissa;\\n\\n    /// @notice Mapping of addresses allowed to liquidate an account if liquidationRestricted[borrower] == true\\n    mapping(address => mapping(address => bool)) public allowedLiquidatorsByAccount;\\n\\n    /// @notice Whether the liquidations are restricted to enabled allowedLiquidatorsByAccount addresses only\\n    mapping(address => bool) public liquidationRestricted;\\n\\n    /// @notice minimum amount of VAI liquidation threshold\\n    uint256 public minLiquidatableVAI;\\n\\n    /// @notice check for liquidation of VAI\\n    bool public forceVAILiquidate;\\n\\n    /// @notice assests whose redeem is pending to reduce reserves\\n    address[] public pendingRedeem;\\n\\n    /// @notice protocol share reserve contract address\\n    address public protocolShareReserve;\\n\\n    /// @dev Size of chunk to consider when redeeming underlying at the time of liquidation\\n    uint256 internal pendingRedeemChunkLength;\\n\\n    /// @notice gap to prevent collision in inheritance\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf915710b8c751ddcd3ebb963c13198643dd66144bf4b28f76809cb9b427d5318\",\"license\":\"BSD-3-Clause\"},\"contracts/external/IProtocolShareReserve.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.25;\\n\\ninterface IProtocolShareReserve {\\n    enum IncomeType {\\n        SPREAD,\\n        LIQUIDATION\\n    }\\n\\n    function updateAssetsState(address comptroller, address asset, IncomeType incomeType) external;\\n}\\n\",\"keccak256\":\"0xf03faf89ad2689a29f0d456c1add258bc09bcf484840170154a32e129500818e\",\"license\":\"BSD-3-Clause\"},\"contracts/external/IWBNB.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.25;\\n\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IWBNB is IERC20Upgradeable {\\n    function deposit() external payable;\\n}\\n\",\"keccak256\":\"0x73026d4d447f4c3a92656b79935c407a931b26ea32f6c6c24925cd8f5dd0b41c\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x610100604052348015610010575f80fd5b5060405161327d38038061327d83398101604081905261002f916101d8565b610038826100de565b610041836100de565b61004a816100de565b6001600160a01b0380831660805281811660e052831660a081905260408051639254f5e560e01b81529051639254f5e5916004808201926020929091908290030181865afa15801561009e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906100c29190610222565b6001600160a01b031660c0526100d6610108565b505050610244565b6001600160a01b038116610105576040516342bcdf7f60e11b815260040160405180910390fd5b50565b5f54610100900460ff16156101735760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b5f5460ff908116146101c2575f805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6001600160a01b0381168114610105575f80fd5b5f805f606084860312156101ea575f80fd5b83516101f5816101c4565b6020850151909350610206816101c4565b6040850151909250610217816101c4565b809150509250925092565b5f60208284031215610232575f80fd5b815161023d816101c4565b9392505050565b60805160a05160c05160e051612f5e61031f5f395f818161052f0152818161243c015281816124b90152818161252f015261259501525f818161044a01528181610ae5015281816115cf0152818161166e015281816117a50152818161180f015281816118b3015281816118e7015261193c01525f8181610333015281816108c80152818161163f0152818161170f015281816119db01528181611f55015281816122fe0152818161250d01526126fb01525f81816102e8015281816109d601528181610a5d01528181611d030152611e1f0152612f5e5ff3fe6080604052600436106101d3575f3560e01c806389a2bc25116100fd578063b4a0bdf311610092578063e9a44fd911610062578063e9a44fd91461056e578063f2fde38b1461058d578063f52421b3146105ac578063f7dcd96e146105cb575f80fd5b8063b4a0bdf3146104ec578063b8332db71461050a578063d02eb3f41461051e578063e30c397814610551575f80fd5b8063a093796a116100cd578063a093796a1461046c578063b09c77421461048b578063b26461de1461049f578063b4988fd0146104cd575f80fd5b806389a2bc25146103e85780638da5cb5b146104075780638e3525fc146104245780639254f5e514610439575f80fd5b80635ba3792d1161017357806379ba50971161014357806379ba5097146103735780637debe3fe146103875780638722ddf2146103a65780638765adcb146103c9575f80fd5b80635ba3792d146102d75780635fe3b5671461032257806364fd707814610355578063715018a614610368575f80fd5b806311ec4b7a116101ae57806311ec4b7a1461023257806336eab4ae1461025157806344b3716a1461027f57806347a6a971146102b8575f80fd5b80630d060ea8146101de5780630e32cb86146101f4578063107568df14610213575f80fd5b366101da57005b5f80fd5b3480156101e9575f80fd5b506101f26105ea565b005b3480156101ff575f80fd5b506101f261020e366004612b33565b6106c8565b34801561021e575f80fd5b506101f261022d366004612b33565b6106dc565b34801561023d575f80fd5b506101f261024c366004612b33565b6106ed565b34801561025c575f80fd5b5060cd5461026a9060ff1681565b60405190151581526020015b60405180910390f35b34801561028a575f80fd5b5061026a610299366004612b55565b60ca60209081525f928352604080842090915290825290205460ff1681565b3480156102c3575f80fd5b506101f26102d2366004612b55565b6107ba565b3480156102e2575f80fd5b5061030a7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610276565b34801561032d575f80fd5b5061030a7f000000000000000000000000000000000000000000000000000000000000000081565b6101f2610363366004612b8c565b61088c565b3480156101f2575f80fd5b34801561037e575f80fd5b506101f2610c39565b348015610392575f80fd5b506101f26103a1366004612b55565b610cb0565b3480156103b1575f80fd5b506103bb60cc5481565b604051908152602001610276565b3480156103d4575f80fd5b506101f26103e3366004612b33565b610da3565b3480156103f3575f80fd5b506101f2610402366004612bdc565b610e6c565b348015610412575f80fd5b506033546001600160a01b031661030a565b34801561042f575f80fd5b506103bb60c95481565b348015610444575f80fd5b5061030a7f000000000000000000000000000000000000000000000000000000000000000081565b348015610477575f80fd5b506101f2610486366004612bdc565b610ef4565b348015610496575f80fd5b506101f2610f9a565b3480156104aa575f80fd5b5061026a6104b9366004612b33565b60cb6020525f908152604090205460ff1681565b3480156104d8575f80fd5b506101f26104e7366004612bf3565b611078565b3480156104f7575f80fd5b50610102546001600160a01b031661030a565b348015610515575f80fd5b506101f261115f565b348015610529575f80fd5b5061030a7f000000000000000000000000000000000000000000000000000000000000000081565b34801561055c575f80fd5b506065546001600160a01b031661030a565b348015610579575f80fd5b5060cf5461030a906001600160a01b031681565b348015610598575f80fd5b506101f26105a7366004612b33565b611179565b3480156105b7575f80fd5b506101f26105c6366004612bdc565b6111ea565b3480156105d6575f80fd5b5061030a6105e5366004612bdc565b611269565b6106286040518060400160405280601881526020017f7061757365466f7263655641494c697175696461746528290000000000000000815250611291565b60cd5460ff166106925760405162461bcd60e51b815260206004820152602a60248201527f466f726365204c69717569646174696f6e206f662056414920697320616c726560448201526918591e4814185d5cd95960b21b60648201526084015b60405180910390fd5b60cd805460ff1916905560405133907f42388332be4beb2ad2ff83017119b9d702ce7fbaf67e18e53a137508cf967e43905f90a2565b6106d061132d565b6106d981611387565b50565b6106e461132d565b6106d98161144d565b61072b6040518060400160405280601c81526020017f72657374726963744c69717569646174696f6e28616464726573732900000000815250611291565b6001600160a01b0381165f90815260cb602052604090205460ff161561076f5760405163404fe9fb60e11b81526001600160a01b0382166004820152602401610689565b6001600160a01b0381165f81815260cb6020526040808220805460ff19166001179055517f614c47c82976e8f145409efb6366fe2cefa323f389ed9354649262e38dbb35899190a250565b6107db604051806060016040528060248152602001612ee160249139611291565b6001600160a01b038083165f90815260ca602090815260408083209385168352929052205460ff166108335760405163435aad4360e01b81526001600160a01b03808416600483015282166024820152604401610689565b6001600160a01b038083165f81815260ca6020908152604080832094861680845294909152808220805460ff19169055517f6b0d38eafddac0d37e0aff8f4bbd5f3a3cfe124b8eabea27558bffc931ac05b59190a35050565b6108946114b1565b61089d8361150a565b6108a78333611531565b604051638e8f294b60e01b81526001600160a01b0382811660048301525f917f000000000000000000000000000000000000000000000000000000000000000090911690638e8f294b90602401606060405180830381865afa15801561090f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109339190612c46565b505090508061096057604051635a9a1eb960e11b81526001600160a01b0383166004820152602401610689565b61096a85856115ae565b6040516370a0823160e01b81523060048201525f906001600160a01b038416906370a0823190602401602060405180830381865afa1580156109ae573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109d29190612c7f565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316866001600160a01b031603610abc57348414610a365760405163dd97100160e01b815260048101859052346024820152604401610689565b604051635572051560e11b81526001600160a01b03868116600483015284811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063aae40a2a9034906044015f604051808303818588803b158015610aa0575f80fd5b505af1158015610ab2573d5f803e3d5ffd5b5050505050610b38565b3415610ae35760405163dd97100160e01b81525f6004820152346024820152604401610689565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316866001600160a01b031603610b2c57610b2785858561180c565b610b38565b610b38868686866119ba565b6040516370a0823160e01b81523060048201525f906001600160a01b038516906370a0823190602401602060405180830381865afa158015610b7c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ba09190612c7f565b90505f610bad8383612caa565b90505f80610bbb8784611b98565b91509150610bc7611d57565b604080518981526001600160a01b038c8116602083015291810184905260608101839052818916918b169033907fdd091524d794aecdb5235b2d816620c2598790835e0f3849808504c2dcb4f1a99060800160405180910390a4505050505050610c316001609755565b50505050565b565b60655433906001600160a01b03168114610ca75760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b6064820152608401610689565b6106d981611f30565b610cee6040518060400160405280601f81526020017f616464546f416c6c6f776c69737428616464726573732c616464726573732900815250611291565b6001600160a01b038083165f90815260ca602090815260408083209385168352929052205460ff1615610d475760405163071df39160e01b81526001600160a01b03808416600483015282166024820152604401610689565b6001600160a01b038083165f81815260ca6020908152604080832094861680845294909152808220805460ff19166001179055517ffe40417b78788808c927141f806ef5082e7bba0f7790f2e85b811621a91094339190a35050565b610de16040518060400160405280601e81526020017f756e72657374726963744c69717569646174696f6e2861646472657373290000815250611291565b6001600160a01b0381165f90815260cb602052604090205460ff16610e2457604051633bf9d98960e11b81526001600160a01b0382166004820152602401610689565b6001600160a01b0381165f81815260cb6020526040808220805460ff19169055517fe1f03de94d16c262d2f0e89a1c42ede8899d540ac992cf53495a5cf29c2896af9190a250565b610eaa6040518060400160405280601b81526020017f736574547265617375727950657263656e742875696e74323536290000000000815250611291565b610eb381611f49565b60c95460408051918252602082018390527f0e9a1641744b21c49e4183ab9ce941d420e05a05a446c71875fb07814f362c1a910160405180910390a160c955565b610f15604051806060016040528060248152602001612f0560249139611291565b5f8111610f595760405162461bcd60e51b8152602060048201526012602482015271496e76616c6964206368756e6b2073697a6560701b6044820152606401610689565b60d05460408051918252602082018390527fe5eef53e396f0cb79322e15e72b6c6613ae3e62c9079f5a12f2c410867c28b2c910160405180910390a160d055565b610fd86040518060400160405280601981526020017f726573756d65466f7263655641494c6971756964617465282900000000000000815250611291565b60cd5460ff161561103f5760405162461bcd60e51b815260206004820152602b60248201527f466f726365204c69717569646174696f6e206f662056414920697320616c726560448201526a18591e481c995cdd5b595960aa1b6064820152608401610689565b60cd805460ff1916600117905560405133907fd4b8f320ada24d048ee6c25c53a31aa20b2ea37fa25542e6e239c80d31d5b60b905f90a2565b5f54600290610100900460ff1615801561109857505f5460ff8083169116105b6110fb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610689565b5f805461ffff191660ff83161761010017905561111984848461200a565b5f805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050565b6111676114b1565b61116f611d57565b610c376001609755565b61118161132d565b606580546001600160a01b0383166001600160a01b031990911681179091556111b26033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6112286040518060400160405280601e81526020017f7365744d696e4c6971756964617461626c655641492875696e74323536290000815250611291565b60cc5460408051918252602082018390527f8df018dc5fe866d192a3f4d9f16dbfdb38f58a7470a65b92262ccc008c55fff0910160405180910390a160cc55565b60ce8181548110611278575f80fd5b5f918252602090912001546001600160a01b0316905081565b610102546040516318c5e8ab60e01b81525f916001600160a01b0316906318c5e8ab906112c49033908690600401612ceb565b602060405180830381865afa1580156112df573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113039190612d0e565b90508061132957333083604051634a3fa29360e01b815260040161068993929190612d27565b5050565b6033546001600160a01b03163314610c375760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610689565b6001600160a01b0381166113eb5760405162461bcd60e51b815260206004820152602560248201527f696e76616c696420616365737320636f6e74726f6c206d616e61676572206164604482015264647265737360d81b6064820152608401610689565b61010280546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f66fd58e82f7b31a2a5c30e0888f3093efe4e111b00cd2b0c31fe014601293aa0910160405180910390a15050565b6114568161150a565b60cf546040516001600160a01b038084169216907fafec95c8612496c3ecf5dddc71e393528fe29bd145fbaf9c6b496d78d7e2d79b905f90a360cf80546001600160a01b0319166001600160a01b0392909216919091179055565b6002609754036115035760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610689565b6002609755565b6001600160a01b0381166106d9576040516342bcdf7f60e11b815260040160405180910390fd5b6001600160a01b0382165f90815260cb602052604090205460ff16801561157d57506001600160a01b038083165f90815260ca602090815260408083209385168352929052205460ff16155b156113295760405163074c80eb60e51b81526001600160a01b03808416600483015282166024820152604401610689565b604051633c617c9160e11b81526001600160a01b0382811660048301525f917f0000000000000000000000000000000000000000000000000000000000000000909116906378c2f92290602401602060405180830381865afa158015611616573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061163a9190612c7f565b90505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e85a29607f000000000000000000000000000000000000000000000000000000000000000060056040518363ffffffff1660e01b81526004016116ac929190612d6f565b602060405180830381865afa1580156116c7573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116eb9190612d0e565b60405163460d60c560e11b81526001600160a01b0386811660048301529192505f917f00000000000000000000000000000000000000000000000000000000000000001690638c1ac18a90602401602060405180830381865afa158015611754573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906117789190612d0e565b905080806117835750815b80611791575060cd5460ff16155b8061179d575060cc5483105b806117d957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b0316145b156117e5575050505050565b60cc546040516329eb1e8760e01b8152610689918591600401918252602082015260400190565b5f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cbeb2b286040518163ffffffff1660e01b8152600401602060405180830381865afa158015611869573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061188d9190612d9c565b90506118a46001600160a01b038216333086612053565b6118d86001600160a01b0382167f00000000000000000000000000000000000000000000000000000000000000005f6120be565b61190c6001600160a01b0382167f0000000000000000000000000000000000000000000000000000000000000000856120be565b6040516311b3d5e760e01b81526001600160a01b0385811660048301526024820185905283811660448301525f917f0000000000000000000000000000000000000000000000000000000000000000909116906311b3d5e79060640160408051808303815f875af1158015611983573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906119a79190612db7565b5090506119b3816121d1565b5050505050565b604051638e8f294b60e01b81526001600160a01b0385811660048301525f917f000000000000000000000000000000000000000000000000000000000000000090911690638e8f294b90602401606060405180830381865afa158015611a22573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a469190612c46565b5050905080611a7357604051635a9a1eb960e11b81526001600160a01b0386166004820152602401610689565b5f856001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ab0573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611ad49190612d9c565b90505f611ae3823330886121f5565b9050611af96001600160a01b038316885f6120be565b611b0d6001600160a01b03831688836120be565b604051637af1e23160e11b81526001600160a01b038781166004830152602482018390528581166044830152611b8f919089169063f5e3c462906064016020604051808303815f875af1158015611b66573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611b8a9190612c7f565b6121d1565b50505050505050565b5f80611ba3836122f9565b60405163a9059cbb60e01b81523360048201526024810182905291935091506001600160a01b0385169063a9059cbb906044016020604051808303815f875af1158015611bf2573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611c169190612d0e565b611c425760405163241165bb60e21b815230600482015233602482015260448101829052606401610689565b5f82118015611c585750611c5684836123ab565b155b15611d01575f5b60ce54811015611ca757846001600160a01b031660ce8281548110611c8657611c86612dd9565b5f918252602090912001546001600160a01b031614611ca757600101611c5f565b60ce548103611cfb5760ce80546001810182555f919091527fd36cd1c74ef8d7326d8021b776c18fb5a5724b7f7bc93c2f42e43e10ef27d12a0180546001600160a01b0319166001600160a01b0387161790555b50611d50565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b031603611d4757611d42612436565b611d50565b611d50846125ea565b9250929050565b60ce5460d0545f90821015611d6c5781611d70565b60d0545b9050805b8015611f24575f60ce611d88600184612caa565b81548110611d9857611d98612dd9565b5f9182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a0823190602401602060405180830381865afa158015611de8573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611e0c9190612c7f565b9050611e1882826123ab565b15611f1a577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031603611e6357611e5e612436565b611e6c565b611e6c826125ea565b60ce8054611e7c90600190612caa565b81548110611e8c57611e8c612dd9565b5f918252602090912001546001600160a01b031660ce611ead600186612caa565b81548110611ebd57611ebd612dd9565b905f5260205f20015f6101000a8154816001600160a01b0302191690836001600160a01b0316021790555060ce805480611ef957611ef9612ded565b5f8281526020902081015f1990810180546001600160a01b03191690550190555b50505f1901611d74565b505050565b6001609755565b606580546001600160a01b03191690556106d98161279a565b5f670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634ada90af6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611faf573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611fd39190612c7f565b611fdd9190612caa565b90508082111561132957604051635659cb3b60e01b81526004810182905260248101839052604401610689565b5f54610100900460ff166120305760405162461bcd60e51b815260040161068990612e01565b6120386127eb565b612040612819565b61204a8382612847565b611f2482612884565b6040516001600160a01b0380851660248301528316604482015260648101829052610c319085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526128aa565b8015806121365750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015612110573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906121349190612c7f565b155b6121a15760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610689565b6040516001600160a01b038316602482015260448101829052611f2490849063095ea7b360e01b90606401612087565b806121d95750565b60405163125a96ab60e01b815260048101829052602401610689565b6040516370a0823160e01b81526001600160a01b0383811660048301525f9182918716906370a0823190602401602060405180830381865afa15801561223d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906122619190612c7f565b90506122786001600160a01b038716868686612053565b6040516370a0823160e01b81526001600160a01b0385811660048301528291908816906370a0823190602401602060405180830381865afa1580156122bf573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906122e39190612c7f565b6122ed9190612caa565b9150505b949350505050565b5f805f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634ada90af6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612358573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061237c9190612c7f565b90508060c9548561238d9190612e4c565b6123979190612e63565b92506123a38385612caa565b915050915091565b60405163db006a7560e01b8152600481018290525f906001600160a01b0384169063db006a75906024016020604051808303815f875af192505050801561240f575060408051601f3d908101601f1916820190925261240c91810190612c7f565b60015b61241a57505f612430565b805f0361242b576001915050612430565b5f9150505b92915050565b5f4790507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004015f604051808303818588803b158015612493575f80fd5b505af11580156124a5573d5f803e3d5ffd5b505060cf546124e593506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811693501690508361297d565b60cf546040516305bebb3b60e21b81526001600160a01b03909116906316faecec9061255a907f0000000000000000000000000000000000000000000000000000000000000000907f000000000000000000000000000000000000000000000000000000000000000090600190600401612e82565b5f604051808303815f87803b158015612571575f80fd5b505af1158015612583573d5f803e3d5ffd5b50506040518381526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692503391507fb68163184d017d69dff908f587b51f68dc2689426509efd546fbf77b518cc8769060200160405180910390a350565b5f816001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015612627573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061264b9190612d9c565b6040516370a0823160e01b81523060048201529091505f906001600160a01b038316906370a0823190602401602060405180830381865afa158015612692573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906126b69190612c7f565b60cf549091506126d3906001600160a01b0384811691168361297d565b60cf546040516305bebb3b60e21b81526001600160a01b03909116906316faecec90612728907f0000000000000000000000000000000000000000000000000000000000000000908690600190600401612e82565b5f604051808303815f87803b15801561273f575f80fd5b505af1158015612751573d5f803e3d5ffd5b50506040518381526001600160a01b03851692503391507fb68163184d017d69dff908f587b51f68dc2689426509efd546fbf77b518cc8769060200160405180910390a3505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b5f54610100900460ff166128115760405162461bcd60e51b815260040161068990612e01565b610c376129ad565b5f54610100900460ff1661283f5760405162461bcd60e51b815260040161068990612e01565b610c376129dc565b5f54610100900460ff1661286d5760405162461bcd60e51b815260040161068990612e01565b61287682611f49565b60c98290556113298161144d565b5f54610100900460ff166106d05760405162461bcd60e51b815260040161068990612e01565b5f6128fe826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612a029092919063ffffffff16565b905080515f148061291e57508080602001905181019061291e9190612d0e565b611f245760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610689565b6040516001600160a01b038316602482015260448101829052611f2490849063a9059cbb60e01b90606401612087565b5f54610100900460ff166129d35760405162461bcd60e51b815260040161068990612e01565b610c3733611f30565b5f54610100900460ff16611f295760405162461bcd60e51b815260040161068990612e01565b60606122f184845f85855f80866001600160a01b03168587604051612a279190612eb8565b5f6040518083038185875af1925050503d805f8114612a61576040519150601f19603f3d011682016040523d82523d5f602084013e612a66565b606091505b5091509150612a7787838387612a82565b979650505050505050565b60608315612af05782515f03612ae9576001600160a01b0385163b612ae95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610689565b50816122f1565b6122f18383815115612b055781518083602001fd5b8060405162461bcd60e51b81526004016106899190612ece565b6001600160a01b03811681146106d9575f80fd5b5f60208284031215612b43575f80fd5b8135612b4e81612b1f565b9392505050565b5f8060408385031215612b66575f80fd5b8235612b7181612b1f565b91506020830135612b8181612b1f565b809150509250929050565b5f805f8060808587031215612b9f575f80fd5b8435612baa81612b1f565b93506020850135612bba81612b1f565b9250604085013591506060850135612bd181612b1f565b939692955090935050565b5f60208284031215612bec575f80fd5b5035919050565b5f805f60608486031215612c05575f80fd5b833592506020840135612c1781612b1f565b91506040840135612c2781612b1f565b809150509250925092565b80518015158114612c41575f80fd5b919050565b5f805f60608486031215612c58575f80fd5b612c6184612c32565b925060208401519150612c7660408501612c32565b90509250925092565b5f60208284031215612c8f575f80fd5b5051919050565b634e487b7160e01b5f52601160045260245ffd5b8181038181111561243057612430612c96565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b6001600160a01b03831681526040602082018190525f906122f190830184612cbd565b5f60208284031215612d1e575f80fd5b612b4e82612c32565b6001600160a01b038481168252831660208201526060604082018190525f90612d5290830184612cbd565b95945050505050565b634e487b7160e01b5f52602160045260245ffd5b6001600160a01b03831681526040810160098310612d8f57612d8f612d5b565b8260208301529392505050565b5f60208284031215612dac575f80fd5b8151612b4e81612b1f565b5f8060408385031215612dc8575f80fd5b505080516020909101519092909150565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52603160045260245ffd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b808202811582820484141761243057612430612c96565b5f82612e7d57634e487b7160e01b5f52601260045260245ffd5b500490565b6001600160a01b038481168252831660208201526060810160028310612eaa57612eaa612d5b565b826040830152949350505050565b5f82518060208501845e5f920191825250919050565b602081525f612b4e6020830184612cbd56fe72656d6f766546726f6d416c6c6f776c69737428616464726573732c616464726573732973657450656e64696e6752656465656d4368756e6b4c656e6774682875696e7432353629a264697066735822122036c1b58d861bb545d2903eb5e278b04e350de628a37809859f0e638c70759fc264736f6c63430008190033",
  "deployedBytecode": "0x6080604052600436106101d3575f3560e01c806389a2bc25116100fd578063b4a0bdf311610092578063e9a44fd911610062578063e9a44fd91461056e578063f2fde38b1461058d578063f52421b3146105ac578063f7dcd96e146105cb575f80fd5b8063b4a0bdf3146104ec578063b8332db71461050a578063d02eb3f41461051e578063e30c397814610551575f80fd5b8063a093796a116100cd578063a093796a1461046c578063b09c77421461048b578063b26461de1461049f578063b4988fd0146104cd575f80fd5b806389a2bc25146103e85780638da5cb5b146104075780638e3525fc146104245780639254f5e514610439575f80fd5b80635ba3792d1161017357806379ba50971161014357806379ba5097146103735780637debe3fe146103875780638722ddf2146103a65780638765adcb146103c9575f80fd5b80635ba3792d146102d75780635fe3b5671461032257806364fd707814610355578063715018a614610368575f80fd5b806311ec4b7a116101ae57806311ec4b7a1461023257806336eab4ae1461025157806344b3716a1461027f57806347a6a971146102b8575f80fd5b80630d060ea8146101de5780630e32cb86146101f4578063107568df14610213575f80fd5b366101da57005b5f80fd5b3480156101e9575f80fd5b506101f26105ea565b005b3480156101ff575f80fd5b506101f261020e366004612b33565b6106c8565b34801561021e575f80fd5b506101f261022d366004612b33565b6106dc565b34801561023d575f80fd5b506101f261024c366004612b33565b6106ed565b34801561025c575f80fd5b5060cd5461026a9060ff1681565b60405190151581526020015b60405180910390f35b34801561028a575f80fd5b5061026a610299366004612b55565b60ca60209081525f928352604080842090915290825290205460ff1681565b3480156102c3575f80fd5b506101f26102d2366004612b55565b6107ba565b3480156102e2575f80fd5b5061030a7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610276565b34801561032d575f80fd5b5061030a7f000000000000000000000000000000000000000000000000000000000000000081565b6101f2610363366004612b8c565b61088c565b3480156101f2575f80fd5b34801561037e575f80fd5b506101f2610c39565b348015610392575f80fd5b506101f26103a1366004612b55565b610cb0565b3480156103b1575f80fd5b506103bb60cc5481565b604051908152602001610276565b3480156103d4575f80fd5b506101f26103e3366004612b33565b610da3565b3480156103f3575f80fd5b506101f2610402366004612bdc565b610e6c565b348015610412575f80fd5b506033546001600160a01b031661030a565b34801561042f575f80fd5b506103bb60c95481565b348015610444575f80fd5b5061030a7f000000000000000000000000000000000000000000000000000000000000000081565b348015610477575f80fd5b506101f2610486366004612bdc565b610ef4565b348015610496575f80fd5b506101f2610f9a565b3480156104aa575f80fd5b5061026a6104b9366004612b33565b60cb6020525f908152604090205460ff1681565b3480156104d8575f80fd5b506101f26104e7366004612bf3565b611078565b3480156104f7575f80fd5b50610102546001600160a01b031661030a565b348015610515575f80fd5b506101f261115f565b348015610529575f80fd5b5061030a7f000000000000000000000000000000000000000000000000000000000000000081565b34801561055c575f80fd5b506065546001600160a01b031661030a565b348015610579575f80fd5b5060cf5461030a906001600160a01b031681565b348015610598575f80fd5b506101f26105a7366004612b33565b611179565b3480156105b7575f80fd5b506101f26105c6366004612bdc565b6111ea565b3480156105d6575f80fd5b5061030a6105e5366004612bdc565b611269565b6106286040518060400160405280601881526020017f7061757365466f7263655641494c697175696461746528290000000000000000815250611291565b60cd5460ff166106925760405162461bcd60e51b815260206004820152602a60248201527f466f726365204c69717569646174696f6e206f662056414920697320616c726560448201526918591e4814185d5cd95960b21b60648201526084015b60405180910390fd5b60cd805460ff1916905560405133907f42388332be4beb2ad2ff83017119b9d702ce7fbaf67e18e53a137508cf967e43905f90a2565b6106d061132d565b6106d981611387565b50565b6106e461132d565b6106d98161144d565b61072b6040518060400160405280601c81526020017f72657374726963744c69717569646174696f6e28616464726573732900000000815250611291565b6001600160a01b0381165f90815260cb602052604090205460ff161561076f5760405163404fe9fb60e11b81526001600160a01b0382166004820152602401610689565b6001600160a01b0381165f81815260cb6020526040808220805460ff19166001179055517f614c47c82976e8f145409efb6366fe2cefa323f389ed9354649262e38dbb35899190a250565b6107db604051806060016040528060248152602001612ee160249139611291565b6001600160a01b038083165f90815260ca602090815260408083209385168352929052205460ff166108335760405163435aad4360e01b81526001600160a01b03808416600483015282166024820152604401610689565b6001600160a01b038083165f81815260ca6020908152604080832094861680845294909152808220805460ff19169055517f6b0d38eafddac0d37e0aff8f4bbd5f3a3cfe124b8eabea27558bffc931ac05b59190a35050565b6108946114b1565b61089d8361150a565b6108a78333611531565b604051638e8f294b60e01b81526001600160a01b0382811660048301525f917f000000000000000000000000000000000000000000000000000000000000000090911690638e8f294b90602401606060405180830381865afa15801561090f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109339190612c46565b505090508061096057604051635a9a1eb960e11b81526001600160a01b0383166004820152602401610689565b61096a85856115ae565b6040516370a0823160e01b81523060048201525f906001600160a01b038416906370a0823190602401602060405180830381865afa1580156109ae573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109d29190612c7f565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316866001600160a01b031603610abc57348414610a365760405163dd97100160e01b815260048101859052346024820152604401610689565b604051635572051560e11b81526001600160a01b03868116600483015284811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063aae40a2a9034906044015f604051808303818588803b158015610aa0575f80fd5b505af1158015610ab2573d5f803e3d5ffd5b5050505050610b38565b3415610ae35760405163dd97100160e01b81525f6004820152346024820152604401610689565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316866001600160a01b031603610b2c57610b2785858561180c565b610b38565b610b38868686866119ba565b6040516370a0823160e01b81523060048201525f906001600160a01b038516906370a0823190602401602060405180830381865afa158015610b7c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ba09190612c7f565b90505f610bad8383612caa565b90505f80610bbb8784611b98565b91509150610bc7611d57565b604080518981526001600160a01b038c8116602083015291810184905260608101839052818916918b169033907fdd091524d794aecdb5235b2d816620c2598790835e0f3849808504c2dcb4f1a99060800160405180910390a4505050505050610c316001609755565b50505050565b565b60655433906001600160a01b03168114610ca75760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b6064820152608401610689565b6106d981611f30565b610cee6040518060400160405280601f81526020017f616464546f416c6c6f776c69737428616464726573732c616464726573732900815250611291565b6001600160a01b038083165f90815260ca602090815260408083209385168352929052205460ff1615610d475760405163071df39160e01b81526001600160a01b03808416600483015282166024820152604401610689565b6001600160a01b038083165f81815260ca6020908152604080832094861680845294909152808220805460ff19166001179055517ffe40417b78788808c927141f806ef5082e7bba0f7790f2e85b811621a91094339190a35050565b610de16040518060400160405280601e81526020017f756e72657374726963744c69717569646174696f6e2861646472657373290000815250611291565b6001600160a01b0381165f90815260cb602052604090205460ff16610e2457604051633bf9d98960e11b81526001600160a01b0382166004820152602401610689565b6001600160a01b0381165f81815260cb6020526040808220805460ff19169055517fe1f03de94d16c262d2f0e89a1c42ede8899d540ac992cf53495a5cf29c2896af9190a250565b610eaa6040518060400160405280601b81526020017f736574547265617375727950657263656e742875696e74323536290000000000815250611291565b610eb381611f49565b60c95460408051918252602082018390527f0e9a1641744b21c49e4183ab9ce941d420e05a05a446c71875fb07814f362c1a910160405180910390a160c955565b610f15604051806060016040528060248152602001612f0560249139611291565b5f8111610f595760405162461bcd60e51b8152602060048201526012602482015271496e76616c6964206368756e6b2073697a6560701b6044820152606401610689565b60d05460408051918252602082018390527fe5eef53e396f0cb79322e15e72b6c6613ae3e62c9079f5a12f2c410867c28b2c910160405180910390a160d055565b610fd86040518060400160405280601981526020017f726573756d65466f7263655641494c6971756964617465282900000000000000815250611291565b60cd5460ff161561103f5760405162461bcd60e51b815260206004820152602b60248201527f466f726365204c69717569646174696f6e206f662056414920697320616c726560448201526a18591e481c995cdd5b595960aa1b6064820152608401610689565b60cd805460ff1916600117905560405133907fd4b8f320ada24d048ee6c25c53a31aa20b2ea37fa25542e6e239c80d31d5b60b905f90a2565b5f54600290610100900460ff1615801561109857505f5460ff8083169116105b6110fb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610689565b5f805461ffff191660ff83161761010017905561111984848461200a565b5f805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050565b6111676114b1565b61116f611d57565b610c376001609755565b61118161132d565b606580546001600160a01b0383166001600160a01b031990911681179091556111b26033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6112286040518060400160405280601e81526020017f7365744d696e4c6971756964617461626c655641492875696e74323536290000815250611291565b60cc5460408051918252602082018390527f8df018dc5fe866d192a3f4d9f16dbfdb38f58a7470a65b92262ccc008c55fff0910160405180910390a160cc55565b60ce8181548110611278575f80fd5b5f918252602090912001546001600160a01b0316905081565b610102546040516318c5e8ab60e01b81525f916001600160a01b0316906318c5e8ab906112c49033908690600401612ceb565b602060405180830381865afa1580156112df573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113039190612d0e565b90508061132957333083604051634a3fa29360e01b815260040161068993929190612d27565b5050565b6033546001600160a01b03163314610c375760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610689565b6001600160a01b0381166113eb5760405162461bcd60e51b815260206004820152602560248201527f696e76616c696420616365737320636f6e74726f6c206d616e61676572206164604482015264647265737360d81b6064820152608401610689565b61010280546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f66fd58e82f7b31a2a5c30e0888f3093efe4e111b00cd2b0c31fe014601293aa0910160405180910390a15050565b6114568161150a565b60cf546040516001600160a01b038084169216907fafec95c8612496c3ecf5dddc71e393528fe29bd145fbaf9c6b496d78d7e2d79b905f90a360cf80546001600160a01b0319166001600160a01b0392909216919091179055565b6002609754036115035760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610689565b6002609755565b6001600160a01b0381166106d9576040516342bcdf7f60e11b815260040160405180910390fd5b6001600160a01b0382165f90815260cb602052604090205460ff16801561157d57506001600160a01b038083165f90815260ca602090815260408083209385168352929052205460ff16155b156113295760405163074c80eb60e51b81526001600160a01b03808416600483015282166024820152604401610689565b604051633c617c9160e11b81526001600160a01b0382811660048301525f917f0000000000000000000000000000000000000000000000000000000000000000909116906378c2f92290602401602060405180830381865afa158015611616573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061163a9190612c7f565b90505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e85a29607f000000000000000000000000000000000000000000000000000000000000000060056040518363ffffffff1660e01b81526004016116ac929190612d6f565b602060405180830381865afa1580156116c7573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116eb9190612d0e565b60405163460d60c560e11b81526001600160a01b0386811660048301529192505f917f00000000000000000000000000000000000000000000000000000000000000001690638c1ac18a90602401602060405180830381865afa158015611754573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906117789190612d0e565b905080806117835750815b80611791575060cd5460ff16155b8061179d575060cc5483105b806117d957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b0316145b156117e5575050505050565b60cc546040516329eb1e8760e01b8152610689918591600401918252602082015260400190565b5f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cbeb2b286040518163ffffffff1660e01b8152600401602060405180830381865afa158015611869573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061188d9190612d9c565b90506118a46001600160a01b038216333086612053565b6118d86001600160a01b0382167f00000000000000000000000000000000000000000000000000000000000000005f6120be565b61190c6001600160a01b0382167f0000000000000000000000000000000000000000000000000000000000000000856120be565b6040516311b3d5e760e01b81526001600160a01b0385811660048301526024820185905283811660448301525f917f0000000000000000000000000000000000000000000000000000000000000000909116906311b3d5e79060640160408051808303815f875af1158015611983573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906119a79190612db7565b5090506119b3816121d1565b5050505050565b604051638e8f294b60e01b81526001600160a01b0385811660048301525f917f000000000000000000000000000000000000000000000000000000000000000090911690638e8f294b90602401606060405180830381865afa158015611a22573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a469190612c46565b5050905080611a7357604051635a9a1eb960e11b81526001600160a01b0386166004820152602401610689565b5f856001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ab0573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611ad49190612d9c565b90505f611ae3823330886121f5565b9050611af96001600160a01b038316885f6120be565b611b0d6001600160a01b03831688836120be565b604051637af1e23160e11b81526001600160a01b038781166004830152602482018390528581166044830152611b8f919089169063f5e3c462906064016020604051808303815f875af1158015611b66573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611b8a9190612c7f565b6121d1565b50505050505050565b5f80611ba3836122f9565b60405163a9059cbb60e01b81523360048201526024810182905291935091506001600160a01b0385169063a9059cbb906044016020604051808303815f875af1158015611bf2573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611c169190612d0e565b611c425760405163241165bb60e21b815230600482015233602482015260448101829052606401610689565b5f82118015611c585750611c5684836123ab565b155b15611d01575f5b60ce54811015611ca757846001600160a01b031660ce8281548110611c8657611c86612dd9565b5f918252602090912001546001600160a01b031614611ca757600101611c5f565b60ce548103611cfb5760ce80546001810182555f919091527fd36cd1c74ef8d7326d8021b776c18fb5a5724b7f7bc93c2f42e43e10ef27d12a0180546001600160a01b0319166001600160a01b0387161790555b50611d50565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b031603611d4757611d42612436565b611d50565b611d50846125ea565b9250929050565b60ce5460d0545f90821015611d6c5781611d70565b60d0545b9050805b8015611f24575f60ce611d88600184612caa565b81548110611d9857611d98612dd9565b5f9182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a0823190602401602060405180830381865afa158015611de8573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611e0c9190612c7f565b9050611e1882826123ab565b15611f1a577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031603611e6357611e5e612436565b611e6c565b611e6c826125ea565b60ce8054611e7c90600190612caa565b81548110611e8c57611e8c612dd9565b5f918252602090912001546001600160a01b031660ce611ead600186612caa565b81548110611ebd57611ebd612dd9565b905f5260205f20015f6101000a8154816001600160a01b0302191690836001600160a01b0316021790555060ce805480611ef957611ef9612ded565b5f8281526020902081015f1990810180546001600160a01b03191690550190555b50505f1901611d74565b505050565b6001609755565b606580546001600160a01b03191690556106d98161279a565b5f670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634ada90af6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611faf573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611fd39190612c7f565b611fdd9190612caa565b90508082111561132957604051635659cb3b60e01b81526004810182905260248101839052604401610689565b5f54610100900460ff166120305760405162461bcd60e51b815260040161068990612e01565b6120386127eb565b612040612819565b61204a8382612847565b611f2482612884565b6040516001600160a01b0380851660248301528316604482015260648101829052610c319085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526128aa565b8015806121365750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015612110573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906121349190612c7f565b155b6121a15760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610689565b6040516001600160a01b038316602482015260448101829052611f2490849063095ea7b360e01b90606401612087565b806121d95750565b60405163125a96ab60e01b815260048101829052602401610689565b6040516370a0823160e01b81526001600160a01b0383811660048301525f9182918716906370a0823190602401602060405180830381865afa15801561223d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906122619190612c7f565b90506122786001600160a01b038716868686612053565b6040516370a0823160e01b81526001600160a01b0385811660048301528291908816906370a0823190602401602060405180830381865afa1580156122bf573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906122e39190612c7f565b6122ed9190612caa565b9150505b949350505050565b5f805f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634ada90af6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612358573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061237c9190612c7f565b90508060c9548561238d9190612e4c565b6123979190612e63565b92506123a38385612caa565b915050915091565b60405163db006a7560e01b8152600481018290525f906001600160a01b0384169063db006a75906024016020604051808303815f875af192505050801561240f575060408051601f3d908101601f1916820190925261240c91810190612c7f565b60015b61241a57505f612430565b805f0361242b576001915050612430565b5f9150505b92915050565b5f4790507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004015f604051808303818588803b158015612493575f80fd5b505af11580156124a5573d5f803e3d5ffd5b505060cf546124e593506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811693501690508361297d565b60cf546040516305bebb3b60e21b81526001600160a01b03909116906316faecec9061255a907f0000000000000000000000000000000000000000000000000000000000000000907f000000000000000000000000000000000000000000000000000000000000000090600190600401612e82565b5f604051808303815f87803b158015612571575f80fd5b505af1158015612583573d5f803e3d5ffd5b50506040518381526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692503391507fb68163184d017d69dff908f587b51f68dc2689426509efd546fbf77b518cc8769060200160405180910390a350565b5f816001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015612627573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061264b9190612d9c565b6040516370a0823160e01b81523060048201529091505f906001600160a01b038316906370a0823190602401602060405180830381865afa158015612692573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906126b69190612c7f565b60cf549091506126d3906001600160a01b0384811691168361297d565b60cf546040516305bebb3b60e21b81526001600160a01b03909116906316faecec90612728907f0000000000000000000000000000000000000000000000000000000000000000908690600190600401612e82565b5f604051808303815f87803b15801561273f575f80fd5b505af1158015612751573d5f803e3d5ffd5b50506040518381526001600160a01b03851692503391507fb68163184d017d69dff908f587b51f68dc2689426509efd546fbf77b518cc8769060200160405180910390a3505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b5f54610100900460ff166128115760405162461bcd60e51b815260040161068990612e01565b610c376129ad565b5f54610100900460ff1661283f5760405162461bcd60e51b815260040161068990612e01565b610c376129dc565b5f54610100900460ff1661286d5760405162461bcd60e51b815260040161068990612e01565b61287682611f49565b60c98290556113298161144d565b5f54610100900460ff166106d05760405162461bcd60e51b815260040161068990612e01565b5f6128fe826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612a029092919063ffffffff16565b905080515f148061291e57508080602001905181019061291e9190612d0e565b611f245760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610689565b6040516001600160a01b038316602482015260448101829052611f2490849063a9059cbb60e01b90606401612087565b5f54610100900460ff166129d35760405162461bcd60e51b815260040161068990612e01565b610c3733611f30565b5f54610100900460ff16611f295760405162461bcd60e51b815260040161068990612e01565b60606122f184845f85855f80866001600160a01b03168587604051612a279190612eb8565b5f6040518083038185875af1925050503d805f8114612a61576040519150601f19603f3d011682016040523d82523d5f602084013e612a66565b606091505b5091509150612a7787838387612a82565b979650505050505050565b60608315612af05782515f03612ae9576001600160a01b0385163b612ae95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610689565b50816122f1565b6122f18383815115612b055781518083602001fd5b8060405162461bcd60e51b81526004016106899190612ece565b6001600160a01b03811681146106d9575f80fd5b5f60208284031215612b43575f80fd5b8135612b4e81612b1f565b9392505050565b5f8060408385031215612b66575f80fd5b8235612b7181612b1f565b91506020830135612b8181612b1f565b809150509250929050565b5f805f8060808587031215612b9f575f80fd5b8435612baa81612b1f565b93506020850135612bba81612b1f565b9250604085013591506060850135612bd181612b1f565b939692955090935050565b5f60208284031215612bec575f80fd5b5035919050565b5f805f60608486031215612c05575f80fd5b833592506020840135612c1781612b1f565b91506040840135612c2781612b1f565b809150509250925092565b80518015158114612c41575f80fd5b919050565b5f805f60608486031215612c58575f80fd5b612c6184612c32565b925060208401519150612c7660408501612c32565b90509250925092565b5f60208284031215612c8f575f80fd5b5051919050565b634e487b7160e01b5f52601160045260245ffd5b8181038181111561243057612430612c96565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b6001600160a01b03831681526040602082018190525f906122f190830184612cbd565b5f60208284031215612d1e575f80fd5b612b4e82612c32565b6001600160a01b038481168252831660208201526060604082018190525f90612d5290830184612cbd565b95945050505050565b634e487b7160e01b5f52602160045260245ffd5b6001600160a01b03831681526040810160098310612d8f57612d8f612d5b565b8260208301529392505050565b5f60208284031215612dac575f80fd5b8151612b4e81612b1f565b5f8060408385031215612dc8575f80fd5b505080516020909101519092909150565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52603160045260245ffd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b808202811582820484141761243057612430612c96565b5f82612e7d57634e487b7160e01b5f52601260045260245ffd5b500490565b6001600160a01b038481168252831660208201526060810160028310612eaa57612eaa612d5b565b826040830152949350505050565b5f82518060208501845e5f920191825250919050565b602081525f612b4e6020830184612cbd56fe72656d6f766546726f6d416c6c6f776c69737428616464726573732c616464726573732973657450656e64696e6752656465656d4368756e6b4c656e6774682875696e7432353629a264697066735822122036c1b58d861bb545d2903eb5e278b04e350de628a37809859f0e638c70759fc264736f6c63430008190033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "addToAllowlist(address,address)": {
        "params": {
          "borrower": "The address of the liquidator"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor",
        "params": {
          "comptroller_": "The address of the Comptroller contract",
          "vBnb_": "The address of the VBNB",
          "wBNB_": "The address of wBNB"
        }
      },
      "initialize(uint256,address,address)": {
        "params": {
          "accessControlManager_": "address of access control manager",
          "protocolShareReserve_": "The address of the protocol share reserve contract",
          "treasuryPercentMantissa_": "Treasury share, scaled by 1e18 (e.g. 0.2 * 1e18 for 20%)"
        }
      },
      "liquidateBorrow(address,address,uint256,address)": {
        "params": {
          "borrower": "The address of the borrower",
          "repayAmount": "The amount to repay on behalf of the borrower",
          "vToken": "Borrowed vToken",
          "vTokenCollateral": "The collateral to seize"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "removeFromAllowlist(address,address)": {
        "params": {
          "borrower": "The address of the liquidator"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "restrictLiquidation(address)": {
        "details": "Use {addTo,removeFrom}AllowList to configure the allowed addresses.",
        "params": {
          "borrower": "The address of the borrower"
        }
      },
      "setAccessControlManager(address)": {
        "custom:access": "Only Governance",
        "custom:event": "Emits NewAccessControlManager event",
        "details": "Admin function to set address of AccessControlManager",
        "params": {
          "accessControlManager_": "The new address of the AccessControlManager"
        }
      },
      "setMinLiquidatableVAI(uint256)": {
        "params": {
          "minLiquidatableVAI_": "New address for the access control"
        }
      },
      "setPendingRedeemChunkLength(uint256)": {
        "params": {
          "newLength_": "Length of the chunk"
        }
      },
      "setProtocolShareReserve(address)": {
        "params": {
          "protocolShareReserve_": "The address of the protocol share reserve contract"
        }
      },
      "setTreasuryPercent(uint256)": {
        "params": {
          "newTreasuryPercentMantissa": "New treasury percent (scaled by 10^18)."
        }
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      },
      "unrestrictLiquidation(address)": {
        "details": "Does not impact the allowedLiquidatorsByAccount mapping for the borrower, just turns off the check.",
        "params": {
          "borrower": "The address of the borrower"
        }
      }
    },
    "stateVariables": {
      "MANTISSA_ONE": {
        "details": "A unit (literal one) in EXP_SCALE, usually used in additions/subtractions"
      },
      "comptroller": {
        "custom:oz-upgrades-unsafe-allow": "state-variable-immutable"
      },
      "vBnb": {
        "custom:oz-upgrades-unsafe-allow": "state-variable-immutable"
      },
      "vaiController": {
        "custom:oz-upgrades-unsafe-allow": "state-variable-immutable"
      },
      "wBNB": {
        "custom:oz-upgrades-unsafe-allow": "state-variable-immutable"
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AllowlistEntryNotFound(address,address)": [
        {
          "notice": "Thrown if trying to remove a liquidator that is not in the allowedLiquidatorsByAccount mapping"
        }
      ],
      "AlreadyAllowed(address,address)": [
        {
          "notice": "Thrown if the liquidator is already in the allowedLiquidatorsByAccount mapping"
        }
      ],
      "AlreadyRestricted(address)": [
        {
          "notice": "Thrown if trying to restrict liquidations for an already restricted borrower"
        }
      ],
      "LiquidationFailed(uint256)": [
        {
          "notice": "Thrown if the liquidation is not successful (the error code is from TokenErrorReporter)"
        }
      ],
      "LiquidationNotAllowed(address,address)": [
        {
          "notice": "Thrown if the liquidation is restricted and the liquidator is not in the allowedLiquidatorsByAccount mapping"
        }
      ],
      "MarketNotListed(address)": [
        {
          "notice": "Thrown when vToken is not listed"
        }
      ],
      "NoRestrictionsExist(address)": [
        {
          "notice": "Thrown if trying to unrestrict liquidations for a borrower that is not restricted"
        }
      ],
      "TreasuryPercentTooHigh(uint256,uint256)": [
        {
          "notice": "Thrown if trying to set treasury percent larger than the liquidation profit"
        }
      ],
      "Unauthorized(address,address,string)": [
        {
          "notice": "Thrown when the action is prohibited by AccessControlManager"
        }
      ],
      "VAIDebtTooHigh(uint256,uint256)": [
        {
          "notice": "Thrown if trying to liquidate any token when VAI debt is too high"
        }
      ],
      "VTokenTransferFailed(address,address,uint256)": [
        {
          "notice": "Thrown if VToken transfer fails after the liquidation"
        }
      ],
      "WrongTransactionAmount(uint256,uint256)": [
        {
          "notice": "Thrown if BNB amount sent with the transaction doesn't correspond to the         intended BNB repayment"
        }
      ],
      "ZeroAddressNotAllowed()": [
        {
          "notice": "Thrown if the supplied address is a zero address where it is not allowed"
        }
      ]
    },
    "events": {
      "AllowlistEntryAdded(address,address)": {
        "notice": "Emitted when a liquidator is added to the allowedLiquidatorsByAccount mapping"
      },
      "AllowlistEntryRemoved(address,address)": {
        "notice": "Emitted when a liquidator is removed from the allowedLiquidatorsByAccount mapping"
      },
      "ForceVAILiquidationPaused(address)": {
        "notice": "Emitted when force liquidation is paused"
      },
      "ForceVAILiquidationResumed(address)": {
        "notice": "Emitted when force liquidation is resumed"
      },
      "LiquidateBorrowedTokens(address,address,uint256,address,address,uint256,uint256)": {
        "notice": "Emitted when a borrow is liquidated"
      },
      "LiquidationRestricted(address)": {
        "notice": "Emitted when the liquidation is restricted for a borrower"
      },
      "LiquidationRestrictionsDisabled(address)": {
        "notice": "Emitted when the liquidation restrictions are removed for a borrower"
      },
      "NewAccessControlManager(address,address)": {
        "notice": "Emitted when access control manager contract address is changed"
      },
      "NewLiquidationTreasuryPercent(uint256,uint256)": {
        "notice": "Emitted when the percent of the seized amount that goes to treasury changes."
      },
      "NewMinLiquidatableVAI(uint256,uint256)": {
        "notice": "Emitted when the amount of minLiquidatableVAI is updated"
      },
      "NewPendingRedeemChunkLength(uint256,uint256)": {
        "notice": "Emitted when the length of chunk gets updated"
      },
      "NewProtocolShareReserve(address,address)": {
        "notice": "Emitted when new address of protocol share reserve is set"
      },
      "ProtocolLiquidationIncentiveTransferred(address,address,uint256)": {
        "notice": "Emitted when reserves are reduced from liquidator contract to protocol share reserves"
      }
    },
    "kind": "user",
    "methods": {
      "accessControlManager()": {
        "notice": "Returns the address of the access control manager contract"
      },
      "addToAllowlist(address,address)": {
        "notice": "An admin function to add the liquidator to the allowedLiquidatorsByAccount mapping for a certain         borrower. If the liquidations are restricted, only liquidators from the         allowedLiquidatorsByAccount mapping can participate in liquidating the positions of this borrower."
      },
      "allowedLiquidatorsByAccount(address,address)": {
        "notice": "Mapping of addresses allowed to liquidate an account if liquidationRestricted[borrower] == true"
      },
      "comptroller()": {
        "notice": "Address of Venus Unitroller contract."
      },
      "constructor": {
        "notice": "Constructor for the implementation contract. Sets immutable variables."
      },
      "forceVAILiquidate()": {
        "notice": "check for liquidation of VAI"
      },
      "initialize(uint256,address,address)": {
        "notice": "Initializer for the implementation contract."
      },
      "liquidateBorrow(address,address,uint256,address)": {
        "notice": "Liquidates a borrow and splits the seized amount between protocol share reserve and         liquidator. The liquidators should use this interface instead of calling         vToken.liquidateBorrow(...) directly.Checks force VAI liquidation first; vToken should be address of vaiController if vaiDebt is greater than thresholdFor BNB borrows msg.value should be equal to repayAmount; otherwise msg.value      should be zero."
      },
      "liquidationRestricted(address)": {
        "notice": "Whether the liquidations are restricted to enabled allowedLiquidatorsByAccount addresses only"
      },
      "minLiquidatableVAI()": {
        "notice": "minimum amount of VAI liquidation threshold"
      },
      "pauseForceVAILiquidate()": {
        "notice": "Pause Force Liquidation of VAI"
      },
      "pendingRedeem(uint256)": {
        "notice": "assests whose redeem is pending to reduce reserves"
      },
      "protocolShareReserve()": {
        "notice": "protocol share reserve contract address"
      },
      "reduceReserves()": {
        "notice": "Reduce the reserves of the pending accumulated reserves"
      },
      "removeFromAllowlist(address,address)": {
        "notice": "An admin function to remove the liquidator from the allowedLiquidatorsByAccount mapping of a certain         borrower. If the liquidations are restricted, this liquidator will not be         able to liquidate the positions of this borrower."
      },
      "restrictLiquidation(address)": {
        "notice": "An admin function to restrict liquidations to allowed addresses only."
      },
      "resumeForceVAILiquidate()": {
        "notice": "Resume Force Liquidation of VAI"
      },
      "setAccessControlManager(address)": {
        "notice": "Sets the address of AccessControlManager"
      },
      "setMinLiquidatableVAI(uint256)": {
        "notice": "Sets the threshold for minimum amount of vaiLiquidate"
      },
      "setPendingRedeemChunkLength(uint256)": {
        "notice": "Length of the pendingRedeem array to be consider while redeeming in Liquidation transaction"
      },
      "setProtocolShareReserve(address)": {
        "notice": "Sets protocol share reserve contract address"
      },
      "setTreasuryPercent(uint256)": {
        "notice": "Sets the new percent of the seized amount that goes to treasury. Should         be less than or equal to comptroller.liquidationIncentiveMantissa().sub(1e18)."
      },
      "treasuryPercentMantissa()": {
        "notice": "Percent of seized amount that goes to treasury."
      },
      "unrestrictLiquidation(address)": {
        "notice": "An admin function to remove restrictions for liquidations."
      },
      "vBnb()": {
        "notice": "Address of vBNB contract."
      },
      "vaiController()": {
        "notice": "Address of VAIUnitroller contract."
      },
      "wBNB()": {
        "notice": "Address of wBNB contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 246,
        "contract": "contracts/Liquidator/Liquidator.sol:Liquidator",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 249,
        "contract": "contracts/Liquidator/Liquidator.sol:Liquidator",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1516,
        "contract": "contracts/Liquidator/Liquidator.sol:Liquidator",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 118,
        "contract": "contracts/Liquidator/Liquidator.sol:Liquidator",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 238,
        "contract": "contracts/Liquidator/Liquidator.sol:Liquidator",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11,
        "contract": "contracts/Liquidator/Liquidator.sol:Liquidator",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 105,
        "contract": "contracts/Liquidator/Liquidator.sol:Liquidator",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 551,
        "contract": "contracts/Liquidator/Liquidator.sol:Liquidator",
        "label": "_status",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 620,
        "contract": "contracts/Liquidator/Liquidator.sol:Liquidator",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 22528,
        "contract": "contracts/Liquidator/Liquidator.sol:Liquidator",
        "label": "treasuryPercentMantissa",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 22535,
        "contract": "contracts/Liquidator/Liquidator.sol:Liquidator",
        "label": "allowedLiquidatorsByAccount",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 22540,
        "contract": "contracts/Liquidator/Liquidator.sol:Liquidator",
        "label": "liquidationRestricted",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 22543,
        "contract": "contracts/Liquidator/Liquidator.sol:Liquidator",
        "label": "minLiquidatableVAI",
        "offset": 0,
        "slot": "204",
        "type": "t_uint256"
      },
      {
        "astId": 22546,
        "contract": "contracts/Liquidator/Liquidator.sol:Liquidator",
        "label": "forceVAILiquidate",
        "offset": 0,
        "slot": "205",
        "type": "t_bool"
      },
      {
        "astId": 22550,
        "contract": "contracts/Liquidator/Liquidator.sol:Liquidator",
        "label": "pendingRedeem",
        "offset": 0,
        "slot": "206",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 22553,
        "contract": "contracts/Liquidator/Liquidator.sol:Liquidator",
        "label": "protocolShareReserve",
        "offset": 0,
        "slot": "207",
        "type": "t_address"
      },
      {
        "astId": 22556,
        "contract": "contracts/Liquidator/Liquidator.sol:Liquidator",
        "label": "pendingRedeemChunkLength",
        "offset": 0,
        "slot": "208",
        "type": "t_uint256"
      },
      {
        "astId": 22561,
        "contract": "contracts/Liquidator/Liquidator.sol:Liquidator",
        "label": "__gap",
        "offset": 0,
        "slot": "209",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5863,
        "contract": "contracts/Liquidator/Liquidator.sol:Liquidator",
        "label": "_accessControlManager",
        "offset": 0,
        "slot": "258",
        "type": "t_contract(IAccessControlManagerV8)6048"
      },
      {
        "astId": 5868,
        "contract": "contracts/Liquidator/Liquidator.sol:Liquidator",
        "label": "__gap",
        "offset": 0,
        "slot": "259",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAccessControlManagerV8)6048": {
        "encoding": "inplace",
        "label": "contract IAccessControlManagerV8",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
