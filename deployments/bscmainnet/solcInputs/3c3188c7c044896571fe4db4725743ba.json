{
  "language": "Solidity",
  "sources": {
    "contracts/InterestRateModels/InterestRateModelV8.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity 0.8.25;\n\n/**\n * @title Venus's InterestRateModelV8 Interface\n * @author Venus\n */\nabstract contract InterestRateModelV8 {\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\n    bool public constant isInterestRateModel = true;\n\n    /**\n     * @notice Calculates the current borrow interest rate per block\n     * @param cash The total amount of cash the market has\n     * @param borrows The total amount of borrows the market has outstanding\n     * @param reserves The total amnount of reserves the market has\n     * @return The borrow rate per block (as a percentage, and scaled by 1e18)\n     */\n    function getBorrowRate(uint256 cash, uint256 borrows, uint256 reserves) external view virtual returns (uint256);\n\n    /**\n     * @notice Calculates the current supply interest rate per block\n     * @param cash The total amount of cash the market has\n     * @param borrows The total amount of borrows the market has outstanding\n     * @param reserves The total amnount of reserves the market has\n     * @param reserveFactorMantissa The current reserve factor the market has\n     * @return The supply rate per block (as a percentage, and scaled by 1e18)\n     */\n    function getSupplyRate(\n        uint256 cash,\n        uint256 borrows,\n        uint256 reserves,\n        uint256 reserveFactorMantissa\n    ) external view virtual returns (uint256);\n}\n"
    },
    "contracts/InterestRateModels/TwoKinksInterestRateModel.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity 0.8.25;\n\nimport { InterestRateModelV8 } from \"./InterestRateModelV8.sol\";\n\n/**\n * @title TwoKinksInterestRateModel\n * @author Venus\n * @notice An interest rate model with two different slope increase or decrease each after a certain utilization threshold called **kink** is reached.\n */\ncontract TwoKinksInterestRateModel is InterestRateModelV8 {\n    int256 public immutable BLOCKS_PER_YEAR;\n\n    ////////////////////// SLOPE 1 //////////////////////\n\n    /**\n     * @notice The multiplier of utilization rate per block that gives the slope 1 of the interest rate scaled by EXP_SCALE\n     */\n    int256 public immutable MULTIPLIER_PER_BLOCK;\n\n    /**\n     * @notice The base interest rate per block which is the y-intercept when utilization rate is 0 scaled by EXP_SCALE\n     */\n    int256 public immutable BASE_RATE_PER_BLOCK;\n\n    ////////////////////// SLOPE 2 //////////////////////\n\n    /**\n     * @notice The utilization point at which the multiplier2 is applied\n     */\n    int256 public immutable KINK_1;\n\n    /**\n     * @notice The multiplier of utilization rate per block that gives the slope 2 of the interest rate scaled by EXP_SCALE\n     */\n    int256 public immutable MULTIPLIER_2_PER_BLOCK;\n\n    /**\n     * @notice The base interest rate per block which is the y-intercept when utilization rate hits KINK_1 scaled by EXP_SCALE\n     */\n    int256 public immutable BASE_RATE_2_PER_BLOCK;\n\n    /**\n     * @notice The maximum kink interest rate scaled by EXP_SCALE\n     */\n    int256 public immutable RATE_1;\n\n    ////////////////////// SLOPE 3 //////////////////////\n\n    /**\n     * @notice The utilization point at which the jump multiplier is applied\n     */\n    int256 public immutable KINK_2;\n\n    /**\n     * @notice The multiplier of utilization rate per block that gives the slope 3 of interest rate scaled by EXP_SCALE\n     */\n    int256 public immutable JUMP_MULTIPLIER_PER_BLOCK;\n\n    /**\n     * @notice The maximum kink interest rate scaled by EXP_SCALE\n     */\n    int256 public immutable RATE_2;\n\n    /// @notice Base unit for computations, usually used in scaling (multiplications, divisions)\n    uint256 internal constant EXP_SCALE = 1e18;\n\n    /**\n     * @notice Thrown when a negative value is not allowed\n     */\n    error NegativeValueNotAllowed();\n\n    /**\n     * @notice Thrown when the kink points are not in the correct order\n     */\n    error InvalidKink();\n\n    /**\n     * @notice Construct an interest rate model\n     * @param baseRatePerYear_ The approximate target base APR, as a mantissa (scaled by EXP_SCALE)\n     * @param multiplierPerYear_ The rate of increase or decrease in interest rate wrt utilization (scaled by EXP_SCALE)\n     * @param kink1_ The utilization point at which the multiplier2 is applied\n     * @param multiplier2PerYear_ The rate of increase or decrease in interest rate wrt utilization after hitting KINK_1 (scaled by EXP_SCALE)\n     * @param baseRate2PerYear_ The additional base APR after hitting KINK_1, as a mantissa (scaled by EXP_SCALE)\n     * @param kink2_ The utilization point at which the jump multiplier is applied\n     * @param jumpMultiplierPerYear_ The multiplier after hitting KINK_2\n     * @param blocksPerYear_ The approximate number of blocks per year to assume\n     */\n    constructor(\n        int256 baseRatePerYear_,\n        int256 multiplierPerYear_,\n        int256 kink1_,\n        int256 multiplier2PerYear_,\n        int256 baseRate2PerYear_,\n        int256 kink2_,\n        int256 jumpMultiplierPerYear_,\n        int256 blocksPerYear_\n    ) {\n        if (baseRatePerYear_ < 0 || baseRate2PerYear_ < 0) {\n            revert NegativeValueNotAllowed();\n        }\n\n        if (kink2_ <= kink1_ || kink1_ <= 0) {\n            revert InvalidKink();\n        }\n\n        BLOCKS_PER_YEAR = blocksPerYear_;\n        BASE_RATE_PER_BLOCK = baseRatePerYear_ / BLOCKS_PER_YEAR;\n        MULTIPLIER_PER_BLOCK = multiplierPerYear_ / BLOCKS_PER_YEAR;\n        KINK_1 = kink1_;\n        MULTIPLIER_2_PER_BLOCK = multiplier2PerYear_ / BLOCKS_PER_YEAR;\n        BASE_RATE_2_PER_BLOCK = baseRate2PerYear_ / BLOCKS_PER_YEAR;\n        KINK_2 = kink2_;\n        JUMP_MULTIPLIER_PER_BLOCK = jumpMultiplierPerYear_ / BLOCKS_PER_YEAR;\n\n        int256 expScale = int256(EXP_SCALE);\n        RATE_1 = (((KINK_1 * MULTIPLIER_PER_BLOCK) / expScale) + BASE_RATE_PER_BLOCK);\n\n        int256 slope2Util;\n        unchecked {\n            slope2Util = KINK_2 - KINK_1;\n        }\n        RATE_2 = ((slope2Util * MULTIPLIER_2_PER_BLOCK) / expScale) + BASE_RATE_2_PER_BLOCK;\n    }\n\n    /**\n     * @notice Calculates the current borrow rate per slot (block)\n     * @param cash The amount of cash in the market\n     * @param borrows The amount of borrows in the market\n     * @param reserves The amount of reserves in the market\n     * @return The borrow rate percentage per slot (block) as a mantissa (scaled by EXP_SCALE)\n     */\n    function getBorrowRate(uint256 cash, uint256 borrows, uint256 reserves) external view override returns (uint256) {\n        return _getBorrowRate(cash, borrows, reserves);\n    }\n\n    /**\n     * @notice Calculates the current supply rate per slot (block)\n     * @param cash The amount of cash in the market\n     * @param borrows The amount of borrows in the market\n     * @param reserves The amount of reserves in the market\n     * @param reserveFactorMantissa The current reserve factor for the market\n     * @return The supply rate percentage per slot (block) as a mantissa (scaled by EXP_SCALE)\n     */\n    function getSupplyRate(\n        uint256 cash,\n        uint256 borrows,\n        uint256 reserves,\n        uint256 reserveFactorMantissa\n    ) public view virtual override returns (uint256) {\n        uint256 oneMinusReserveFactor = EXP_SCALE - reserveFactorMantissa;\n        uint256 borrowRate = _getBorrowRate(cash, borrows, reserves);\n        uint256 rateToPool = (borrowRate * oneMinusReserveFactor) / EXP_SCALE;\n        return (utilizationRate(cash, borrows, reserves) * rateToPool) / EXP_SCALE;\n    }\n\n    /**\n     * @notice Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`\n     * @param cash The amount of cash in the market\n     * @param borrows The amount of borrows in the market\n     * @param reserves The amount of reserves in the market\n     * @return The utilization rate as a mantissa between [0, EXP_SCALE]\n     */\n    function utilizationRate(uint256 cash, uint256 borrows, uint256 reserves) public pure returns (uint256) {\n        // Utilization rate is 0 when there are no borrows\n        if (borrows == 0) {\n            return 0;\n        }\n\n        uint256 rate = (borrows * EXP_SCALE) / (cash + borrows - reserves);\n\n        if (rate > EXP_SCALE) {\n            rate = EXP_SCALE;\n        }\n\n        return rate;\n    }\n\n    /**\n     * @notice Calculates the current borrow rate per slot (block), with the error code expected by the market\n     * @param cash The amount of cash in the market\n     * @param borrows The amount of borrows in the market\n     * @param reserves The amount of reserves in the market\n     * @return The borrow rate percentage per slot (block) as a mantissa (scaled by EXP_SCALE)\n     */\n    function _getBorrowRate(uint256 cash, uint256 borrows, uint256 reserves) internal view returns (uint256) {\n        int256 util = int256(utilizationRate(cash, borrows, reserves));\n        int256 expScale = int256(EXP_SCALE);\n\n        if (util < KINK_1) {\n            return _minCap(((util * MULTIPLIER_PER_BLOCK) / expScale) + BASE_RATE_PER_BLOCK);\n        } else if (util < KINK_2) {\n            int256 slope2Util;\n            unchecked {\n                slope2Util = util - KINK_1;\n            }\n            int256 rate2 = ((slope2Util * MULTIPLIER_2_PER_BLOCK) / expScale) + BASE_RATE_2_PER_BLOCK;\n\n            return _minCap(RATE_1 + rate2);\n        } else {\n            int256 slope3Util;\n            unchecked {\n                slope3Util = util - KINK_2;\n            }\n            int256 rate3 = ((slope3Util * JUMP_MULTIPLIER_PER_BLOCK) / expScale);\n\n            return _minCap(RATE_1 + RATE_2 + rate3);\n        }\n    }\n\n    /**\n     * @notice Returns 0 if number is less than 0, otherwise returns the input\n     * @param number The first number\n     * @return The maximum of 0 and input number\n     */\n    function _minCap(int256 number) internal pure returns (uint256) {\n        int256 zero;\n        return uint256(number > zero ? number : zero);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
