{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./OwnableUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership} and {acceptOwnership}.\n *\n * This module is used through inheritance. It will make available all functions\n * from parent (Ownable).\n */\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    function __Ownable2Step_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() public virtual {\n        address sender = _msgSender();\n        require(pendingOwner() == sender, \"Ownable2Step: caller is not the new owner\");\n        _transferOwnership(sender);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../extensions/IERC20PermitUpgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20PermitUpgradeable token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCastUpgradeable {\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        require(value <= type(uint248).max, \"SafeCast: value doesn't fit in 248 bits\");\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        require(value <= type(uint240).max, \"SafeCast: value doesn't fit in 240 bits\");\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        require(value <= type(uint232).max, \"SafeCast: value doesn't fit in 232 bits\");\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        require(value <= type(uint216).max, \"SafeCast: value doesn't fit in 216 bits\");\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        require(value <= type(uint208).max, \"SafeCast: value doesn't fit in 208 bits\");\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        require(value <= type(uint200).max, \"SafeCast: value doesn't fit in 200 bits\");\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        require(value <= type(uint192).max, \"SafeCast: value doesn't fit in 192 bits\");\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        require(value <= type(uint184).max, \"SafeCast: value doesn't fit in 184 bits\");\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        require(value <= type(uint176).max, \"SafeCast: value doesn't fit in 176 bits\");\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        require(value <= type(uint168).max, \"SafeCast: value doesn't fit in 168 bits\");\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        require(value <= type(uint160).max, \"SafeCast: value doesn't fit in 160 bits\");\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        require(value <= type(uint152).max, \"SafeCast: value doesn't fit in 152 bits\");\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        require(value <= type(uint144).max, \"SafeCast: value doesn't fit in 144 bits\");\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        require(value <= type(uint136).max, \"SafeCast: value doesn't fit in 136 bits\");\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        require(value <= type(uint120).max, \"SafeCast: value doesn't fit in 120 bits\");\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        require(value <= type(uint112).max, \"SafeCast: value doesn't fit in 112 bits\");\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        require(value <= type(uint104).max, \"SafeCast: value doesn't fit in 104 bits\");\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        require(value <= type(uint88).max, \"SafeCast: value doesn't fit in 88 bits\");\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        require(value <= type(uint80).max, \"SafeCast: value doesn't fit in 80 bits\");\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        require(value <= type(uint72).max, \"SafeCast: value doesn't fit in 72 bits\");\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        require(value <= type(uint56).max, \"SafeCast: value doesn't fit in 56 bits\");\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        require(value <= type(uint48).max, \"SafeCast: value doesn't fit in 48 bits\");\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        require(value <= type(uint40).max, \"SafeCast: value doesn't fit in 40 bits\");\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        require(value <= type(uint24).max, \"SafeCast: value doesn't fit in 24 bits\");\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     *\n     * _Available since v3.0._\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 248 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 240 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 232 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 224 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 216 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 208 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 200 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 192 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 184 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 176 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 168 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 160 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 152 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 144 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 136 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 128 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 120 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 112 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 104 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 96 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 88 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 80 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 72 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 64 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 56 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 48 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 40 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 32 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 24 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 16 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 8 bits\");\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     *\n     * _Available since v3.0._\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable2Step.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Ownable.sol\";\n\n/**\n * @dev Contract module which provides access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership} and {acceptOwnership}.\n *\n * This module is used through inheritance. It will make available all functions\n * from parent (Ownable).\n */\nabstract contract Ownable2Step is Ownable {\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() public virtual {\n        address sender = _msgSender();\n        require(pendingOwner() == sender, \"Ownable2Step: caller is not the new owner\");\n        _transferOwnership(sender);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1967.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967 {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/IERC1967.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967Upgrade is IERC1967 {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.3) (proxy/transparent/ProxyAdmin.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./TransparentUpgradeableProxy.sol\";\nimport \"../../access/Ownable.sol\";\n\n/**\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\n */\ncontract ProxyAdmin is Ownable {\n    /**\n     * @dev Returns the current implementation of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyImplementation(ITransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"implementation()\")) == 0x5c60da1b\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"5c60da1b\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Returns the current admin of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyAdmin(ITransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"admin()\")) == 0xf851a440\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"f851a440\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Changes the admin of `proxy` to `newAdmin`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the current admin of `proxy`.\n     */\n    function changeProxyAdmin(ITransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\n        proxy.changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgrade(ITransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\n        proxy.upgradeTo(implementation);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgradeAndCall(\n        ITransparentUpgradeableProxy proxy,\n        address implementation,\n        bytes memory data\n    ) public payable virtual onlyOwner {\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967Proxy.sol\";\n\n/**\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\n * does not implement this interface directly, and some of its functions are implemented by an internal dispatch\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\n * include them in the ABI so this interface must be used to interact with it.\n */\ninterface ITransparentUpgradeableProxy is IERC1967 {\n    function admin() external view returns (address);\n\n    function implementation() external view returns (address);\n\n    function changeAdmin(address) external;\n\n    function upgradeTo(address) external;\n\n    function upgradeToAndCall(address, bytes memory) external payable;\n}\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n *\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\n * inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\n * implementation.\n *\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler\n * will not check that there are no selector conflicts, due to the note above. A selector clash between any new function\n * and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could\n * render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    /**\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n     */\n    constructor(address _logic, address admin_, bytes memory _data) payable ERC1967Proxy(_logic, _data) {\n        _changeAdmin(admin_);\n    }\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     *\n     * CAUTION: This modifier is deprecated, as it could cause issues if the modified function has arguments, and the\n     * implementation provides a function with the same selector.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior\n     */\n    function _fallback() internal virtual override {\n        if (msg.sender == _getAdmin()) {\n            bytes memory ret;\n            bytes4 selector = msg.sig;\n            if (selector == ITransparentUpgradeableProxy.upgradeTo.selector) {\n                ret = _dispatchUpgradeTo();\n            } else if (selector == ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\n                ret = _dispatchUpgradeToAndCall();\n            } else if (selector == ITransparentUpgradeableProxy.changeAdmin.selector) {\n                ret = _dispatchChangeAdmin();\n            } else if (selector == ITransparentUpgradeableProxy.admin.selector) {\n                ret = _dispatchAdmin();\n            } else if (selector == ITransparentUpgradeableProxy.implementation.selector) {\n                ret = _dispatchImplementation();\n            } else {\n                revert(\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n            }\n            assembly {\n                return(add(ret, 0x20), mload(ret))\n            }\n        } else {\n            super._fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function _dispatchAdmin() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address admin = _getAdmin();\n        return abi.encode(admin);\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function _dispatchImplementation() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address implementation = _implementation();\n        return abi.encode(implementation);\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _dispatchChangeAdmin() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address newAdmin = abi.decode(msg.data[4:], (address));\n        _changeAdmin(newAdmin);\n\n        return \"\";\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     */\n    function _dispatchUpgradeTo() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address newImplementation = abi.decode(msg.data[4:], (address));\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n\n        return \"\";\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     */\n    function _dispatchUpgradeToAndCall() private returns (bytes memory) {\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\n        _upgradeToAndCall(newImplementation, data, true);\n\n        return \"\";\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * CAUTION: This function is deprecated. Use {ERC1967Upgrade-_getAdmin} instead.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev To keep this contract fully transparent, all `ifAdmin` functions must be payable. This helper is here to\n     * emulate some proxy functions being non-payable while still allowing value to pass through.\n     */\n    function _requireZeroValue() private {\n        require(msg.value == 0);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "@venusprotocol/governance-contracts/contracts/Governance/AccessControlledV8.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity 0.8.25;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\";\n\nimport \"./IAccessControlManagerV8.sol\";\n\n/**\n * @title AccessControlledV8\n * @author Venus\n * @notice This contract is helper between access control manager and actual contract. This contract further inherited by other contract (using solidity 0.8.13)\n * to integrate access controlled mechanism. It provides initialise methods and verifying access methods.\n */\nabstract contract AccessControlledV8 is Initializable, Ownable2StepUpgradeable {\n    /// @notice Access control manager contract\n    IAccessControlManagerV8 private _accessControlManager;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n\n    /// @notice Emitted when access control manager contract address is changed\n    event NewAccessControlManager(address oldAccessControlManager, address newAccessControlManager);\n\n    /// @notice Thrown when the action is prohibited by AccessControlManager\n    error Unauthorized(address sender, address calledContract, string methodSignature);\n\n    function __AccessControlled_init(address accessControlManager_) internal onlyInitializing {\n        __Ownable2Step_init();\n        __AccessControlled_init_unchained(accessControlManager_);\n    }\n\n    function __AccessControlled_init_unchained(address accessControlManager_) internal onlyInitializing {\n        _setAccessControlManager(accessControlManager_);\n    }\n\n    /**\n     * @notice Sets the address of AccessControlManager\n     * @dev Admin function to set address of AccessControlManager\n     * @param accessControlManager_ The new address of the AccessControlManager\n     * @custom:event Emits NewAccessControlManager event\n     * @custom:access Only Governance\n     */\n    function setAccessControlManager(address accessControlManager_) external onlyOwner {\n        _setAccessControlManager(accessControlManager_);\n    }\n\n    /**\n     * @notice Returns the address of the access control manager contract\n     */\n    function accessControlManager() external view returns (IAccessControlManagerV8) {\n        return _accessControlManager;\n    }\n\n    /**\n     * @dev Internal function to set address of AccessControlManager\n     * @param accessControlManager_ The new address of the AccessControlManager\n     */\n    function _setAccessControlManager(address accessControlManager_) internal {\n        require(address(accessControlManager_) != address(0), \"invalid acess control manager address\");\n        address oldAccessControlManager = address(_accessControlManager);\n        _accessControlManager = IAccessControlManagerV8(accessControlManager_);\n        emit NewAccessControlManager(oldAccessControlManager, accessControlManager_);\n    }\n\n    /**\n     * @notice Reverts if the call is not allowed by AccessControlManager\n     * @param signature Method signature\n     */\n    function _checkAccessAllowed(string memory signature) internal view {\n        bool isAllowedToCall = _accessControlManager.isAllowedToCall(msg.sender, signature);\n\n        if (!isAllowedToCall) {\n            revert Unauthorized(msg.sender, address(this), signature);\n        }\n    }\n}\n"
    },
    "@venusprotocol/governance-contracts/contracts/Governance/IAccessControlManagerV8.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.25;\n\nimport \"@openzeppelin/contracts/access/IAccessControl.sol\";\n\n/**\n * @title IAccessControlManagerV8\n * @author Venus\n * @notice Interface implemented by the `AccessControlManagerV8` contract.\n */\ninterface IAccessControlManagerV8 is IAccessControl {\n    function giveCallPermission(address contractAddress, string calldata functionSig, address accountToPermit) external;\n\n    function revokeCallPermission(\n        address contractAddress,\n        string calldata functionSig,\n        address accountToRevoke\n    ) external;\n\n    function isAllowedToCall(address account, string calldata functionSig) external view returns (bool);\n\n    function hasPermission(\n        address account,\n        address contractAddress,\n        string calldata functionSig\n    ) external view returns (bool);\n}\n"
    },
    "@venusprotocol/oracle/contracts/interfaces/OracleInterface.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.25;\n\ninterface OracleInterface {\n    function getPrice(address asset) external view returns (uint256);\n}\n\ninterface ResilientOracleInterface is OracleInterface {\n    function updatePrice(address vToken) external;\n\n    function updateAssetPrice(address asset) external;\n\n    function getUnderlyingPrice(address vToken) external view returns (uint256);\n}\n\ninterface TwapInterface is OracleInterface {\n    function updateTwap(address asset) external returns (uint256);\n}\n\ninterface BoundValidatorInterface {\n    function validatePriceWithAnchorPrice(\n        address asset,\n        uint256 reporterPrice,\n        uint256 anchorPrice\n    ) external view returns (bool);\n}\n"
    },
    "@venusprotocol/solidity-utilities/contracts/constants.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.25;\n\n/// @dev Base unit for computations, usually used in scaling (multiplications, divisions)\nuint256 constant EXP_SCALE = 1e18;\n\n/// @dev A unit (literal one) in EXP_SCALE, usually used in additions/subtractions\nuint256 constant MANTISSA_ONE = EXP_SCALE;\n\n/// @dev The approximate number of seconds per year\nuint256 constant SECONDS_PER_YEAR = 31_536_000;\n"
    },
    "@venusprotocol/solidity-utilities/contracts/MaxLoopsLimitHelper.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity 0.8.25;\n\n/**\n * @title MaxLoopsLimitHelper\n * @author Venus\n * @notice Abstract contract used to avoid collection with too many items that would generate gas errors and DoS.\n */\nabstract contract MaxLoopsLimitHelper {\n    // Limit for the loops to avoid the DOS\n    uint256 public maxLoopsLimit;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n\n    /// @notice Emitted when max loops limit is set\n    event MaxLoopsLimitUpdated(uint256 oldMaxLoopsLimit, uint256 newmaxLoopsLimit);\n\n    /// @notice Thrown an error on maxLoopsLimit exceeds for any loop\n    error MaxLoopsLimitExceeded(uint256 loopsLimit, uint256 requiredLoops);\n\n    /**\n     * @notice Set the limit for the loops can iterate to avoid the DOS\n     * @param limit Limit for the max loops can execute at a time\n     */\n    function _setMaxLoopsLimit(uint256 limit) internal {\n        require(limit > maxLoopsLimit, \"Comptroller: Invalid maxLoopsLimit\");\n\n        uint256 oldMaxLoopsLimit = maxLoopsLimit;\n        maxLoopsLimit = limit;\n\n        emit MaxLoopsLimitUpdated(oldMaxLoopsLimit, limit);\n    }\n\n    /**\n     * @notice Compare the maxLoopsLimit with number of the times loop iterate\n     * @param len Length of the loops iterate\n     * @custom:error MaxLoopsLimitExceeded error is thrown when loops length exceeds maxLoopsLimit\n     */\n    function _ensureMaxLoops(uint256 len) internal view {\n        if (len > maxLoopsLimit) {\n            revert MaxLoopsLimitExceeded(maxLoopsLimit, len);\n        }\n    }\n}\n"
    },
    "@venusprotocol/solidity-utilities/contracts/TimeManagerV8.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity 0.8.25;\n\nimport { SECONDS_PER_YEAR } from \"./constants.sol\";\n\nabstract contract TimeManagerV8 {\n    /// @notice Stores blocksPerYear if isTimeBased is true else secondsPerYear is stored\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    uint256 public immutable blocksOrSecondsPerYear;\n\n    /// @notice Acknowledges if a contract is time based or not\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    bool public immutable isTimeBased;\n\n    /// @notice Stores the current block timestamp or block number depending on isTimeBased\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    function() view returns (uint256) private immutable _getCurrentSlot;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[48] private __gap;\n\n    /// @notice Thrown when blocks per year is invalid\n    error InvalidBlocksPerYear();\n\n    /// @notice Thrown when time based but blocks per year is provided\n    error InvalidTimeBasedConfiguration();\n\n    /**\n     * @param timeBased_ A boolean indicating whether the contract is based on time or block\n     * If timeBased is true than blocksPerYear_ param is ignored as blocksOrSecondsPerYear is set to SECONDS_PER_YEAR\n     * @param blocksPerYear_ The number of blocks per year\n     * @custom:error InvalidBlocksPerYear is thrown if blocksPerYear entered is zero and timeBased is false\n     * @custom:error InvalidTimeBasedConfiguration is thrown if blocksPerYear entered is non zero and timeBased is true\n     * @custom:oz-upgrades-unsafe-allow constructor\n     */\n    constructor(bool timeBased_, uint256 blocksPerYear_) {\n        if (!timeBased_ && blocksPerYear_ == 0) {\n            revert InvalidBlocksPerYear();\n        }\n\n        if (timeBased_ && blocksPerYear_ != 0) {\n            revert InvalidTimeBasedConfiguration();\n        }\n\n        isTimeBased = timeBased_;\n        blocksOrSecondsPerYear = timeBased_ ? SECONDS_PER_YEAR : blocksPerYear_;\n        _getCurrentSlot = timeBased_ ? _getBlockTimestamp : _getBlockNumber;\n    }\n\n    /**\n     * @dev Function to simply retrieve block number or block timestamp\n     * @return Current block number or block timestamp\n     */\n    function getBlockNumberOrTimestamp() public view virtual returns (uint256) {\n        return _getCurrentSlot();\n    }\n\n    /**\n     * @dev Returns the current timestamp in seconds\n     * @return The current timestamp\n     */\n    function _getBlockTimestamp() private view returns (uint256) {\n        return block.timestamp;\n    }\n\n    /**\n     * @dev Returns the current block number\n     * @return The current block number\n     */\n    function _getBlockNumber() private view returns (uint256) {\n        return block.number;\n    }\n}\n"
    },
    "@venusprotocol/solidity-utilities/contracts/validators.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity 0.8.25;\n\n/// @notice Thrown if the supplied address is a zero address where it is not allowed\nerror ZeroAddressNotAllowed();\n\n/// @notice Thrown if the supplied value is 0 where it is not allowed\nerror ZeroValueNotAllowed();\n\n/// @notice Checks if the provided address is nonzero, reverts otherwise\n/// @param address_ Address to check\n/// @custom:error ZeroAddressNotAllowed is thrown if the provided address is a zero address\nfunction ensureNonzeroAddress(address address_) pure {\n    if (address_ == address(0)) {\n        revert ZeroAddressNotAllowed();\n    }\n}\n\n/// @notice Checks if the provided value is nonzero, reverts otherwise\n/// @param value_ Value to check\n/// @custom:error ZeroValueNotAllowed is thrown if the provided value is 0\nfunction ensureNonzeroValue(uint256 value_) pure {\n    if (value_ == 0) {\n        revert ZeroValueNotAllowed();\n    }\n}\n"
    },
    "contracts/Admin/VBNBAdmin.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity 0.8.25;\nfunction c_6c44b3d9(bytes8 c__6c44b3d9) pure {}\nfunction c_true6c44b3d9(bytes8 c__6c44b3d9) pure returns (bool){ return true; }\nfunction c_false6c44b3d9(bytes8 c__6c44b3d9) pure returns (bool){ return false; }\n\n\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@venusprotocol/governance-contracts/contracts/Governance/AccessControlledV8.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport { IProtocolShareReserve, IWBNB, VBNBAdminStorage, VTokenInterface } from \"./VBNBAdminStorage.sol\";\n\n/**\n * @title VBNBAdmin\n * @author Venus\n * @notice This contract is the \"admin\" of the vBNB market, reducing the reserves of the market, sending them to the `ProtocolShareReserve` contract,\n * and allowing the executions of the rest of the privileged functions in the vBNB contract (after checking if the sender has the required permissions).\n */\ncontract VBNBAdmin is ReentrancyGuardUpgradeable, AccessControlledV8, VBNBAdminStorage {\nfunction c_83fa85aa(bytes8 c__83fa85aa) internal pure {}\nfunction c_true83fa85aa(bytes8 c__83fa85aa) internal pure returns (bool){ return true; }\nfunction c_false83fa85aa(bytes8 c__83fa85aa) internal pure returns (bool){ return false; }\nmodifier c_mod1fe58f53{ c_83fa85aa(0x631bbe91c9ac329a); /* modifier-post */ \n _; }\nmodifier c_modce69b39b{ c_83fa85aa(0x00ff46f86ef8d141); /* modifier-pre */ \n _; }\nmodifier c_mod25f4ec40{ c_83fa85aa(0x6f7b53d5c970c829); /* modifier-post */ \n _; }\nmodifier c_moda69ea170{ c_83fa85aa(0x784225917f107f55); /* modifier-pre */ \n _; }\nmodifier c_modab076f38{ c_83fa85aa(0xaf97e57688a0b758); /* modifier-post */ \n _; }\nmodifier c_mod9821eeb6{ c_83fa85aa(0xecf237f164d3a7ae); /* modifier-pre */ \n _; }\nmodifier c_mod605eec3a{ c_83fa85aa(0x427564131479f25c); /* modifier-post */ \n _; }\nmodifier c_mod7413109c{ c_83fa85aa(0xba0c21931efc068f); /* modifier-pre */ \n _; }\n\n    using SafeERC20Upgradeable for IWBNB;\n\n    /// @notice address of vBNB\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    VTokenInterface public immutable vBNB;\n\n    /// @notice address of WBNB contract\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    IWBNB public immutable WBNB;\n\n    /// @notice Emitted when PSR is updated\n    event ProtocolShareReserveUpdated(\n        IProtocolShareReserve indexed oldProtocolShareReserve,\n        IProtocolShareReserve indexed newProtocolShareReserve\n    );\n\n    /// @notice Emitted reserves are reduced\n    event ReservesReduced(uint256 reduceAmount);\n\n    /// @param _vBNB Address of the vBNB contract\n    /// @param _WBNB Address of the WBNB token\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(VTokenInterface _vBNB, IWBNB _WBNB) {c_83fa85aa(0xb87e1679f14ad3c7); /* function */ \n\nc_83fa85aa(0x91a445cac0dd5180); /* line */ \n        c_83fa85aa(0x4460b858b1c0e382); /* requirePre */ \nc_83fa85aa(0xa3bafe237e681a2b); /* statement */ \nrequire(address(_WBNB) != address(0), \"WBNB address invalid\");c_83fa85aa(0xf297d9a221f7cf06); /* requirePost */ \n\nc_83fa85aa(0x38409aa0907d1999); /* line */ \n        c_83fa85aa(0x279c402f913ecbdc); /* requirePre */ \nc_83fa85aa(0x7b4aad74301b500a); /* statement */ \nrequire(address(_vBNB) != address(0), \"vBNB address invalid\");c_83fa85aa(0x5c4053f7db3f56f3); /* requirePost */ \n\n\nc_83fa85aa(0xa4226c5ec141f026); /* line */ \n        vBNB = _vBNB;\nc_83fa85aa(0x46e1108d9e4d9118); /* line */ \n        WBNB = _WBNB;\n\n        // Note that the contract is upgradeable. Use initialize() or reinitializers\n        // to set the state variables.\nc_83fa85aa(0x92857b3e20c38f66); /* line */ \n        c_83fa85aa(0xe7ab9464df0e3c57); /* statement */ \n_disableInitializers();\n    }\n\n    /// @notice Used to initialize non-immutable variables\n    function initialize(\n        IProtocolShareReserve _protocolShareReserve,\n        address accessControlManager\n    ) external  c_mod7413109c initializer c_mod605eec3a  {c_83fa85aa(0xb2e837e33b9fbfd6); /* function */ \n\nc_83fa85aa(0x13897148fcf8f9bd); /* line */ \n        c_83fa85aa(0x7da033da3bb0354c); /* requirePre */ \nc_83fa85aa(0x94c44b01ceb9da3f); /* statement */ \nrequire(address(_protocolShareReserve) != address(0), \"PSR address invalid\");c_83fa85aa(0x435cc65d57231cb4); /* requirePost */ \n\nc_83fa85aa(0x912c1da8c485930d); /* line */ \n        protocolShareReserve = _protocolShareReserve;\n\nc_83fa85aa(0x61ac367783dad5b3); /* line */ \n        c_83fa85aa(0xe3f4f05b993d09d9); /* statement */ \n__ReentrancyGuard_init();\nc_83fa85aa(0x360bf15fc9650a15); /* line */ \n        c_83fa85aa(0xac8a2e709aba7bae); /* statement */ \n__AccessControlled_init(accessControlManager);\n    }\n\n    /**\n     * @notice PSR setter.\n     * @param protocolShareReserve_ Address of the PSR contract\n     * @custom:access Only owner (Governance)\n     * @custom:event Emits ProtocolShareReserveUpdated event.\n     */\n    function setProtocolShareReserve(IProtocolShareReserve protocolShareReserve_) external  c_mod9821eeb6 onlyOwner c_modab076f38  {c_83fa85aa(0xd7655140e38b2e79); /* function */ \n\nc_83fa85aa(0x21d92c93bd603b0f); /* line */ \n        c_83fa85aa(0xf692f5ff79bfd178); /* requirePre */ \nc_83fa85aa(0x64296a35e52ab692); /* statement */ \nrequire(address(protocolShareReserve_) != address(0), \"PSR address invalid\");c_83fa85aa(0xce0384cc807374b8); /* requirePost */ \n\nc_83fa85aa(0x5824e68bbf362664); /* line */ \n        c_83fa85aa(0x9d34a568f74da832); /* statement */ \nemit ProtocolShareReserveUpdated(protocolShareReserve, protocolShareReserve_);\nc_83fa85aa(0x41ead4c3f5a244a3); /* line */ \n        protocolShareReserve = protocolShareReserve_;\n    }\n\n    /**\n     * @notice Reduce reserves of vBNB, wrap them and send them to the PSR contract\n     * @param reduceAmount amount of reserves to reduce\n     * @custom:event Emits ReservesReduced event.\n     */\n    function reduceReserves(uint reduceAmount) external  c_moda69ea170 nonReentrant c_mod25f4ec40  {c_83fa85aa(0xcaa4666aacdb5983); /* function */ \n\nc_83fa85aa(0xbf9ef4af9cc130de); /* line */ \n        c_83fa85aa(0xf1ce40eaa69af25c); /* requirePre */ \nc_83fa85aa(0xfcdd90cb81620e61); /* statement */ \nrequire(vBNB._reduceReserves(reduceAmount) == 0, \"reduceReserves failed\");c_83fa85aa(0x16ad991d17497c86); /* requirePost */ \n\nc_83fa85aa(0xb63cf51b49773467); /* line */ \n        c_83fa85aa(0x6b4bbaaa6f89a1b0); /* statement */ \n_wrapBNB();\n\nc_83fa85aa(0xbccf4814af521590); /* line */ \n        c_83fa85aa(0xb7970c968032eb76); /* statement */ \nuint256 balance = WBNB.balanceOf(address(this));\nc_83fa85aa(0xc6943e2dac4f89ad); /* line */ \n        c_83fa85aa(0x49c783179e9fe4b0); /* statement */ \nWBNB.safeTransfer(address(protocolShareReserve), balance);\nc_83fa85aa(0x815462a95ec1e21b); /* line */ \n        c_83fa85aa(0xff1aa376a6422bfb); /* statement */ \nprotocolShareReserve.updateAssetsState(\n            vBNB.comptroller(),\n            address(WBNB),\n            IProtocolShareReserve.IncomeType.SPREAD\n        );\n\nc_83fa85aa(0xec996139a6dae879); /* line */ \n        c_83fa85aa(0xe806664008846de6); /* statement */ \nemit ReservesReduced(reduceAmount);\n    }\n\n    /**\n     * @notice Sets the interest rate model of the vBNB contract\n     * @param newInterestRateModel Address of the new interest rate model\n     * @custom:access Controlled by ACM\n     */\n    function setInterestRateModel(address newInterestRateModel) public returns (uint256) {c_83fa85aa(0xe085ca6475bef367); /* function */ \n\nc_83fa85aa(0xe3e47220445597f6); /* line */ \n        c_83fa85aa(0xab1a643e5cfbec1c); /* statement */ \n_checkAccessAllowed(\"setInterestRateModel(address)\");\nc_83fa85aa(0xcb57cb234eb844e2); /* line */ \n        c_83fa85aa(0x23ffa734cf5d4f1b); /* statement */ \nreturn vBNB._setInterestRateModel(newInterestRateModel);\n    }\n\n    /**\n     * @notice Wraps BNB into WBNB\n     */\n    function _wrapBNB() internal {c_83fa85aa(0xfa071590c70796ff); /* function */ \n\nc_83fa85aa(0x1871b1343c67d965); /* line */ \n        c_83fa85aa(0x79d7a02f6d75b632); /* statement */ \nuint256 bnbBalance = address(this).balance;\nc_83fa85aa(0xd3b77860ad2839e1); /* line */ \n        c_83fa85aa(0xb7abc9d9907f3820); /* statement */ \nWBNB.deposit{ value: bnbBalance }();\n    }\n\n    /**\n     * @notice Invoked when BNB is sent to this contract\n     * @custom:access Only vBNB is considered a valid sender\n     */\n    receive() external payable {\nc_83fa85aa(0xc27bfa4346edf66b); /* line */ \n        c_83fa85aa(0xbbbe271cfcaaada3); /* requirePre */ \nrequire(msg.sender == address(vBNB), \"only vBNB can send BNB to this contract\");c_83fa85aa(0x106708b97a8891ce); /* requirePost */ \n\n    }\n\n    /**\n     * @notice Invoked when called function does not exist in the contract. The function will be executed in the vBNB contract.\n     * @custom:access Only owner (Governance)\n     */\n    fallback(bytes calldata data) external payable  c_modce69b39b onlyOwner c_mod1fe58f53  returns (bytes memory) {c_83fa85aa(0x1e7c57f92a09d1c1); /* function */ \n\nc_83fa85aa(0xb5424624ac2b7d33); /* line */ \n        c_83fa85aa(0x8aa3297da7ef27c0); /* statement */ \n(bool ok, bytes memory res) = address(vBNB).call{ value: msg.value }(data);\nc_83fa85aa(0x43f999ed501d612e); /* line */ \n        c_83fa85aa(0xdffada86f26e414c); /* requirePre */ \nc_83fa85aa(0x98e50396163186ff); /* statement */ \nrequire(ok, \"call failed\");c_83fa85aa(0x7fa6997c767e8523); /* requirePost */ \n\nc_83fa85aa(0x3967816ae0c6d96f); /* line */ \n        c_83fa85aa(0x0781e7f41a30e7a5); /* statement */ \nreturn res;\n    }\n}\n"
    },
    "contracts/Admin/VBNBAdminStorage.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity 0.8.25;\nfunction c_1621bd52(bytes8 c__1621bd52) pure {}\nfunction c_true1621bd52(bytes8 c__1621bd52) pure returns (bool){ return true; }\nfunction c_false1621bd52(bytes8 c__1621bd52) pure returns (bool){ return false; }\n\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\n\ninterface VTokenInterface {\n    function _reduceReserves(uint reduceAmount) external returns (uint);\n\n    function _acceptAdmin() external returns (uint);\n\n    function comptroller() external returns (address);\n\n    function _setInterestRateModel(address newInterestRateModel) external returns (uint);\n}\n\ninterface IWBNB is IERC20Upgradeable {\n    function deposit() external payable;\n}\n\ninterface IProtocolShareReserve {\n    enum IncomeType {\n        SPREAD,\n        LIQUIDATION\n    }\n\n    function updateAssetsState(address comptroller, address asset, IncomeType incomeType) external;\n}\n\ncontract VBNBAdminStorage {\nfunction c_dbfda576(bytes8 c__dbfda576) internal pure {}\nfunction c_truedbfda576(bytes8 c__dbfda576) internal pure returns (bool){ return true; }\nfunction c_falsedbfda576(bytes8 c__dbfda576) internal pure returns (bool){ return false; }\n\n    /// @notice address of protocol share reserve contract\n    IProtocolShareReserve public protocolShareReserve;\n\n    /// @dev gap to prevent collision in inheritence\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/DelegateBorrowers/MoveDebtDelegate.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity 0.8.25;\nfunction c_0b700db4(bytes8 c__0b700db4) pure {}\nfunction c_true0b700db4(bytes8 c__0b700db4) pure returns (bool){ return true; }\nfunction c_false0b700db4(bytes8 c__0b700db4) pure returns (bool){ return false; }\n\n\nimport { Ownable2StepUpgradeable } from \"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\";\nimport { ReentrancyGuardUpgradeable } from \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport { SafeERC20Upgradeable } from \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport { IERC20Upgradeable } from \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport { ResilientOracleInterface } from \"@venusprotocol/oracle/contracts/interfaces/OracleInterface.sol\";\nimport { ensureNonzeroAddress } from \"@venusprotocol/solidity-utilities/contracts/validators.sol\";\n\nimport { approveOrRevert } from \"../lib/approveOrRevert.sol\";\nimport { IVBep20, IComptroller } from \"../InterfacesV8.sol\";\n\ncontract MoveDebtDelegate is Ownable2StepUpgradeable, ReentrancyGuardUpgradeable {\nfunction c_ec4607ae(bytes8 c__ec4607ae) internal pure {}\nfunction c_trueec4607ae(bytes8 c__ec4607ae) internal pure returns (bool){ return true; }\nfunction c_falseec4607ae(bytes8 c__ec4607ae) internal pure returns (bool){ return false; }\nmodifier c_mod265a9eb6{ c_ec4607ae(0x99d4923389421721); /* modifier-post */ \n _; }\nmodifier c_mod9b60a204{ c_ec4607ae(0x07f5fb857c914771); /* modifier-pre */ \n _; }\nmodifier c_modf587dd1c{ c_ec4607ae(0xf64dfab6b4e3cdea); /* modifier-post */ \n _; }\nmodifier c_mod19ee9f41{ c_ec4607ae(0x2f2a518e83309e20); /* modifier-pre */ \n _; }\nmodifier c_modc89f545f{ c_ec4607ae(0xa6450834378011c9); /* modifier-post */ \n _; }\nmodifier c_mod6728ecd2{ c_ec4607ae(0xc3fa73cf0a5e2d05); /* modifier-pre */ \n _; }\nmodifier c_mod8f520e27{ c_ec4607ae(0x1c8df37c13769e81); /* modifier-post */ \n _; }\nmodifier c_mod61d78948{ c_ec4607ae(0x612e8f752136abeb); /* modifier-pre */ \n _; }\nmodifier c_mod18e4af51{ c_ec4607ae(0x286158b3d9a0c951); /* modifier-post */ \n _; }\nmodifier c_mod20478c85{ c_ec4607ae(0xaef77e7a382e1e95); /* modifier-pre */ \n _; }\n\n    /// @dev VToken return value signalling about successful execution\n    uint256 internal constant NO_ERROR = 0;\n\n    /// @notice A wildcard indicating that repayment is allowed for _any_ user in the market\n    address public constant ANY_USER = address(1);\n\n    /// @notice User to borrow on behalf of\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address public immutable newBorrower;\n\n    /// @notice Whether to allow borrowing from the corresponding vToken\n    mapping(address => bool) public borrowAllowed;\n\n    /// @notice Whether to allow repaying to the corresponding vToken on behalf of\n    ///   a certain user. Use ANY_USER to check if repayment is allowed for any user.\n    mapping(address => mapping(address => bool)) public repaymentAllowed;\n\n    /// @notice Emitted when vToken is allowed or denied to be borrowed from\n    event BorrowAllowedSet(address indexed vTokenToBorrow, bool allowed);\n\n    /// @notice Emitted when vToken is allowed or denied to be borrowed from\n    event RepaymentAllowedSet(address indexed vTokenToRepay, address indexed originalBorrower, bool allowed);\n\n    /// @notice Emitted if debt is swapped successfully\n    event DebtMoved(\n        address indexed originalBorrower,\n        address indexed vTokenRepaid,\n        uint256 repaidAmount,\n        address newBorrower,\n        address indexed vTokenBorrowed,\n        uint256 borrowedAmount\n    );\n\n    /// @notice Emitted when the owner transfers tokens, accidentially sent to this contract,\n    ///   to their account\n    event SweptTokens(address indexed token, uint256 amount);\n\n    /// @notice Thrown if VTokens' comptrollers are not equal\n    error ComptrollerMismatch();\n\n    /// @notice Thrown if repayment fails with an error code\n    error RepaymentFailed(uint256 errorCode);\n\n    /// @notice Thrown if borrow fails with an error code\n    error BorrowFailed(uint256 errorCode);\n\n    /// @notice Thrown if borrowing from the corresponding vToken is not allowed\n    error BorrowNotAllowed(address vToken);\n\n    /// @notice Thrown if repaying the debts of the borrower to the corresponding vToken is not allowed\n    error RepaymentNotAllowed(address vToken, address borrower);\n\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    /// @notice Constructor for the implementation contract. Sets immutable variables.\n    /// @param newBorrower_ User to borrow on behalf of\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(address newBorrower_) {c_ec4607ae(0xf8609b289900a6ad); /* function */ \n\nc_ec4607ae(0x1fcddcad13853fe5); /* line */ \n        newBorrower = newBorrower_;\nc_ec4607ae(0xa45d01344bd84492); /* line */ \n        c_ec4607ae(0xf32257a8f0a15eaa); /* statement */ \n_disableInitializers();\n    }\n\n    function initialize() external  c_mod20478c85 initializer c_mod18e4af51  {c_ec4607ae(0x470bb9455cd4d269); /* function */ \n\nc_ec4607ae(0xef27289b9d2a3088); /* line */ \n        c_ec4607ae(0x1b9e99380b9e05fc); /* statement */ \n__Ownable2Step_init();\nc_ec4607ae(0xc3bc30cf7fb6d78c); /* line */ \n        c_ec4607ae(0x3e682cedf75676b4); /* statement */ \n__ReentrancyGuard_init();\n    }\n\n    /**\n     * @notice Repays originalBorrower's borrow in vTokenToRepay.underlying() and borrows\n     *   vTokenToBorrow.underlying() on behalf of newBorrower.\n     *\n     * @param originalBorrower The address of the borrower, whose debt to repay\n     * @param vTokenToRepay VToken to repay to on behalf of originalBorrower\n     * @param repayAmount The amount to repay in terms of vTokenToRepay.underlying()\n     * @param vTokenToBorrow VToken to borrow from\n     */\n    function moveDebt(\n        IVBep20 vTokenToRepay,\n        address originalBorrower,\n        uint256 repayAmount,\n        IVBep20 vTokenToBorrow\n    ) external  c_mod61d78948 nonReentrant c_mod8f520e27  {c_ec4607ae(0xa6c9ae031277f01a); /* function */ \n\nc_ec4607ae(0x9d110c1205cc5795); /* line */ \n        c_ec4607ae(0x537477a4d5c7f9a2); /* statement */ \nif (!borrowAllowed[address(vTokenToBorrow)]) {c_ec4607ae(0x7cc33c9cd64462b3); /* branch */ \n\nc_ec4607ae(0x7331a28c72108e60); /* line */ \n            revert BorrowNotAllowed(address(vTokenToBorrow));\n        }else { c_ec4607ae(0x7c1420dae942cbfd); /* branch */ \n}\n\nc_ec4607ae(0x90f2a89c6ef99dd7); /* line */ \n        c_ec4607ae(0xd046ac4da7183167); /* statement */ \nmapping(address => bool) storage repaymentAllowedFor = repaymentAllowed[address(vTokenToRepay)];\nc_ec4607ae(0x29f06681cf2d9e1e); /* line */ \n        c_ec4607ae(0xd784d1fa2806b828); /* statement */ \nif (!repaymentAllowedFor[ANY_USER] && !repaymentAllowedFor[originalBorrower]) {c_ec4607ae(0xa343352da9f83301); /* branch */ \n\nc_ec4607ae(0x1bab95fdea9cfc2e); /* line */ \n            revert RepaymentNotAllowed(address(vTokenToRepay), originalBorrower);\n        }else { c_ec4607ae(0x621d202f5138493f); /* branch */ \n}\n\nc_ec4607ae(0x9a26074865e27444); /* line */ \n        c_ec4607ae(0x1b857a7ccaec89be); /* statement */ \nuint256 actualRepaymentAmount = _repay(vTokenToRepay, originalBorrower, repayAmount);\nc_ec4607ae(0xbef4be68cdb1c315); /* line */ \n        c_ec4607ae(0x6d403a033145325b); /* statement */ \nuint256 amountToBorrow = _convert(vTokenToRepay, vTokenToBorrow, actualRepaymentAmount);\nc_ec4607ae(0xee596a6a4ca33d44); /* line */ \n        c_ec4607ae(0x6daea9d924d9c65a); /* statement */ \n_borrow(vTokenToBorrow, amountToBorrow);\nc_ec4607ae(0x122069ce078d4062); /* line */ \n        c_ec4607ae(0x501342dce3fcb784); /* statement */ \nemit DebtMoved(\n            originalBorrower,\n            address(vTokenToRepay),\n            actualRepaymentAmount,\n            newBorrower,\n            address(vTokenToBorrow),\n            amountToBorrow\n        );\n    }\n\n    /**\n     * @notice Allows or denies borrowing from the corresponding vToken\n     * @param vTokenToBorrow VToken to borrow from\n     * @param allow Whether to allow borrowing from the corresponding vToken\n     */\n    function setBorrowAllowed(address vTokenToBorrow, bool allow) external  c_mod6728ecd2 onlyOwner c_modc89f545f  {c_ec4607ae(0x011ef92dce278785); /* function */ \n\nc_ec4607ae(0x8282b195fcd9c2fe); /* line */ \n        c_ec4607ae(0xd59c0801fb4a67dd); /* statement */ \nensureNonzeroAddress(vTokenToBorrow);\nc_ec4607ae(0x6d927ec822c8d6d6); /* line */ \n        c_ec4607ae(0xed9fa5fd6628352a); /* statement */ \nif (borrowAllowed[vTokenToBorrow] != allow) {c_ec4607ae(0x60b791fa03bb44e9); /* branch */ \n\nc_ec4607ae(0xa01eb90d225c1985); /* line */ \n            borrowAllowed[vTokenToBorrow] = allow;\nc_ec4607ae(0xbcc85a2badbdbff3); /* line */ \n            c_ec4607ae(0x404232ff4ef91dd4); /* statement */ \nemit BorrowAllowedSet(vTokenToBorrow, allow);\n        }else { c_ec4607ae(0xecf7a5fae9eb942b); /* branch */ \n}\n    }\n\n    /**\n     * @notice Allows or denies repaying the debts of originalBorrower to the corresponding vToken\n     * @param vTokenToRepay VToken to repay to\n     * @param originalBorrower The address of the borrower, whose debt to repay (or ANY_USER to allow\n     *   repayments for all users in the market, e.g. if the market is going to be deprecated soon)\n     * @param allow Whether to allow repaying to the corresponding vToken on behalf of originalBorrower\n     */\n    function setRepaymentAllowed(address vTokenToRepay, address originalBorrower, bool allow) external  c_mod19ee9f41 onlyOwner c_modf587dd1c  {c_ec4607ae(0x8a4a5bd99281a712); /* function */ \n\nc_ec4607ae(0x8482359b129ab27c); /* line */ \n        c_ec4607ae(0xad64be2bc868d017); /* statement */ \nensureNonzeroAddress(vTokenToRepay);\nc_ec4607ae(0x0afb1c005906dbb0); /* line */ \n        c_ec4607ae(0xb98b968a9a45c244); /* statement */ \nensureNonzeroAddress(originalBorrower);\nc_ec4607ae(0x171c09c296c1caa3); /* line */ \n        c_ec4607ae(0x30fe2a75cd9ddf85); /* statement */ \nif (repaymentAllowed[vTokenToRepay][originalBorrower] != allow) {c_ec4607ae(0xb8494848de5e5b6e); /* branch */ \n\nc_ec4607ae(0x1fcd6aaf0961e7c2); /* line */ \n            repaymentAllowed[vTokenToRepay][originalBorrower] = allow;\nc_ec4607ae(0x6e8349bfd906d325); /* line */ \n            c_ec4607ae(0x1d57315f8a18cebc); /* statement */ \nemit RepaymentAllowedSet(vTokenToRepay, originalBorrower, allow);\n        }else { c_ec4607ae(0xb37159df001e4d62); /* branch */ \n}\n    }\n\n    /**\n     * @notice Transfers tokens, accidentially sent to this contract, to the owner\n     * @param token ERC-20 token to sweep\n     */\n    function sweepTokens(IERC20Upgradeable token) external  c_mod9b60a204 onlyOwner c_mod265a9eb6  {c_ec4607ae(0xf6a5eb59f318747e); /* function */ \n\nc_ec4607ae(0xb52e877bb933e354); /* line */ \n        c_ec4607ae(0x7414e02dbb8b7bcd); /* statement */ \nuint256 amount = token.balanceOf(address(this));\nc_ec4607ae(0x0ad171d3bf4bc2f9); /* line */ \n        c_ec4607ae(0x50713392cc69dc57); /* statement */ \ntoken.safeTransfer(owner(), amount);\nc_ec4607ae(0x41706c4e87854446); /* line */ \n        c_ec4607ae(0x239678622f0ecdaa); /* statement */ \nemit SweptTokens(address(token), amount);\n    }\n\n    /**\n     * @dev Transfers the funds from the sender and repays a borrow in vToken on behalf of the borrower\n     * @param vTokenToRepay VToken to repay to\n     * @param borrower The address of the borrower, whose debt to repay\n     * @param repayAmount The amount to repay in terms of underlying\n     */\n    function _repay(\n        IVBep20 vTokenToRepay,\n        address borrower,\n        uint256 repayAmount\n    ) internal returns (uint256 actualRepaymentAmount) {c_ec4607ae(0x4a26142a637231ed); /* function */ \n\nc_ec4607ae(0x61709ce5e1fe5cd6); /* line */ \n        c_ec4607ae(0xd9e24129b639ab04); /* statement */ \nIERC20Upgradeable underlying = IERC20Upgradeable(vTokenToRepay.underlying());\nc_ec4607ae(0xe5e41d4a39f46431); /* line */ \n        c_ec4607ae(0xc6018609317734dc); /* statement */ \nuint256 balanceBefore = underlying.balanceOf(address(this));\nc_ec4607ae(0x50a381433b6b884c); /* line */ \n        c_ec4607ae(0xa6a319d54ae2516f); /* statement */ \nunderlying.safeTransferFrom(msg.sender, address(this), repayAmount);\nc_ec4607ae(0x777bd3999649cc09); /* line */ \n        c_ec4607ae(0xbf6b96b314774e3c); /* statement */ \nuint256 balanceAfter = underlying.balanceOf(address(this));\nc_ec4607ae(0xd70ce8e86a5de677); /* line */ \n        c_ec4607ae(0xe2118296169b0ca3); /* statement */ \nuint256 repayAmountMinusFee = balanceAfter - balanceBefore;\n\nc_ec4607ae(0xa7a236ddecfa898a); /* line */ \n        c_ec4607ae(0x2cbd9fc2681d27dd); /* statement */ \nuint256 borrowBalanceBefore = vTokenToRepay.borrowBalanceCurrent(borrower);\nc_ec4607ae(0x6ed39e9f25ce5a0a); /* line */ \n        c_ec4607ae(0x1da5d4d76e39007e); /* statement */ \napproveOrRevert(underlying, address(vTokenToRepay), repayAmountMinusFee);\nc_ec4607ae(0x889013d7d5036b30); /* line */ \n        c_ec4607ae(0xa85450e3cea451bb); /* statement */ \nuint256 err = vTokenToRepay.repayBorrowBehalf(borrower, repayAmountMinusFee);\nc_ec4607ae(0x30faae29874bbf88); /* line */ \n        c_ec4607ae(0xe40fc7f408df618f); /* statement */ \nif (err != NO_ERROR) {c_ec4607ae(0xdd202ca2acbc6ad9); /* branch */ \n\nc_ec4607ae(0xf0867d44b07b3d53); /* line */ \n            revert RepaymentFailed(err);\n        }else { c_ec4607ae(0x6aaa72e2a460b713); /* branch */ \n}\nc_ec4607ae(0xa2d4d73c723398b7); /* line */ \n        c_ec4607ae(0xacf219a8546501da); /* statement */ \napproveOrRevert(underlying, address(vTokenToRepay), 0);\nc_ec4607ae(0xb47e13b70c6de4f6); /* line */ \n        c_ec4607ae(0x6dc8a4880149e149); /* statement */ \nuint256 borrowBalanceAfter = vTokenToRepay.borrowBalanceCurrent(borrower);\nc_ec4607ae(0xe62ef824a05aed90); /* line */ \n        c_ec4607ae(0x8cfb3c5fe4db3510); /* statement */ \nreturn borrowBalanceBefore - borrowBalanceAfter;\n    }\n\n    /**\n     * @dev Borrows in vToken on behalf of the borrower and transfers the funds to the sender\n     * @param vTokenToBorrow VToken to borrow from\n     * @param borrowAmount The amount to borrow in terms of underlying\n     */\n    function _borrow(IVBep20 vTokenToBorrow, uint256 borrowAmount) internal {c_ec4607ae(0x9fbc55b1c60d3f35); /* function */ \n\nc_ec4607ae(0x2f39cac17575771e); /* line */ \n        c_ec4607ae(0x35a4407533b372e6); /* statement */ \nIERC20Upgradeable underlying = IERC20Upgradeable(vTokenToBorrow.underlying());\nc_ec4607ae(0x1c88316ab7d4d538); /* line */ \n        c_ec4607ae(0x22de8dc47cd53184); /* statement */ \nuint256 balanceBefore = underlying.balanceOf(address(this));\nc_ec4607ae(0x4590149d81880378); /* line */ \n        c_ec4607ae(0x83edbe12b17ff541); /* statement */ \nuint256 err = vTokenToBorrow.borrowBehalf(newBorrower, borrowAmount);\nc_ec4607ae(0x049bcd7d32b26816); /* line */ \n        c_ec4607ae(0xd0edf0f8262c3f53); /* statement */ \nif (err != NO_ERROR) {c_ec4607ae(0x331ee8e715954804); /* branch */ \n\nc_ec4607ae(0x19a27af26a34d067); /* line */ \n            revert BorrowFailed(err);\n        }else { c_ec4607ae(0x5065d63a878df257); /* branch */ \n}\nc_ec4607ae(0xa1b0694e0f11e25f); /* line */ \n        c_ec4607ae(0xe79f5e8ca94efad4); /* statement */ \nuint256 balanceAfter = underlying.balanceOf(address(this));\nc_ec4607ae(0x95a921498cfacd9d); /* line */ \n        c_ec4607ae(0x6463a9d91c075dd4); /* statement */ \nuint256 actualBorrowedAmount = balanceAfter - balanceBefore;\nc_ec4607ae(0x813eaef5b123b6f5); /* line */ \n        c_ec4607ae(0x155716c930255860); /* statement */ \nunderlying.safeTransfer(msg.sender, actualBorrowedAmount);\n    }\n\n    /**\n     * @dev Converts the value expressed in convertFrom.underlying() to a value\n     *   in convertTo.underlying(), using the oracle price\n     * @param convertFrom VToken to convert from\n     * @param convertTo VToken to convert to\n     * @param amount The amount in convertFrom.underlying()\n     */\n    function _convert(IVBep20 convertFrom, IVBep20 convertTo, uint256 amount) internal view returns (uint256) {c_ec4607ae(0x1b0af9486675c634); /* function */ \n\nc_ec4607ae(0xdead4d2650bdc986); /* line */ \n        c_ec4607ae(0x386ac1ce1b437056); /* statement */ \nIComptroller comptroller = convertFrom.comptroller();\nc_ec4607ae(0x8c7ddbf72bc6e798); /* line */ \n        c_ec4607ae(0x0f8570ae66e309bf); /* statement */ \nif (comptroller != convertTo.comptroller()) {c_ec4607ae(0x56f89e3c0b7203bc); /* branch */ \n\nc_ec4607ae(0x7e45a89978e8873d); /* line */ \n            revert ComptrollerMismatch();\n        }else { c_ec4607ae(0x121149579c4beb7f); /* branch */ \n}\nc_ec4607ae(0xd36c1786a72be2b4); /* line */ \n        c_ec4607ae(0x29392043513b39a4); /* statement */ \nResilientOracleInterface oracle = comptroller.oracle();\n\n        // Decimals are accounted for in the oracle contract\nc_ec4607ae(0x4f756b41b87c0ce2); /* line */ \n        c_ec4607ae(0x919b25c7663375a7); /* statement */ \nuint256 scaledUsdValue = oracle.getUnderlyingPrice(address(convertFrom)) * amount; // the USD value here has 36 decimals\nc_ec4607ae(0xa02dffbc7e22509d); /* line */ \n        c_ec4607ae(0x6dccb55332a9e5d1); /* statement */ \nreturn scaledUsdValue / oracle.getUnderlyingPrice(address(convertTo));\n    }\n}\n"
    },
    "contracts/DelegateBorrowers/SwapDebtDelegate.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity 0.8.25;\nfunction c_4b9e162b(bytes8 c__4b9e162b) pure {}\nfunction c_true4b9e162b(bytes8 c__4b9e162b) pure returns (bool){ return true; }\nfunction c_false4b9e162b(bytes8 c__4b9e162b) pure returns (bool){ return false; }\n\n\nimport { Ownable2StepUpgradeable } from \"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\";\nimport { ReentrancyGuardUpgradeable } from \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport { SafeERC20Upgradeable } from \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport { IERC20Upgradeable } from \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport { ResilientOracleInterface } from \"@venusprotocol/oracle/contracts/interfaces/OracleInterface.sol\";\n\nimport { approveOrRevert } from \"../lib/approveOrRevert.sol\";\nimport { IVBep20, IComptroller } from \"../InterfacesV8.sol\";\n\ncontract SwapDebtDelegate is Ownable2StepUpgradeable, ReentrancyGuardUpgradeable {\nfunction c_ec28e142(bytes8 c__ec28e142) internal pure {}\nfunction c_trueec28e142(bytes8 c__ec28e142) internal pure returns (bool){ return true; }\nfunction c_falseec28e142(bytes8 c__ec28e142) internal pure returns (bool){ return false; }\nmodifier c_moda2caccda{ c_ec28e142(0x9db011b9bf9990b2); /* modifier-post */ \n _; }\nmodifier c_modf00cc86d{ c_ec28e142(0xcd4d79f4da94c393); /* modifier-pre */ \n _; }\nmodifier c_modfde7ab61{ c_ec28e142(0x44844798da9f1cfd); /* modifier-post */ \n _; }\nmodifier c_moda134dc01{ c_ec28e142(0x12922b07a5571264); /* modifier-pre */ \n _; }\nmodifier c_mod98ca2726{ c_ec28e142(0x14e2d5f5bcd96c6d); /* modifier-post */ \n _; }\nmodifier c_mod4e364045{ c_ec28e142(0x6ca55c9f79fa37e7); /* modifier-pre */ \n _; }\nmodifier c_modb8affe11{ c_ec28e142(0xc82a5ebeab195ce8); /* modifier-post */ \n _; }\nmodifier c_moded4f6957{ c_ec28e142(0x58fdc5283789a58d); /* modifier-pre */ \n _; }\n\n    /// @dev VToken return value signalling about successful execution\n    uint256 internal constant NO_ERROR = 0;\n\n    /// @notice Emitted if debt is swapped successfully\n    event DebtSwapped(\n        address indexed borrower,\n        address indexed vTokenRepaid,\n        uint256 repaidAmount,\n        address indexed vTokenBorrowed,\n        uint256 borrowedAmount\n    );\n\n    /// @notice Emitted when the owner transfers tokens, accidentially sent to this contract,\n    ///   to their account\n    event SweptTokens(address indexed token, uint256 amount);\n\n    /// @notice Thrown if VTokens' comptrollers are not equal\n    error ComptrollerMismatch();\n\n    /// @notice Thrown if repayment fails with an error code\n    error RepaymentFailed(uint256 errorCode);\n\n    /// @notice Thrown if borrow fails with an error code\n    error BorrowFailed(uint256 errorCode);\n\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    function initialize() external  c_moded4f6957 initializer c_modb8affe11  {c_ec28e142(0x80982d5cdb923c1c); /* function */ \n\nc_ec28e142(0xcf4f2c5ffd481604); /* line */ \n        c_ec28e142(0xa3c5956227849cf7); /* statement */ \n__Ownable2Step_init();\nc_ec28e142(0xd73ce5af64bdda68); /* line */ \n        c_ec28e142(0x1a2abb224f83c3d1); /* statement */ \n__ReentrancyGuard_init();\n    }\n\n    /**\n     * @notice Repays a borrow in repayTo.underlying() and borrows borrowFrom.underlying()\n     * @param borrower The address of the borrower, whose debt to swap\n     * @param repayTo VToken to repay the debt to\n     * @param borrowFrom VToken to borrow from\n     * @param repayAmount The amount to repay in terms of repayTo.underlying()\n     */\n    function swapDebt(\n        address borrower,\n        IVBep20 repayTo,\n        IVBep20 borrowFrom,\n        uint256 repayAmount\n    ) external  c_mod4e364045 onlyOwner c_mod98ca2726   c_moda134dc01 nonReentrant c_modfde7ab61  {c_ec28e142(0xf84952060081a3ee); /* function */ \n\nc_ec28e142(0x41cb84f6695423a8); /* line */ \n        c_ec28e142(0x2d82dffbb93acfbf); /* statement */ \nuint256 actualRepaymentAmount = _repay(repayTo, borrower, repayAmount);\nc_ec28e142(0xabc5f10d402b5344); /* line */ \n        c_ec28e142(0xa5e56088d41882c2); /* statement */ \nuint256 amountToBorrow = _convert(repayTo, borrowFrom, actualRepaymentAmount);\nc_ec28e142(0x7a63b2ab9034d81c); /* line */ \n        c_ec28e142(0xfac4f923ad0db469); /* statement */ \n_borrow(borrowFrom, borrower, amountToBorrow);\nc_ec28e142(0x91241eefcc1b01fd); /* line */ \n        c_ec28e142(0xcf8fd20c7a9cbac0); /* statement */ \nemit DebtSwapped(borrower, address(repayTo), actualRepaymentAmount, address(borrowFrom), amountToBorrow);\n    }\n\n    /**\n     * @notice Transfers tokens, accidentially sent to this contract, to the owner\n     * @param token ERC-20 token to sweep\n     */\n    function sweepTokens(IERC20Upgradeable token) external  c_modf00cc86d onlyOwner c_moda2caccda  {c_ec28e142(0x17ed4afee14ef8fe); /* function */ \n\nc_ec28e142(0xebb30b6cbc4d69e6); /* line */ \n        c_ec28e142(0x6fae4f2733c215a2); /* statement */ \nuint256 amount = token.balanceOf(address(this));\nc_ec28e142(0xc6677b95bf4d316b); /* line */ \n        c_ec28e142(0xf59f6fbc047b53c1); /* statement */ \ntoken.safeTransfer(owner(), amount);\nc_ec28e142(0x23e2f8ed0b954610); /* line */ \n        c_ec28e142(0xb43d4564e1337371); /* statement */ \nemit SweptTokens(address(token), amount);\n    }\n\n    /**\n     * @dev Transfers the funds from the sender and repays a borrow in vToken on behalf of the borrower\n     * @param vToken VToken to repay the debt to\n     * @param borrower The address of the borrower, whose debt to repay\n     * @param repayAmount The amount to repay in terms of underlying\n     */\n    function _repay(\n        IVBep20 vToken,\n        address borrower,\n        uint256 repayAmount\n    ) internal returns (uint256 actualRepaymentAmount) {c_ec28e142(0x3cabced9b94187ce); /* function */ \n\nc_ec28e142(0x1923bfb5a8b5ea84); /* line */ \n        c_ec28e142(0x154f2222a5a0e7f1); /* statement */ \nIERC20Upgradeable underlying = IERC20Upgradeable(vToken.underlying());\nc_ec28e142(0x580df793684d43be); /* line */ \n        c_ec28e142(0x138d4110dc2833fa); /* statement */ \nuint256 balanceBefore = underlying.balanceOf(address(this));\nc_ec28e142(0xee6ee3f8839ba46b); /* line */ \n        c_ec28e142(0x7aa2958a76c14dd5); /* statement */ \nunderlying.safeTransferFrom(msg.sender, address(this), repayAmount);\nc_ec28e142(0x09b9b17c9cf04fea); /* line */ \n        c_ec28e142(0x0ffb2e21b9cf99be); /* statement */ \nuint256 balanceAfter = underlying.balanceOf(address(this));\nc_ec28e142(0x8d028ce4c428d06a); /* line */ \n        c_ec28e142(0x306cf558ec20ee12); /* statement */ \nuint256 repayAmountMinusFee = balanceAfter - balanceBefore;\n\nc_ec28e142(0xf4f8b0e3edb8f861); /* line */ \n        c_ec28e142(0x3397a5d433be15b3); /* statement */ \nunderlying.safeApprove(address(vToken), 0);\nc_ec28e142(0xd1d15129b091ac53); /* line */ \n        c_ec28e142(0x736d609b2b141fba); /* statement */ \nunderlying.safeApprove(address(vToken), repayAmountMinusFee);\nc_ec28e142(0x9b6c16f4b9e7cd3e); /* line */ \n        c_ec28e142(0x219b5edcc104dbae); /* statement */ \nuint256 borrowBalanceBefore = vToken.borrowBalanceCurrent(borrower);\nc_ec28e142(0x9de8ed88ba9046de); /* line */ \n        c_ec28e142(0x374704440b8e58b3); /* statement */ \nuint256 err = vToken.repayBorrowBehalf(borrower, repayAmountMinusFee);\nc_ec28e142(0x09061723d8c95ecd); /* line */ \n        c_ec28e142(0xba697a78cc15a1bf); /* statement */ \nif (err != NO_ERROR) {c_ec28e142(0xb87db03c4d0025a1); /* branch */ \n\nc_ec28e142(0xf56a1573e32b7288); /* line */ \n            revert RepaymentFailed(err);\n        }else { c_ec28e142(0x8309763a7583e7d4); /* branch */ \n}\nc_ec28e142(0xfa3b7943381fcfb7); /* line */ \n        c_ec28e142(0xff2147f3069c41d2); /* statement */ \nuint256 borrowBalanceAfter = vToken.borrowBalanceCurrent(borrower);\nc_ec28e142(0x29637ffd1200fb20); /* line */ \n        c_ec28e142(0x8ac9d84e91224654); /* statement */ \nreturn borrowBalanceBefore - borrowBalanceAfter;\n    }\n\n    /**\n     * @dev Borrows in vToken on behalf of the borrower and transfers the funds to the sender\n     * @param vToken VToken to borrow from\n     * @param borrower The address of the borrower, who will own the borrow\n     * @param borrowAmount The amount to borrow in terms of underlying\n     */\n    function _borrow(IVBep20 vToken, address borrower, uint256 borrowAmount) internal {c_ec28e142(0x559c1e7807342df7); /* function */ \n\nc_ec28e142(0x50f840413b447cf9); /* line */ \n        c_ec28e142(0xb39aacedd5a7b16a); /* statement */ \nIERC20Upgradeable underlying = IERC20Upgradeable(vToken.underlying());\nc_ec28e142(0xbae04f4159448f8b); /* line */ \n        c_ec28e142(0x33eeca8a2367204d); /* statement */ \nuint256 balanceBefore = underlying.balanceOf(address(this));\nc_ec28e142(0xb2f785cefbe51a16); /* line */ \n        c_ec28e142(0xb2ae261a25eb0be6); /* statement */ \nuint256 err = vToken.borrowBehalf(borrower, borrowAmount);\nc_ec28e142(0xc91a756fee57fd8d); /* line */ \n        c_ec28e142(0x9ec977fdbae8bae4); /* statement */ \nif (err != NO_ERROR) {c_ec28e142(0xe06d9c407bba8c59); /* branch */ \n\nc_ec28e142(0xcbf88f8551173a87); /* line */ \n            revert BorrowFailed(err);\n        }else { c_ec28e142(0xe7cf5667cf81ff5e); /* branch */ \n}\nc_ec28e142(0x728c656c2c64fe60); /* line */ \n        c_ec28e142(0xdf9b32d39f7cd491); /* statement */ \nuint256 balanceAfter = underlying.balanceOf(address(this));\nc_ec28e142(0xe950892ab8a7f03b); /* line */ \n        c_ec28e142(0x25f94dbe8aec84c0); /* statement */ \nuint256 actualBorrowedAmount = balanceAfter - balanceBefore;\nc_ec28e142(0xdb85feaa9d88b97a); /* line */ \n        c_ec28e142(0x14b0e058a41b1a2d); /* statement */ \nunderlying.safeTransfer(msg.sender, actualBorrowedAmount);\n    }\n\n    /**\n     * @dev Converts the value expressed in convertFrom.underlying() to a value\n     *   in convertTo.underlying(), using the oracle price\n     * @param convertFrom VToken to convert from\n     * @param convertTo VToken to convert to\n     * @param amount The amount in convertFrom.underlying()\n     */\n    function _convert(IVBep20 convertFrom, IVBep20 convertTo, uint256 amount) internal view returns (uint256) {c_ec28e142(0xff56772df7a12387); /* function */ \n\nc_ec28e142(0xa357617a8d8c8651); /* line */ \n        c_ec28e142(0x7f5208ca16d8c07c); /* statement */ \nIComptroller comptroller = convertFrom.comptroller();\nc_ec28e142(0x442b0e1b18dd4c76); /* line */ \n        c_ec28e142(0x43b51fba9f3180b7); /* statement */ \nif (comptroller != convertTo.comptroller()) {c_ec28e142(0x7d8db23625815c88); /* branch */ \n\nc_ec28e142(0x860c7e5d7931516a); /* line */ \n            revert ComptrollerMismatch();\n        }else { c_ec28e142(0x279f9d4be802e4db); /* branch */ \n}\nc_ec28e142(0x821f7d22d8895921); /* line */ \n        c_ec28e142(0x9a0b4c2256b7d499); /* statement */ \nResilientOracleInterface oracle = comptroller.oracle();\n\n        // Decimals are accounted for in the oracle contract\nc_ec28e142(0xfc01adffef53ca96); /* line */ \n        c_ec28e142(0xfe3e3bb5b21f5407); /* statement */ \nuint256 scaledUsdValue = oracle.getUnderlyingPrice(address(convertFrom)) * amount; // the USD value here has 36 decimals\nc_ec28e142(0x5a68584221ae36be); /* line */ \n        c_ec28e142(0x94c48d9deb1b5f06); /* statement */ \nreturn scaledUsdValue / oracle.getUnderlyingPrice(address(convertTo));\n    }\n}\n"
    },
    "contracts/Governance/TokenRedeemer.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity 0.8.25;\nfunction c_123691f8(bytes8 c__123691f8) pure {}\nfunction c_true123691f8(bytes8 c__123691f8) pure returns (bool){ return true; }\nfunction c_false123691f8(bytes8 c__123691f8) pure returns (bool){ return false; }\n\n\nimport { ReentrancyGuard } from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport { Ownable2Step } from \"@openzeppelin/contracts/access/Ownable2Step.sol\";\nimport { ensureNonzeroAddress } from \"@venusprotocol/solidity-utilities/contracts/validators.sol\";\n\nimport { IVAIController, IVToken, IVBep20, IVBNB } from \"../InterfacesV8.sol\";\nimport { Currency, CurrencyLibrary } from \"../lib/Currency.sol\";\n\ncontract TokenRedeemer is ReentrancyGuard, Ownable2Step {\nfunction c_4f0a4cdb(bytes8 c__4f0a4cdb) internal pure {}\nfunction c_true4f0a4cdb(bytes8 c__4f0a4cdb) internal pure returns (bool){ return true; }\nfunction c_false4f0a4cdb(bytes8 c__4f0a4cdb) internal pure returns (bool){ return false; }\nmodifier c_mode3b72109{ c_4f0a4cdb(0xf2c4157bcf74ca12); /* modifier-post */ \n _; }\nmodifier c_mod38e603e3{ c_4f0a4cdb(0x532d635b37d387b8); /* modifier-pre */ \n _; }\nmodifier c_mod7cef2d77{ c_4f0a4cdb(0xcdc3c5310c29b106); /* modifier-post */ \n _; }\nmodifier c_mod98b1f53a{ c_4f0a4cdb(0x6afc8a36bd71225f); /* modifier-pre */ \n _; }\nmodifier c_mod8eea9cc2{ c_4f0a4cdb(0xc076161c2423a6eb); /* modifier-post */ \n _; }\nmodifier c_mod2ffa789a{ c_4f0a4cdb(0xf8768b7313fc0046); /* modifier-pre */ \n _; }\nmodifier c_modc0b23940{ c_4f0a4cdb(0x440045236f988fd9); /* modifier-post */ \n _; }\nmodifier c_modcac26846{ c_4f0a4cdb(0x4deb823d067379d0); /* modifier-pre */ \n _; }\nmodifier c_mod711e1624{ c_4f0a4cdb(0x52cde8cde72152fd); /* modifier-post */ \n _; }\nmodifier c_modfff37233{ c_4f0a4cdb(0x3d71f9be7b795244); /* modifier-pre */ \n _; }\nmodifier c_mod1870b3e1{ c_4f0a4cdb(0x6f20b4070e0be6f8); /* modifier-post */ \n _; }\nmodifier c_mod6aecf22d{ c_4f0a4cdb(0xf3a5ee36174515db); /* modifier-pre */ \n _; }\nmodifier c_moda0cee30c{ c_4f0a4cdb(0xb9e818f1fe426db3); /* modifier-post */ \n _; }\nmodifier c_mod94c7ee3a{ c_4f0a4cdb(0x5c5f41dd3bdb95ce); /* modifier-pre */ \n _; }\nmodifier c_modc8ed7c5a{ c_4f0a4cdb(0x9fbed71fb009afa6); /* modifier-post */ \n _; }\nmodifier c_modc219b211{ c_4f0a4cdb(0x1024c2759c1014aa); /* modifier-pre */ \n _; }\nmodifier c_modefba1044{ c_4f0a4cdb(0x3b422f0f064378b5); /* modifier-post */ \n _; }\nmodifier c_mod069dd3a4{ c_4f0a4cdb(0x11199242af6b28d8); /* modifier-pre */ \n _; }\nmodifier c_mod81fc7cb6{ c_4f0a4cdb(0x33cb3e80f6504bdd); /* modifier-post */ \n _; }\nmodifier c_mod47dfb338{ c_4f0a4cdb(0x2a95a0df102c7e1c); /* modifier-pre */ \n _; }\nmodifier c_mod389dcd3e{ c_4f0a4cdb(0x6544950958011efe); /* modifier-post */ \n _; }\nmodifier c_mod26c850b8{ c_4f0a4cdb(0x290da6337d90ba52); /* modifier-pre */ \n _; }\n\n    using CurrencyLibrary for Currency;\n\n    struct Repayment {\n        address borrower;\n        uint256 amount;\n    }\n\n    IVBNB public immutable VBNB;\n\n    error AccrueInterestFailed(uint256 errCode);\n    error RedeemFailed(uint256 errCode);\n    error RepaymentFailed(uint256 errCode);\n    error NativeTokenTransferFailed();\n\n    constructor(address owner_, IVBNB vBNB) {c_4f0a4cdb(0xb97b65cf12d6d368); /* function */ \n\nc_4f0a4cdb(0x61f0cc3a6d4f2628); /* line */ \n        c_4f0a4cdb(0xb5dd9246fe1b53e1); /* statement */ \nensureNonzeroAddress(owner_);\nc_4f0a4cdb(0x69948d4296d6d917); /* line */ \n        VBNB = vBNB;\nc_4f0a4cdb(0xbe17da1cb47cebb3); /* line */ \n        c_4f0a4cdb(0x55ce2ff848155af6); /* statement */ \n_transferOwnership(owner_);\n    }\n\n    receive() external payable {}\n\n    function redeemAndTransfer(IVToken vToken, address destination) external  c_mod26c850b8 nonReentrant c_mod389dcd3e   c_mod47dfb338 onlyOwner c_mod81fc7cb6  {c_4f0a4cdb(0x003435a9d9cf878d); /* function */ \n\nc_4f0a4cdb(0x61949a18d8b545f5); /* line */ \n        c_4f0a4cdb(0x847182480c4a9e44); /* statement */ \nCurrency underlying = _underlying(vToken);\nc_4f0a4cdb(0x827f5dea4c7cc2cc); /* line */ \n        c_4f0a4cdb(0xe243b406584bd1d4); /* statement */ \nuint256 err = vToken.redeem(vToken.balanceOf(address(this)));\nc_4f0a4cdb(0xd226fc1ec6f0f1ff); /* line */ \n        c_4f0a4cdb(0x0f4072c57e55d9a9); /* statement */ \nif (err != 0) {c_4f0a4cdb(0x90566e76d940eb72); /* branch */ \n\nc_4f0a4cdb(0x3fabfb35fd5b6a8d); /* line */ \n            revert RedeemFailed(err);\n        }else { c_4f0a4cdb(0xdf66ff3aa8c440e8); /* branch */ \n}\nc_4f0a4cdb(0x0f1ae0bf30be1a88); /* line */ \n        c_4f0a4cdb(0x7d8430d5a9d7c213); /* statement */ \nunderlying.transferAll(destination);\n    }\n\n    function redeemUnderlyingAndTransfer(\n        IVToken vToken,\n        address destination,\n        uint256 amount,\n        address receiver\n    ) external  c_mod069dd3a4 nonReentrant c_modefba1044   c_modc219b211 onlyOwner c_modc8ed7c5a  {c_4f0a4cdb(0xb651cf72cf3ed559); /* function */ \n\nc_4f0a4cdb(0xdb7b2f4a3e7fecd9); /* line */ \n        c_4f0a4cdb(0x261f53f48d25d1e4); /* statement */ \nCurrency underlying = _underlying(vToken);\nc_4f0a4cdb(0xb1ef6b23fa5ba1be); /* line */ \n        c_4f0a4cdb(0x540f58a2ea52e9e7); /* statement */ \nunderlying.transferAll(receiver); // Just in case there were some underlying tokens on the contract\nc_4f0a4cdb(0x6e868681bd34d60a); /* line */ \n        c_4f0a4cdb(0xec304aa7d8bb6f4d); /* statement */ \nuint256 err = vToken.redeemUnderlying(amount);\nc_4f0a4cdb(0xac2babcc00fdad5c); /* line */ \n        c_4f0a4cdb(0xfd8d35074ac3f706); /* statement */ \nif (err != 0) {c_4f0a4cdb(0x09f7c9c0f1d16f22); /* branch */ \n\nc_4f0a4cdb(0xb110e6de204519d1); /* line */ \n            revert RedeemFailed(err);\n        }else { c_4f0a4cdb(0x2d4bb7a87a1ce4cb); /* branch */ \n}\nc_4f0a4cdb(0x17dcf12d08b84296); /* line */ \n        c_4f0a4cdb(0xb431d93cba4a5684); /* statement */ \nunderlying.transferAll(destination);\nc_4f0a4cdb(0x3a4dc99840ba6de4); /* line */ \n        c_4f0a4cdb(0x67e1d5294a6d3201); /* statement */ \nCurrency.wrap(address(vToken)).transferAll(receiver);\n    }\n\n    function redeemUnderlyingAndRepayBorrowBehalf(\n        IVToken vToken,\n        address borrower,\n        uint256 amount,\n        address receiver\n    ) external  c_mod94c7ee3a nonReentrant c_moda0cee30c   c_mod6aecf22d onlyOwner c_mod1870b3e1  {c_4f0a4cdb(0x17c32ab1d66473aa); /* function */ \n\nc_4f0a4cdb(0x5fc218b758f32a61); /* line */ \n        c_4f0a4cdb(0x271b0fc895b2455d); /* statement */ \nCurrency underlying = _underlying(vToken);\n\nc_4f0a4cdb(0x6a4676504097ae88); /* line */ \n        c_4f0a4cdb(0x33afa95dfeba41b6); /* statement */ \nuint256 err = vToken.redeemUnderlying(amount);\nc_4f0a4cdb(0xf021066264589042); /* line */ \n        c_4f0a4cdb(0x4ff5574401b00bc2); /* statement */ \nif (err != 0) {c_4f0a4cdb(0x548ecb85bd09a243); /* branch */ \n\nc_4f0a4cdb(0xd994414fefcfeaf2); /* line */ \n            revert RedeemFailed(err);\n        }else { c_4f0a4cdb(0xb719e99ffe7b6572); /* branch */ \n}\n\nc_4f0a4cdb(0xb43b097a077fd06b); /* line */ \n        c_4f0a4cdb(0x5a1217a460547b3a); /* statement */ \nunderlying.approve(address(vToken), amount);\n\nc_4f0a4cdb(0x993acce3c4192cb3); /* line */ \n        c_4f0a4cdb(0xcedcf878de96d261); /* statement */ \n_repay(vToken, borrower, amount);\n\nc_4f0a4cdb(0x9d901400a52b1ebe); /* line */ \n        c_4f0a4cdb(0x4a0b81f729766933); /* statement */ \nunderlying.approve(address(vToken), 0);\n\nc_4f0a4cdb(0x074e2359c8209c3a); /* line */ \n        c_4f0a4cdb(0x913d19214f65aab5); /* statement */ \nunderlying.transferAll(receiver);\nc_4f0a4cdb(0xa678f9f14efb60a5); /* line */ \n        c_4f0a4cdb(0xa1bd1a7833f42f48); /* statement */ \nCurrency.wrap(address(vToken)).transferAll(receiver);\n    }\n\n    function redeemAndBatchRepay(\n        IVToken vToken,\n        Repayment[] calldata requestedRepayments,\n        address receiver\n    ) external  c_modfff37233 nonReentrant c_mod711e1624   c_modcac26846 onlyOwner c_modc0b23940  {c_4f0a4cdb(0xd1d3e761a665ca53); /* function */ \n\nc_4f0a4cdb(0xab63386a5515078c); /* line */ \n        c_4f0a4cdb(0x666e2d0e0d7b403d); /* statement */ \n_accrueInterest(vToken);\n\nc_4f0a4cdb(0xf718eefb089e4076); /* line */ \n        c_4f0a4cdb(0x75445a4706515a4f); /* statement */ \n(uint256 totalBorrowedAmount, Repayment[] memory repayments) = _getAmountsToRepay(vToken, requestedRepayments);\nc_4f0a4cdb(0xbe25af41f11259e8); /* line */ \n        c_4f0a4cdb(0xacba177d64dee5ee); /* statement */ \n_redeemUpTo(vToken, totalBorrowedAmount);\n\nc_4f0a4cdb(0x5fc8c02f8e0dc0e3); /* line */ \n        c_4f0a4cdb(0xf6cd02f90d42502e); /* statement */ \nCurrency underlying = _underlying(vToken);\nc_4f0a4cdb(0x1e3baf5aca074abb); /* line */ \n        c_4f0a4cdb(0x7401d637480d5eb7); /* statement */ \nuint256 balance = underlying.balanceOfSelf();\nc_4f0a4cdb(0x71b3bf03f4efbe15); /* line */ \n        c_4f0a4cdb(0x1f4fb87f9a124f8c); /* statement */ \nunderlying.approve(address(vToken), totalBorrowedAmount);\nc_4f0a4cdb(0xc36c07d8457090c5); /* line */ \n        c_4f0a4cdb(0x787f23435983df44); /* statement */ \nuint256 repaymentsCount = repayments.length;\n        // The code below assumes no fees on transfer\nc_4f0a4cdb(0x8bd1f0c57aecbb92); /* line */ \n        c_4f0a4cdb(0x742fc6be8b319b4b); /* statement */ \nif (balance >= totalBorrowedAmount) {c_4f0a4cdb(0xd48a5e822b2676a8); /* branch */ \n\n            // If we're doing a full repayment, we can optimize it by skipping the balance checks\nc_4f0a4cdb(0x7b3d85601f115434); /* line */ \n            c_4f0a4cdb(0xfa373515e914aba6); /* statement */ \nfor (uint256 i = 0; i < repaymentsCount; ++i) {\nc_4f0a4cdb(0x8dde8ebc638d0ffe); /* line */ \n                c_4f0a4cdb(0x8b08a8e2271ca5d0); /* statement */ \nRepayment memory repayment = repayments[i];\nc_4f0a4cdb(0x0a1f213efd18c084); /* line */ \n                c_4f0a4cdb(0x37695a32e57e264a); /* statement */ \n_repay(vToken, repayment.borrower, repayment.amount);\n            }\n        } else {c_4f0a4cdb(0x1febfbb4bde1f4ea); /* branch */ \n\n            // Otherwise, we have to check and update the balance on every iteration\nc_4f0a4cdb(0x4d56da5fab23fafb); /* line */ \n            c_4f0a4cdb(0x3e4b2d95d859dbf2); /* statement */ \nfor (uint256 i = 0; i < repaymentsCount && balance != 0; ++i) {\nc_4f0a4cdb(0x750f05a1357aa097); /* line */ \n                c_4f0a4cdb(0xf8176b913986bce2); /* statement */ \nRepayment memory repayment = repayments[i];\nc_4f0a4cdb(0xd0325e71c18e1516); /* line */ \n                c_4f0a4cdb(0x2834c889196abaf1); /* statement */ \n_repay(vToken, repayment.borrower, _min(repayment.amount, balance));\nc_4f0a4cdb(0x75a2ad80933da70e); /* line */ \n                balance = underlying.balanceOfSelf();\n            }\n        }\nc_4f0a4cdb(0xdedc8560c9a25448); /* line */ \n        c_4f0a4cdb(0x53d4449cd327dedd); /* statement */ \nunderlying.approve(address(vToken), 0);\n\nc_4f0a4cdb(0x6c7f482475cdd75c); /* line */ \n        c_4f0a4cdb(0xff64e08032caee70); /* statement */ \nunderlying.transferAll(receiver);\nc_4f0a4cdb(0xe7c725a6bc29fdc8); /* line */ \n        c_4f0a4cdb(0x591fd877f547f006); /* statement */ \nCurrency.wrap(address(vToken)).transferAll(receiver);\n    }\n\n    function batchRepayVAI(\n        IVAIController vaiController,\n        Repayment[] calldata requestedRepayments,\n        address receiver\n    ) external  c_mod2ffa789a nonReentrant c_mod8eea9cc2   c_mod98b1f53a onlyOwner c_mod7cef2d77  {c_4f0a4cdb(0xd98451a6adca92c5); /* function */ \n\nc_4f0a4cdb(0x3833f27bbeecb4c0); /* line */ \n        c_4f0a4cdb(0xe4c6a5bcf6d046ae); /* statement */ \nvaiController.accrueVAIInterest();\nc_4f0a4cdb(0xbc5807474a2c4146); /* line */ \n        c_4f0a4cdb(0x8c96c1dbd93f31ab); /* statement */ \nCurrency vai = Currency.wrap(vaiController.getVAIAddress());\nc_4f0a4cdb(0x14fe14ad7c9362dc); /* line */ \n        c_4f0a4cdb(0x93a685a14bf56191); /* statement */ \nuint256 balance = vai.balanceOfSelf();\nc_4f0a4cdb(0xd68711886a28814e); /* line */ \n        c_4f0a4cdb(0xa81ca94519ff561c); /* statement */ \nvai.approve(address(vaiController), type(uint256).max);\nc_4f0a4cdb(0xbae5f0ee7fc36c85); /* line */ \n        c_4f0a4cdb(0xa7e1977cf86ae87d); /* statement */ \nuint256 repaymentsCount = requestedRepayments.length;\nc_4f0a4cdb(0x0c6049b228c907f4); /* line */ \n        c_4f0a4cdb(0xc11585b3602f7bc1); /* statement */ \nfor (uint256 i = 0; i < repaymentsCount && balance != 0; ++i) {\nc_4f0a4cdb(0x44911920b5ce4220); /* line */ \n            c_4f0a4cdb(0x8c754975eeb2efec); /* statement */ \nRepayment calldata requestedRepayment = requestedRepayments[i];\nc_4f0a4cdb(0x974762f62e82ef49); /* line */ \n            c_4f0a4cdb(0x3bdf7d78312e0401); /* statement */ \nuint256 repaymentCap = requestedRepayment.amount;\nc_4f0a4cdb(0x0d96d7e5e77ea03d); /* line */ \n            c_4f0a4cdb(0xda6fa41874728b54); /* statement */ \nuint256 debt = vaiController.getVAIRepayAmount(requestedRepayment.borrower);\nc_4f0a4cdb(0xb94910457c7000f9); /* line */ \n            c_4f0a4cdb(0x2bcd7970a7967939); /* statement */ \nuint256 amount = _min(repaymentCap, debt);\nc_4f0a4cdb(0x44a7fc28ae9cd370); /* line */ \n            c_4f0a4cdb(0x5882396b7d68cada); /* statement */ \n_repayVAI(vaiController, requestedRepayment.borrower, _min(amount, balance));\nc_4f0a4cdb(0x3a7842747296914b); /* line */ \n            balance = vai.balanceOfSelf();\n        }\nc_4f0a4cdb(0xfdb4fc3d3751d568); /* line */ \n        c_4f0a4cdb(0x763f451fba9e329b); /* statement */ \nvai.approve(address(vaiController), 0);\nc_4f0a4cdb(0xca6003785586f353); /* line */ \n        c_4f0a4cdb(0x76d5599be16a1885); /* statement */ \nvai.transferAll(receiver);\n    }\n\n    function sweepTokens(address token, address destination) external  c_mod38e603e3 onlyOwner c_mode3b72109  {c_4f0a4cdb(0x4808605bbd51a64b); /* function */ \n\nc_4f0a4cdb(0xe7bb6703120fbefa); /* line */ \n        c_4f0a4cdb(0xe35e60b0f97f7c5a); /* statement */ \nCurrency.wrap(token).transferAll(destination);\n    }\n\n    function _accrueInterest(IVToken vToken) internal {c_4f0a4cdb(0x8ba0a44bfd7bbe47); /* function */ \n\nc_4f0a4cdb(0x1d7ef2455caa0ac4); /* line */ \n        c_4f0a4cdb(0x600cbd49ff6b80cc); /* statement */ \nuint256 err = vToken.accrueInterest();\nc_4f0a4cdb(0x3211f16e8c9cedbd); /* line */ \n        c_4f0a4cdb(0x09d6f7712a37703d); /* statement */ \nif (err != 0) {c_4f0a4cdb(0x2b8d306ac78d4ce7); /* branch */ \n\nc_4f0a4cdb(0xe6a8f1feea1880bc); /* line */ \n            revert AccrueInterestFailed(err);\n        }else { c_4f0a4cdb(0xa31f6cbed6eddb12); /* branch */ \n}\n    }\n\n    function _redeemUpTo(IVToken vToken, uint256 amount) internal {c_4f0a4cdb(0xbcd7007c64143a07); /* function */ \n\nc_4f0a4cdb(0x069505896843aa12); /* line */ \n        c_4f0a4cdb(0xff6b381ffaa7995e); /* statement */ \nuint256 unredeemedUnderlying = vToken.balanceOfUnderlying(address(this));\nc_4f0a4cdb(0x670e186c6f6b9315); /* line */ \n        c_4f0a4cdb(0x6f3e53bda8c4c2db); /* statement */ \nif (unredeemedUnderlying > 0) {c_4f0a4cdb(0xb770994c97754c68); /* branch */ \n\nc_4f0a4cdb(0xcff6373b7cb90b85); /* line */ \n            c_4f0a4cdb(0x8169942f5dbcfb9b); /* statement */ \nuint256 err = vToken.redeemUnderlying(_min(amount, unredeemedUnderlying));\nc_4f0a4cdb(0xff4dca7f1eebc198); /* line */ \n            c_4f0a4cdb(0x94d570ddfdd17417); /* statement */ \nif (err != 0) {c_4f0a4cdb(0x98d2ac18cebad518); /* branch */ \n\nc_4f0a4cdb(0xabb3e7ec3b11cf83); /* line */ \n                revert RedeemFailed(err);\n            }else { c_4f0a4cdb(0xeb00eda255901abc); /* branch */ \n}\n        }else { c_4f0a4cdb(0x72f61fc6d1b85399); /* branch */ \n}\n    }\n\n    function _repay(IVToken vToken, address borrower, uint256 amount) internal {c_4f0a4cdb(0x7c67f8707b2cfaba); /* function */ \n\nc_4f0a4cdb(0x68c734d6d767cf08); /* line */ \n        c_4f0a4cdb(0xfa0c0364a6ef81d4); /* statement */ \nif (amount == 0) {c_4f0a4cdb(0x0becf5fd40091a51); /* branch */ \n\nc_4f0a4cdb(0x69abddef59542d3e); /* line */ \n            c_4f0a4cdb(0x096e7b7e22fa7829); /* statement */ \nreturn;\n        }else { c_4f0a4cdb(0x4dd68be270b51832); /* branch */ \n}\nc_4f0a4cdb(0x9f2450d6be70ff9a); /* line */ \n        c_4f0a4cdb(0xa7219bc8d7ce1c7a); /* statement */ \nif (_isVBNB(vToken)) {c_4f0a4cdb(0xb56817076742f8e5); /* branch */ \n\nc_4f0a4cdb(0x0aadcb511a1a6681); /* line */ \n            c_4f0a4cdb(0xe075c428d39b160b); /* statement */ \nIVBNB(address(vToken)).repayBorrowBehalf{ value: amount }(borrower);\n        } else {c_4f0a4cdb(0x2089671e46dcb16b); /* branch */ \n\nc_4f0a4cdb(0x0d4092c6fd51228c); /* line */ \n            c_4f0a4cdb(0x01ef3a6705d9fae4); /* statement */ \nuint256 err = IVBep20(address(vToken)).repayBorrowBehalf(borrower, amount);\nc_4f0a4cdb(0xc4aa19b45567c8eb); /* line */ \n            c_4f0a4cdb(0x3a83a331c6b1772a); /* statement */ \nif (err != 0) {c_4f0a4cdb(0xaded55c3cbe88ded); /* branch */ \n\nc_4f0a4cdb(0x848e749d733f4641); /* line */ \n                revert RepaymentFailed(err);\n            }else { c_4f0a4cdb(0xdb93287a535e80c8); /* branch */ \n}\n        }\n    }\n\n    function _repayVAI(IVAIController vaiController, address borrower, uint256 amount) internal {c_4f0a4cdb(0xc7ed3857e6d57b9f); /* function */ \n\nc_4f0a4cdb(0x354be08865661b7f); /* line */ \n        c_4f0a4cdb(0xab312d5d9bde62ef); /* statement */ \nif (amount == 0) {c_4f0a4cdb(0x02f96f6170fb76a8); /* branch */ \n\nc_4f0a4cdb(0x41f10219147ed753); /* line */ \n            c_4f0a4cdb(0x1c0bf292cd00fd84); /* statement */ \nreturn;\n        }else { c_4f0a4cdb(0x9487cd6fb6ec8b45); /* branch */ \n}\nc_4f0a4cdb(0x2dc0408dc005cf47); /* line */ \n        c_4f0a4cdb(0xc87a01eebcc26a76); /* statement */ \n(uint256 err, ) = vaiController.repayVAIBehalf(borrower, amount);\nc_4f0a4cdb(0xcf21cfd1a2c17ce9); /* line */ \n        c_4f0a4cdb(0xef1a4dc95e50b416); /* statement */ \nif (err != 0) {c_4f0a4cdb(0x931ea10d1de32090); /* branch */ \n\nc_4f0a4cdb(0x6aca8c407de2ecac); /* line */ \n            revert RepaymentFailed(err);\n        }else { c_4f0a4cdb(0x49de51eeb70f2851); /* branch */ \n}\n    }\n\n    function _getAmountsToRepay(\n        IVToken vToken,\n        Repayment[] calldata requestedRepayments\n    ) internal view returns (uint256, Repayment[] memory) {c_4f0a4cdb(0x727fb789aff89c42); /* function */ \n\nc_4f0a4cdb(0x5607efa8121ded0b); /* line */ \n        c_4f0a4cdb(0xd642bca819d1f0f8); /* statement */ \nuint256 repaymentsCount = requestedRepayments.length;\nc_4f0a4cdb(0x528a63f0ff5ea94b); /* line */ \n        c_4f0a4cdb(0x59d80d130fd9cf58); /* statement */ \nRepayment[] memory actualRepayments = new Repayment[](repaymentsCount);\nc_4f0a4cdb(0xf506bd5fa4faea86); /* line */ \n        c_4f0a4cdb(0x53fb3a388725ec4b); /* statement */ \nuint256 totalAmountToRepay = 0;\nc_4f0a4cdb(0x010d615f35641bd9); /* line */ \n        c_4f0a4cdb(0xc824fa057e7b029f); /* statement */ \nfor (uint256 i = 0; i < repaymentsCount; ++i) {\nc_4f0a4cdb(0xe2f94275d65aef86); /* line */ \n            c_4f0a4cdb(0x4b21ba0a2641b361); /* statement */ \nRepayment calldata requestedRepayment = requestedRepayments[i];\nc_4f0a4cdb(0x39f4ee70adc02986); /* line */ \n            c_4f0a4cdb(0x383a9db1aaf80716); /* statement */ \nuint256 repaymentCap = requestedRepayment.amount;\nc_4f0a4cdb(0x2f1edee3f67b8f88); /* line */ \n            c_4f0a4cdb(0x22aef0bd0e137312); /* statement */ \nuint256 debt = vToken.borrowBalanceStored(requestedRepayment.borrower);\nc_4f0a4cdb(0x0abfd273731996aa); /* line */ \n            c_4f0a4cdb(0x3d6e75da89291a95); /* statement */ \nuint256 amountToRepay = _min(repaymentCap, debt);\nc_4f0a4cdb(0xe749877608bdfd20); /* line */ \n            totalAmountToRepay += amountToRepay;\nc_4f0a4cdb(0x99c40b8c1d97e9dc); /* line */ \n            actualRepayments[i] = Repayment({ borrower: requestedRepayment.borrower, amount: amountToRepay });\n        }\nc_4f0a4cdb(0xe66eb1916c2c724f); /* line */ \n        c_4f0a4cdb(0xeb9c696dd6477d04); /* statement */ \nreturn (totalAmountToRepay, actualRepayments);\n    }\n\n    function _underlying(IVToken vToken) internal view returns (Currency) {c_4f0a4cdb(0xc435aab84c1c62cf); /* function */ \n\nc_4f0a4cdb(0x7296de22bd2297ab); /* line */ \n        c_4f0a4cdb(0x5113f7aaa4b258d7); /* statement */ \nif (_isVBNB(vToken)) {c_4f0a4cdb(0x9aacaede38661353); /* branch */ \n\nc_4f0a4cdb(0xa686d840d171fc01); /* line */ \n            c_4f0a4cdb(0x7a6611cd61378807); /* statement */ \nreturn CurrencyLibrary.NATIVE;\n        }else { c_4f0a4cdb(0xb5e545d5f42ea832); /* branch */ \n}\nc_4f0a4cdb(0x41443a872d661794); /* line */ \n        c_4f0a4cdb(0x952e20c6911e487d); /* statement */ \nreturn Currency.wrap(IVBep20(address(vToken)).underlying());\n    }\n\n    function _isVBNB(IVToken vToken) internal view returns (bool) {c_4f0a4cdb(0x9f036b20cfe5c905); /* function */ \n\nc_4f0a4cdb(0x53113e8c5a6ec9e8); /* line */ \n        c_4f0a4cdb(0xbcbabccfc33913eb); /* statement */ \nreturn address(vToken) == address(VBNB);\n    }\n\n    function _min(uint256 a, uint256 b) internal pure returns (uint256) {c_4f0a4cdb(0xdea9c9c2d4f0ae55); /* function */ \n\nc_4f0a4cdb(0xad78af16b88fc126); /* line */ \n        c_4f0a4cdb(0x3916d2b4efc6705e); /* statement */ \nreturn ((a < b || c_false4f0a4cdb(0xc9992c349f0fa483)) && c_true4f0a4cdb(0xbe1542ddca19477b)) ? a : b;\n    }\n}\n"
    },
    "contracts/Governance/VTreasuryV8.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity 0.8.25;\nfunction c_eb59d05e(bytes8 c__eb59d05e) pure {}\nfunction c_trueeb59d05e(bytes8 c__eb59d05e) pure returns (bool){ return true; }\nfunction c_falseeb59d05e(bytes8 c__eb59d05e) pure returns (bool){ return false; }\n\n\nimport { SafeERC20, IERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { Ownable2Step } from \"@openzeppelin/contracts/access/Ownable2Step.sol\";\nimport { ReentrancyGuard } from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\n/**\n * @title VTreasuryV8\n * @author Venus\n * @notice Protocol treasury that holds tokens owned by Venus\n */\ncontract VTreasuryV8 is Ownable2Step, ReentrancyGuard {\nfunction c_994a2ca1(bytes8 c__994a2ca1) internal pure {}\nfunction c_true994a2ca1(bytes8 c__994a2ca1) internal pure returns (bool){ return true; }\nfunction c_false994a2ca1(bytes8 c__994a2ca1) internal pure returns (bool){ return false; }\nmodifier c_mod494bb52d{ c_994a2ca1(0x0d004fbb52fcec49); /* modifier-post */ \n _; }\nmodifier c_mod6732e02d{ c_994a2ca1(0x15e0b03f76cc067e); /* modifier-pre */ \n _; }\nmodifier c_moddd3fb898{ c_994a2ca1(0x536136d0d6287973); /* modifier-post */ \n _; }\nmodifier c_mod4ea1fefa{ c_994a2ca1(0xa43845b17a81bd93); /* modifier-pre */ \n _; }\nmodifier c_mod378bfde5{ c_994a2ca1(0xa13721953037760d); /* modifier-post */ \n _; }\nmodifier c_mod54b602ac{ c_994a2ca1(0xe822ac35a51e9591); /* modifier-pre */ \n _; }\nmodifier c_modc1cdc4b7{ c_994a2ca1(0xb485d46fcb2178e2); /* modifier-post */ \n _; }\nmodifier c_mod48282de1{ c_994a2ca1(0x9ea150c47546795f); /* modifier-pre */ \n _; }\n\n    using SafeERC20 for IERC20;\n\n    // WithdrawTreasuryToken Event\n    event WithdrawTreasuryToken(address indexed tokenAddress, uint256 withdrawAmount, address indexed withdrawAddress);\n\n    // WithdrawTreasuryNative Event\n    event WithdrawTreasuryNative(uint256 withdrawAmount, address indexed withdrawAddress);\n\n    /// @notice Thrown if the supplied address is a zero address where it is not allowed\n    error ZeroAddressNotAllowed();\n\n    /**\n     * @notice To receive Native when msg.data is not empty\n     */\n    fallback() external payable {c_994a2ca1(0xb3f7554f7ab90591); /* function */ \n}\n\n    /**\n     * @notice To receive Native when msg.data is empty\n     */\n    receive() external payable {}\n\n    /**\n     * @notice Withdraw Treasury  Tokens, Only owner call it\n     * @param tokenAddress The address of treasury token\n     * @param withdrawAmount The withdraw amount to owner\n     * @param withdrawAddress The withdraw address\n     * @custom:error ZeroAddressNotAllowed thrown when token or withdrawAddress is zero.\n     */\n    function withdrawTreasuryToken(\n        address tokenAddress,\n        uint256 withdrawAmount,\n        address withdrawAddress\n    ) external  c_mod48282de1 onlyOwner c_modc1cdc4b7   c_mod54b602ac nonReentrant c_mod378bfde5  {c_994a2ca1(0x1d732985159333d5); /* function */ \n\nc_994a2ca1(0xf3f677bc7053c059); /* line */ \n        c_994a2ca1(0x69a50f003f8991f9); /* statement */ \nensureNonzeroAddress(tokenAddress);\nc_994a2ca1(0x38e1fb1004022fb5); /* line */ \n        c_994a2ca1(0xbdeb57322b6087f7); /* statement */ \nensureNonzeroAddress(withdrawAddress);\nc_994a2ca1(0x80452f90790c9486); /* line */ \n        c_994a2ca1(0x44bdbe205cf440e1); /* requirePre */ \nc_994a2ca1(0x09652f6f7ad1d0c7); /* statement */ \nrequire(withdrawAmount > 0, \"withdrawAmount must not be zero\");c_994a2ca1(0x5a22b770950d6f56); /* requirePost */ \n\n\nc_994a2ca1(0x25827d15b908d082); /* line */ \n        c_994a2ca1(0x5e6f3957279eace9); /* statement */ \nuint256 actualWithdrawAmount = withdrawAmount;\n        // Get Treasury Token Balance\nc_994a2ca1(0x0e3a449ebdae568a); /* line */ \n        c_994a2ca1(0x39b39e60788fc245); /* statement */ \nuint256 treasuryBalance = IERC20(tokenAddress).balanceOf(address(this));\n\n        // Check Withdraw Amount\nc_994a2ca1(0xb0966204b2faaa5e); /* line */ \n        c_994a2ca1(0xc19821ba9277ebee); /* statement */ \nif (withdrawAmount > treasuryBalance) {c_994a2ca1(0xa8880234fe310baa); /* branch */ \n\n            // Update actualWithdrawAmount\nc_994a2ca1(0xfdba0a0a1ec5ad11); /* line */ \n            actualWithdrawAmount = treasuryBalance;\n        }else { c_994a2ca1(0xe2712802d4afa550); /* branch */ \n}\n\n        // Transfer Token to withdrawAddress\nc_994a2ca1(0x3c2f099110ed2104); /* line */ \n        c_994a2ca1(0x370f667d435d1044); /* statement */ \nIERC20(tokenAddress).safeTransfer(withdrawAddress, actualWithdrawAmount);\n\nc_994a2ca1(0xc4760b3e1190e228); /* line */ \n        c_994a2ca1(0x65c2ed01f74ee556); /* statement */ \nemit WithdrawTreasuryToken(tokenAddress, actualWithdrawAmount, withdrawAddress);\n    }\n\n    /**\n     * @notice Withdraw Treasury Native, Only owner call it\n     * @param withdrawAmount The withdraw amount to owner\n     * @param withdrawAddress The withdraw address\n     * @custom:error ZeroAddressNotAllowed thrown when withdrawAddress is zero.\n     */\n    function withdrawTreasuryNative(\n        uint256 withdrawAmount,\n        address payable withdrawAddress\n    ) external payable  c_mod4ea1fefa onlyOwner c_moddd3fb898   c_mod6732e02d nonReentrant c_mod494bb52d  {c_994a2ca1(0xb6f999cee62a2b39); /* function */ \n\nc_994a2ca1(0xfff6d470bb03ef9e); /* line */ \n        c_994a2ca1(0xd0a0b2748f53e470); /* statement */ \nensureNonzeroAddress(withdrawAddress);\nc_994a2ca1(0xf131e3dc882e0e08); /* line */ \n        c_994a2ca1(0x7c75eadbcfdb8c21); /* requirePre */ \nc_994a2ca1(0x487aaecd7f6e45dd); /* statement */ \nrequire(withdrawAmount > 0, \"withdrawAmount must not be zero\");c_994a2ca1(0x9db92201ce63d644); /* requirePost */ \n\nc_994a2ca1(0xad4b7e597db8b9b9); /* line */ \n        c_994a2ca1(0x72c17820e5234475); /* statement */ \nuint256 actualWithdrawAmount = withdrawAmount;\n        // Get Treasury Native Balance\nc_994a2ca1(0x8e7e52a999038b7c); /* line */ \n        c_994a2ca1(0xd4deab5bb73af42f); /* statement */ \nuint256 nativeBalance = address(this).balance;\n\n        // Check Withdraw Amount\nc_994a2ca1(0x68e3fa861bd48349); /* line */ \n        c_994a2ca1(0xfbbc88c18768562e); /* statement */ \nif (withdrawAmount > nativeBalance) {c_994a2ca1(0x294e32bcb86ca89a); /* branch */ \n\n            // Update actualWithdrawAmount\nc_994a2ca1(0x87ba7aa4731726a9); /* line */ \n            actualWithdrawAmount = nativeBalance;\n        }else { c_994a2ca1(0xc2628cb359042ec6); /* branch */ \n}\n        // Transfer the native token to withdrawAddress\nc_994a2ca1(0xae1feb994b640997); /* line */ \n        c_994a2ca1(0x7b206dd5d73d95cd); /* statement */ \n(bool sent, ) = withdrawAddress.call{ value: actualWithdrawAmount }(\"\");\nc_994a2ca1(0x3fd5a3af630fc7c4); /* line */ \n        c_994a2ca1(0x5ecc5f1bf93200dd); /* requirePre */ \nc_994a2ca1(0x276cb6af5d03c6dd); /* statement */ \nrequire(sent, \"Call failed\");c_994a2ca1(0x9966b9c5cb4aeb90); /* requirePost */ \n\nc_994a2ca1(0xd05d4c62a2b35829); /* line */ \n        c_994a2ca1(0x1bc484f42c28fa47); /* statement */ \nemit WithdrawTreasuryNative(actualWithdrawAmount, withdrawAddress);\n    }\n\n    /// @notice Checks if the provided address is nonzero, reverts otherwise\n    /// @param address_ Address to check\n    /// @custom:error ZeroAddressNotAllowed is thrown if the provided address is a zero address\n    function ensureNonzeroAddress(address address_) internal pure {c_994a2ca1(0xb5498d9a23dde69e); /* function */ \n\nc_994a2ca1(0x318dc80456cfa404); /* line */ \n        c_994a2ca1(0x5220559f1813d542); /* statement */ \nif (address_ == address(0)) {c_994a2ca1(0x7d881a5f17c8f49f); /* branch */ \n\nc_994a2ca1(0xe3f1435783e73239); /* line */ \n            revert ZeroAddressNotAllowed();\n        }else { c_994a2ca1(0xda4d42e3a589b9a0); /* branch */ \n}\n    }\n}\n"
    },
    "contracts/hardhat-dependency-compiler/hardhat-deploy/solc_0.8/openzeppelin/proxy/transparent/ProxyAdmin.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport 'hardhat-deploy/solc_0.8/openzeppelin/proxy/transparent/ProxyAdmin.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/hardhat-deploy/solc_0.8/proxy/OptimizedTransparentUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport 'hardhat-deploy/solc_0.8/proxy/OptimizedTransparentUpgradeableProxy.sol';\n"
    },
    "contracts/InterestRateModels/InterestRateModelV8.sol": {
      "content": "pragma solidity 0.8.25;\nfunction c_6a5788c6(bytes8 c__6a5788c6) pure {}\nfunction c_true6a5788c6(bytes8 c__6a5788c6) pure returns (bool){ return true; }\nfunction c_false6a5788c6(bytes8 c__6a5788c6) pure returns (bool){ return false; }\n\n\n/**\n * @title Venus's InterestRateModelV8 Interface\n * @author Venus\n */\nabstract contract InterestRateModelV8 {\nfunction c_eb2f538e(bytes8 c__eb2f538e) internal pure {}\nfunction c_trueeb2f538e(bytes8 c__eb2f538e) internal pure returns (bool){ return true; }\nfunction c_falseeb2f538e(bytes8 c__eb2f538e) internal pure returns (bool){ return false; }\n\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\n    bool public constant isInterestRateModel = true;\n\n    /**\n     * @notice Calculates the current borrow interest rate per block\n     * @param cash The total amount of cash the market has\n     * @param borrows The total amount of borrows the market has outstanding\n     * @param reserves The total amnount of reserves the market has\n     * @return The borrow rate per block (as a percentage, and scaled by 1e18)\n     */\n    function getBorrowRate(uint256 cash, uint256 borrows, uint256 reserves) external view virtual returns (uint256);\n\n    /**\n     * @notice Calculates the current supply interest rate per block\n     * @param cash The total amount of cash the market has\n     * @param borrows The total amount of borrows the market has outstanding\n     * @param reserves The total amnount of reserves the market has\n     * @param reserveFactorMantissa The current reserve factor the market has\n     * @return The supply rate per block (as a percentage, and scaled by 1e18)\n     */\n    function getSupplyRate(\n        uint256 cash,\n        uint256 borrows,\n        uint256 reserves,\n        uint256 reserveFactorMantissa\n    ) external view virtual returns (uint256);\n}\n"
    },
    "contracts/InterestRateModels/TwoKinksInterestRateModel.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity 0.8.25;\nfunction c_c5d53ff2(bytes8 c__c5d53ff2) pure {}\nfunction c_truec5d53ff2(bytes8 c__c5d53ff2) pure returns (bool){ return true; }\nfunction c_falsec5d53ff2(bytes8 c__c5d53ff2) pure returns (bool){ return false; }\n\n\nimport { InterestRateModelV8 } from \"./InterestRateModelV8.sol\";\n\n/**\n * @title TwoKinksInterestRateModel\n * @author Venus\n * @notice An interest rate model with two different slope increase or decrease each after a certain utilization threshold called **kink** is reached.\n */\ncontract TwoKinksInterestRateModel is InterestRateModelV8 {\nfunction c_5ea60f1c(bytes8 c__5ea60f1c) internal pure {}\nfunction c_true5ea60f1c(bytes8 c__5ea60f1c) internal pure returns (bool){ return true; }\nfunction c_false5ea60f1c(bytes8 c__5ea60f1c) internal pure returns (bool){ return false; }\n\n    int256 public constant BLOCKS_PER_YEAR = (60 * 60 * 24 * 365) / 3; // (assuming 3s blocks)\n\n    ////////////////////// SLOPE 1 //////////////////////\n\n    /**\n     * @notice The multiplier of utilization rate per block that gives the slope 1 of the interest rate scaled by EXP_SCALE\n     */\n    int256 public immutable MULTIPLIER_PER_BLOCK;\n\n    /**\n     * @notice The base interest rate per block which is the y-intercept when utilization rate is 0 scaled by EXP_SCALE\n     */\n    int256 public immutable BASE_RATE_PER_BLOCK;\n\n    ////////////////////// SLOPE 2 //////////////////////\n\n    /**\n     * @notice The utilization point at which the multiplier2 is applied\n     */\n    int256 public immutable KINK_1;\n\n    /**\n     * @notice The multiplier of utilization rate per block that gives the slope 2 of the interest rate scaled by EXP_SCALE\n     */\n    int256 public immutable MULTIPLIER_2_PER_BLOCK;\n\n    /**\n     * @notice The base interest rate per block which is the y-intercept when utilization rate hits KINK_1 scaled by EXP_SCALE\n     */\n    int256 public immutable BASE_RATE_2_PER_BLOCK;\n\n    /**\n     * @notice The maximum kink interest rate scaled by EXP_SCALE\n     */\n    int256 public immutable RATE_1;\n\n    ////////////////////// SLOPE 3 //////////////////////\n\n    /**\n     * @notice The utilization point at which the jump multiplier is applied\n     */\n    int256 public immutable KINK_2;\n\n    /**\n     * @notice The multiplier of utilization rate per block that gives the slope 3 of interest rate scaled by EXP_SCALE\n     */\n    int256 public immutable JUMP_MULTIPLIER_PER_BLOCK;\n\n    /**\n     * @notice The maximum kink interest rate scaled by EXP_SCALE\n     */\n    int256 public immutable RATE_2;\n\n    /// @notice Base unit for computations, usually used in scaling (multiplications, divisions)\n    uint256 internal constant EXP_SCALE = 1e18;\n\n    /**\n     * @notice Thrown when a negative value is not allowed\n     */\n    error NegativeValueNotAllowed();\n\n    /**\n     * @notice Thrown when the kink points are not in the correct order\n     */\n    error InvalidKink();\n\n    /**\n     * @notice Construct an interest rate model\n     * @param baseRatePerYear_ The approximate target base APR, as a mantissa (scaled by EXP_SCALE)\n     * @param multiplierPerYear_ The rate of increase or decrease in interest rate wrt utilization (scaled by EXP_SCALE)\n     * @param kink1_ The utilization point at which the multiplier2 is applied\n     * @param multiplier2PerYear_ The rate of increase or decrease in interest rate wrt utilization after hitting KINK_1 (scaled by EXP_SCALE)\n     * @param baseRate2PerYear_ The additional base APR after hitting KINK_1, as a mantissa (scaled by EXP_SCALE)\n     * @param kink2_ The utilization point at which the jump multiplier is applied\n     * @param jumpMultiplierPerYear_ The multiplier after hitting KINK_2\n     */\n    constructor(\n        int256 baseRatePerYear_,\n        int256 multiplierPerYear_,\n        int256 kink1_,\n        int256 multiplier2PerYear_,\n        int256 baseRate2PerYear_,\n        int256 kink2_,\n        int256 jumpMultiplierPerYear_\n    ) {c_5ea60f1c(0x259f09f5c5ff8ddb); /* function */ \n\nc_5ea60f1c(0x14325f5661bd3230); /* line */ \n        c_5ea60f1c(0x8e7f9e1e5dae2d6b); /* statement */ \nif ((baseRatePerYear_ < 0 && c_true5ea60f1c(0x29eb83a58dfa0ff6)) || (baseRate2PerYear_ < 0 && c_true5ea60f1c(0x942261dd919e78cb))) {c_5ea60f1c(0xb175c54dcd718f21); /* branch */ \n\nc_5ea60f1c(0x150acac12ca314d6); /* line */ \n            revert NegativeValueNotAllowed();\n        }else { c_5ea60f1c(0xd0b4639401c71577); /* branch */ \n}\n\nc_5ea60f1c(0xe14d8c99aaacf196); /* line */ \n        c_5ea60f1c(0x482b4b0e34e0c405); /* statement */ \nif ((kink2_ <= kink1_ && c_true5ea60f1c(0x60980f45fbf386a2)) || (kink1_ <= 0 && c_true5ea60f1c(0x1ef16ee37545db00))) {c_5ea60f1c(0xa3c8edae9c4d282b); /* branch */ \n\nc_5ea60f1c(0x7f0c4c9de4846b7c); /* line */ \n            revert InvalidKink();\n        }else { c_5ea60f1c(0x1762e8a1f0d27528); /* branch */ \n}\n\nc_5ea60f1c(0x6b3cf59a0381f800); /* line */ \n        BASE_RATE_PER_BLOCK = baseRatePerYear_ / BLOCKS_PER_YEAR;\nc_5ea60f1c(0x136f10831426921e); /* line */ \n        MULTIPLIER_PER_BLOCK = multiplierPerYear_ / BLOCKS_PER_YEAR;\nc_5ea60f1c(0xcbabc419ee2a8523); /* line */ \n        KINK_1 = kink1_;\nc_5ea60f1c(0x4935f21a3f6c9fcb); /* line */ \n        MULTIPLIER_2_PER_BLOCK = multiplier2PerYear_ / BLOCKS_PER_YEAR;\nc_5ea60f1c(0xb8ba080b8e944484); /* line */ \n        BASE_RATE_2_PER_BLOCK = baseRate2PerYear_ / BLOCKS_PER_YEAR;\nc_5ea60f1c(0x7a393685bf977bdd); /* line */ \n        KINK_2 = kink2_;\nc_5ea60f1c(0x1133830acf709bbd); /* line */ \n        JUMP_MULTIPLIER_PER_BLOCK = jumpMultiplierPerYear_ / BLOCKS_PER_YEAR;\n\nc_5ea60f1c(0xd2ed6635d9bf6f38); /* line */ \n        c_5ea60f1c(0x170470c440ed6de8); /* statement */ \nint256 expScale = int256(EXP_SCALE);\nc_5ea60f1c(0xbd68b87430d9451c); /* line */ \n        RATE_1 = (((KINK_1 * MULTIPLIER_PER_BLOCK) / expScale) + BASE_RATE_PER_BLOCK);\n\nc_5ea60f1c(0x8c9f8302bc180987); /* line */ \n        c_5ea60f1c(0xfda43abed41ecd53); /* statement */ \nint256 slope2Util;\nc_5ea60f1c(0xf83711568d33d9ce); /* line */ \n        unchecked {\nc_5ea60f1c(0xfb8be28d7eeae958); /* line */ \n            slope2Util = KINK_2 - KINK_1;\n        }\nc_5ea60f1c(0xcb50af7698c16eac); /* line */ \n        RATE_2 = ((slope2Util * MULTIPLIER_2_PER_BLOCK) / expScale) + BASE_RATE_2_PER_BLOCK;\n    }\n\n    /**\n     * @notice Calculates the current borrow rate per slot (block)\n     * @param cash The amount of cash in the market\n     * @param borrows The amount of borrows in the market\n     * @param reserves The amount of reserves in the market\n     * @return The borrow rate percentage per slot (block) as a mantissa (scaled by EXP_SCALE)\n     */\n    function getBorrowRate(uint256 cash, uint256 borrows, uint256 reserves) external view override returns (uint256) {c_5ea60f1c(0xd6acb40397629f48); /* function */ \n\nc_5ea60f1c(0x872cf8b395676e2d); /* line */ \n        c_5ea60f1c(0x7def2284b2a98b5a); /* statement */ \nreturn _getBorrowRate(cash, borrows, reserves);\n    }\n\n    /**\n     * @notice Calculates the current supply rate per slot (block)\n     * @param cash The amount of cash in the market\n     * @param borrows The amount of borrows in the market\n     * @param reserves The amount of reserves in the market\n     * @param reserveFactorMantissa The current reserve factor for the market\n     * @return The supply rate percentage per slot (block) as a mantissa (scaled by EXP_SCALE)\n     */\n    function getSupplyRate(\n        uint256 cash,\n        uint256 borrows,\n        uint256 reserves,\n        uint256 reserveFactorMantissa\n    ) public view virtual override returns (uint256) {c_5ea60f1c(0x688e36bd6eaed520); /* function */ \n\nc_5ea60f1c(0x0117a1aa0e6c6c29); /* line */ \n        c_5ea60f1c(0xfd3a88461523e753); /* statement */ \nuint256 oneMinusReserveFactor = EXP_SCALE - reserveFactorMantissa;\nc_5ea60f1c(0x0a4e990041384d31); /* line */ \n        c_5ea60f1c(0x8cab38472b565dfb); /* statement */ \nuint256 borrowRate = _getBorrowRate(cash, borrows, reserves);\nc_5ea60f1c(0x8cd6ff8b1a1294d4); /* line */ \n        c_5ea60f1c(0xa7e3d30697098098); /* statement */ \nuint256 rateToPool = (borrowRate * oneMinusReserveFactor) / EXP_SCALE;\nc_5ea60f1c(0x58f8508b2d27d595); /* line */ \n        c_5ea60f1c(0x9791e982b88791fb); /* statement */ \nreturn (utilizationRate(cash, borrows, reserves) * rateToPool) / EXP_SCALE;\n    }\n\n    /**\n     * @notice Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`\n     * @param cash The amount of cash in the market\n     * @param borrows The amount of borrows in the market\n     * @param reserves The amount of reserves in the market\n     * @return The utilization rate as a mantissa between [0, EXP_SCALE]\n     */\n    function utilizationRate(uint256 cash, uint256 borrows, uint256 reserves) public pure returns (uint256) {c_5ea60f1c(0x79a8e678851945e1); /* function */ \n\n        // Utilization rate is 0 when there are no borrows\nc_5ea60f1c(0x33cb2524818d05f4); /* line */ \n        c_5ea60f1c(0x0d36599150f15494); /* statement */ \nif (borrows == 0) {c_5ea60f1c(0x22732c2ac7338cfb); /* branch */ \n\nc_5ea60f1c(0x37014ee656b112e8); /* line */ \n            c_5ea60f1c(0xf6b045d417d41edb); /* statement */ \nreturn 0;\n        }else { c_5ea60f1c(0xaafb175b77ca7db8); /* branch */ \n}\n\nc_5ea60f1c(0xb93d050ceacc47f0); /* line */ \n        c_5ea60f1c(0xca1bdccbc6a9fee0); /* statement */ \nuint256 rate = (borrows * EXP_SCALE) / (cash + borrows - reserves);\n\nc_5ea60f1c(0xf5d72f83d7f2eb06); /* line */ \n        c_5ea60f1c(0x1169991d1a8139bf); /* statement */ \nif (rate > EXP_SCALE) {c_5ea60f1c(0xf793309e11273442); /* branch */ \n\nc_5ea60f1c(0x9cdcafbf60247f9a); /* line */ \n            rate = EXP_SCALE;\n        }else { c_5ea60f1c(0xac521d64ae07b960); /* branch */ \n}\n\nc_5ea60f1c(0xcf3e810e80efd262); /* line */ \n        c_5ea60f1c(0xa2e7a4659887f697); /* statement */ \nreturn rate;\n    }\n\n    /**\n     * @notice Calculates the current borrow rate per slot (block), with the error code expected by the market\n     * @param cash The amount of cash in the market\n     * @param borrows The amount of borrows in the market\n     * @param reserves The amount of reserves in the market\n     * @return The borrow rate percentage per slot (block) as a mantissa (scaled by EXP_SCALE)\n     */\n    function _getBorrowRate(uint256 cash, uint256 borrows, uint256 reserves) internal view returns (uint256) {c_5ea60f1c(0xceffbd0e91a1af60); /* function */ \n\nc_5ea60f1c(0x7c56751f9bacc0a3); /* line */ \n        c_5ea60f1c(0xd974085b831b71b5); /* statement */ \nint256 util = int256(utilizationRate(cash, borrows, reserves));\nc_5ea60f1c(0xdaf618e55e1ab9e5); /* line */ \n        c_5ea60f1c(0x2d43bbd00f81028a); /* statement */ \nint256 expScale = int256(EXP_SCALE);\n\nc_5ea60f1c(0x5f7700ebe2f833e5); /* line */ \n        c_5ea60f1c(0xd0935cd5ac18c55d); /* statement */ \nif (util < KINK_1) {c_5ea60f1c(0x3be32888ac6e8e98); /* branch */ \n\nc_5ea60f1c(0xbb1a111e8324404b); /* line */ \n            c_5ea60f1c(0xce94a23a2cffc767); /* statement */ \nreturn _minCap(((util * MULTIPLIER_PER_BLOCK) / expScale) + BASE_RATE_PER_BLOCK);\n        } else {c_5ea60f1c(0xb4e8c588668e0fcb); /* statement */ \nc_5ea60f1c(0xce0068ebcdddf374); /* branch */ \nif (util < KINK_2) {c_5ea60f1c(0xd5ad3f25864126a3); /* branch */ \n\nc_5ea60f1c(0x7487e01ef2611ba8); /* line */ \n            c_5ea60f1c(0x781ab61103d18e89); /* statement */ \nint256 slope2Util;\nc_5ea60f1c(0x14bd7f856eb0a7d6); /* line */ \n            unchecked {\nc_5ea60f1c(0x795fdb95d80c5274); /* line */ \n                slope2Util = util - KINK_1;\n            }\nc_5ea60f1c(0xae3675db595ddddb); /* line */ \n            c_5ea60f1c(0x372bde26ad3c4b5b); /* statement */ \nint256 rate2 = ((slope2Util * MULTIPLIER_2_PER_BLOCK) / expScale) + BASE_RATE_2_PER_BLOCK;\n\nc_5ea60f1c(0x712346f4277bf474); /* line */ \n            c_5ea60f1c(0x0efbb4727408e05b); /* statement */ \nreturn _minCap(RATE_1 + rate2);\n        } else {c_5ea60f1c(0x1d6c1f05a8c52535); /* branch */ \n\nc_5ea60f1c(0xf46d2e802f053712); /* line */ \n            c_5ea60f1c(0xb53f90a52ff28921); /* statement */ \nint256 slope3Util;\nc_5ea60f1c(0x3bc131a41b9c8db5); /* line */ \n            unchecked {\nc_5ea60f1c(0xe554ca32149263ad); /* line */ \n                slope3Util = util - KINK_2;\n            }\nc_5ea60f1c(0x908f32d694edb968); /* line */ \n            c_5ea60f1c(0xdc51dd6b590926e2); /* statement */ \nint256 rate3 = ((slope3Util * JUMP_MULTIPLIER_PER_BLOCK) / expScale);\n\nc_5ea60f1c(0xfb81c9345256ee2b); /* line */ \n            c_5ea60f1c(0xe8d1f724a7917fa6); /* statement */ \nreturn _minCap(RATE_1 + RATE_2 + rate3);\n        }}\n    }\n\n    /**\n     * @notice Returns 0 if number is less than 0, otherwise returns the input\n     * @param number The first number\n     * @return The maximum of 0 and input number\n     */\n    function _minCap(int256 number) internal pure returns (uint256) {c_5ea60f1c(0x3afab83002ab5a12); /* function */ \n\nc_5ea60f1c(0xa0e8ab576fbf0949); /* line */ \n        c_5ea60f1c(0xb8f4bf66921661dd); /* statement */ \nint256 zero;\nc_5ea60f1c(0xd4506194b3487651); /* line */ \n        c_5ea60f1c(0xc0164a5c332fb7e1); /* statement */ \nreturn uint256(number > zero ? number : zero);\n    }\n}\n"
    },
    "contracts/InterfacesV8.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.25;\nfunction c_4e633bd2(bytes8 c__4e633bd2) pure {}\nfunction c_true4e633bd2(bytes8 c__4e633bd2) pure returns (bool){ return true; }\nfunction c_false4e633bd2(bytes8 c__4e633bd2) pure returns (bool){ return false; }\n\n\nimport { IERC20Upgradeable } from \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport { ResilientOracleInterface } from \"@venusprotocol/oracle/contracts/interfaces/OracleInterface.sol\";\n\ninterface IVToken is IERC20Upgradeable {\n    function accrueInterest() external returns (uint256);\n\n    function redeem(uint256 redeemTokens) external returns (uint256);\n\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\n\n    function borrowBalanceCurrent(address borrower) external returns (uint256);\n\n    function balanceOfUnderlying(address owner) external returns (uint256);\n\n    function comptroller() external view returns (IComptroller);\n\n    function borrowBalanceStored(address account) external view returns (uint256);\n}\n\ninterface IVBep20 is IVToken {\n    function borrowBehalf(address borrower, uint256 borrowAmount) external returns (uint256);\n\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\n\n    function liquidateBorrow(\n        address borrower,\n        uint256 repayAmount,\n        IVToken vTokenCollateral\n    ) external returns (uint256);\n\n    function underlying() external view returns (address);\n}\n\ninterface IVBNB is IVToken {\n    function repayBorrowBehalf(address borrower) external payable;\n\n    function liquidateBorrow(address borrower, IVToken vTokenCollateral) external payable;\n}\n\ninterface IVAIController {\n    function accrueVAIInterest() external;\n\n    function liquidateVAI(\n        address borrower,\n        uint256 repayAmount,\n        IVToken vTokenCollateral\n    ) external returns (uint256, uint256);\n\n    function repayVAIBehalf(address borrower, uint256 amount) external returns (uint256, uint256);\n\n    function getVAIAddress() external view returns (address);\n\n    function getVAIRepayAmount(address borrower) external view returns (uint256);\n}\n\ninterface IComptroller {\n    enum Action {\n        MINT,\n        REDEEM,\n        BORROW,\n        REPAY,\n        SEIZE,\n        LIQUIDATE,\n        TRANSFER,\n        ENTER_MARKET,\n        EXIT_MARKET\n    }\n\n    function _setActionsPaused(address[] calldata markets_, Action[] calldata actions_, bool paused_) external;\n\n    function liquidationIncentiveMantissa() external view returns (uint256);\n\n    function vaiController() external view returns (IVAIController);\n\n    function liquidatorContract() external view returns (address);\n\n    function oracle() external view returns (ResilientOracleInterface);\n\n    function actionPaused(address market, Action action) external view returns (bool);\n\n    function markets(address) external view returns (bool, uint256, bool);\n\n    function isForcedLiquidationEnabled(address) external view returns (bool);\n}\n\ninterface ILiquidator {\n    function restrictLiquidation(address borrower) external;\n\n    function unrestrictLiquidation(address borrower) external;\n\n    function addToAllowlist(address borrower, address liquidator) external;\n\n    function removeFromAllowlist(address borrower, address liquidator) external;\n\n    function liquidateBorrow(\n        address vToken,\n        address borrower,\n        uint256 repayAmount,\n        IVToken vTokenCollateral\n    ) external payable;\n\n    function setTreasuryPercent(uint256 newTreasuryPercentMantissa) external;\n\n    function treasuryPercentMantissa() external view returns (uint256);\n}\n\ninterface IProtocolShareReserve {\n    enum IncomeType {\n        SPREAD,\n        LIQUIDATION\n    }\n\n    function updateAssetsState(address comptroller, address asset, IncomeType kind) external;\n}\n\ninterface IWBNB is IERC20Upgradeable {\n    function deposit() external payable;\n}\n"
    },
    "contracts/lib/approveOrRevert.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.25;\nfunction c_61bf4287(bytes8 c__61bf4287) pure {}\nfunction c_true61bf4287(bytes8 c__61bf4287) pure returns (bool){ return true; }\nfunction c_false61bf4287(bytes8 c__61bf4287) pure returns (bool){ return false; }\n\n\nimport { IERC20Upgradeable } from \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\n\n/// @notice Thrown if a contract is unable to approve a transfer\nerror ApproveFailed();\n\n/// @notice Approves a transfer, ensuring that it is successful. This function supports non-compliant\n/// tokens like the ones that don't return a boolean value on success. Thus, such approve call supports\n/// three different kinds of tokens:\n///   * Compliant tokens that revert on failure\n///   * Compliant tokens that return false on failure\n///   * Non-compliant tokens that don't return a value\n/// @param token The contract address of the token which will be transferred\n/// @param spender The spender contract address\n/// @param amount The value of the transfer\nfunction approveOrRevert(IERC20Upgradeable token, address spender, uint256 amount) {c_61bf4287(0x3884f35637083fd5); /* function */ \n\nc_61bf4287(0x3f5baf285643ace2); /* line */ \n    c_61bf4287(0x56f4920a71f62e0b); /* statement */ \nbytes memory callData = abi.encodeCall(token.approve, (spender, amount));\n\n    // solhint-disable-next-line avoid-low-level-calls\nc_61bf4287(0x6e35a60dc0ec8201); /* line */ \n    c_61bf4287(0x84d427a464709353); /* statement */ \n(bool success, bytes memory result) = address(token).call(callData);\n\nc_61bf4287(0x930a5cbbb4085d56); /* line */ \n    c_61bf4287(0x0675d0dae1074468); /* statement */ \nif ((!success && c_true61bf4287(0x4456282cee09d24d)) || ((result.length != 0 && !abi.decode(result, (bool))) && c_true61bf4287(0xfc01999d81f3ea43))) {c_61bf4287(0xde96eb31e066145b); /* branch */ \n\nc_61bf4287(0xdbf15b76c5d5d20c); /* line */ \n        revert ApproveFailed();\n    }else { c_61bf4287(0x056d92f56944fb2f); /* branch */ \n}\n}\n"
    },
    "contracts/lib/Currency.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity 0.8.25;\nfunction c_0edc3284(bytes8 c__0edc3284) pure {}\nfunction c_true0edc3284(bytes8 c__0edc3284) pure returns (bool){ return true; }\nfunction c_false0edc3284(bytes8 c__0edc3284) pure returns (bool){ return false; }\n\n\n// This library is heavily inspired by Uniswap v4 Currency lib\n// (https://github.com/Uniswap/v4-core/blob/b230769238879e1d4f58ffa57a4696b0c390d188/src/types/Currency.sol)\n// Contrary to the implementation above, this library does not\n// use assembly to save gas. It rather relies on OpenZeppelin's\n// SafeERC20 to simplify the review and audits. This might change\n// in future if it's more heavily used by Venus contracts.\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ntype Currency is address;\n\nlibrary CurrencyLibrary {\nfunction c_6f7b651f(bytes8 c__6f7b651f) internal pure {}\nfunction c_true6f7b651f(bytes8 c__6f7b651f) internal pure returns (bool){ return true; }\nfunction c_false6f7b651f(bytes8 c__6f7b651f) internal pure returns (bool){ return false; }\n\n    using CurrencyLibrary for Currency;\n\n    /// @notice Thrown when a native transfer fails\n    error NativeTransferFailed();\n\n    Currency public constant NATIVE = Currency.wrap(0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB);\n\n    /**\n     * @dev If currency is a token, invokes SafeERC20.forceApprove to allow spender\n     *   to spend the amount of tokens on behalf of the current contract. Otherwise,\n     *   does nothing.\n     * @param currency Currency\n     * @param spender The account approved to spend the tokens\n     * @param amount The approved amount\n     */\n    function approve(Currency currency, address spender, uint256 amount) internal {c_6f7b651f(0x6b33fb2cb2d7ffc5); /* function */ \n\nc_6f7b651f(0xffd63ea9592e2627); /* line */ \n        c_6f7b651f(0xbc742f7ebf5b53c7); /* statement */ \nif (!currency.isNative()) {c_6f7b651f(0x61e3e1eb5eb674f6); /* branch */ \n\n            // I'd rather use approveOrRevert instead of forceApprove\n            // once we migrate to OZ v5: force-approve does approve(0)\n            // before approving the amount, and it's not always\n            // desirable. The users will need to pay gas unnecessarily,\n            // and using just approve() is safe as long as we revert on\n            // errors (approveOrRevert handles that) and reset the approvals\n            // after transfers (which is a best practice recommended by\n            // auditors anyway).\nc_6f7b651f(0x32c7443d3ae12bef); /* line */ \n            c_6f7b651f(0xbc1a22acded2bbc8); /* statement */ \nSafeERC20.forceApprove(IERC20(Currency.unwrap(currency)), spender, amount);\n        }else { c_6f7b651f(0x372b5c49ed23765a); /* branch */ \n}\n    }\n\n    /**\n     * @dev Transfers an amount of currency to the receiver. If currency is a token,\n     *   uses SafeERC20.safeTransfer, otherwise transfers the native currency using\n     *   the recommended approach (`receiver.call{value: amount}(\"\")`).\n     * @param currency Currency\n     * @param receiver The account that would receive the tokens\n     * @param amount The amount to transfer\n     */\n    function transfer(Currency currency, address receiver, uint256 amount) internal {c_6f7b651f(0xa3c0307866b5e4e9); /* function */ \n\nc_6f7b651f(0xe0f359a70774ca42); /* line */ \n        c_6f7b651f(0xe8bcbdbee7ab370f); /* statement */ \nif (currency.isNative()) {c_6f7b651f(0x1c5bd2a9618e1900); /* branch */ \n\nc_6f7b651f(0xcd9de0c822e1f3c9); /* line */ \n            c_6f7b651f(0x4c12785a1c0915d6); /* statement */ \n(bool success, ) = receiver.call{ value: amount }(\"\");\nc_6f7b651f(0x56dd77dd1bd93a26); /* line */ \n            c_6f7b651f(0xc2be0613feaa778b); /* statement */ \nif (!success) {c_6f7b651f(0xb928206e28cb8f71); /* branch */ \n\nc_6f7b651f(0xcf3f63810543b58b); /* line */ \n                revert NativeTransferFailed();\n            }else { c_6f7b651f(0x278822aee55e5932); /* branch */ \n}\n        } else {c_6f7b651f(0x5ea44365bcb71128); /* branch */ \n\nc_6f7b651f(0x0e3a19abdcef74ac); /* line */ \n            c_6f7b651f(0xf739369400982e0c); /* statement */ \nSafeERC20.safeTransfer(IERC20(Currency.unwrap(currency)), receiver, amount);\n        }\n    }\n\n    function transferAll(Currency currency, address receiver) internal {c_6f7b651f(0x2d07dc41b35fe7bf); /* function */ \n\nc_6f7b651f(0xf3243fe4c07d2c9b); /* line */ \n        c_6f7b651f(0xfb54fa72a53524cc); /* statement */ \nuint256 balance = currency.balanceOfSelf();\nc_6f7b651f(0xe9be12f732622b02); /* line */ \n        c_6f7b651f(0xf67cfd34a3ce7748); /* statement */ \nif (balance > 0) {c_6f7b651f(0x62ea7161b9111de5); /* branch */ \n\nc_6f7b651f(0xa9a86d3a8a843273); /* line */ \n            c_6f7b651f(0x2c6b5713089368b6); /* statement */ \ncurrency.transfer(receiver, balance);\n        }else { c_6f7b651f(0x072daddb162eef65); /* branch */ \n}\n    }\n\n    function balanceOfSelf(Currency currency) internal view returns (uint256) {c_6f7b651f(0xcd15539da9e1130c); /* function */ \n\nc_6f7b651f(0x4147a5e5a5484534); /* line */ \n        c_6f7b651f(0xc1d7e567ab1eba65); /* statement */ \nif (currency.isNative()) {c_6f7b651f(0x4d2c1abf8f435ac5); /* branch */ \n\nc_6f7b651f(0xc534b174085cf499); /* line */ \n            c_6f7b651f(0xe18037e92f58f5a9); /* statement */ \nreturn address(this).balance;\n        }else { c_6f7b651f(0x1e4831c1fa377764); /* branch */ \n}\nc_6f7b651f(0x16e53b21ab867a08); /* line */ \n        c_6f7b651f(0x3a5f987bf7b6a9e4); /* statement */ \nreturn IERC20(Currency.unwrap(currency)).balanceOf(address(this));\n    }\n\n    function isNative(Currency currency) internal pure returns (bool) {c_6f7b651f(0xed4e21f688a3f24b); /* function */ \n\nc_6f7b651f(0xf0ee42db768b6531); /* line */ \n        c_6f7b651f(0x3fc73181fc1e48a3); /* statement */ \nreturn Currency.unwrap(currency) == Currency.unwrap(NATIVE);\n    }\n}\n"
    },
    "contracts/Liquidator/BUSDLiquidator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.25;\nfunction c_697238e9(bytes8 c__697238e9) pure {}\nfunction c_true697238e9(bytes8 c__697238e9) pure returns (bool){ return true; }\nfunction c_false697238e9(bytes8 c__697238e9) pure returns (bool){ return false; }\n\n\nimport { SafeERC20Upgradeable } from \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport { IERC20Upgradeable } from \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport { ReentrancyGuardUpgradeable } from \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport { Ownable2StepUpgradeable } from \"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\";\nimport { MANTISSA_ONE } from \"@venusprotocol/solidity-utilities/contracts/constants.sol\";\nimport { ensureNonzeroAddress } from \"@venusprotocol/solidity-utilities/contracts/validators.sol\";\n\nimport { approveOrRevert } from \"../lib/approveOrRevert.sol\";\nimport { ILiquidator, IComptroller, IVToken, IVBep20, IVBNB, IVAIController } from \"../InterfacesV8.sol\";\n\n/**\n * @title BUSDLiquidator\n * @author Venus\n * @notice A custom contract for force-liquidating BUSD debts\n */\ncontract BUSDLiquidator is Ownable2StepUpgradeable, ReentrancyGuardUpgradeable {\nfunction c_c461ac26(bytes8 c__c461ac26) internal pure {}\nfunction c_truec461ac26(bytes8 c__c461ac26) internal pure returns (bool){ return true; }\nfunction c_falsec461ac26(bytes8 c__c461ac26) internal pure returns (bool){ return false; }\nmodifier c_mod727bd0bf{ c_c461ac26(0x38df31c04c249818); /* modifier-post */ \n _; }\nmodifier c_moddf95e335{ c_c461ac26(0x35f3e369e86e1aa9); /* modifier-pre */ \n _; }\nmodifier c_modd632426e{ c_c461ac26(0xb88808b3e1efd2b3); /* modifier-post */ \n _; }\nmodifier c_modc69af1e3{ c_c461ac26(0x70604e43a98816cd); /* modifier-pre */ \n _; }\nmodifier c_mod159ca306{ c_c461ac26(0xa63e78af23818721); /* modifier-post */ \n _; }\nmodifier c_modbf3e1ef9{ c_c461ac26(0xc96b89f305a4c1ad); /* modifier-pre */ \n _; }\nmodifier c_mod82da03a2{ c_c461ac26(0x9ee9a367b6c9d014); /* modifier-post */ \n _; }\nmodifier c_mod4dbb1ea3{ c_c461ac26(0xbcba5b0a44f4c05d); /* modifier-pre */ \n _; }\nmodifier c_modc857b995{ c_c461ac26(0xf7326db9d78c95a2); /* modifier-post */ \n _; }\nmodifier c_moda70d1c7e{ c_c461ac26(0x65e999486f08d230); /* modifier-pre */ \n _; }\n\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n    using SafeERC20Upgradeable for IVToken;\n\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    IVBep20 public immutable vBUSD;\n\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    IComptroller public immutable comptroller;\n\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address public immutable treasury;\n\n    /// @notice The liquidator's share, scaled by 1e18 (e.g. 1.02 * 1e18 for 102% of the debt covered)\n    uint256 public liquidatorShareMantissa;\n\n    /// @notice Thrown if trying to set liquidator's share lower than 100% of the debt covered\n    error LiquidatorShareTooLow(uint256 liquidatorShareMantissa_);\n\n    /// @notice Thrown if trying to set liquidator's share larger than this contract can receive from a liquidation\n    error LiquidatorShareTooHigh(uint256 maxLiquidatorShareMantissa, uint256 liquidatorShareMantissa_);\n\n    /// @notice Emitted when the liquidator's share is set\n    event NewLiquidatorShare(uint256 oldLiquidatorShareMantissa, uint256 newLiquidatorShareMantissa);\n\n    /// @notice Constructor for the implementation contract. Sets immutable variables.\n    /// @param comptroller_ The address of the Comptroller contract\n    /// @param vBUSD_ The address of the VBNB\n    /// @param treasury_ The address of Venus treasury\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(address comptroller_, address vBUSD_, address treasury_) {c_c461ac26(0xa2b246661d74ed0d); /* function */ \n\nc_c461ac26(0xeac25a6c03fcbf6d); /* line */ \n        c_c461ac26(0x00d38095b0976b7f); /* statement */ \nensureNonzeroAddress(vBUSD_);\nc_c461ac26(0xa2466bb82403f648); /* line */ \n        c_c461ac26(0x678a47962f2f9d9b); /* statement */ \nensureNonzeroAddress(comptroller_);\nc_c461ac26(0x29448e79c0ae191c); /* line */ \n        c_c461ac26(0xe27eeff20f3f32af); /* statement */ \nensureNonzeroAddress(treasury_);\nc_c461ac26(0x3b4d54e259a30032); /* line */ \n        vBUSD = IVBep20(vBUSD_);\nc_c461ac26(0x6ed55823128a00a1); /* line */ \n        comptroller = IComptroller(comptroller_);\nc_c461ac26(0x8574007b83742c5b); /* line */ \n        treasury = treasury_;\nc_c461ac26(0x92856068593d576b); /* line */ \n        c_c461ac26(0x5d81d50ca441ffeb); /* statement */ \n_disableInitializers();\n    }\n\n    /// @notice Initializer for the implementation contract.\n    /// @param liquidatorShareMantissa_ Liquidator's share, scaled by 1e18 (e.g. 1.01 * 1e18 for 101%)\n    /// @custom:error LiquidatorShareTooHigh is thrown if trying to set liquidator percent larger than the liquidation profit\n    function initialize(uint256 liquidatorShareMantissa_) external virtual  c_moda70d1c7e initializer c_modc857b995  {c_c461ac26(0xc333c13e399a1f23); /* function */ \n\nc_c461ac26(0x62abb45ae9e63544); /* line */ \n        c_c461ac26(0x66bcb849cdb920cd); /* statement */ \n__Ownable2Step_init();\nc_c461ac26(0xd4e5162b14e4b231); /* line */ \n        c_c461ac26(0x6a535607c05f2dc8); /* statement */ \n__ReentrancyGuard_init();\nc_c461ac26(0x3d195f359d13ecef); /* line */ \n        c_c461ac26(0xda8a818d761309d9); /* statement */ \n_validateLiquidatorShareMantissa(liquidatorShareMantissa_);\nc_c461ac26(0xee55024997a44112); /* line */ \n        liquidatorShareMantissa = liquidatorShareMantissa_;\n    }\n\n    /// @notice Liquidate the entire BUSD debt of a borrower, seizing vTokenCollateral\n    /// @param borrower The borrower whose debt should be liquidated\n    /// @param vTokenCollateral The collateral to seize from the borrower\n    function liquidateEntireBorrow(address borrower, IVToken vTokenCollateral) external  c_mod4dbb1ea3 nonReentrant c_mod82da03a2  {c_c461ac26(0x4200a7339cd50d97); /* function */ \n\nc_c461ac26(0x80def6d8ef03072d); /* line */ \n        c_c461ac26(0x048aa5663382814f); /* statement */ \nuint256 repayAmount = vBUSD.borrowBalanceCurrent(borrower);\nc_c461ac26(0xad9608a1fafb334c); /* line */ \n        c_c461ac26(0xce98ce284d5ea49d); /* statement */ \n_unpauseAndLiquidate(borrower, repayAmount, vTokenCollateral);\n    }\n\n    /// @notice Liquidate a BUSD borrow, repaying the repayAmount of BUSD\n    /// @param borrower The borrower whose debt should be liquidated\n    /// @param repayAmount The amount to repay\n    /// @param vTokenCollateral The collateral to seize from the borrower\n    function liquidateBorrow(address borrower, uint256 repayAmount, IVToken vTokenCollateral) external  c_modbf3e1ef9 nonReentrant c_mod159ca306  {c_c461ac26(0xf95e1fbda6a92e2f); /* function */ \n\nc_c461ac26(0xecead6bb207d88df); /* line */ \n        c_c461ac26(0x531768dc4b642efd); /* statement */ \n_unpauseAndLiquidate(borrower, repayAmount, vTokenCollateral);\n    }\n\n    /// @notice Allows Governance to set the liquidator's share\n    /// @param liquidatorShareMantissa_ Liquidator's share, scaled by 1e18 (e.g. 1.01 * 1e18 for 101%)\n    /// @custom:access Only Governance\n    function setLiquidatorShare(uint256 liquidatorShareMantissa_) external  c_modc69af1e3 onlyOwner c_modd632426e  {c_c461ac26(0x5c6e6deea085af51); /* function */ \n\nc_c461ac26(0x5aa702cc87317a35); /* line */ \n        c_c461ac26(0x9c4a69965ceb7c9e); /* statement */ \n_validateLiquidatorShareMantissa(liquidatorShareMantissa_);\nc_c461ac26(0xc0261db28f2232f8); /* line */ \n        c_c461ac26(0x34326e7c687d7d87); /* statement */ \nuint256 oldLiquidatorShareMantissa = liquidatorShareMantissa;\nc_c461ac26(0x74d06e036c1619c6); /* line */ \n        liquidatorShareMantissa = liquidatorShareMantissa_;\nc_c461ac26(0x730d20ab0ace97aa); /* line */ \n        c_c461ac26(0xe4d83f4d9643e620); /* statement */ \nemit NewLiquidatorShare(oldLiquidatorShareMantissa, liquidatorShareMantissa_);\n    }\n\n    /// @notice Allows to recover token accidentally sent to this contract by sending the entire balance to Governance\n    /// @param token The address of the token to recover\n    /// @custom:access Only Governance\n    function sweepToken(IERC20Upgradeable token) external  c_moddf95e335 onlyOwner c_mod727bd0bf  {c_c461ac26(0xfeaf4b8318323770); /* function */ \n\nc_c461ac26(0xc37508547d602d57); /* line */ \n        c_c461ac26(0x09d4b88baa3b2418); /* statement */ \ntoken.safeTransfer(msg.sender, token.balanceOf(address(this)));\n    }\n\n    /// @dev Unpauses the liquidation on the BUSD market, liquidates the borrower's debt,\n    /// and pauses the liquidations back\n    /// @param borrower The borrower whose debt should be liquidated\n    /// @param repayAmount The amount to repay\n    /// @param vTokenCollateral The collateral to seize from the borrower\n    function _unpauseAndLiquidate(address borrower, uint256 repayAmount, IVToken vTokenCollateral) internal {c_c461ac26(0x268820841a2cd66a); /* function */ \n\nc_c461ac26(0x68cbd7d7b905efdc); /* line */ \n        c_c461ac26(0x5498d926b6bbd29b); /* statement */ \naddress[] memory vTokens = new address[](1);\nc_c461ac26(0x2bf41ca0cffb1969); /* line */ \n        vTokens[0] = address(vBUSD);\nc_c461ac26(0x0560f10702114373); /* line */ \n        c_c461ac26(0x3ccc170e9dbd8190); /* statement */ \nIComptroller.Action[] memory actions = new IComptroller.Action[](1);\nc_c461ac26(0xcaf91b6da4feccb0); /* line */ \n        actions[0] = IComptroller.Action.LIQUIDATE;\n\nc_c461ac26(0x6204ded62bbbe58e); /* line */ \n        c_c461ac26(0x18a192a5aeec17c7); /* statement */ \ncomptroller._setActionsPaused(vTokens, actions, false);\nc_c461ac26(0xbf2797ded8142dc2); /* line */ \n        c_c461ac26(0x5cb116bcb4744950); /* statement */ \n_liquidateBorrow(borrower, repayAmount, vTokenCollateral);\nc_c461ac26(0xe02a50fb58db1633); /* line */ \n        c_c461ac26(0xa9c8156f153286bd); /* statement */ \ncomptroller._setActionsPaused(vTokens, actions, true);\n    }\n\n    /// @dev Performs the actual liquidation, transferring BUSD from the sender to this contract,\n    /// repaying the debt, and transferring the seized collateral to the sender and the treasury\n    /// @param borrower The borrower whose debt should be liquidated\n    /// @param repayAmount The amount to repay\n    /// @param vTokenCollateral The collateral to seize from the borrower\n    function _liquidateBorrow(address borrower, uint256 repayAmount, IVToken vTokenCollateral) internal {c_c461ac26(0xce6b5efd0278663e); /* function */ \n\nc_c461ac26(0x30a840e8e7220448); /* line */ \n        c_c461ac26(0x12fb5c05b067ba41); /* statement */ \nILiquidator liquidatorContract = ILiquidator(comptroller.liquidatorContract());\nc_c461ac26(0x1d311b0bde3e6c28); /* line */ \n        c_c461ac26(0xeb4caaf3b2833b91); /* statement */ \nIERC20Upgradeable busd = IERC20Upgradeable(vBUSD.underlying());\n\nc_c461ac26(0x62312b11aa7d9f2f); /* line */ \n        c_c461ac26(0xa556c7e129e9e15b); /* statement */ \nuint256 actualRepayAmount = _transferIn(busd, msg.sender, repayAmount);\nc_c461ac26(0xfa2b6faae13e13ef); /* line */ \n        c_c461ac26(0xca90150e215451cc); /* statement */ \napproveOrRevert(busd, address(liquidatorContract), actualRepayAmount);\nc_c461ac26(0x37ab2ef57806760d); /* line */ \n        c_c461ac26(0xaf96e363fd744192); /* statement */ \nuint256 balanceBefore = vTokenCollateral.balanceOf(address(this));\nc_c461ac26(0xb6a3973872317d4a); /* line */ \n        c_c461ac26(0x0eec3f170d8c0444); /* statement */ \nliquidatorContract.liquidateBorrow(address(vBUSD), borrower, actualRepayAmount, vTokenCollateral);\nc_c461ac26(0x15774a572631d5dd); /* line */ \n        c_c461ac26(0x1348dc6f56a49331); /* statement */ \nuint256 receivedAmount = vTokenCollateral.balanceOf(address(this)) - balanceBefore;\nc_c461ac26(0xedc25719244e664a); /* line */ \n        c_c461ac26(0x77d748e0c54cc2e6); /* statement */ \napproveOrRevert(busd, address(liquidatorContract), 0);\n\nc_c461ac26(0xc9afb9e94eef3379); /* line */ \n        c_c461ac26(0xbed33eeff1681e0a); /* statement */ \n(uint256 liquidatorAmount, uint256 treasuryAmount) = _computeShares(receivedAmount);\nc_c461ac26(0x3ea3dd3b081a8a54); /* line */ \n        c_c461ac26(0x64a2e35b905c0418); /* statement */ \nvTokenCollateral.safeTransfer(msg.sender, liquidatorAmount);\nc_c461ac26(0x5865cf849e380397); /* line */ \n        c_c461ac26(0x6edbeb16c5efa3c6); /* statement */ \nvTokenCollateral.safeTransfer(treasury, treasuryAmount);\n    }\n\n    /// @dev Transfers tokens to this contract and returns the actual transfer amount\n    /// @param token The token to transfer\n    /// @param from The account to transfer from\n    /// @param amount The amount to transfer\n    /// @return The actual amount transferred\n    function _transferIn(IERC20Upgradeable token, address from, uint256 amount) internal returns (uint256) {c_c461ac26(0x13a1efab8db29765); /* function */ \n\nc_c461ac26(0x8b8ba9e5303c913b); /* line */ \n        c_c461ac26(0x9b3eac4d7592e3e1); /* statement */ \nuint256 prevBalance = token.balanceOf(address(this));\nc_c461ac26(0x8d6d5982664ecf4f); /* line */ \n        c_c461ac26(0xd94dd1567c85aa3e); /* statement */ \ntoken.safeTransferFrom(from, address(this), amount);\nc_c461ac26(0x291c2cb7cce83ce2); /* line */ \n        c_c461ac26(0xe44236bb8272bbcc); /* statement */ \nreturn token.balanceOf(address(this)) - prevBalance;\n    }\n\n    /// @dev Computes the liquidator's and treasury's shares of the received amount\n    /// @param receivedAmount The amount received from the liquidation\n    /// @return liquidatorAmount The liquidator's share\n    /// @return treasuryAmount The treasury's share\n    function _computeShares(\n        uint256 receivedAmount\n    ) internal view returns (uint256 liquidatorAmount, uint256 treasuryAmount) {c_c461ac26(0xcbafed0edb2bf7fa); /* function */ \n\nc_c461ac26(0x9ee5f4e4a3fc379f); /* line */ \n        c_c461ac26(0xc08843fbf71d33ad); /* statement */ \nuint256 denominator = _getDenominator();\nc_c461ac26(0x905156b4107d1417); /* line */ \n        liquidatorAmount = (receivedAmount * liquidatorShareMantissa) / denominator;\nc_c461ac26(0x942cc7ec9667df10); /* line */ \n        treasuryAmount = receivedAmount - liquidatorAmount;\n    }\n\n    /// @dev Returns (liquidation incentive - treasury percent), the value used as the denominator\n    /// when calculating the liquidator's share\n    /// @return The denominator for the seized amount used when calculating the liquidator's share\n    function _getDenominator() internal view returns (uint256) {c_c461ac26(0x3b5d63b025449aa5); /* function */ \n\nc_c461ac26(0xa22f07ebe2ef9432); /* line */ \n        c_c461ac26(0x988583d4cb51319f); /* statement */ \nuint256 totalPercentageToDistribute = comptroller.liquidationIncentiveMantissa();\nc_c461ac26(0x33cdc4ef2d775567); /* line */ \n        c_c461ac26(0x309b04f59d6b58bb); /* statement */ \nuint256 regularTreasuryPercent = ILiquidator(comptroller.liquidatorContract()).treasuryPercentMantissa();\nc_c461ac26(0x70a9ede1429d1209); /* line */ \n        c_c461ac26(0x3e974ba7ea2549a6); /* statement */ \nuint256 denominator = totalPercentageToDistribute - regularTreasuryPercent;\nc_c461ac26(0x748bd8799956b8dd); /* line */ \n        c_c461ac26(0x3e9b41f7e2475810); /* statement */ \nreturn denominator;\n    }\n\n    /// @dev Checks if the liquidator's share is more than 100% of the debt covered and less\n    /// than (liquidation incentive - treasury percent)\n    /// @param liquidatorShareMantissa_ Liquidator's share, scaled by 1e18 (e.g. 1.01 * 1e18 for 101%)\n    function _validateLiquidatorShareMantissa(uint256 liquidatorShareMantissa_) internal view {c_c461ac26(0x8dfc9673a3d9d358); /* function */ \n\nc_c461ac26(0xccd9f9d8e7077509); /* line */ \n        c_c461ac26(0xbd5e412a05197fd6); /* statement */ \nuint256 maxLiquidatorShareMantissa = _getDenominator();\nc_c461ac26(0x74696b12a675fe64); /* line */ \n        c_c461ac26(0xf6864eb9ba203e4d); /* statement */ \nif (liquidatorShareMantissa_ < MANTISSA_ONE) {c_c461ac26(0xd4773af37c74434e); /* branch */ \n\nc_c461ac26(0xb2a8f83d1d189053); /* line */ \n            revert LiquidatorShareTooLow(liquidatorShareMantissa_);\n        }else { c_c461ac26(0x6c6744f063cd4ad7); /* branch */ \n}\n\nc_c461ac26(0x7c39d8154eb3c2aa); /* line */ \n        c_c461ac26(0xafc1f277c8bc294a); /* statement */ \nif (liquidatorShareMantissa_ > maxLiquidatorShareMantissa) {c_c461ac26(0x774d4d5563ffa61d); /* branch */ \n\nc_c461ac26(0x1643a81c3e73f6b1); /* line */ \n            revert LiquidatorShareTooHigh(maxLiquidatorShareMantissa, liquidatorShareMantissa_);\n        }else { c_c461ac26(0xe8a5d5eb6b94352e); /* branch */ \n}\n    }\n}\n"
    },
    "contracts/Liquidator/Liquidator.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity 0.8.25;\nfunction c_945d7245(bytes8 c__945d7245) pure {}\nfunction c_true945d7245(bytes8 c__945d7245) pure returns (bool){ return true; }\nfunction c_false945d7245(bytes8 c__945d7245) pure returns (bool){ return false; }\n\n\nimport { ReentrancyGuardUpgradeable } from \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport { Ownable2StepUpgradeable } from \"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\";\nimport { IERC20Upgradeable } from \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport { SafeERC20Upgradeable } from \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport { ensureNonzeroAddress } from \"@venusprotocol/solidity-utilities/contracts/validators.sol\";\nimport \"@venusprotocol/governance-contracts/contracts/Governance/AccessControlledV8.sol\";\nimport \"./LiquidatorStorage.sol\";\nimport { IComptroller, IVToken, IVBep20, IVBNB, IVAIController, IProtocolShareReserve, IWBNB } from \"../InterfacesV8.sol\";\n\ncontract Liquidator is Ownable2StepUpgradeable, ReentrancyGuardUpgradeable, LiquidatorStorage, AccessControlledV8 {\nfunction c_fc026fc7(bytes8 c__fc026fc7) internal pure {}\nfunction c_truefc026fc7(bytes8 c__fc026fc7) internal pure returns (bool){ return true; }\nfunction c_falsefc026fc7(bytes8 c__fc026fc7) internal pure returns (bool){ return false; }\nmodifier c_modc5450a0a{ c_fc026fc7(0x61b92971889a7635); /* modifier-post */ \n _; }\nmodifier c_mod35a041ae{ c_fc026fc7(0x4d03cd619015367f); /* modifier-pre */ \n _; }\nmodifier c_mod7ec53df9{ c_fc026fc7(0x13c28dd26bbbe9ec); /* modifier-post */ \n _; }\nmodifier c_modb0c972f3{ c_fc026fc7(0x89d91c8d145e81ad); /* modifier-pre */ \n _; }\nmodifier c_mod5b709e03{ c_fc026fc7(0x84c1a15cf8a85607); /* modifier-post */ \n _; }\nmodifier c_mod253bc1b6{ c_fc026fc7(0x603b4596db79b104); /* modifier-pre */ \n _; }\nmodifier c_mod721eccb1{ c_fc026fc7(0xf3da552e2b57f2db); /* modifier-post */ \n _; }\nmodifier c_mod7e633450{ c_fc026fc7(0x62836c42fee04487); /* modifier-pre */ \n _; }\nmodifier c_mod4cf1dbcb{ c_fc026fc7(0x74852763f9fd1543); /* modifier-post */ \n _; }\nmodifier c_modd93c9458{ c_fc026fc7(0x1e5a01367b35973b); /* modifier-pre */ \n _; }\nmodifier c_mod94a50cd8{ c_fc026fc7(0x639bbb47fc13f61f); /* modifier-post */ \n _; }\nmodifier c_mod3bf4f56a{ c_fc026fc7(0x9c46f4585964bb85); /* modifier-pre */ \n _; }\n\n    /// @notice Address of vBNB contract.\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    IVBNB public immutable vBnb;\n\n    /// @notice Address of Venus Unitroller contract.\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    IComptroller public immutable comptroller;\n\n    /// @notice Address of VAIUnitroller contract.\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    IVAIController public immutable vaiController;\n\n    /// @notice Address of wBNB contract\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address public immutable wBNB;\n\n    /// @dev A unit (literal one) in EXP_SCALE, usually used in additions/subtractions\n    uint256 internal constant MANTISSA_ONE = 1e18;\n\n    /* Events */\n\n    /// @notice Emitted when the percent of the seized amount that goes to treasury changes.\n    event NewLiquidationTreasuryPercent(uint256 oldPercent, uint256 newPercent);\n\n    /// @notice Emitted when a borrow is liquidated\n    event LiquidateBorrowedTokens(\n        address indexed liquidator,\n        address indexed borrower,\n        uint256 repayAmount,\n        address vTokenBorrowed,\n        address indexed vTokenCollateral,\n        uint256 seizeTokensForTreasury,\n        uint256 seizeTokensForLiquidator\n    );\n\n    /// @notice Emitted when the liquidation is restricted for a borrower\n    event LiquidationRestricted(address indexed borrower);\n\n    /// @notice Emitted when the liquidation restrictions are removed for a borrower\n    event LiquidationRestrictionsDisabled(address indexed borrower);\n\n    /// @notice Emitted when a liquidator is added to the allowedLiquidatorsByAccount mapping\n    event AllowlistEntryAdded(address indexed borrower, address indexed liquidator);\n\n    /// @notice Emitted when a liquidator is removed from the allowedLiquidatorsByAccount mapping\n    event AllowlistEntryRemoved(address indexed borrower, address indexed liquidator);\n\n    /// @notice Emitted when the amount of minLiquidatableVAI is updated\n    event NewMinLiquidatableVAI(uint256 oldMinLiquidatableVAI, uint256 newMinLiquidatableVAI);\n\n    /// @notice Emitted when the length of chunk gets updated\n    event NewPendingRedeemChunkLength(uint256 oldPendingRedeemChunkLength, uint256 newPendingRedeemChunkLength);\n\n    /// @notice Emitted when force liquidation is paused\n    event ForceVAILiquidationPaused(address indexed sender);\n\n    /// @notice Emitted when force liquidation is resumed\n    event ForceVAILiquidationResumed(address indexed sender);\n\n    /// @notice Emitted when new address of protocol share reserve is set\n    event NewProtocolShareReserve(address indexed oldProtocolShareReserve, address indexed newProtocolShareReserves);\n\n    /// @notice Emitted when reserves are reduced from liquidator contract to protocol share reserves\n    event ProtocolLiquidationIncentiveTransferred(address indexed sender, address indexed token, uint256 reducedAmount);\n\n    /* Errors */\n\n    /// @notice Thrown if the liquidation is restricted and the liquidator is not in the allowedLiquidatorsByAccount mapping\n    error LiquidationNotAllowed(address borrower, address liquidator);\n\n    /// @notice Thrown if VToken transfer fails after the liquidation\n    error VTokenTransferFailed(address from, address to, uint256 amount);\n\n    /// @notice Thrown if the liquidation is not successful (the error code is from TokenErrorReporter)\n    error LiquidationFailed(uint256 errorCode);\n\n    /// @notice Thrown if trying to restrict liquidations for an already restricted borrower\n    error AlreadyRestricted(address borrower);\n\n    /// @notice Thrown if trying to unrestrict liquidations for a borrower that is not restricted\n    error NoRestrictionsExist(address borrower);\n\n    /// @notice Thrown if the liquidator is already in the allowedLiquidatorsByAccount mapping\n    error AlreadyAllowed(address borrower, address liquidator);\n\n    /// @notice Thrown if trying to remove a liquidator that is not in the allowedLiquidatorsByAccount mapping\n    error AllowlistEntryNotFound(address borrower, address liquidator);\n\n    /// @notice Thrown if BNB amount sent with the transaction doesn't correspond to the\n    ///         intended BNB repayment\n    error WrongTransactionAmount(uint256 expected, uint256 actual);\n\n    /// @notice Thrown if trying to set treasury percent larger than the liquidation profit\n    error TreasuryPercentTooHigh(uint256 maxTreasuryPercentMantissa, uint256 treasuryPercentMantissa_);\n\n    /// @notice Thrown if trying to liquidate any token when VAI debt is too high\n    error VAIDebtTooHigh(uint256 vaiDebt, uint256 minLiquidatableVAI);\n\n    /// @notice Thrown when vToken is not listed\n    error MarketNotListed(address vToken);\n\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    /// @notice Constructor for the implementation contract. Sets immutable variables.\n    /// @param comptroller_ The address of the Comptroller contract\n    /// @param vBnb_ The address of the VBNB\n    /// @param wBNB_ The address of wBNB\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(address comptroller_, address payable vBnb_, address wBNB_) {c_fc026fc7(0x34febe0e63990486); /* function */ \n\nc_fc026fc7(0xf16811435b811f98); /* line */ \n        c_fc026fc7(0x348827e1f6969419); /* statement */ \nensureNonzeroAddress(vBnb_);\nc_fc026fc7(0xf677ed80e94fd47b); /* line */ \n        c_fc026fc7(0x29d23b28b51815fb); /* statement */ \nensureNonzeroAddress(comptroller_);\nc_fc026fc7(0x4a49d050b8a0f44d); /* line */ \n        c_fc026fc7(0xfe3030faabc25865); /* statement */ \nensureNonzeroAddress(wBNB_);\nc_fc026fc7(0x29f8d6b2cb598d9b); /* line */ \n        vBnb = IVBNB(vBnb_);\nc_fc026fc7(0x9d6b2723097f0078); /* line */ \n        wBNB = wBNB_;\nc_fc026fc7(0xd8534b490860ee46); /* line */ \n        comptroller = IComptroller(comptroller_);\nc_fc026fc7(0x69e8546ccaeaa81c); /* line */ \n        vaiController = IVAIController(IComptroller(comptroller_).vaiController());\nc_fc026fc7(0x0a71260e9f27191a); /* line */ \n        c_fc026fc7(0x1d8b965cffcb2fb9); /* statement */ \n_disableInitializers();\n    }\n\n    receive() external payable {}\n\n    /// @notice Initializer for the implementation contract.\n    /// @param treasuryPercentMantissa_ Treasury share, scaled by 1e18 (e.g. 0.2 * 1e18 for 20%)\n    /// @param accessControlManager_ address of access control manager\n    /// @param protocolShareReserve_ The address of the protocol share reserve contract\n    function initialize(\n        uint256 treasuryPercentMantissa_,\n        address accessControlManager_,\n        address protocolShareReserve_\n    ) external virtual  c_mod3bf4f56a reinitializer(2) c_mod94a50cd8  {c_fc026fc7(0xbc6ece217a1fc7ac); /* function */ \n\nc_fc026fc7(0x0ec2159de13bf2a1); /* line */ \n        c_fc026fc7(0x9bae0ea991727f48); /* statement */ \n__Liquidator_init(treasuryPercentMantissa_, accessControlManager_, protocolShareReserve_);\n    }\n\n    /// @dev Liquidator initializer for derived contracts.\n    /// @param treasuryPercentMantissa_ Treasury share, scaled by 1e18 (e.g. 0.2 * 1e18 for 20%)\n    /// @param accessControlManager_ address of access control manager\n    /// @param protocolShareReserve_ The address of the protocol share reserve contract\n    function __Liquidator_init(\n        uint256 treasuryPercentMantissa_,\n        address accessControlManager_,\n        address protocolShareReserve_\n    ) internal  c_modd93c9458 onlyInitializing c_mod4cf1dbcb  {c_fc026fc7(0x7bb4fe698542f071); /* function */ \n\nc_fc026fc7(0x1805cf263b6f6ec3); /* line */ \n        c_fc026fc7(0xb9af829a2ffca40b); /* statement */ \n__Ownable2Step_init();\nc_fc026fc7(0xe3410481a37ae28b); /* line */ \n        c_fc026fc7(0xe504ca4df3c30d64); /* statement */ \n__ReentrancyGuard_init();\nc_fc026fc7(0x7de3109407e84273); /* line */ \n        c_fc026fc7(0xbe5728ac521e8655); /* statement */ \n__Liquidator_init_unchained(treasuryPercentMantissa_, protocolShareReserve_);\nc_fc026fc7(0x4b20d5b813e27ccd); /* line */ \n        c_fc026fc7(0x7257822477d45fd7); /* statement */ \n__AccessControlled_init_unchained(accessControlManager_);\n    }\n\n    /// @dev Liquidator initializer for derived contracts that doesn't call parent initializers.\n    /// @param treasuryPercentMantissa_ Treasury share, scaled by 1e18 (e.g. 0.2 * 1e18 for 20%)\n    /// @param protocolShareReserve_ The address of the protocol share reserve contract\n    function __Liquidator_init_unchained(\n        uint256 treasuryPercentMantissa_,\n        address protocolShareReserve_\n    ) internal  c_mod7e633450 onlyInitializing c_mod721eccb1  {c_fc026fc7(0x7256eb77d29b0ed0); /* function */ \n\nc_fc026fc7(0x591965d070756bdf); /* line */ \n        c_fc026fc7(0xa12e48b12dd8aa26); /* statement */ \nvalidateTreasuryPercentMantissa(treasuryPercentMantissa_);\nc_fc026fc7(0x4bc57088827578ca); /* line */ \n        treasuryPercentMantissa = treasuryPercentMantissa_;\nc_fc026fc7(0xbf36e555e0719146); /* line */ \n        c_fc026fc7(0x0c68a41624db310b); /* statement */ \n_setProtocolShareReserve(protocolShareReserve_);\n    }\n\n    /// @notice An admin function to restrict liquidations to allowed addresses only.\n    /// @dev Use {addTo,removeFrom}AllowList to configure the allowed addresses.\n    /// @param borrower The address of the borrower\n    function restrictLiquidation(address borrower) external {c_fc026fc7(0xc69e5b543198eae9); /* function */ \n\nc_fc026fc7(0x31b684bea791f698); /* line */ \n        c_fc026fc7(0x3173eca74ce8b2f7); /* statement */ \n_checkAccessAllowed(\"restrictLiquidation(address)\");\nc_fc026fc7(0x02fb03f6037c6ffe); /* line */ \n        c_fc026fc7(0x9b43fe0d3675435a); /* statement */ \nif (liquidationRestricted[borrower]) {c_fc026fc7(0x4af45d05b4c8c359); /* branch */ \n\nc_fc026fc7(0x8d75ba745ffbd353); /* line */ \n            revert AlreadyRestricted(borrower);\n        }else { c_fc026fc7(0x9ad3083b7aa8001d); /* branch */ \n}\nc_fc026fc7(0xff6e1d20b2323640); /* line */ \n        liquidationRestricted[borrower] = true;\nc_fc026fc7(0x5bb103beb38ebd4d); /* line */ \n        c_fc026fc7(0x936d39f2d8fa4583); /* statement */ \nemit LiquidationRestricted(borrower);\n    }\n\n    /// @notice An admin function to remove restrictions for liquidations.\n    /// @dev Does not impact the allowedLiquidatorsByAccount mapping for the borrower, just turns off the check.\n    /// @param borrower The address of the borrower\n    function unrestrictLiquidation(address borrower) external {c_fc026fc7(0xe13fd9e63aeb9967); /* function */ \n\nc_fc026fc7(0x160f831865a306f9); /* line */ \n        c_fc026fc7(0x3b014358e76eff86); /* statement */ \n_checkAccessAllowed(\"unrestrictLiquidation(address)\");\nc_fc026fc7(0x896fa8f41f84c32e); /* line */ \n        c_fc026fc7(0xa52ce87bc463109e); /* statement */ \nif (!liquidationRestricted[borrower]) {c_fc026fc7(0x2864c811fb31713e); /* branch */ \n\nc_fc026fc7(0xba2a99441b84928f); /* line */ \n            revert NoRestrictionsExist(borrower);\n        }else { c_fc026fc7(0xb287b04b6e6e08a3); /* branch */ \n}\nc_fc026fc7(0xc92b72fdb7e2144a); /* line */ \n        liquidationRestricted[borrower] = false;\nc_fc026fc7(0x8f3456dd8e65e722); /* line */ \n        c_fc026fc7(0xa38005d777f8a2bf); /* statement */ \nemit LiquidationRestrictionsDisabled(borrower);\n    }\n\n    /// @notice An admin function to add the liquidator to the allowedLiquidatorsByAccount mapping for a certain\n    ///         borrower. If the liquidations are restricted, only liquidators from the\n    ///         allowedLiquidatorsByAccount mapping can participate in liquidating the positions of this borrower.\n    /// @param borrower The address of the borrower\n    /// @param borrower The address of the liquidator\n    function addToAllowlist(address borrower, address liquidator) external {c_fc026fc7(0x4d498849d084672e); /* function */ \n\nc_fc026fc7(0x286c9d6ffb1e758c); /* line */ \n        c_fc026fc7(0x97febb770c50b7fc); /* statement */ \n_checkAccessAllowed(\"addToAllowlist(address,address)\");\nc_fc026fc7(0xa4ead8a3dff176cb); /* line */ \n        c_fc026fc7(0x6c6f6c3562768f1c); /* statement */ \nif (allowedLiquidatorsByAccount[borrower][liquidator]) {c_fc026fc7(0x025a3165788245ff); /* branch */ \n\nc_fc026fc7(0x3766599ca9ee7426); /* line */ \n            revert AlreadyAllowed(borrower, liquidator);\n        }else { c_fc026fc7(0xf28f1498d66da021); /* branch */ \n}\nc_fc026fc7(0x0c515ee7b38aee57); /* line */ \n        allowedLiquidatorsByAccount[borrower][liquidator] = true;\nc_fc026fc7(0x626cf37b5d0cdb2a); /* line */ \n        c_fc026fc7(0x13a520b274878e7a); /* statement */ \nemit AllowlistEntryAdded(borrower, liquidator);\n    }\n\n    /// @notice An admin function to remove the liquidator from the allowedLiquidatorsByAccount mapping of a certain\n    ///         borrower. If the liquidations are restricted, this liquidator will not be\n    ///         able to liquidate the positions of this borrower.\n    /// @param borrower The address of the borrower\n    /// @param borrower The address of the liquidator\n    function removeFromAllowlist(address borrower, address liquidator) external {c_fc026fc7(0x8462419a4f4adf03); /* function */ \n\nc_fc026fc7(0x12e737ab711844b0); /* line */ \n        c_fc026fc7(0xb5b97ed2dbd02419); /* statement */ \n_checkAccessAllowed(\"removeFromAllowlist(address,address)\");\nc_fc026fc7(0xbfd96714c49f9e8b); /* line */ \n        c_fc026fc7(0x814553f7cfd9dce1); /* statement */ \nif (!allowedLiquidatorsByAccount[borrower][liquidator]) {c_fc026fc7(0xd6a87eb7b081aee3); /* branch */ \n\nc_fc026fc7(0xadb90b8710ec7547); /* line */ \n            revert AllowlistEntryNotFound(borrower, liquidator);\n        }else { c_fc026fc7(0xce36293c65ed6d2c); /* branch */ \n}\nc_fc026fc7(0x32b40348d0c0f0e7); /* line */ \n        allowedLiquidatorsByAccount[borrower][liquidator] = false;\nc_fc026fc7(0x54f109173afd6270); /* line */ \n        c_fc026fc7(0x0fa57f808fb6ad20); /* statement */ \nemit AllowlistEntryRemoved(borrower, liquidator);\n    }\n\n    /// @notice Liquidates a borrow and splits the seized amount between protocol share reserve and\n    ///         liquidator. The liquidators should use this interface instead of calling\n    ///         vToken.liquidateBorrow(...) directly.\n    /// @notice Checks force VAI liquidation first; vToken should be address of vaiController if vaiDebt is greater than threshold\n    /// @notice For BNB borrows msg.value should be equal to repayAmount; otherwise msg.value\n    ///      should be zero.\n    /// @param vToken Borrowed vToken\n    /// @param borrower The address of the borrower\n    /// @param repayAmount The amount to repay on behalf of the borrower\n    /// @param vTokenCollateral The collateral to seize\n    function liquidateBorrow(\n        address vToken,\n        address borrower,\n        uint256 repayAmount,\n        IVToken vTokenCollateral\n    ) external payable  c_mod253bc1b6 nonReentrant c_mod5b709e03  {c_fc026fc7(0xe849209fc988ff57); /* function */ \n\nc_fc026fc7(0x589b3cb26fcd46c3); /* line */ \n        c_fc026fc7(0xbf4fe25cfb2b5fe9); /* statement */ \nensureNonzeroAddress(borrower);\nc_fc026fc7(0xfdc3d8b56b78ed02); /* line */ \n        c_fc026fc7(0x17ecbf6007cb2f4c); /* statement */ \ncheckRestrictions(borrower, msg.sender);\nc_fc026fc7(0x4a661403ca9a9a53); /* line */ \n        c_fc026fc7(0xa4d0762e03b4d680); /* statement */ \n(bool isListed, , ) = IComptroller(comptroller).markets(address(vTokenCollateral));\nc_fc026fc7(0x1e6aa5875ee23cea); /* line */ \n        c_fc026fc7(0xd4c55817d9523808); /* statement */ \nif (!isListed) {c_fc026fc7(0x3b1762d5145f2698); /* branch */ \n\nc_fc026fc7(0xf95848e930ea80c5); /* line */ \n            revert MarketNotListed(address(vTokenCollateral));\n        }else { c_fc026fc7(0xa82d70aed3c18457); /* branch */ \n}\n\nc_fc026fc7(0xac8baff673057bb3); /* line */ \n        c_fc026fc7(0xecece6ac8e52c063); /* statement */ \n_checkForceVAILiquidate(vToken, borrower);\nc_fc026fc7(0x35462a88afbf0d0b); /* line */ \n        c_fc026fc7(0x382eeb617d1dbd49); /* statement */ \nuint256 ourBalanceBefore = vTokenCollateral.balanceOf(address(this));\nc_fc026fc7(0x58d8a5687c0ba201); /* line */ \n        c_fc026fc7(0x9fee8c50c75ee12e); /* statement */ \nif (vToken == address(vBnb)) {c_fc026fc7(0x6a59a743cfdac073); /* branch */ \n\nc_fc026fc7(0xe5cab81a4e2e9e1f); /* line */ \n            c_fc026fc7(0x3d12dbecf7600676); /* statement */ \nif (repayAmount != msg.value) {c_fc026fc7(0x70c75cde10f9c975); /* branch */ \n\nc_fc026fc7(0x27d467f1e77c1343); /* line */ \n                revert WrongTransactionAmount(repayAmount, msg.value);\n            }else { c_fc026fc7(0x3249e46f50249d42); /* branch */ \n}\nc_fc026fc7(0x39932243b2c0d428); /* line */ \n            c_fc026fc7(0xd1508d798f9d789a); /* statement */ \nvBnb.liquidateBorrow{ value: msg.value }(borrower, vTokenCollateral);\n        } else {c_fc026fc7(0xddcbb54c9ac92669); /* branch */ \n\nc_fc026fc7(0x3659385982596676); /* line */ \n            c_fc026fc7(0x37aca1f3523c9bab); /* statement */ \nif (msg.value != 0) {c_fc026fc7(0xa6d961a46e73ed64); /* branch */ \n\nc_fc026fc7(0xd4200aaaa6febaf7); /* line */ \n                revert WrongTransactionAmount(0, msg.value);\n            }else { c_fc026fc7(0xad630acfc039cc93); /* branch */ \n}\nc_fc026fc7(0xef62cc08d590ee08); /* line */ \n            c_fc026fc7(0x00a1864936fbc80c); /* statement */ \nif (vToken == address(vaiController)) {c_fc026fc7(0xfe0133ee069d4159); /* branch */ \n\nc_fc026fc7(0x834c67b51300b2df); /* line */ \n                c_fc026fc7(0xe0ab1da20c13b13a); /* statement */ \n_liquidateVAI(borrower, repayAmount, vTokenCollateral);\n            } else {c_fc026fc7(0xfc52b5e1b9a76f53); /* branch */ \n\nc_fc026fc7(0xb9b12d03eff76d73); /* line */ \n                c_fc026fc7(0x44c71d7d67a8c7c3); /* statement */ \n_liquidateBep20(IVBep20(vToken), borrower, repayAmount, vTokenCollateral);\n            }\n        }\nc_fc026fc7(0x68d4a7a6219e9c5f); /* line */ \n        c_fc026fc7(0x2712183b8456dab5); /* statement */ \nuint256 ourBalanceAfter = vTokenCollateral.balanceOf(address(this));\nc_fc026fc7(0x147b5d7ac6ca8c1a); /* line */ \n        c_fc026fc7(0x80a238aac5f04ab6); /* statement */ \nuint256 seizedAmount = ourBalanceAfter - ourBalanceBefore;\nc_fc026fc7(0x2e54669b5408d672); /* line */ \n        c_fc026fc7(0x90915932414fef2f); /* statement */ \n(uint256 ours, uint256 theirs) = _distributeLiquidationIncentive(vTokenCollateral, seizedAmount);\nc_fc026fc7(0x34f2f193169d8aa6); /* line */ \n        c_fc026fc7(0xa554a2ea13a07a41); /* statement */ \n_reduceReservesInternal();\nc_fc026fc7(0xca996ec1724b817b); /* line */ \n        c_fc026fc7(0x8e9c2b524834798d); /* statement */ \nemit LiquidateBorrowedTokens(\n            msg.sender,\n            borrower,\n            repayAmount,\n            vToken,\n            address(vTokenCollateral),\n            ours,\n            theirs\n        );\n    }\n\n    /// @notice Sets the new percent of the seized amount that goes to treasury. Should\n    ///         be less than or equal to comptroller.liquidationIncentiveMantissa().sub(1e18).\n    /// @param newTreasuryPercentMantissa New treasury percent (scaled by 10^18).\n    function setTreasuryPercent(uint256 newTreasuryPercentMantissa) external {c_fc026fc7(0x2f652a0fe93036a9); /* function */ \n\nc_fc026fc7(0xf824708972a87d0f); /* line */ \n        c_fc026fc7(0x21b9c8e305e9389a); /* statement */ \n_checkAccessAllowed(\"setTreasuryPercent(uint256)\");\nc_fc026fc7(0x6b093502a3a36f89); /* line */ \n        c_fc026fc7(0xa42339e412fe2e26); /* statement */ \nvalidateTreasuryPercentMantissa(newTreasuryPercentMantissa);\nc_fc026fc7(0xc60ebf36f57aa228); /* line */ \n        c_fc026fc7(0x10d420c310bd4e8c); /* statement */ \nemit NewLiquidationTreasuryPercent(treasuryPercentMantissa, newTreasuryPercentMantissa);\nc_fc026fc7(0x3ce86a9235abf0b3); /* line */ \n        treasuryPercentMantissa = newTreasuryPercentMantissa;\n    }\n\n    /**\n     * @notice Sets protocol share reserve contract address\n     * @param protocolShareReserve_ The address of the protocol share reserve contract\n     */\n    function setProtocolShareReserve(address payable protocolShareReserve_) external  c_modb0c972f3 onlyOwner c_mod7ec53df9  {c_fc026fc7(0xf131466e165c93c9); /* function */ \n\nc_fc026fc7(0xea92452702f27432); /* line */ \n        c_fc026fc7(0xdd0d6460850d3730); /* statement */ \n_setProtocolShareReserve(protocolShareReserve_);\n    }\n\n    /**\n     * @notice Reduce the reserves of the pending accumulated reserves\n     */\n    function reduceReserves() external  c_mod35a041ae nonReentrant c_modc5450a0a  {c_fc026fc7(0xf81991974e6e29da); /* function */ \n\nc_fc026fc7(0x18cfd96b263181bc); /* line */ \n        c_fc026fc7(0x95fa700df150ba9c); /* statement */ \n_reduceReservesInternal();\n    }\n\n    function _reduceReservesInternal() internal {c_fc026fc7(0xf957de21d473f5d1); /* function */ \n\nc_fc026fc7(0xd5ef684d43d2d6de); /* line */ \n        c_fc026fc7(0x028e4e66821c8b6c); /* statement */ \nuint256 _pendingRedeemLength = pendingRedeem.length;\nc_fc026fc7(0x3211cd65190f94fd); /* line */ \n        c_fc026fc7(0xf31cee05c08942d4); /* statement */ \nuint256 range = ((_pendingRedeemLength >= pendingRedeemChunkLength || c_falsefc026fc7(0x86f79853a549b51b)) && c_truefc026fc7(0x88d7c0ed87da4e7f))\n            ? pendingRedeemChunkLength\n            : _pendingRedeemLength;\nc_fc026fc7(0xbc9c8e44008a7780); /* line */ \n        c_fc026fc7(0x71715d2a1d867634); /* statement */ \nfor (uint256 index = range; index > 0; ) {\nc_fc026fc7(0x3b91ad4a2b1926ff); /* line */ \n            c_fc026fc7(0xc6a10a17c3c72317); /* statement */ \naddress vToken = pendingRedeem[index - 1];\nc_fc026fc7(0x563d27a9e74ac00f); /* line */ \n            c_fc026fc7(0x34838e474002320b); /* statement */ \nuint256 vTokenBalance_ = IVToken(vToken).balanceOf(address(this));\nc_fc026fc7(0x26844d18708a5c47); /* line */ \n            c_fc026fc7(0x547b5a5b097a25ca); /* statement */ \nif (_redeemUnderlying(vToken, vTokenBalance_)) {c_fc026fc7(0x7d40a3b34517863c); /* branch */ \n\nc_fc026fc7(0xeab07b921427dcfb); /* line */ \n                c_fc026fc7(0x97b836eb32f65b93); /* statement */ \nif (vToken == address(vBnb)) {c_fc026fc7(0xd54d5b277d527be8); /* branch */ \n\nc_fc026fc7(0x5ef547b77e377881); /* line */ \n                    c_fc026fc7(0xab18c37bc3c0aaee); /* statement */ \n_reduceBnbReserves();\n                } else {c_fc026fc7(0x51b3bdfc01c36344); /* branch */ \n\nc_fc026fc7(0x3d5fed1f8e83cc4e); /* line */ \n                    c_fc026fc7(0xacbd68cb64573ad6); /* statement */ \n_reduceVTokenReserves(vToken);\n                }\nc_fc026fc7(0x81ca1da0a139a856); /* line */ \n                pendingRedeem[index - 1] = pendingRedeem[pendingRedeem.length - 1];\nc_fc026fc7(0x28cb35e4f715dd50); /* line */ \n                c_fc026fc7(0xede11f7c639ac44e); /* statement */ \npendingRedeem.pop();\n            }else { c_fc026fc7(0xe62d41d6d0dc5598); /* branch */ \n}\nc_fc026fc7(0x354711dc167ad08b); /* line */ \n            unchecked {\nc_fc026fc7(0xbe3b7fb7b2b6d803); /* line */ \n                index--;\n            }\n        }\n    }\n\n    /// @dev Transfers BEP20 tokens to self, then approves vToken to take these tokens.\n    function _liquidateBep20(IVBep20 vToken, address borrower, uint256 repayAmount, IVToken vTokenCollateral) internal {c_fc026fc7(0xadf1fe05c1b1bc01); /* function */ \n\nc_fc026fc7(0xeb643746e8a5a90f); /* line */ \n        c_fc026fc7(0x45bc18475ce1e764); /* statement */ \n(bool isListed, , ) = IComptroller(comptroller).markets(address(vToken));\nc_fc026fc7(0x1196c91c0745b342); /* line */ \n        c_fc026fc7(0x95654a7e54dc0a68); /* statement */ \nif (!isListed) {c_fc026fc7(0xa2074b5cff7421fa); /* branch */ \n\nc_fc026fc7(0x32565f84f27bb374); /* line */ \n            revert MarketNotListed(address(vToken));\n        }else { c_fc026fc7(0xabb8684fdc8cb24c); /* branch */ \n}\n\nc_fc026fc7(0xe830be853d24db96); /* line */ \n        c_fc026fc7(0x055d2bafaaaba0f6); /* statement */ \nIERC20Upgradeable borrowedToken = IERC20Upgradeable(vToken.underlying());\nc_fc026fc7(0x4cdf165c3f6cb467); /* line */ \n        c_fc026fc7(0x249ebc66500a84bd); /* statement */ \nuint256 actualRepayAmount = _transferBep20(borrowedToken, msg.sender, address(this), repayAmount);\nc_fc026fc7(0x382c9f428b68b57d); /* line */ \n        c_fc026fc7(0x9097dc48f948663b); /* statement */ \nborrowedToken.safeApprove(address(vToken), 0);\nc_fc026fc7(0xbe66f2e1453e43f5); /* line */ \n        c_fc026fc7(0x4a3ee522568c7e90); /* statement */ \nborrowedToken.safeApprove(address(vToken), actualRepayAmount);\nc_fc026fc7(0x1a580f22fa4f0037); /* line */ \n        c_fc026fc7(0x2e263842888a7238); /* statement */ \nrequireNoError(vToken.liquidateBorrow(borrower, actualRepayAmount, vTokenCollateral));\n    }\n\n    /// @dev Transfers BEP20 tokens to self, then approves VAI to take these tokens.\n    function _liquidateVAI(address borrower, uint256 repayAmount, IVToken vTokenCollateral) internal {c_fc026fc7(0x8ba1bd31713f65ee); /* function */ \n\nc_fc026fc7(0x86461b46510ab88c); /* line */ \n        c_fc026fc7(0x15c9faf2ebb9e947); /* statement */ \nIERC20Upgradeable vai = IERC20Upgradeable(vaiController.getVAIAddress());\nc_fc026fc7(0x1f42922ea80c50c0); /* line */ \n        c_fc026fc7(0xdb615a121ed9161b); /* statement */ \nvai.safeTransferFrom(msg.sender, address(this), repayAmount);\nc_fc026fc7(0x50777eca252927f4); /* line */ \n        c_fc026fc7(0xa64cf220826d0347); /* statement */ \nvai.safeApprove(address(vaiController), 0);\nc_fc026fc7(0x050a701c5c2fa447); /* line */ \n        c_fc026fc7(0x3b1d1102a912d60b); /* statement */ \nvai.safeApprove(address(vaiController), repayAmount);\n\nc_fc026fc7(0x1631f17b8a4a4337); /* line */ \n        c_fc026fc7(0xac5d5252a13c0bf8); /* statement */ \n(uint256 err, ) = vaiController.liquidateVAI(borrower, repayAmount, vTokenCollateral);\nc_fc026fc7(0x0e76dd206c1bdba1); /* line */ \n        c_fc026fc7(0xb6a677b7f5fee528); /* statement */ \nrequireNoError(err);\n    }\n\n    /// @dev Distribute seized collateral between liquidator and protocol share reserve\n    function _distributeLiquidationIncentive(\n        IVToken vTokenCollateral,\n        uint256 seizedAmount\n    ) internal returns (uint256 ours, uint256 theirs) {c_fc026fc7(0xb077ec1f6796e200); /* function */ \n\nc_fc026fc7(0xfb961a7521f7f0d1); /* line */ \n        (ours, theirs) = _splitLiquidationIncentive(seizedAmount);\nc_fc026fc7(0x6e68e1d4e03d7ef2); /* line */ \n        c_fc026fc7(0xd87930b5bbe2eb2b); /* statement */ \nif (!vTokenCollateral.transfer(msg.sender, theirs)) {c_fc026fc7(0x13c20d6ba9418805); /* branch */ \n\nc_fc026fc7(0xca0cf08d85e6a47d); /* line */ \n            revert VTokenTransferFailed(address(this), msg.sender, theirs);\n        }else { c_fc026fc7(0x87a42b445f48090b); /* branch */ \n}\n\nc_fc026fc7(0xc3891d3e41e13f26); /* line */ \n        c_fc026fc7(0x2cf951b4155127e2); /* statement */ \nif (ours > 0 && !_redeemUnderlying(address(vTokenCollateral), ours)) {c_fc026fc7(0x08fc191251299ec6); /* branch */ \n\n            // Check if asset is already present in pendingRedeem array\nc_fc026fc7(0x5a1219251656490d); /* line */ \n            c_fc026fc7(0xdaa07c994c065970); /* statement */ \nuint256 index;\nc_fc026fc7(0x64911e80675091e0); /* line */ \n            c_fc026fc7(0x91501edd12e369c0); /* statement */ \nfor (index; index < pendingRedeem.length; ) {\nc_fc026fc7(0x56f43f5ccea25c7a); /* line */ \n                c_fc026fc7(0xa02e1e566fd0da9f); /* statement */ \nif (pendingRedeem[index] == address(vTokenCollateral)) {c_fc026fc7(0xc145195eaa23acaa); /* branch */ \n\nc_fc026fc7(0xdfbde3b336685a35); /* line */ \n                    break;\n                }else { c_fc026fc7(0xe65a48647a8785e6); /* branch */ \n}\nc_fc026fc7(0x5836e427db9a4fb7); /* line */ \n                unchecked {\nc_fc026fc7(0x7e89a3bb5734ff45); /* line */ \n                    index++;\n                }\n            }\nc_fc026fc7(0xbce427e80a7fece4); /* line */ \n            c_fc026fc7(0x32b23b014161a737); /* statement */ \nif (index == pendingRedeem.length) {c_fc026fc7(0x59596fcc2acc2ab2); /* branch */ \n\nc_fc026fc7(0x17380dc4a5cde3db); /* line */ \n                c_fc026fc7(0x4661d4dc1043c08e); /* statement */ \npendingRedeem.push(address(vTokenCollateral));\n            }else { c_fc026fc7(0x09ed0adf6ccaad86); /* branch */ \n}\n        } else {c_fc026fc7(0x85f7e032d07e88c5); /* branch */ \n\nc_fc026fc7(0x7578aafd429d6a71); /* line */ \n            c_fc026fc7(0x3319d33a76f91e79); /* statement */ \nif (address(vTokenCollateral) == address(vBnb)) {c_fc026fc7(0xfecf7d60775ffa52); /* branch */ \n\nc_fc026fc7(0x8797bba378941b42); /* line */ \n                c_fc026fc7(0x5da21d98ce00585f); /* statement */ \n_reduceBnbReserves();\n            } else {c_fc026fc7(0x58787b7c13fa1fc2); /* branch */ \n\nc_fc026fc7(0x239de07a2dedb3c0); /* line */ \n                c_fc026fc7(0x486a8bb37874d4e0); /* statement */ \n_reduceVTokenReserves(address(vTokenCollateral));\n            }\n        }\n    }\n\n    /// @dev Wraps BNB to wBNB and sends to protocol share reserve\n    function _reduceBnbReserves() private {c_fc026fc7(0xade50c13ae19817b); /* function */ \n\nc_fc026fc7(0x17bde13305652648); /* line */ \n        c_fc026fc7(0x8c69044e1a8f543c); /* statement */ \nuint256 bnbBalance = address(this).balance;\nc_fc026fc7(0x72629ebcbf34ef06); /* line */ \n        c_fc026fc7(0x061072811545538b); /* statement */ \nIWBNB(wBNB).deposit{ value: bnbBalance }();\nc_fc026fc7(0x6bd2f4317a6145f0); /* line */ \n        c_fc026fc7(0x45b89d37b84b9962); /* statement */ \nIERC20Upgradeable(wBNB).safeTransfer(protocolShareReserve, bnbBalance);\nc_fc026fc7(0xd4f29328dec925ad); /* line */ \n        c_fc026fc7(0xf9e7bd14a7c623f6); /* statement */ \nIProtocolShareReserve(protocolShareReserve).updateAssetsState(\n            address(comptroller),\n            wBNB,\n            IProtocolShareReserve.IncomeType.LIQUIDATION\n        );\nc_fc026fc7(0x5def00a1bdecdc68); /* line */ \n        c_fc026fc7(0x7bad24d9ab179d1d); /* statement */ \nemit ProtocolLiquidationIncentiveTransferred(msg.sender, wBNB, bnbBalance);\n    }\n\n    /// @dev Redeem seized collateral to underlying assets\n    function _redeemUnderlying(address vToken, uint256 amount) private returns (bool) {c_fc026fc7(0x37b7fb44d5c2fbfd); /* function */ \n\nc_fc026fc7(0x3334f7445f0ca10a); /* line */ \n        c_fc026fc7(0x537e92a91dc65cf1); /* statement */ \ntry IVToken(address(vToken)).redeem(amount) returns (uint256 response) {\nc_fc026fc7(0x28e0ae86a27c29d8); /* line */ \n            c_fc026fc7(0x529cfb0cff7031c9); /* statement */ \nif (response == 0) {c_fc026fc7(0x58ec58bf72129034); /* branch */ \n\nc_fc026fc7(0xb2c091cde9af7958); /* line */ \n                c_fc026fc7(0xb43ccfaae43cef3f); /* statement */ \nreturn true;\n            } else {c_fc026fc7(0x40a3bd30fadcdbbb); /* branch */ \n\nc_fc026fc7(0xdb6a2bdf8cda44c3); /* line */ \n                c_fc026fc7(0xca962ebd794464ca); /* statement */ \nreturn false;\n            }\n        } catch {\nc_fc026fc7(0x43a9ed7f123d7258); /* line */ \n            c_fc026fc7(0x8a009cae230524e5); /* statement */ \nreturn false;\n        }\n    }\n\n    /// @dev Transfers seized collateral other than BNB to protocol share reserve\n    function _reduceVTokenReserves(address vToken) private {c_fc026fc7(0x2c33153d239a8198); /* function */ \n\nc_fc026fc7(0x95f5ebdd56afe281); /* line */ \n        c_fc026fc7(0xd4299d26a87bf6ee); /* statement */ \naddress underlying = IVBep20(vToken).underlying();\nc_fc026fc7(0xc304646d738a5701); /* line */ \n        c_fc026fc7(0x1a976de5dccfb691); /* statement */ \nuint256 underlyingBalance = IERC20Upgradeable(underlying).balanceOf(address(this));\nc_fc026fc7(0xd76f06942267589a); /* line */ \n        c_fc026fc7(0xd1020485e6706632); /* statement */ \nIERC20Upgradeable(underlying).safeTransfer(protocolShareReserve, underlyingBalance);\nc_fc026fc7(0x23e4a1e8488c1b3d); /* line */ \n        c_fc026fc7(0x72f1c2fb56bd96e5); /* statement */ \nIProtocolShareReserve(protocolShareReserve).updateAssetsState(\n            address(comptroller),\n            underlying,\n            IProtocolShareReserve.IncomeType.LIQUIDATION\n        );\nc_fc026fc7(0xe5c21d998a0c64f0); /* line */ \n        c_fc026fc7(0xe61f56abb43b0b73); /* statement */ \nemit ProtocolLiquidationIncentiveTransferred(msg.sender, underlying, underlyingBalance);\n    }\n\n    /// @dev Transfers tokens and returns the actual transfer amount\n    function _transferBep20(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal returns (uint256) {c_fc026fc7(0x15c7a92713419257); /* function */ \n\nc_fc026fc7(0x22fae3abb95bdcd3); /* line */ \n        c_fc026fc7(0xf726c0dcc27bdeb2); /* statement */ \nuint256 prevBalance = token.balanceOf(to);\nc_fc026fc7(0x8a8bc48a6e826407); /* line */ \n        c_fc026fc7(0x6f604209d64bf990); /* statement */ \ntoken.safeTransferFrom(from, to, amount);\nc_fc026fc7(0xffac98b672f231d3); /* line */ \n        c_fc026fc7(0x72a396936af3fa8f); /* statement */ \nreturn token.balanceOf(to) - prevBalance;\n    }\n\n    /// @dev Computes the amounts that would go to treasury and to the liquidator.\n    function _splitLiquidationIncentive(uint256 seizedAmount) internal view returns (uint256 ours, uint256 theirs) {c_fc026fc7(0x00a225db1f6baea0); /* function */ \n\nc_fc026fc7(0xd3a6a478ed838e46); /* line */ \n        c_fc026fc7(0x0f4660d683b7d9b1); /* statement */ \nuint256 totalIncentive = comptroller.liquidationIncentiveMantissa();\nc_fc026fc7(0x41d98add53af8fda); /* line */ \n        ours = (seizedAmount * treasuryPercentMantissa) / totalIncentive;\nc_fc026fc7(0xc8f53e4fa87dd57d); /* line */ \n        theirs = seizedAmount - ours;\n    }\n\n    function requireNoError(uint256 errCode) internal pure {c_fc026fc7(0x861f2aea6910e83f); /* function */ \n\nc_fc026fc7(0x3a56a5e786b27f3e); /* line */ \n        c_fc026fc7(0x062e54caebceb79e); /* statement */ \nif (errCode == uint256(0)) {c_fc026fc7(0x7bb8e06605889e26); /* branch */ \n\nc_fc026fc7(0xc4420c49149d46ac); /* line */ \n            c_fc026fc7(0xfe8fb6b76a3a2c58); /* statement */ \nreturn;\n        }else { c_fc026fc7(0x1ccd44827893ea6b); /* branch */ \n}\n\nc_fc026fc7(0xcbcb7b3a62158244); /* line */ \n        revert LiquidationFailed(errCode);\n    }\n\n    function checkRestrictions(address borrower, address liquidator) internal view {c_fc026fc7(0x2d2bfc5f4816f077); /* function */ \n\nc_fc026fc7(0x83b8a837d3aeea42); /* line */ \n        c_fc026fc7(0x9a9fe91139ca45f3); /* statement */ \nif (liquidationRestricted[borrower] && !allowedLiquidatorsByAccount[borrower][liquidator]) {c_fc026fc7(0xe3838feabf36dd4a); /* branch */ \n\nc_fc026fc7(0xf35a0c4908077996); /* line */ \n            revert LiquidationNotAllowed(borrower, liquidator);\n        }else { c_fc026fc7(0x0829f111ee93f4c4); /* branch */ \n}\n    }\n\n    function validateTreasuryPercentMantissa(uint256 treasuryPercentMantissa_) internal view {c_fc026fc7(0xe4dab363e61cdf4a); /* function */ \n\nc_fc026fc7(0x62b4513c96871dcc); /* line */ \n        c_fc026fc7(0x8d2426a171ef2ef4); /* statement */ \nuint256 maxTreasuryPercentMantissa = comptroller.liquidationIncentiveMantissa() - MANTISSA_ONE;\nc_fc026fc7(0xc5dbaca95d44194e); /* line */ \n        c_fc026fc7(0xbaecda0e3c6b5cd1); /* statement */ \nif (treasuryPercentMantissa_ > maxTreasuryPercentMantissa) {c_fc026fc7(0x8e73645994697d22); /* branch */ \n\nc_fc026fc7(0xc9a3467d3250e2fc); /* line */ \n            revert TreasuryPercentTooHigh(maxTreasuryPercentMantissa, treasuryPercentMantissa_);\n        }else { c_fc026fc7(0x1e95818729aebc4e); /* branch */ \n}\n    }\n\n    /// @dev Checks liquidation action in comptroller and vaiDebt with minLiquidatableVAI threshold\n    function _checkForceVAILiquidate(address vToken_, address borrower_) private view {c_fc026fc7(0xebaf9cf79216c0c7); /* function */ \n\nc_fc026fc7(0xf7a6af6fb7a1d53c); /* line */ \n        c_fc026fc7(0x3d36783cdfcf194e); /* statement */ \nuint256 _vaiDebt = vaiController.getVAIRepayAmount(borrower_);\nc_fc026fc7(0x950a47a3051a2a64); /* line */ \n        c_fc026fc7(0x1ddac29db9c25164); /* statement */ \nbool _isVAILiquidationPaused = comptroller.actionPaused(address(vaiController), IComptroller.Action.LIQUIDATE);\nc_fc026fc7(0x7fa5f53168e33efa); /* line */ \n        c_fc026fc7(0xa8d8d0d5291c3829); /* statement */ \nbool _isForcedLiquidationEnabled = comptroller.isForcedLiquidationEnabled(vToken_);\nc_fc026fc7(0x10a7e6131c5d8bf3); /* line */ \n        c_fc026fc7(0xdc37c3b00e8c6593); /* statement */ \nif (\n            ((((_isForcedLiquidationEnabled && c_truefc026fc7(0xd6e2fb888d624cda)) ||\n            (_isVAILiquidationPaused && c_truefc026fc7(0x5b1ed015172f37f2)) && c_truefc026fc7(0xd2a00675a348d61f)) ||\n            (!forceVAILiquidate && c_truefc026fc7(0x1c0c624dd6068f74)) && c_truefc026fc7(0x891f35db4305d5be)) ||\n            (_vaiDebt < minLiquidatableVAI && c_truefc026fc7(0xc774d7448e670382)) && c_truefc026fc7(0xf0d32fab377caf48)) ||\n            (vToken_ == address(vaiController) && c_truefc026fc7(0x7f923a54b94077c5))\n        ) {c_fc026fc7(0xc5bc3c5acaca9524); /* statement */ \nc_fc026fc7(0xdf32189f14549b55); /* branch */ \nreturn;}else { c_fc026fc7(0x564ae9d7e965ad32); /* branch */ \n}\nc_fc026fc7(0xc118afcc3c9872f7); /* line */ \n        revert VAIDebtTooHigh(_vaiDebt, minLiquidatableVAI);\n    }\n\n    function _setProtocolShareReserve(address protocolShareReserve_) internal {c_fc026fc7(0xeed173369ce3309b); /* function */ \n\nc_fc026fc7(0x039488c47701890e); /* line */ \n        c_fc026fc7(0x4db6d460162ffee3); /* statement */ \nensureNonzeroAddress(protocolShareReserve_);\nc_fc026fc7(0xe4be09b94e1e925b); /* line */ \n        c_fc026fc7(0x18940234f2a68960); /* statement */ \nemit NewProtocolShareReserve(protocolShareReserve, protocolShareReserve_);\nc_fc026fc7(0xb4b3360f02858d67); /* line */ \n        protocolShareReserve = protocolShareReserve_;\n    }\n\n    /**\n     * @notice Sets the threshold for minimum amount of vaiLiquidate\n     * @param minLiquidatableVAI_ New address for the access control\n     */\n    function setMinLiquidatableVAI(uint256 minLiquidatableVAI_) external {c_fc026fc7(0x94350c889f678f4f); /* function */ \n\nc_fc026fc7(0xd7dbfd39983d04e9); /* line */ \n        c_fc026fc7(0x868cb11f0c243d59); /* statement */ \n_checkAccessAllowed(\"setMinLiquidatableVAI(uint256)\");\nc_fc026fc7(0x2fce8bddf9a8353a); /* line */ \n        c_fc026fc7(0xf7772d0b6db34ad9); /* statement */ \nemit NewMinLiquidatableVAI(minLiquidatableVAI, minLiquidatableVAI_);\nc_fc026fc7(0x59048a38df07b785); /* line */ \n        minLiquidatableVAI = minLiquidatableVAI_;\n    }\n\n    /**\n     * @notice Length of the pendingRedeem array to be consider while redeeming in Liquidation transaction\n     * @param newLength_ Length of the chunk\n     */\n    function setPendingRedeemChunkLength(uint256 newLength_) external {c_fc026fc7(0xabce246adb8e2b63); /* function */ \n\nc_fc026fc7(0xf6146f6936c9ad60); /* line */ \n        c_fc026fc7(0x2d7f7261876e05f6); /* statement */ \n_checkAccessAllowed(\"setPendingRedeemChunkLength(uint256)\");\nc_fc026fc7(0xc20d512709d85e0e); /* line */ \n        c_fc026fc7(0x7135b6ee4c57b7e3); /* requirePre */ \nc_fc026fc7(0xf7202ef35b75ceb8); /* statement */ \nrequire(newLength_ > 0, \"Invalid chunk size\");c_fc026fc7(0x2ba0538eca8580fa); /* requirePost */ \n\nc_fc026fc7(0x8efa399b42deb721); /* line */ \n        c_fc026fc7(0x68e6e507a468b552); /* statement */ \nemit NewPendingRedeemChunkLength(pendingRedeemChunkLength, newLength_);\nc_fc026fc7(0x3a8e4d069581e915); /* line */ \n        pendingRedeemChunkLength = newLength_;\n    }\n\n    /**\n     * @notice Pause Force Liquidation of VAI\n     */\n    function pauseForceVAILiquidate() external {c_fc026fc7(0xbfd4eac2761d30ec); /* function */ \n\nc_fc026fc7(0xf8863562b7162219); /* line */ \n        c_fc026fc7(0xa5c79d93b81e293a); /* statement */ \n_checkAccessAllowed(\"pauseForceVAILiquidate()\");\nc_fc026fc7(0x1e29360310ed47b6); /* line */ \n        c_fc026fc7(0xd1abc40b12ccd08b); /* requirePre */ \nc_fc026fc7(0xa6237763e5dfb19a); /* statement */ \nrequire(forceVAILiquidate, \"Force Liquidation of VAI is already Paused\");c_fc026fc7(0xae64416327cf3437); /* requirePost */ \n\nc_fc026fc7(0xcf9db648f5c45a4e); /* line */ \n        forceVAILiquidate = false;\nc_fc026fc7(0x1b3f039eb5c1f093); /* line */ \n        c_fc026fc7(0x56d1f65bbdc801f5); /* statement */ \nemit ForceVAILiquidationPaused(msg.sender);\n    }\n\n    /**\n     * @notice Resume Force Liquidation of VAI\n     */\n    function resumeForceVAILiquidate() external {c_fc026fc7(0x83ddfbb8611b5ff5); /* function */ \n\nc_fc026fc7(0x902fac208e810a6b); /* line */ \n        c_fc026fc7(0x9ab1a638ab7dc2c9); /* statement */ \n_checkAccessAllowed(\"resumeForceVAILiquidate()\");\nc_fc026fc7(0x16f38f92a1314868); /* line */ \n        c_fc026fc7(0x45f6a05704cd1075); /* requirePre */ \nc_fc026fc7(0xcb4921ae2e7a6da1); /* statement */ \nrequire(!forceVAILiquidate, \"Force Liquidation of VAI is already resumed\");c_fc026fc7(0x2bd1c2ab36571c98); /* requirePost */ \n\nc_fc026fc7(0x9abfb095e02c9ea3); /* line */ \n        forceVAILiquidate = true;\nc_fc026fc7(0x5f48ee7de7c6ed38); /* line */ \n        c_fc026fc7(0xd5343c3ca2215583); /* statement */ \nemit ForceVAILiquidationResumed(msg.sender);\n    }\n\n    function renounceOwnership() public override {c_fc026fc7(0x77b477773ce3ccc3); /* function */ \n}\n}\n"
    },
    "contracts/Liquidator/LiquidatorStorage.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity 0.8.25;\nfunction c_65fbf490(bytes8 c__65fbf490) pure {}\nfunction c_true65fbf490(bytes8 c__65fbf490) pure returns (bool){ return true; }\nfunction c_false65fbf490(bytes8 c__65fbf490) pure returns (bool){ return false; }\n\n\ncontract LiquidatorStorage {\nfunction c_2a14c573(bytes8 c__2a14c573) internal pure {}\nfunction c_true2a14c573(bytes8 c__2a14c573) internal pure returns (bool){ return true; }\nfunction c_false2a14c573(bytes8 c__2a14c573) internal pure returns (bool){ return false; }\n\n    /* State */\n\n    /// @notice Percent of seized amount that goes to treasury.\n    uint256 public treasuryPercentMantissa;\n\n    /// @notice Mapping of addresses allowed to liquidate an account if liquidationRestricted[borrower] == true\n    mapping(address => mapping(address => bool)) public allowedLiquidatorsByAccount;\n\n    /// @notice Whether the liquidations are restricted to enabled allowedLiquidatorsByAccount addresses only\n    mapping(address => bool) public liquidationRestricted;\n\n    /// @notice minimum amount of VAI liquidation threshold\n    uint256 public minLiquidatableVAI;\n\n    /// @notice check for liquidation of VAI\n    bool public forceVAILiquidate;\n\n    /// @notice assests whose redeem is pending to reduce reserves\n    address[] public pendingRedeem;\n\n    /// @notice protocol share reserve contract address\n    address public protocolShareReserve;\n\n    /// @dev Size of chunk to consider when redeeming underlying at the time of liquidation\n    uint256 internal pendingRedeemChunkLength;\n\n    /// @notice gap to prevent collision in inheritance\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/PegStability/IVAI.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.25;\nfunction c_353db90f(bytes8 c__353db90f) pure {}\nfunction c_true353db90f(bytes8 c__353db90f) pure returns (bool){ return true; }\nfunction c_false353db90f(bytes8 c__353db90f) pure returns (bool){ return false; }\n\n\ninterface IVAI {\n    function balanceOf(address usr) external returns (uint256);\n\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\n\n    function mint(address usr, uint wad) external;\n\n    function burn(address usr, uint wad) external;\n}\n"
    },
    "contracts/PegStability/PegStability.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity 0.8.25;\nfunction c_c1c06ceb(bytes8 c__c1c06ceb) pure {}\nfunction c_truec1c06ceb(bytes8 c__c1c06ceb) pure returns (bool){ return true; }\nfunction c_falsec1c06ceb(bytes8 c__c1c06ceb) pure returns (bool){ return false; }\n\n\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport \"@venusprotocol/governance-contracts/contracts/Governance/AccessControlledV8.sol\";\nimport { ResilientOracleInterface } from \"@venusprotocol/oracle/contracts/interfaces/OracleInterface.sol\";\nimport { IVAI } from \"./IVAI.sol\";\n\n/**\n * @title Peg Stability Contract.\n * @notice Contract for swapping stable token for VAI token and vice versa to maintain the peg stability between them.\n * @author Venus Protocol\n */\ncontract PegStability is AccessControlledV8, ReentrancyGuardUpgradeable {\nfunction c_dc24f6d4(bytes8 c__dc24f6d4) internal pure {}\nfunction c_truedc24f6d4(bytes8 c__dc24f6d4) internal pure returns (bool){ return true; }\nfunction c_falsedc24f6d4(bytes8 c__dc24f6d4) internal pure returns (bool){ return false; }\nmodifier c_mod4d1eb357{ c_dc24f6d4(0xbded3fbfead86d5a); /* modifier-post */ \n _; }\nmodifier c_mod2aac20c4{ c_dc24f6d4(0xa577bc9ef1f88121); /* modifier-pre */ \n _; }\nmodifier c_mod34dd2b4c{ c_dc24f6d4(0x99598ae9432b663e); /* modifier-post */ \n _; }\nmodifier c_mod9470a18e{ c_dc24f6d4(0x5f000212c08cda9a); /* modifier-pre */ \n _; }\nmodifier c_mod4a9795aa{ c_dc24f6d4(0xe523777983fb09fd); /* modifier-post */ \n _; }\nmodifier c_modb8e0986b{ c_dc24f6d4(0xb7d4196066974187); /* modifier-pre */ \n _; }\nmodifier c_modb8028a2b{ c_dc24f6d4(0x436c59a284ca4b50); /* modifier-post */ \n _; }\nmodifier c_mod18884c1c{ c_dc24f6d4(0x22137be060f5374f); /* modifier-pre */ \n _; }\nmodifier c_mod4cbf20e3{ c_dc24f6d4(0x41d61138df51cfb6); /* modifier-post */ \n _; }\nmodifier c_mod277cb0a4{ c_dc24f6d4(0x4bc15861468acb65); /* modifier-pre */ \n _; }\n\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    // Helper enum for calculation of the fee.\n    enum FeeDirection {\n        IN,\n        OUT\n    }\n\n    /// @notice The divisor used to convert fees to basis points.\n    uint256 public constant BASIS_POINTS_DIVISOR = 10000;\n\n    /// @notice The mantissa value representing 1 (used for calculations).\n    uint256 public constant MANTISSA_ONE = 1e18;\n\n    /// @notice The value representing one dollar in the stable token.\n    /// @dev Our oracle is returning amount depending on the number of decimals of the stable token. (36 - asset_decimals) E.g. 8 decimal asset = 1e28.\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    uint256 public immutable ONE_DOLLAR;\n\n    /// @notice VAI token contract.\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    IVAI public immutable VAI;\n\n    /// @notice The address of the stable token contract.\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address public immutable STABLE_TOKEN_ADDRESS;\n\n    /// @notice The address of ResilientOracle contract wrapped in its interface.\n    ResilientOracleInterface public oracle;\n\n    /// @notice The address of the Venus Treasury contract.\n    address public venusTreasury;\n\n    /// @notice The incoming stableCoin fee. (Fee for swapStableForVAI).\n    uint256 public feeIn;\n\n    /// @notice The outgoing stableCoin fee. (Fee for swapVAIForStable).\n    uint256 public feeOut;\n\n    /// @notice The maximum amount of VAI that can be minted through this contract.\n    uint256 public vaiMintCap;\n\n    /// @notice The total amount of VAI minted through this contract.\n    uint256 public vaiMinted;\n\n    /// @notice A flag indicating whether the contract is currently paused or not.\n    bool public isPaused;\n\n    /// @notice Event emitted when contract is paused.\n    event PSMPaused(address indexed admin);\n\n    /// @notice Event emitted when the contract is resumed after pause.\n    event PSMResumed(address indexed admin);\n\n    /// @notice Event emitted when feeIn state var is modified.\n    event FeeInChanged(uint256 oldFeeIn, uint256 newFeeIn);\n\n    /// @notice Event emitted when feeOut state var is modified.\n    event FeeOutChanged(uint256 oldFeeOut, uint256 newFeeOut);\n\n    /// @notice Event emitted when vaiMintCap state var is modified.\n    event VAIMintCapChanged(uint256 oldCap, uint256 newCap);\n\n    /// @notice Event emitted when venusTreasury state var is modified.\n    event VenusTreasuryChanged(address indexed oldTreasury, address indexed newTreasury);\n\n    /// @notice Event emitted when oracle state var is modified.\n    event OracleChanged(address indexed oldOracle, address indexed newOracle);\n\n    /// @notice Event emitted when stable token is swapped for VAI.\n    event StableForVAISwapped(uint256 stableIn, uint256 vaiOut, uint256 fee);\n\n    /// @notice Event emitted when stable token is swapped for VAI.\n    event VAIForStableSwapped(uint256 vaiBurnt, uint256 stableOut, uint256 vaiFee);\n\n    /// @notice thrown when contract is in paused state\n    error Paused();\n\n    /// @notice thrown when attempted to pause an already paused contract\n    error AlreadyPaused();\n\n    /// @notice thrown when attempted to resume the contract if it is already resumed\n    error NotPaused();\n\n    /// @notice thrown when stable token has more than 18 decimals\n    error TooManyDecimals();\n\n    /// @notice thrown when fee is >= 100%\n    error InvalidFee();\n\n    /// @notice thrown when a zero address is passed as a function parameter\n    error ZeroAddress();\n\n    /// @notice thrown when a zero amount is passed as stable token amount parameter\n    error ZeroAmount();\n\n    /// @notice thrown when the user doesn't have enough VAI balance to provide for the amount of stable tokens he wishes to get\n    error NotEnoughVAI();\n\n    /// @notice thrown when the amount of VAI to be burnt exceeds the vaiMinted amount\n    error VAIMintedUnderflow();\n\n    /// @notice thrown when the VAI transfer to treasury fails\n    error VAITransferFail();\n\n    /// @notice thrown when VAI to be minted will go beyond the mintCap threshold\n    error VAIMintCapReached();\n    /// @notice thrown when fee calculation will result in rounding down to 0 due to stable token amount being a too small number\n    error AmountTooSmall();\n\n    /**\n     * @dev Prevents functions to execute when contract is paused.\n     */\n    modifier isActive() {c_dc24f6d4(0xfd8b098a592b9d9b); /* function */ \n\nc_dc24f6d4(0x4bfef5b7637c1cd7); /* line */ \n        c_dc24f6d4(0x274d178c8a62c8fb); /* statement */ \nif (isPaused) {c_dc24f6d4(0x87ad18f727df26c2); /* branch */ \nrevert Paused();}else { c_dc24f6d4(0x0bb2e1f39f15473a); /* branch */ \n}\nc_dc24f6d4(0xdd25d94653f9bd43); /* line */ \n        _;\n    }\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(address stableTokenAddress_, address vaiAddress_) {c_dc24f6d4(0xd47fe38d61e92170); /* function */ \n\nc_dc24f6d4(0xa3e736e34c450e85); /* line */ \n        c_dc24f6d4(0x9afc83ad2407ebc2); /* statement */ \n_ensureNonzeroAddress(stableTokenAddress_);\nc_dc24f6d4(0x562a31dbbe11666a); /* line */ \n        c_dc24f6d4(0x6b3b29e7bc278563); /* statement */ \n_ensureNonzeroAddress(vaiAddress_);\n\nc_dc24f6d4(0x9c9b71c791d93394); /* line */ \n        c_dc24f6d4(0x4e37392add811771); /* statement */ \nuint256 decimals_ = IERC20MetadataUpgradeable(stableTokenAddress_).decimals();\n\nc_dc24f6d4(0xc8426bec0f645883); /* line */ \n        c_dc24f6d4(0xce056278104700cf); /* statement */ \nif (decimals_ > 18) {c_dc24f6d4(0xc1a17554141cf519); /* branch */ \n\nc_dc24f6d4(0xa6d2d2d7d3eef196); /* line */ \n            revert TooManyDecimals();\n        }else { c_dc24f6d4(0x1420a50afeaebd6a); /* branch */ \n}\n\nc_dc24f6d4(0xb1e4dabbc9d0b2c4); /* line */ \n        ONE_DOLLAR = 10 ** (36 - decimals_); // 1$ scaled to the decimals returned by our Oracle\nc_dc24f6d4(0xb9090c3a65aedc8c); /* line */ \n        STABLE_TOKEN_ADDRESS = stableTokenAddress_;\nc_dc24f6d4(0x119e2f67e55a0b7f); /* line */ \n        VAI = IVAI(vaiAddress_);\nc_dc24f6d4(0x76361fe650964d32); /* line */ \n        c_dc24f6d4(0xc4531b21a05a236e); /* statement */ \n_disableInitializers();\n    }\n\n    /**\n     * @notice Initializes the contract via Proxy Contract with the required parameters.\n     * @param accessControlManager_ The address of the AccessControlManager contract.\n     * @param venusTreasury_ The address where fees will be sent.\n     * @param oracleAddress_ The address of the ResilientOracle contract.\n     * @param feeIn_ The percentage of fees to be applied to a stablecoin -> VAI swap.\n     * @param feeOut_ The percentage of fees to be applied to a VAI -> stablecoin swap.\n     * @param vaiMintCap_ The cap for the total amount of VAI that can be minted.\n     */\n    function initialize(\n        address accessControlManager_,\n        address venusTreasury_,\n        address oracleAddress_,\n        uint256 feeIn_,\n        uint256 feeOut_,\n        uint256 vaiMintCap_\n    ) external  c_mod277cb0a4 initializer c_mod4cbf20e3  {c_dc24f6d4(0xee2e54027dbe6f10); /* function */ \n\nc_dc24f6d4(0x21a208a98656fa47); /* line */ \n        c_dc24f6d4(0x0e7a49fdafe8d80c); /* statement */ \n_ensureNonzeroAddress(accessControlManager_);\nc_dc24f6d4(0xfce2556e9c09d57c); /* line */ \n        c_dc24f6d4(0x3323ab6a1e1ecfaf); /* statement */ \n_ensureNonzeroAddress(venusTreasury_);\nc_dc24f6d4(0x9732ed9ee729c8ef); /* line */ \n        c_dc24f6d4(0xa0f594973f03c65c); /* statement */ \n_ensureNonzeroAddress(oracleAddress_);\nc_dc24f6d4(0x03572c3cf571161d); /* line */ \n        c_dc24f6d4(0xcf113eb1072451a6); /* statement */ \n__AccessControlled_init(accessControlManager_);\nc_dc24f6d4(0xfce7e8995620bc39); /* line */ \n        c_dc24f6d4(0x47ffe0e67aef9a26); /* statement */ \n__ReentrancyGuard_init();\n\nc_dc24f6d4(0x422b43c4bc3d6e26); /* line */ \n        c_dc24f6d4(0x5005232fa6c222ab); /* statement */ \nif ((feeIn_ >= BASIS_POINTS_DIVISOR && c_truedc24f6d4(0x0e1af3897826d7df)) || (feeOut_ >= BASIS_POINTS_DIVISOR && c_truedc24f6d4(0xf2745571303e391d))) {c_dc24f6d4(0xeac7fb9f7ec1ad6a); /* branch */ \n\nc_dc24f6d4(0x20a211baeb1fd786); /* line */ \n            revert InvalidFee();\n        }else { c_dc24f6d4(0x6b5658215e1b2e1b); /* branch */ \n}\n\nc_dc24f6d4(0x918b735c665437c9); /* line */ \n        feeIn = feeIn_;\nc_dc24f6d4(0x997638767b1eaf20); /* line */ \n        feeOut = feeOut_;\nc_dc24f6d4(0x5f0298ccea4350d7); /* line */ \n        vaiMintCap = vaiMintCap_;\nc_dc24f6d4(0xd471b79cef8060ca); /* line */ \n        venusTreasury = venusTreasury_;\nc_dc24f6d4(0xb8b1732c48e4e29f); /* line */ \n        oracle = ResilientOracleInterface(oracleAddress_);\n    }\n\n    /*** Swap Functions ***/\n\n    /**\n     * @notice Swaps VAI for a stable token.\n     * @param receiver The address where the stablecoin will be sent.\n     * @param stableTknAmount The amount of stable tokens to receive.\n     * @return The amount of VAI received and burnt from the sender.\n     */\n    // @custom:event Emits VAIForStableSwapped event.\n    function swapVAIForStable(\n        address receiver,\n        uint256 stableTknAmount\n    ) external  c_mod18884c1c isActive c_modb8028a2b   c_modb8e0986b nonReentrant c_mod4a9795aa  returns (uint256) {c_dc24f6d4(0x4368471a185c6294); /* function */ \n\nc_dc24f6d4(0x59e8966d7c84ffe1); /* line */ \n        c_dc24f6d4(0xd874a4141eee8b7f); /* statement */ \n_ensureNonzeroAddress(receiver);\nc_dc24f6d4(0xfacfdac9a40973bc); /* line */ \n        c_dc24f6d4(0x9eebff56e3f985c5); /* statement */ \n_ensureNonzeroAmount(stableTknAmount);\n\n        // update oracle price and calculate USD value of the stable token amount scaled in 18 decimals\nc_dc24f6d4(0x40a74875db38b6a1); /* line */ \n        c_dc24f6d4(0x7a95be7ec1870480); /* statement */ \noracle.updateAssetPrice(STABLE_TOKEN_ADDRESS);\nc_dc24f6d4(0x806445d9103f9de2); /* line */ \n        c_dc24f6d4(0x6a7cc85fc03a3cd3); /* statement */ \nuint256 stableTknAmountUSD = _previewTokenUSDAmount(stableTknAmount, FeeDirection.OUT);\nc_dc24f6d4(0x41238746611b7134); /* line */ \n        c_dc24f6d4(0x4ac64baa25cfd32a); /* statement */ \nuint256 fee = _calculateFee(stableTknAmountUSD, FeeDirection.OUT);\n\nc_dc24f6d4(0xb328e51ee9277a57); /* line */ \n        c_dc24f6d4(0x986cbbfdadb089ff); /* statement */ \nif (VAI.balanceOf(msg.sender) < stableTknAmountUSD + fee) {c_dc24f6d4(0x7c24da7dce0ef8d5); /* branch */ \n\nc_dc24f6d4(0xc53ae45818c4b9fa); /* line */ \n            revert NotEnoughVAI();\n        }else { c_dc24f6d4(0x39f1cb370fea4549); /* branch */ \n}\nc_dc24f6d4(0xff3bd9eacc913913); /* line */ \n        c_dc24f6d4(0x94368a8b739f82d1); /* statement */ \nif (vaiMinted < stableTknAmountUSD) {c_dc24f6d4(0x31b777fb7dd785cd); /* branch */ \n\nc_dc24f6d4(0xc783c7c917a4ec2f); /* line */ \n            revert VAIMintedUnderflow();\n        }else { c_dc24f6d4(0x437f5279ce0723be); /* branch */ \n}\n\nc_dc24f6d4(0xc87287555babe472); /* line */ \n        unchecked {\nc_dc24f6d4(0x3c9ccea1b3ee801d); /* line */ \n            vaiMinted -= stableTknAmountUSD;\n        }\n\nc_dc24f6d4(0x336e193583acb01f); /* line */ \n        c_dc24f6d4(0x27167cb51bf9dae6); /* statement */ \nif (fee != 0) {c_dc24f6d4(0x3c5822d991850902); /* branch */ \n\nc_dc24f6d4(0xd01fda236f0b182f); /* line */ \n            c_dc24f6d4(0xa6f26e7cff36ca1c); /* statement */ \nbool success = VAI.transferFrom(msg.sender, venusTreasury, fee);\nc_dc24f6d4(0x733742ac8bd7fbd7); /* line */ \n            c_dc24f6d4(0x82cace814591367d); /* statement */ \nif (!success) {c_dc24f6d4(0x58eb642a430d6d54); /* branch */ \n\nc_dc24f6d4(0x30ddbee3179669b4); /* line */ \n                revert VAITransferFail();\n            }else { c_dc24f6d4(0x655115cd97c0c824); /* branch */ \n}\n        }else { c_dc24f6d4(0x09a460ca14843add); /* branch */ \n}\n\nc_dc24f6d4(0x9d73f682e4831caa); /* line */ \n        c_dc24f6d4(0x14d754aae004e7ac); /* statement */ \nVAI.burn(msg.sender, stableTknAmountUSD);\nc_dc24f6d4(0x359b49b1971a6eeb); /* line */ \n        c_dc24f6d4(0x7e88db290b8f1e22); /* statement */ \nIERC20Upgradeable(STABLE_TOKEN_ADDRESS).safeTransfer(receiver, stableTknAmount);\nc_dc24f6d4(0x04c3097058348398); /* line */ \n        c_dc24f6d4(0xa658859965206c79); /* statement */ \nemit VAIForStableSwapped(stableTknAmountUSD, stableTknAmount, fee);\nc_dc24f6d4(0xa4937eb09df1a465); /* line */ \n        c_dc24f6d4(0xc01e7efca218e1d7); /* statement */ \nreturn stableTknAmountUSD;\n    }\n\n    /**\n     * @notice Swaps stable tokens for VAI with fees.\n     * @dev This function adds support to fee-on-transfer tokens. The actualTransferAmt is calculated, by recording token balance state before and after the transfer.\n     * @param receiver The address that will receive the VAI tokens.\n     * @param stableTknAmount The amount of stable tokens to be swapped.\n     * @return Amount of VAI minted to the sender.\n     */\n    // @custom:event Emits StableForVAISwapped event.\n    function swapStableForVAI(\n        address receiver,\n        uint256 stableTknAmount\n    ) external  c_mod9470a18e isActive c_mod34dd2b4c   c_mod2aac20c4 nonReentrant c_mod4d1eb357  returns (uint256) {c_dc24f6d4(0xb6975737b422e343); /* function */ \n\nc_dc24f6d4(0x331e6c62e68d601e); /* line */ \n        c_dc24f6d4(0xb64eb3cfadaf290b); /* statement */ \n_ensureNonzeroAddress(receiver);\nc_dc24f6d4(0xc4f98e2b85a9de63); /* line */ \n        c_dc24f6d4(0x3517b852242ca3cc); /* statement */ \n_ensureNonzeroAmount(stableTknAmount);\n        // transfer IN, supporting fee-on-transfer tokens\nc_dc24f6d4(0x1b11f6ba00f51346); /* line */ \n        c_dc24f6d4(0x42dadaed2748cb13); /* statement */ \nuint256 balanceBefore = IERC20Upgradeable(STABLE_TOKEN_ADDRESS).balanceOf(address(this));\nc_dc24f6d4(0x683c5d7fd59919f4); /* line */ \n        c_dc24f6d4(0x7c65308367d9dc3c); /* statement */ \nIERC20Upgradeable(STABLE_TOKEN_ADDRESS).safeTransferFrom(msg.sender, address(this), stableTknAmount);\nc_dc24f6d4(0xbdc333950edc6b4e); /* line */ \n        c_dc24f6d4(0x68c5fc50677fa351); /* statement */ \nuint256 balanceAfter = IERC20Upgradeable(STABLE_TOKEN_ADDRESS).balanceOf(address(this));\n\n        //calculate actual transfered amount (in case of fee-on-transfer tokens)\nc_dc24f6d4(0xb8ed0d130ae065c3); /* line */ \n        c_dc24f6d4(0xdef1fc3914912ab1); /* statement */ \nuint256 actualTransferAmt = balanceAfter - balanceBefore;\n\n        // update oracle price and calculate USD value of the stable token amount scaled in 18 decimals\nc_dc24f6d4(0x2aef4d1b658e4a65); /* line */ \n        c_dc24f6d4(0xf2edd3754b97b776); /* statement */ \noracle.updateAssetPrice(STABLE_TOKEN_ADDRESS);\nc_dc24f6d4(0x8afa9febf0795e36); /* line */ \n        c_dc24f6d4(0x2d72d011e08d3313); /* statement */ \nuint256 actualTransferAmtInUSD = _previewTokenUSDAmount(actualTransferAmt, FeeDirection.IN);\n\n        //calculate feeIn\nc_dc24f6d4(0xf8d8865ccc31aaff); /* line */ \n        c_dc24f6d4(0x121f498b00357a64); /* statement */ \nuint256 fee = _calculateFee(actualTransferAmtInUSD, FeeDirection.IN);\nc_dc24f6d4(0x8d40658185b8ee36); /* line */ \n        c_dc24f6d4(0xdb0bdab758635fad); /* statement */ \nuint256 vaiToMint = actualTransferAmtInUSD - fee;\n\nc_dc24f6d4(0xa2fbfcdec9837ec5); /* line */ \n        c_dc24f6d4(0x840b7ca1be08ebca); /* statement */ \nif (vaiMinted + actualTransferAmtInUSD > vaiMintCap) {c_dc24f6d4(0x2842bf98810847b2); /* branch */ \n\nc_dc24f6d4(0x023f4bb7442c0613); /* line */ \n            revert VAIMintCapReached();\n        }else { c_dc24f6d4(0x2e2d9b7a8b14ef70); /* branch */ \n}\nc_dc24f6d4(0x3d07be2557024d54); /* line */ \n        unchecked {\nc_dc24f6d4(0xf2791f8a3914c8d2); /* line */ \n            vaiMinted += actualTransferAmtInUSD;\n        }\n\n        // mint VAI to receiver\nc_dc24f6d4(0x1a4c6138964b288b); /* line */ \n        c_dc24f6d4(0x2a51ae775ab42172); /* statement */ \nVAI.mint(receiver, vaiToMint);\n\n        // mint VAI fee to venus treasury\nc_dc24f6d4(0x75f612eb1fc03c7f); /* line */ \n        c_dc24f6d4(0x4a2958ea3bc28006); /* statement */ \nif (fee != 0) {c_dc24f6d4(0xd72e980b1c109998); /* branch */ \n\nc_dc24f6d4(0x6faa4c1e99f010bf); /* line */ \n            c_dc24f6d4(0xf515b9b95e46e6a1); /* statement */ \nVAI.mint(venusTreasury, fee);\n        }else { c_dc24f6d4(0xcb2cc3679fac527a); /* branch */ \n}\n\nc_dc24f6d4(0x4d8505e056921e4e); /* line */ \n        c_dc24f6d4(0x60d8c896eb56e118); /* statement */ \nemit StableForVAISwapped(actualTransferAmt, vaiToMint, fee);\nc_dc24f6d4(0x86581b88e5886b8c); /* line */ \n        c_dc24f6d4(0x99b4b26ef42cb066); /* statement */ \nreturn vaiToMint;\n    }\n\n    /*** Admin Functions ***/\n\n    /**\n     * @notice Pause the PSM contract.\n     * @dev Reverts if the contract is already paused.\n     */\n    // @custom:event Emits PSMPaused event.\n    function pause() external {c_dc24f6d4(0xcedb7fdb1ba0eb22); /* function */ \n\nc_dc24f6d4(0x43513de2d7c23bcc); /* line */ \n        c_dc24f6d4(0xa505f0459859cd4e); /* statement */ \n_checkAccessAllowed(\"pause()\");\nc_dc24f6d4(0xe2a91d1b3e468e5f); /* line */ \n        c_dc24f6d4(0x652f02b4592152ec); /* statement */ \nif (isPaused) {c_dc24f6d4(0x4d0084f001e7e614); /* branch */ \n\nc_dc24f6d4(0xb1a007c464271448); /* line */ \n            revert AlreadyPaused();\n        }else { c_dc24f6d4(0xf1e3a2e01cc3a2ab); /* branch */ \n}\nc_dc24f6d4(0xa7043e0dd37cd9f3); /* line */ \n        isPaused = true;\nc_dc24f6d4(0x93874ba2e522556e); /* line */ \n        c_dc24f6d4(0xdc86a4d3e0523943); /* statement */ \nemit PSMPaused(msg.sender);\n    }\n\n    /**\n     * @notice Resume the PSM contract.\n     * @dev Reverts if the contract is not paused.\n     */\n    // @custom:event Emits PSMResumed event.\n    function resume() external {c_dc24f6d4(0x4c2334c9030c6422); /* function */ \n\nc_dc24f6d4(0xf80d9e9fc3816110); /* line */ \n        c_dc24f6d4(0x87ebeb374240e075); /* statement */ \n_checkAccessAllowed(\"resume()\");\nc_dc24f6d4(0x62f081827de8d3d0); /* line */ \n        c_dc24f6d4(0x3bb997357c3cfc20); /* statement */ \nif (!isPaused) {c_dc24f6d4(0x30df3286eb889a97); /* branch */ \n\nc_dc24f6d4(0x4cb3c273b1e209b5); /* line */ \n            revert NotPaused();\n        }else { c_dc24f6d4(0x49f32bf44888be7e); /* branch */ \n}\nc_dc24f6d4(0xc8554c36da4865f7); /* line */ \n        isPaused = false;\nc_dc24f6d4(0x0d3b4db9747a45fa); /* line */ \n        c_dc24f6d4(0xfbe57b6e114b8e88); /* statement */ \nemit PSMResumed(msg.sender);\n    }\n\n    /**\n     * @notice Set the fee percentage for incoming swaps.\n     * @dev Reverts if the new fee percentage is invalid (greater than or equal to BASIS_POINTS_DIVISOR).\n     * @param feeIn_ The new fee percentage for incoming swaps.\n     */\n    // @custom:event Emits FeeInChanged event.\n    function setFeeIn(uint256 feeIn_) external {c_dc24f6d4(0x7bf5ca52f828cda9); /* function */ \n\nc_dc24f6d4(0x37524ea634312f05); /* line */ \n        c_dc24f6d4(0x888c750219ec024b); /* statement */ \n_checkAccessAllowed(\"setFeeIn(uint256)\");\n        // feeIn = 10000 = 100%\nc_dc24f6d4(0xa7614167ac1dcf4d); /* line */ \n        c_dc24f6d4(0x7b2c00089c5ea2fe); /* statement */ \nif (feeIn_ >= BASIS_POINTS_DIVISOR) {c_dc24f6d4(0xee0c94c95f07314d); /* branch */ \n\nc_dc24f6d4(0x3bd9b0b4a0e3ba16); /* line */ \n            revert InvalidFee();\n        }else { c_dc24f6d4(0x89f3f2dc460620bc); /* branch */ \n}\nc_dc24f6d4(0x9e7d968944db7137); /* line */ \n        c_dc24f6d4(0x7f79b18b82a84ada); /* statement */ \nuint256 oldFeeIn = feeIn;\nc_dc24f6d4(0x49405da4bf138036); /* line */ \n        feeIn = feeIn_;\nc_dc24f6d4(0x083f1c1f6d45ae84); /* line */ \n        c_dc24f6d4(0x8b04b9fdcc3d67b0); /* statement */ \nemit FeeInChanged(oldFeeIn, feeIn_);\n    }\n\n    /**\n     * @notice Set the fee percentage for outgoing swaps.\n     * @dev Reverts if the new fee percentage is invalid (greater than or equal to BASIS_POINTS_DIVISOR).\n     * @param feeOut_ The new fee percentage for outgoing swaps.\n     */\n    // @custom:event Emits FeeOutChanged event.\n    function setFeeOut(uint256 feeOut_) external {c_dc24f6d4(0x4d6a87775b1ad7c0); /* function */ \n\nc_dc24f6d4(0x71ecbee1da0ecf45); /* line */ \n        c_dc24f6d4(0x693302c9b7cd29cd); /* statement */ \n_checkAccessAllowed(\"setFeeOut(uint256)\");\n        // feeOut = 10000 = 100%\nc_dc24f6d4(0xc435a5f3b1a1ed71); /* line */ \n        c_dc24f6d4(0xbfac1724d49ecb73); /* statement */ \nif (feeOut_ >= BASIS_POINTS_DIVISOR) {c_dc24f6d4(0xa722a753f1628a70); /* branch */ \n\nc_dc24f6d4(0xd8c7c080d9bb39a2); /* line */ \n            revert InvalidFee();\n        }else { c_dc24f6d4(0xc3f568e7d1ad7f89); /* branch */ \n}\nc_dc24f6d4(0x754d37f4d4d68ae8); /* line */ \n        c_dc24f6d4(0xca1e5edc9ee189e7); /* statement */ \nuint256 oldFeeOut = feeOut;\nc_dc24f6d4(0x7c5bbf30321d27e1); /* line */ \n        feeOut = feeOut_;\nc_dc24f6d4(0x3802b19bd8fc5636); /* line */ \n        c_dc24f6d4(0x2bf57906195a38ba); /* statement */ \nemit FeeOutChanged(oldFeeOut, feeOut_);\n    }\n\n    /**\n     * @dev Set the maximum amount of VAI that can be minted through this contract.\n     * @param vaiMintCap_ The new maximum amount of VAI that can be minted.\n     */\n    // @custom:event Emits VAIMintCapChanged event.\n    function setVAIMintCap(uint256 vaiMintCap_) external {c_dc24f6d4(0xaed52c9b9d0c6df2); /* function */ \n\nc_dc24f6d4(0x12b89c3d4040fe70); /* line */ \n        c_dc24f6d4(0x96e847f6969a9bf8); /* statement */ \n_checkAccessAllowed(\"setVAIMintCap(uint256)\");\nc_dc24f6d4(0x5a1980875170f590); /* line */ \n        c_dc24f6d4(0xc32d7adefbfe3408); /* statement */ \nuint256 oldVAIMintCap = vaiMintCap;\nc_dc24f6d4(0x2e4d482f51f653a9); /* line */ \n        vaiMintCap = vaiMintCap_;\nc_dc24f6d4(0xe91f8fc4432347e7); /* line */ \n        c_dc24f6d4(0xf65d762725debf36); /* statement */ \nemit VAIMintCapChanged(oldVAIMintCap, vaiMintCap_);\n    }\n\n    /**\n     * @notice Set the address of the Venus Treasury contract.\n     * @dev Reverts if the new address is zero.\n     * @param venusTreasury_ The new address of the Venus Treasury contract.\n     */\n    // @custom:event Emits VenusTreasuryChanged event.\n    function setVenusTreasury(address venusTreasury_) external {c_dc24f6d4(0xc626cd7e6636b391); /* function */ \n\nc_dc24f6d4(0xabf103e7c541741e); /* line */ \n        c_dc24f6d4(0x6b502450c1470b60); /* statement */ \n_checkAccessAllowed(\"setVenusTreasury(address)\");\nc_dc24f6d4(0x2dd186d40235b940); /* line */ \n        c_dc24f6d4(0x202393c0b3888af4); /* statement */ \n_ensureNonzeroAddress(venusTreasury_);\nc_dc24f6d4(0x027830a290b37811); /* line */ \n        c_dc24f6d4(0x32a8b8f8d3241abf); /* statement */ \naddress oldTreasuryAddress = venusTreasury;\nc_dc24f6d4(0x0848a8342418fe3a); /* line */ \n        venusTreasury = venusTreasury_;\nc_dc24f6d4(0xca3d942905b015f6); /* line */ \n        c_dc24f6d4(0xb6a4ecc508c04c40); /* statement */ \nemit VenusTreasuryChanged(oldTreasuryAddress, venusTreasury_);\n    }\n\n    /**\n     * @notice Set the address of the ResilientOracle contract.\n     * @dev Reverts if the new address is zero.\n     * @param oracleAddress_ The new address of the ResilientOracle contract.\n     */\n    // @custom:event Emits OracleChanged event.\n    function setOracle(address oracleAddress_) external {c_dc24f6d4(0xce97d93d1834b77f); /* function */ \n\nc_dc24f6d4(0xe4fde904e5c960b6); /* line */ \n        c_dc24f6d4(0x3c13be10e2992d72); /* statement */ \n_checkAccessAllowed(\"setOracle(address)\");\nc_dc24f6d4(0xd6171f8f695ffd6f); /* line */ \n        c_dc24f6d4(0x17e24ac79a948ae2); /* statement */ \n_ensureNonzeroAddress(oracleAddress_);\nc_dc24f6d4(0x45a663ba0d816859); /* line */ \n        c_dc24f6d4(0x78b7c2e4fb082866); /* statement */ \naddress oldOracleAddress = address(oracle);\nc_dc24f6d4(0x6f9de4a830bf5ca0); /* line */ \n        oracle = ResilientOracleInterface(oracleAddress_);\nc_dc24f6d4(0xa6020f90b0e98bd4); /* line */ \n        c_dc24f6d4(0xbf70ac37c7204fa6); /* statement */ \nemit OracleChanged(oldOracleAddress, oracleAddress_);\n    }\n\n    /**\n     * @dev Disabling renounceOwnership function.\n     */\n    function renounceOwnership() public override {c_dc24f6d4(0xe77be3b3baa4b676); /* function */ \n}\n\n    /*** Helper Functions ***/\n\n    /**\n     * @notice Calculates the amount of VAI that would be burnt from the user.\n     * @dev This calculation might be off with a bit, if the price of the oracle for this asset is not updated in the block this function is invoked.\n     * @param stableTknAmount The amount of stable tokens to be received after the swap.\n     * @return The amount of VAI that would be taken from the user.\n     */\n    function previewSwapVAIForStable(uint256 stableTknAmount) external view returns (uint256) {c_dc24f6d4(0x6ffb6f3dea1086e6); /* function */ \n\nc_dc24f6d4(0x96d4b1ea7e2a8cb7); /* line */ \n        c_dc24f6d4(0x7cdba8125c2393a4); /* statement */ \n_ensureNonzeroAmount(stableTknAmount);\nc_dc24f6d4(0xc482b47611c950fd); /* line */ \n        c_dc24f6d4(0xa6db17a9b95d2d7c); /* statement */ \nuint256 stableTknAmountUSD = _previewTokenUSDAmount(stableTknAmount, FeeDirection.OUT);\nc_dc24f6d4(0xc165d32ccdf3a23e); /* line */ \n        c_dc24f6d4(0xbcb5eb86dfe89eec); /* statement */ \nuint256 fee = _calculateFee(stableTknAmountUSD, FeeDirection.OUT);\n\nc_dc24f6d4(0x89dbc0e687a7dfc8); /* line */ \n        c_dc24f6d4(0xd1ddb665efc74518); /* statement */ \nif (vaiMinted < stableTknAmountUSD) {c_dc24f6d4(0xf267ebc82562779e); /* branch */ \n\nc_dc24f6d4(0x3255570033c14dad); /* line */ \n            revert VAIMintedUnderflow();\n        }else { c_dc24f6d4(0x4859596dbb863f86); /* branch */ \n}\n\nc_dc24f6d4(0x336a11689070d0c3); /* line */ \n        c_dc24f6d4(0x123d574b2d0fab7b); /* statement */ \nreturn stableTknAmountUSD + fee;\n    }\n\n    /**\n     * @notice Calculates the amount of VAI that would be sent to the receiver.\n     * @dev This calculation might be off with a bit, if the price of the oracle for this asset is not updated in the block this function is invoked.\n     * @param stableTknAmount The amount of stable tokens provided for the swap.\n     * @return The amount of VAI that would be sent to the receiver.\n     */\n    function previewSwapStableForVAI(uint256 stableTknAmount) external view returns (uint256) {c_dc24f6d4(0x6f3929bae44b828c); /* function */ \n\nc_dc24f6d4(0x62027c05d2913e51); /* line */ \n        c_dc24f6d4(0xb608beaf768bfeb7); /* statement */ \n_ensureNonzeroAmount(stableTknAmount);\nc_dc24f6d4(0xff60693bc0b53e7c); /* line */ \n        c_dc24f6d4(0x2ec8edd72602c580); /* statement */ \nuint256 stableTknAmountUSD = _previewTokenUSDAmount(stableTknAmount, FeeDirection.IN);\n\n        //calculate feeIn\nc_dc24f6d4(0x6c9f016cca0a3486); /* line */ \n        c_dc24f6d4(0x38cbc8e7c4353909); /* statement */ \nuint256 fee = _calculateFee(stableTknAmountUSD, FeeDirection.IN);\nc_dc24f6d4(0x527fe483640af576); /* line */ \n        c_dc24f6d4(0x3b12145ccb98c8dd); /* statement */ \nuint256 vaiToMint = stableTknAmountUSD - fee;\n\nc_dc24f6d4(0xcfd8c3862f43d393); /* line */ \n        c_dc24f6d4(0xdaa35a7d2be4fb9c); /* statement */ \nif (vaiMinted + stableTknAmountUSD > vaiMintCap) {c_dc24f6d4(0x88fad69e70750149); /* branch */ \n\nc_dc24f6d4(0x45cd720cd39ab12b); /* line */ \n            revert VAIMintCapReached();\n        }else { c_dc24f6d4(0x79434fe18fe39783); /* branch */ \n}\n\nc_dc24f6d4(0xad657b0e80a3950b); /* line */ \n        c_dc24f6d4(0xd18d3128019ba758); /* statement */ \nreturn vaiToMint;\n    }\n\n    /**\n     * @dev Calculates the USD value of the given amount of stable tokens depending on the swap direction.\n     * @param amount The amount of stable tokens.\n     * @param direction The direction of the swap.\n     * @return The USD value of the given amount of stable tokens scaled by 1e18 taking into account the direction of the swap\n     */\n    function _previewTokenUSDAmount(uint256 amount, FeeDirection direction) internal view returns (uint256) {c_dc24f6d4(0x94635469607567ab); /* function */ \n\nc_dc24f6d4(0xdf3dc524c3a4c9ce); /* line */ \n        c_dc24f6d4(0x80a82759a962c0a2); /* statement */ \nreturn (amount * _getPriceInUSD(direction)) / MANTISSA_ONE;\n    }\n\n    /**\n     * @notice Get the price of stable token in USD.\n     * @dev This function returns either min(1$,oraclePrice) or max(1$,oraclePrice) with a decimal scale (36 - asset_decimals). E.g. for 8 decimal token 1$ will be 1e28.\n     * @param direction The direction of the swap: FeeDirection.IN or FeeDirection.OUT.\n     * @return The price in USD, adjusted based on the selected direction.\n     */\n    function _getPriceInUSD(FeeDirection direction) internal view returns (uint256) {c_dc24f6d4(0x8bbd16fb2f730c38); /* function */ \n\n        // get price with a scale = (36 - asset_decimals)\nc_dc24f6d4(0x2aaff9eef21dd45a); /* line */ \n        c_dc24f6d4(0xe8ad561d03c4b684); /* statement */ \nuint256 price = oracle.getPrice(STABLE_TOKEN_ADDRESS);\n\nc_dc24f6d4(0xd401e6749d796a34); /* line */ \n        c_dc24f6d4(0xf4e095583caa7883); /* statement */ \nif (direction == FeeDirection.IN) {c_dc24f6d4(0x74a5f1bfdb1b0770); /* branch */ \n\n            // MIN(1, price)\nc_dc24f6d4(0x88e1481747f709cd); /* line */ \n            c_dc24f6d4(0x4c0347184c6cfc2b); /* statement */ \nreturn ((price < ONE_DOLLAR || c_falsedc24f6d4(0xb0b541688ab134e9)) && c_truedc24f6d4(0x2c284e92be2707de)) ? price : ONE_DOLLAR;\n        } else {c_dc24f6d4(0xd577a640aa78b61f); /* branch */ \n\n            // MAX(1, price)\nc_dc24f6d4(0x3575c3ef05d14ec3); /* line */ \n            c_dc24f6d4(0xbab38ef8de62c4fa); /* statement */ \nreturn ((price > ONE_DOLLAR || c_falsedc24f6d4(0x8b0357b80f95c975)) && c_truedc24f6d4(0x5c6d385af5e80a0d)) ? price : ONE_DOLLAR;\n        }\n    }\n\n    /**\n     * @notice Calculate the fee amount based on the input amount and fee percentage.\n     * @dev Reverts if the fee percentage calculation results in rounding down to 0.\n     * @param amount The input amount to calculate the fee from.\n     * @param direction The direction of the fee: FeeDirection.IN or FeeDirection.OUT.\n     * @return The fee amount.\n     */\n    function _calculateFee(uint256 amount, FeeDirection direction) internal view returns (uint256) {c_dc24f6d4(0x6d1e9f91185e686e); /* function */ \n\nc_dc24f6d4(0x85c0580793465a3b); /* line */ \n        c_dc24f6d4(0xcb68a321cd64fe98); /* statement */ \nuint256 feePercent;\nc_dc24f6d4(0x2e746339b738d10f); /* line */ \n        c_dc24f6d4(0x75f3c88ee6738bde); /* statement */ \nif (direction == FeeDirection.IN) {c_dc24f6d4(0x49af1b0a70321049); /* branch */ \n\nc_dc24f6d4(0xa11924ca5b56ae70); /* line */ \n            feePercent = feeIn;\n        } else {c_dc24f6d4(0x01b70c1b824d9696); /* branch */ \n\nc_dc24f6d4(0x467befc3d5da0bd1); /* line */ \n            feePercent = feeOut;\n        }\nc_dc24f6d4(0xfcb32f0d7b9e6bc5); /* line */ \n        c_dc24f6d4(0xca2e2688788aafc4); /* statement */ \nif (feePercent == 0) {c_dc24f6d4(0xbfe7f1c3ff20ecae); /* branch */ \n\nc_dc24f6d4(0x308e8e73213976e5); /* line */ \n            c_dc24f6d4(0x4617df4992cc86d9); /* statement */ \nreturn 0;\n        } else {c_dc24f6d4(0xd0aac6bfd2f4fd77); /* branch */ \n\n            // checking if the percent calculation will result in rounding down to 0\nc_dc24f6d4(0x157a99826ce161cd); /* line */ \n            c_dc24f6d4(0xa27c56e1de29ef4e); /* statement */ \nif (amount * feePercent < BASIS_POINTS_DIVISOR) {c_dc24f6d4(0x454a35225af2059d); /* branch */ \n\nc_dc24f6d4(0x8136873037c9a272); /* line */ \n                revert AmountTooSmall();\n            }else { c_dc24f6d4(0x137edccdaef0735e); /* branch */ \n}\nc_dc24f6d4(0xe89aba22e80075fa); /* line */ \n            c_dc24f6d4(0x4b11f4e6234a1f52); /* statement */ \nreturn (amount * feePercent) / BASIS_POINTS_DIVISOR;\n        }\n    }\n\n    /**\n     * @notice Checks that the address is not the zero address.\n     * @param someone The address to check.\n     */\n    function _ensureNonzeroAddress(address someone) private pure {c_dc24f6d4(0x84173c100a7f4b37); /* function */ \n\nc_dc24f6d4(0xaedea3b87f7042b0); /* line */ \n        c_dc24f6d4(0xe1741c06ddf07cbe); /* statement */ \nif (someone == address(0)) {c_dc24f6d4(0x2beeb7297bafb934); /* branch */ \nrevert ZeroAddress();}else { c_dc24f6d4(0xde9845c1bd3c3b83); /* branch */ \n}\n    }\n\n    /**\n     * @notice Checks that the amount passed as stable tokens is bigger than zero\n     * @param amount The amount to validate\n     */\n    function _ensureNonzeroAmount(uint256 amount) private pure {c_dc24f6d4(0x5108def652979a96); /* function */ \n\nc_dc24f6d4(0x7fefd7087f5de273); /* line */ \n        c_dc24f6d4(0x7120312f51849db4); /* statement */ \nif (amount == 0) {c_dc24f6d4(0xb61cb6c39699d912); /* branch */ \nrevert ZeroAmount();}else { c_dc24f6d4(0xacadb4769e4f4386); /* branch */ \n}\n    }\n}\n"
    },
    "contracts/Swap/interfaces/CustomErrors.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.25;\nfunction c_c4809dc2(bytes8 c__c4809dc2) pure {}\nfunction c_truec4809dc2(bytes8 c__c4809dc2) pure returns (bool){ return true; }\nfunction c_falsec4809dc2(bytes8 c__c4809dc2) pure returns (bool){ return false; }\n\n\n// **************\n// *** ERRORS ***\n// **************\n\n///@notice Error indicating that suplying to a given market failed.\nerror SupplyError(address supplier, address vToken, uint256 errorCode);\n\n///@notice Error indicating that repaying to given market failed.\nerror RepayError(address repayer, address vToken, uint256 errorCode);\n\n///@notice Error indicating wBNB address passed is not the expected one.\nerror WrongAddress(address expectedAdddress, address passedAddress);\n\n///@notice Error thrown when deadline for swap has expired\nerror SwapDeadlineExpire(uint256 deadline, uint256 timestemp);\n\n///@notice Error thrown where the input amount parameter for a token is 0\nerror InsufficientInputAmount();\n\n///@notice Error thrown when the amount out passed is 0\nerror InsufficientOutputAmount();\n\n///@notice Error thrown when the amount received from a trade is below the minimum\nerror OutputAmountBelowMinimum(uint256 amountOut, uint256 amountOutMin);\n\n///@notice Error thrown when the amount In is above the amount in maximum\nerror InputAmountAboveMaximum(uint256 amountIn, uint256 amountIntMax);\n\n///@notice Error thrown when amount is above the msg.value(amountMax)\nerror ExcessiveInputAmount(uint256 amount, uint256 amountMax);\n\n///@notice Error thrown when the given reserves are equal to 0\nerror InsufficientLiquidity();\n\n///@notice Error thrown if a zero address is passed\nerror ZeroAddress();\n\n///@notice Error thrown if two token addresses are identical\nerror IdenticalAddresses();\n\n///@notice Error thrown when the trade path[] parameter consists of only 1 token (i.e. path.length<2)\nerror InvalidPath();\n\n///@notice Error thrown when invalid vToken address is passed to swap router\nerror VTokenNotListed(address vToken);\n\n///@notice Error thrown when invalid underlying is passed as per given vToken\nerror VTokenUnderlyingInvalid(address underlying);\n\n///@notice Error thrown when swapamount is less than the amountOutmin\nerror SwapAmountLessThanAmountOutMin(uint256 swapAmount, uint256 amountOutMin);\n\n///@notice Error thrown when swapRouter's balance is less than sweep amount\nerror InsufficientBalance(uint256 sweepAmount, uint256 balance);\n\n///@notice Error thrown when safeApprove failed\nerror SafeApproveFailed();\n\n///@notice Error thrown when safeTransfer failed\nerror SafeTransferFailed();\n\n///@notice Error thrown when transferFrom failed\nerror SafeTransferFromFailed();\n\n///@notice Error thrown when safeTransferBNB failed\nerror SafeTransferBNBFailed();\n\n///@notice Error thrown when reentrant check fails\nerror ReentrantCheck();\n"
    },
    "contracts/Swap/interfaces/InterfaceComptroller.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.25;\nfunction c_c2cebe6c(bytes8 c__c2cebe6c) pure {}\nfunction c_truec2cebe6c(bytes8 c__c2cebe6c) pure returns (bool){ return true; }\nfunction c_falsec2cebe6c(bytes8 c__c2cebe6c) pure returns (bool){ return false; }\n\n\ninterface InterfaceComptroller {\n    function markets(address) external view returns (bool);\n}\n"
    },
    "contracts/Swap/interfaces/IPancakePair.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.25;\nfunction c_f6a2f9d3(bytes8 c__f6a2f9d3) pure {}\nfunction c_truef6a2f9d3(bytes8 c__f6a2f9d3) pure returns (bool){ return true; }\nfunction c_falsef6a2f9d3(bytes8 c__f6a2f9d3) pure returns (bool){ return false; }\n\n\ninterface IPancakePair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint);\n\n    function balanceOf(address owner) external view returns (uint);\n\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n\n    function transfer(address to, uint value) external returns (bool);\n\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n\n    function price0CumulativeLast() external view returns (uint);\n\n    function price1CumulativeLast() external view returns (uint);\n\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n\n    function burn(address to) external returns (uint amount0, uint amount1);\n\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "contracts/Swap/interfaces/IPancakeSwapV2Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.25;\nfunction c_3ecb401c(bytes8 c__3ecb401c) pure {}\nfunction c_true3ecb401c(bytes8 c__3ecb401c) pure returns (bool){ return true; }\nfunction c_false3ecb401c(bytes8 c__3ecb401c) pure returns (bool){ return false; }\n\n\ninterface IPancakeSwapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n\n    function allPairs(uint) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n\n    function setFeeToSetter(address) external;\n}\n"
    },
    "contracts/Swap/interfaces/IPancakeSwapV2Router.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.25;\nfunction c_7d21c83b(bytes8 c__7d21c83b) pure {}\nfunction c_true7d21c83b(bytes8 c__7d21c83b) pure returns (bool){ return true; }\nfunction c_false7d21c83b(bytes8 c__7d21c83b) pure returns (bool){ return false; }\n\n\ninterface IPancakeSwapV2Router {\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForTokensAtSupportingFee(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 swapAmount);\n\n    function swapExactBNBForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapExactBNBForTokensAtSupportingFee(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256 swapAmount);\n\n    function swapExactTokensForBNB(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForBNBAtSupportingFee(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 swapAmount);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapBNBForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactBNB(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForTokensAndSupply(\n        address vTokenAddress,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        uint256 deadline\n    ) external;\n\n    function swapExactTokensForTokensAndSupplyAtSupportingFee(\n        address vTokenAddress,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        uint256 deadline\n    ) external;\n\n    function swapExactBNBForTokensAndSupply(\n        address vTokenAddress,\n        uint256 amountOutMin,\n        address[] calldata path,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactBNBForTokensAndSupplyAtSupportingFee(\n        address vTokenAddress,\n        uint256 amountOutMin,\n        address[] calldata path,\n        uint256 deadline\n    ) external payable;\n\n    function swapTokensForExactTokensAndSupply(\n        address vTokenAddress,\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        uint256 deadline\n    ) external;\n\n    function swapBNBForExactTokensAndSupply(\n        address vTokenAddress,\n        uint256 amountOut,\n        address[] calldata path,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForBNBAndSupply(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        uint256 deadline\n    ) external;\n\n    function swapExactTokensForBNBAndSupplyAtSupportingFee(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        uint256 deadline\n    ) external;\n\n    function swapTokensForExactBNBAndSupply(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        uint256 deadline\n    ) external;\n\n    function swapBNBForFullTokenDebtAndRepay(\n        address vTokenAddress,\n        address[] calldata path,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForTokensAndRepay(\n        address vTokenAddress,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        uint256 deadline\n    ) external;\n\n    function swapExactTokensForTokensAndRepayAtSupportingFee(\n        address vTokenAddress,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        uint256 deadline\n    ) external;\n\n    function swapExactBNBForTokensAndRepay(\n        address vTokenAddress,\n        uint256 amountOutMin,\n        address[] calldata path,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactBNBForTokensAndRepayAtSupportingFee(\n        address vTokenAddress,\n        uint256 amountOutMin,\n        address[] calldata path,\n        uint256 deadline\n    ) external payable;\n\n    function swapTokensForExactTokensAndRepay(\n        address vTokenAddress,\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        uint256 deadline\n    ) external;\n\n    function swapTokensForFullTokenDebtAndRepay(\n        address vTokenAddress,\n        uint256 amountInMax,\n        address[] calldata path,\n        uint256 deadline\n    ) external;\n\n    function swapBNBForExactTokensAndRepay(\n        address vTokenAddress,\n        uint256 amountOut,\n        address[] calldata path,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForBNBAndRepay(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        uint256 deadline\n    ) external;\n\n    function swapExactTokensForBNBAndRepayAtSupportingFee(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        uint256 deadline\n    ) external;\n\n    function swapTokensForExactBNBAndRepay(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        uint256 deadline\n    ) external;\n\n    function swapTokensForFullBNBDebtAndRepay(uint256 amountInMax, address[] calldata path, uint256 deadline) external;\n}\n"
    },
    "contracts/Swap/interfaces/IVBNB.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.25;\nfunction c_2b88cfe2(bytes8 c__2b88cfe2) pure {}\nfunction c_true2b88cfe2(bytes8 c__2b88cfe2) pure returns (bool){ return true; }\nfunction c_false2b88cfe2(bytes8 c__2b88cfe2) pure returns (bool){ return false; }\n\n\ninterface IVBNB {\n    function repayBorrowBehalf(address borrower) external payable;\n\n    function mint() external payable;\n\n    function balanceOf(address owner) external view returns (uint256);\n}\n"
    },
    "contracts/Swap/interfaces/IVtoken.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.25;\nfunction c_3ef95c5b(bytes8 c__3ef95c5b) pure {}\nfunction c_true3ef95c5b(bytes8 c__3ef95c5b) pure returns (bool){ return true; }\nfunction c_false3ef95c5b(bytes8 c__3ef95c5b) pure returns (bool){ return false; }\n\n\ninterface IVToken {\n    function mintBehalf(address receiver, uint mintAmount) external returns (uint);\n\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\n\n    function borrowBalanceCurrent(address account) external returns (uint);\n\n    function underlying() external returns (address);\n}\n"
    },
    "contracts/Swap/interfaces/IWBNB.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.25;\nfunction c_2b6f232a(bytes8 c__2b6f232a) pure {}\nfunction c_true2b6f232a(bytes8 c__2b6f232a) pure returns (bool){ return true; }\nfunction c_false2b6f232a(bytes8 c__2b6f232a) pure returns (bool){ return false; }\n\n\ninterface IWBNB {\n    function deposit() external payable;\n\n    function transfer(address to, uint value) external returns (bool);\n\n    function withdraw(uint) external;\n\n    function balanceOf(address owner) external view returns (uint256 balance);\n}\n"
    },
    "contracts/Swap/IRouterHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.25;\nfunction c_8ee47c28(bytes8 c__8ee47c28) pure {}\nfunction c_true8ee47c28(bytes8 c__8ee47c28) pure returns (bool){ return true; }\nfunction c_false8ee47c28(bytes8 c__8ee47c28) pure returns (bool){ return false; }\n\n\ninterface IRouterHelper {\n    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\n}\n"
    },
    "contracts/Swap/lib/PancakeLibrary.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.25;\nfunction c_45a9fcb7(bytes8 c__45a9fcb7) pure {}\nfunction c_true45a9fcb7(bytes8 c__45a9fcb7) pure returns (bool){ return true; }\nfunction c_false45a9fcb7(bytes8 c__45a9fcb7) pure returns (bool){ return false; }\n\n\nimport \"../interfaces/IPancakePair.sol\";\nimport \"../interfaces/CustomErrors.sol\";\n\nlibrary PancakeLibrary {\nfunction c_048ab361(bytes8 c__048ab361) internal pure {}\nfunction c_true048ab361(bytes8 c__048ab361) internal pure returns (bool){ return true; }\nfunction c_false048ab361(bytes8 c__048ab361) internal pure returns (bool){ return false; }\n\n    /**\n     * @notice Used to handle return values from pairs sorted in this order\n     * @param tokenA The address of token A\n     * @param tokenB The address of token B\n     * @return token0 token1 Sorted token addresses\n     **/\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {c_048ab361(0x3c1ddb55a49100a4); /* function */ \n\nc_048ab361(0x444d7658ca1a430e); /* line */ \n        c_048ab361(0x0fac555f1a4ba107); /* statement */ \nif (tokenA == tokenB) {c_048ab361(0xa858fb8cdefd4c22); /* branch */ \n\nc_048ab361(0x485dd3421448baba); /* line */ \n            revert IdenticalAddresses();\n        }else { c_048ab361(0x3165c03322448dea); /* branch */ \n}\nc_048ab361(0x8bbcb0f9c8cc9781); /* line */ \n        (token0, token1) = ((tokenA < tokenB || c_false048ab361(0xb809a49265586b54)) && c_true048ab361(0xd5c65823e6d3c5e6)) ? (tokenA, tokenB) : (tokenB, tokenA);\nc_048ab361(0xb080415e52fdf066); /* line */ \n        c_048ab361(0x7f7b0ffe9357b04a); /* statement */ \nif (token0 == address(0)) {c_048ab361(0x91108a99f3225e38); /* branch */ \n\nc_048ab361(0x4c69ac8e0ad6a9a7); /* line */ \n            revert ZeroAddress();\n        }else { c_048ab361(0x1d84cdbee94af604); /* branch */ \n}\n    }\n\n    /**\n     * @notice Calculates the CREATE2 address for a pair without making any external calls\n     * @param factory Address of the pancake swap factory\n     * @param tokenA The address of token A\n     * @param tokenB The address of token B\n     * @return pair Address for a pair\n     **/\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {c_048ab361(0xc4b2edf40c04206d); /* function */ \n\nc_048ab361(0x571abc7513e7843f); /* line */ \n        c_048ab361(0x3dc37ae1287ac6e5); /* statement */ \n(address token0, address token1) = sortTokens(tokenA, tokenB);\nc_048ab361(0x188b27530db4e66a); /* line */ \n        pair = address(\n            uint160(\n                uint256(\n                    keccak256(\n                        abi.encodePacked(\n                            hex\"ff\",\n                            factory,\n                            keccak256(abi.encodePacked(token0, token1)),\n                            hex\"00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5\" // init code hash\n                        )\n                    )\n                )\n            )\n        );\n    }\n\n    /**\n     * @notice Fetches and sorts the reserves for a pair\n     * @param factory Address of the pancake swap factory\n     * @param tokenA The address of token A\n     * @param tokenB The address of token B\n     * @return reserveA reserveB Reserves for the token A and token B\n     **/\n    function getReserves(\n        address factory,\n        address tokenA,\n        address tokenB\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {c_048ab361(0x7921468c1c9e78bc); /* function */ \n\nc_048ab361(0xd7fcf33167094810); /* line */ \n        c_048ab361(0x5d7bb4e79b0326f4); /* statement */ \n(address token0, ) = sortTokens(tokenA, tokenB);\nc_048ab361(0x4a7c12e4d9a501b9); /* line */ \n        c_048ab361(0x95b874615151e49f); /* statement */ \naddress pairAddress = pairFor(factory, tokenA, tokenB);\nc_048ab361(0x2386e28a431f0c5c); /* line */ \n        c_048ab361(0xa5b24d5c7fa7c3bb); /* statement */ \n(uint256 reserve0, uint256 reserve1, ) = IPancakePair(pairAddress).getReserves();\nc_048ab361(0x14e1edea79ecc3a2); /* line */ \n        (reserveA, reserveB) = ((tokenA == token0 || c_false048ab361(0xe7506b81a41f0901)) && c_true048ab361(0xb59804feccb53fc5)) ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n\n    /**\n     * @notice Given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n     * @param amountA The amount of token A\n     * @param reserveA The amount of reserves for token A before swap\n     * @param reserveB The amount of reserves for token B before swap\n     * @return amountB An equivalent amount of the token B\n     **/\n    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) internal pure returns (uint256 amountB) {c_048ab361(0x0cf4a47467d0a0f9); /* function */ \n\nc_048ab361(0x8302789096df5976); /* line */ \n        c_048ab361(0x2309bb63173bab21); /* statement */ \nif (amountA == 0) {c_048ab361(0xd785793dfa593ad1); /* branch */ \n\nc_048ab361(0xb6a35fe3a7a7c2dc); /* line */ \n            revert InsufficientInputAmount();\n        } else {c_048ab361(0xc84093bf0f02e5c2); /* statement */ \nc_048ab361(0x5d48dfe9f8076997); /* branch */ \nif ((reserveA == 0 && c_true048ab361(0x91f56c4d3fefdeef)) || (reserveB == 0 && c_true048ab361(0xce0476dea8ebf940))) {c_048ab361(0x856dc0bd93eeeaa6); /* branch */ \n\nc_048ab361(0x478d0e96d5a273a3); /* line */ \n            revert InsufficientLiquidity();\n        }else { c_048ab361(0xcafd1604ccc7ed5a); /* branch */ \n}}\nc_048ab361(0xc20a4883edad3325); /* line */ \n        amountB = (amountA * reserveB) / reserveA;\n    }\n\n    /**\n     * @notice Given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n     * @param amountIn The amount of token A need to swap\n     * @param reserveIn The amount of reserves for token A before swap\n     * @param reserveOut The amount of reserves for token B after swap\n     * @return amountOut The maximum output amount of the token B\n     **/\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256 amountOut) {c_048ab361(0xbb1d1ae1606923cc); /* function */ \n\nc_048ab361(0x14a3489cb4581e55); /* line */ \n        c_048ab361(0x8963ec6833a5854d); /* statement */ \nif (amountIn == 0) {c_048ab361(0x44b6929ab28b14a3); /* branch */ \n\nc_048ab361(0xedfc3f7ff84255db); /* line */ \n            revert InsufficientInputAmount();\n        } else {c_048ab361(0x07cf7b2fed4d47c7); /* statement */ \nc_048ab361(0xcbe2ebc4a232fd6b); /* branch */ \nif ((reserveIn == 0 && c_true048ab361(0xebaf3ab3cbff072a)) || (reserveOut == 0 && c_true048ab361(0x3c2dab7ac47fd858))) {c_048ab361(0x441d9ee4e45c0d4f); /* branch */ \n\nc_048ab361(0xfc73438bcd64b3fa); /* line */ \n            revert InsufficientLiquidity();\n        }else { c_048ab361(0xfabc29a9526edbe6); /* branch */ \n}}\nc_048ab361(0x1a637562d6d5d765); /* line */ \n        c_048ab361(0xc349ce576c93309e); /* statement */ \nuint256 amountInWithFee = amountIn * 9975;\nc_048ab361(0x1bf7626115e1942f); /* line */ \n        c_048ab361(0x3923a427afa46c95); /* statement */ \nuint256 numerator = amountInWithFee * reserveOut;\nc_048ab361(0x80192e75b7b5bb0e); /* line */ \n        c_048ab361(0x8ae4b283cbfcdf14); /* statement */ \nuint256 denominator = (reserveIn * 10000) + amountInWithFee;\nc_048ab361(0xd54c3e806a3b3027); /* line */ \n        amountOut = numerator / denominator;\n    }\n\n    /**\n     * @notice Given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n     * @param amountOut The amount of token B after swap\n     * @param reserveIn The amount of reserves for token A before swap\n     * @param reserveOut The amount of reserves for token B after swap\n     * @return amountIn Required input amount of the token A\n     **/\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256 amountIn) {c_048ab361(0x6b8f5be241356a96); /* function */ \n\nc_048ab361(0xd39217e3e151fbaa); /* line */ \n        c_048ab361(0xc4b18259c77c3247); /* statement */ \nif (amountOut == 0) {c_048ab361(0xcba0d936fb4e3b00); /* branch */ \n\nc_048ab361(0x83c030ac4e673cc9); /* line */ \n            revert InsufficientOutputAmount();\n        } else {c_048ab361(0x2ef13b5ba1200120); /* statement */ \nc_048ab361(0xd8e812cd81cf15db); /* branch */ \nif ((reserveIn == 0 && c_true048ab361(0x4316668cf50181ea)) || (reserveOut == 0 && c_true048ab361(0x0d0ef7f0e1207619))) {c_048ab361(0x2487e39aac476d28); /* branch */ \n\nc_048ab361(0xe0598cd848d9dc35); /* line */ \n            revert InsufficientLiquidity();\n        }else { c_048ab361(0x9daef6fd0188773e); /* branch */ \n}}\nc_048ab361(0x9fa7c9e439ec3e90); /* line */ \n        c_048ab361(0x5bf8ff8013c2bc88); /* statement */ \nuint256 numerator = reserveIn * amountOut * 10000;\nc_048ab361(0xa70d65ee309521cc); /* line */ \n        c_048ab361(0xa594716c9e89b780); /* statement */ \nuint256 denominator = (reserveOut - amountOut) * 9975;\nc_048ab361(0x29ab2a6a2dcadaab); /* line */ \n        amountIn = (numerator / denominator) + 1;\n    }\n\n    /**\n     * @notice Performs chained getAmountOut calculations on any number of pairs\n     * @param factory Address of the pancake swap factory\n     * @param amountIn The amount of tokens to swap.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @return amounts Array of amounts after performing swap for respective pairs in path\n     **/\n    function getAmountsOut(\n        address factory,\n        uint256 amountIn,\n        address[] memory path\n    ) internal view returns (uint256[] memory amounts) {c_048ab361(0xf6970311aee4098c); /* function */ \n\nc_048ab361(0xc7e22dcfdb7f3e01); /* line */ \n        c_048ab361(0xef6785eff2ab0be0); /* statement */ \nif (path.length <= 1) {c_048ab361(0x22ed1a79c778c948); /* branch */ \n\nc_048ab361(0x9424b886b3dea16f); /* line */ \n            revert InvalidPath();\n        }else { c_048ab361(0x6340e918e0c1dcc1); /* branch */ \n}\nc_048ab361(0xca260c17bea4ec6c); /* line */ \n        amounts = new uint256[](path.length);\nc_048ab361(0xf44b7ceceab5a1b9); /* line */ \n        amounts[0] = amountIn;\nc_048ab361(0x31bae7d50fae7857); /* line */ \n        c_048ab361(0x52b755f80a00a213); /* statement */ \nfor (uint256 i; i < path.length - 1; ) {\nc_048ab361(0x7850cc154f7168b9); /* line */ \n            c_048ab361(0x679de3369cb6143c); /* statement */ \n(uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i], path[i + 1]);\nc_048ab361(0xd97cdad42b70a3b3); /* line */ \n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\nc_048ab361(0xef66fe670bbb61b0); /* line */ \n            unchecked {\nc_048ab361(0x3e55a7da5ceb289f); /* line */ \n                i += 1;\n            }\n        }\n    }\n\n    /**\n     * @notice Performs chained getAmountIn calculations on any number of pairs\n     * @param factory Address of the pancake swap factory\n     * @param amountOut The amount of the tokens needs to be as output token.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @return amounts Array of amounts after performing swap for respective pairs in path\n     **/\n    function getAmountsIn(\n        address factory,\n        uint256 amountOut,\n        address[] memory path\n    ) internal view returns (uint256[] memory amounts) {c_048ab361(0x2fa412e4ba91062b); /* function */ \n\nc_048ab361(0xe20b20180a14f66a); /* line */ \n        c_048ab361(0xd703350622f0640a); /* statement */ \nif (path.length <= 1) {c_048ab361(0x5376cd7092e237ad); /* branch */ \n\nc_048ab361(0xb2e160f40b57359c); /* line */ \n            revert InvalidPath();\n        }else { c_048ab361(0xf04a08336825aec3); /* branch */ \n}\nc_048ab361(0x0d87f6fcbf3aefc2); /* line */ \n        amounts = new uint256[](path.length);\nc_048ab361(0xebe8989b4dc47792); /* line */ \n        amounts[amounts.length - 1] = amountOut;\nc_048ab361(0x98fc1cf5586d7c00); /* line */ \n        c_048ab361(0xb0356f8a7e12591e); /* statement */ \nfor (uint256 i = path.length - 1; i > 0; ) {\nc_048ab361(0x19688b956220e2ae); /* line */ \n            c_048ab361(0x6d86404c05f8ec97); /* statement */ \n(uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i - 1], path[i]);\nc_048ab361(0x5fcb47a0f8118b27); /* line */ \n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\nc_048ab361(0x342d3683e9545196); /* line */ \n            unchecked {\nc_048ab361(0x4768697599ace3f6); /* line */ \n                i -= 1;\n            }\n        }\n    }\n}\n"
    },
    "contracts/Swap/lib/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.25;\nfunction c_84d0f844(bytes8 c__84d0f844) pure {}\nfunction c_true84d0f844(bytes8 c__84d0f844) pure returns (bool){ return true; }\nfunction c_false84d0f844(bytes8 c__84d0f844) pure returns (bool){ return false; }\n\n\nimport \"../interfaces/CustomErrors.sol\";\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\nfunction c_984ed31d(bytes8 c__984ed31d) internal pure {}\nfunction c_true984ed31d(bytes8 c__984ed31d) internal pure returns (bool){ return true; }\nfunction c_false984ed31d(bytes8 c__984ed31d) internal pure returns (bool){ return false; }\n\n    /**\n     * @dev `value` as the allowance of `spender` over the caller's tokens.\n     * @param token Address of the token\n     * @param to Address of the spender\n     * @param value Amount as allowance\n     */\n    function safeApprove(address token, address to, uint256 value) internal {c_984ed31d(0x49bf2670a44c231e); /* function */ \n\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\nc_984ed31d(0x0bc5a6dec4f1e736); /* line */ \n        c_984ed31d(0x3fc1acd87d1ac3cd); /* statement */ \n(bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\nc_984ed31d(0x23728a73f46d77ee); /* line */ \n        c_984ed31d(0xd4acf2bd0ea5922b); /* statement */ \nif (!(success && (data.length == 0 || abi.decode(data, (bool))))) {c_984ed31d(0x46c80312cbcea0ab); /* branch */ \n\nc_984ed31d(0xd33dc60f2f36b375); /* line */ \n            revert SafeApproveFailed();\n        }else { c_984ed31d(0xc1d02c345789c713); /* branch */ \n}\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     * @param token Address of the token\n     * @param to Address of the receiver\n     * @param value Amount need to transfer\n     */\n    function safeTransfer(address token, address to, uint256 value) internal {c_984ed31d(0xfa8792f1801b4ea0); /* function */ \n\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\nc_984ed31d(0xeda58f30b1a0ceb2); /* line */ \n        c_984ed31d(0xae72d7ee86ef35d4); /* statement */ \n(bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\nc_984ed31d(0xc9434b19d84e14d5); /* line */ \n        c_984ed31d(0x698c32a1124f3531); /* statement */ \nif (!(success && (data.length == 0 || abi.decode(data, (bool))))) {c_984ed31d(0xdb55cdb71ea6b75b); /* branch */ \n\nc_984ed31d(0x55b5d3a4c8e59fcd); /* line */ \n            revert SafeTransferFailed();\n        }else { c_984ed31d(0xe1c8ce3a87cfd78d); /* branch */ \n}\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     * @param token Address of the token\n     * @param from Address of the asset'sowner\n     * @param to Address of the receiver\n     * @param value Amount need to transfer\n     */\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal {c_984ed31d(0xbd20840097b684dd); /* function */ \n\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\nc_984ed31d(0xf7199fab13a93d9c); /* line */ \n        c_984ed31d(0x76617a3a9f985d88); /* statement */ \n(bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\nc_984ed31d(0x6418d471d4adee9e); /* line */ \n        c_984ed31d(0x4270bfc25b0bf137); /* statement */ \nif (!(success && (data.length == 0 || abi.decode(data, (bool))))) {c_984ed31d(0x3a438eac097cbed5); /* branch */ \n\nc_984ed31d(0x38ee248a42f0b948); /* line */ \n            revert SafeTransferFromFailed();\n        }else { c_984ed31d(0x23075dca1b2ee9b7); /* branch */ \n}\n    }\n\n    /**\n     * @dev Transfer `value` amount of `BNB` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     * @param to Address of the receiver\n     * @param value Amount need to transfer\n     */\n    function safeTransferBNB(address to, uint256 value) internal {c_984ed31d(0xd605bef3480b955e); /* function */ \n\nc_984ed31d(0x1593c1e096a370ab); /* line */ \n        c_984ed31d(0x4ce2975fd7e5e37e); /* statement */ \n(bool success, ) = to.call{ value: value }(new bytes(0));\nc_984ed31d(0xd36f637d3754fba2); /* line */ \n        c_984ed31d(0xd9c9395cce90f699); /* statement */ \nif (!success) {c_984ed31d(0x10267760a2d130ff); /* branch */ \n\nc_984ed31d(0xc08f787c88de89ba); /* line */ \n            revert SafeTransferBNBFailed();\n        }else { c_984ed31d(0x757c36ba2c80b223); /* branch */ \n}\n    }\n}\n"
    },
    "contracts/Swap/RouterHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.25;\nfunction c_2b6b6f86(bytes8 c__2b6b6f86) pure {}\nfunction c_true2b6b6f86(bytes8 c__2b6b6f86) pure returns (bool){ return true; }\nfunction c_false2b6b6f86(bytes8 c__2b6b6f86) pure returns (bool){ return false; }\n\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./lib/PancakeLibrary.sol\";\nimport \"./interfaces/IWBNB.sol\";\nimport \"./lib/TransferHelper.sol\";\n\nimport \"./interfaces/CustomErrors.sol\";\nimport \"./IRouterHelper.sol\";\n\nabstract contract RouterHelper is IRouterHelper {\nfunction c_13955f9b(bytes8 c__13955f9b) internal pure {}\nfunction c_true13955f9b(bytes8 c__13955f9b) internal pure returns (bool){ return true; }\nfunction c_false13955f9b(bytes8 c__13955f9b) internal pure returns (bool){ return false; }\n\n    /// @notice Select the type of Token for which either a supporting fee would be deducted or not at the time of transfer.\n    enum TypesOfTokens {\n        NON_SUPPORTING_FEE,\n        SUPPORTING_FEE\n    }\n\n    /// @notice Address of WBNB contract.\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address public immutable WBNB;\n\n    /// @notice Address of pancake swap factory contract.\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address public immutable factory;\n\n    // **************\n    // *** EVENTS ***\n    // **************\n    /// @notice This event is emitted whenever a successful swap (tokenA -> tokenB) occurs\n    event SwapTokensForTokens(address indexed swapper, address[] indexed path, uint256[] indexed amounts);\n\n    /// @notice This event is emitted whenever a successful swap (tokenA -> tokenB) occurs\n    event SwapTokensForTokensAtSupportingFee(address indexed swapper, address[] indexed path);\n\n    /// @notice This event is emitted whenever a successful swap (BNB -> token) occurs\n    event SwapBnbForTokens(address indexed swapper, address[] indexed path, uint256[] indexed amounts);\n\n    /// @notice This event is emitted whenever a successful swap (BNB -> token) occurs\n    event SwapBnbForTokensAtSupportingFee(address indexed swapper, address[] indexed path);\n\n    /// @notice This event is emitted whenever a successful swap (token -> BNB) occurs\n    event SwapTokensForBnb(address indexed swapper, address[] indexed path, uint256[] indexed amounts);\n\n    /// @notice This event is emitted whenever a successful swap (token -> BNB) occurs\n    event SwapTokensForBnbAtSupportingFee(address indexed swapper, address[] indexed path);\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(address WBNB_, address factory_) {c_13955f9b(0x020e0d1a6b09202a); /* function */ \n\nc_13955f9b(0x14accb1c164a3a44); /* line */ \n        c_13955f9b(0x6de3979127bf0e37); /* statement */ \nif ((WBNB_ == address(0) && c_true13955f9b(0xca446212c265e852)) || (factory_ == address(0) && c_true13955f9b(0xd65b982407d0fc40))) {c_13955f9b(0x3577b1c44bf75ce2); /* branch */ \n\nc_13955f9b(0xc933d4b90d777b2c); /* line */ \n            revert ZeroAddress();\n        }else { c_13955f9b(0x2540ad4c81233ff2); /* branch */ \n}\nc_13955f9b(0x23c4f69a871ecbd4); /* line */ \n        WBNB = WBNB_;\nc_13955f9b(0x295bded91f6ef2f6); /* line */ \n        factory = factory_;\n    }\n\n    /**\n     * @notice Perform swap on the path(pairs)\n     * @param amounts Araay of amounts of tokens after performing the swap\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @param _to Recipient of the output tokens.\n     */\n    function _swap(uint256[] memory amounts, address[] memory path, address _to) internal virtual {c_13955f9b(0xcf859ca3e38d0941); /* function */ \n\nc_13955f9b(0x256d7a2841a32e64); /* line */ \n        c_13955f9b(0x3906190be23c1fc7); /* statement */ \nfor (uint256 i; i < path.length - 1; ) {\nc_13955f9b(0xf6f2256c978a18a1); /* line */ \n            c_13955f9b(0x93eef3f459ba0f5e); /* statement */ \n(address input, address output) = (path[i], path[i + 1]);\nc_13955f9b(0x4c9638e5362d0b4b); /* line */ \n            c_13955f9b(0x9d6a759adad8f407); /* statement */ \n(address token0, ) = PancakeLibrary.sortTokens(input, output);\nc_13955f9b(0x17833b4b64a26d86); /* line */ \n            c_13955f9b(0x9ae0a5637e76d701); /* statement */ \nuint256 amountOut = amounts[i + 1];\nc_13955f9b(0x0709e45573d53457); /* line */ \n            c_13955f9b(0x514962188279589e); /* statement */ \n(uint256 amount0Out, uint256 amount1Out) = ((input == token0 || c_false13955f9b(0xf3424b71f7b41cb0)) && c_true13955f9b(0x3dc5aebcd5b96ac7))\n                ? (uint256(0), amountOut)\n                : (amountOut, uint256(0));\nc_13955f9b(0xffcfbb221577a8c2); /* line */ \n            c_13955f9b(0x42c407a55b2e016f); /* statement */ \naddress to = ((i < path.length - 2 || c_false13955f9b(0x75adb1f043cb27ef)) && c_true13955f9b(0x6e4cbf42ad20c8f0)) ? PancakeLibrary.pairFor(factory, output, path[i + 2]) : _to;\nc_13955f9b(0xf3a0c669ac36c450); /* line */ \n            c_13955f9b(0x789180847b5df168); /* statement */ \nIPancakePair(PancakeLibrary.pairFor(factory, input, output)).swap(amount0Out, amount1Out, to, new bytes(0));\nc_13955f9b(0x58953b56abf46435); /* line */ \n            unchecked {\nc_13955f9b(0xcb82f9dc3798bcb5); /* line */ \n                i += 1;\n            }\n        }\n    }\n\n    // **** SWAP (supporting fee-on-transfer tokens) ****\n\n    /**\n     * @notice Perform swap on the path(pairs) for supporting fee\n     * @dev requires the initial amount to have already been sent to the first pair\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @param _to Recipient of the output tokens.\n     */\n    function _swapSupportingFeeOnTransferTokens(address[] memory path, address _to) internal virtual {c_13955f9b(0x77e53a6486a0bf99); /* function */ \n\nc_13955f9b(0x1d9e2d679993a8cc); /* line */ \n        c_13955f9b(0xc10ee367d0a452ac); /* statement */ \nfor (uint256 i; i < path.length - 1; ) {\nc_13955f9b(0x69e1ccd24b647ae5); /* line */ \n            c_13955f9b(0x119bf2580e080249); /* statement */ \n(address input, address output) = (path[i], path[i + 1]);\nc_13955f9b(0x76d455baa01f8384); /* line */ \n            c_13955f9b(0xdee65b81ae102296); /* statement */ \n(address token0, ) = PancakeLibrary.sortTokens(input, output);\nc_13955f9b(0x7610609862f6c952); /* line */ \n            c_13955f9b(0x27ae980492f27e61); /* statement */ \nIPancakePair pair = IPancakePair(PancakeLibrary.pairFor(factory, input, output));\nc_13955f9b(0x2e1cdddf63243034); /* line */ \n            c_13955f9b(0x984dd595e67dea5a); /* statement */ \nuint256 amountInput;\nc_13955f9b(0x489a9564e68b8ca0); /* line */ \n            c_13955f9b(0xdec9d0b0e53d61de); /* statement */ \nuint256 amountOutput;\nc_13955f9b(0x36f27b32203b4084); /* line */ \n            {\n                // scope to avoid stack too deep errors\nc_13955f9b(0xd3824a2d78add2d5); /* line */ \n                c_13955f9b(0x8143c7f8e689ed1a); /* statement */ \n(uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\nc_13955f9b(0x6f39988ce0f0591d); /* line */ \n                c_13955f9b(0x7cfc4817ea691c45); /* statement */ \n(uint256 reserveInput, uint256 reserveOutput) = ((input == token0 || c_false13955f9b(0xac4780369bef5de0)) && c_true13955f9b(0x4ac42e6e1781aa41))\n                    ? (reserve0, reserve1)\n                    : (reserve1, reserve0);\n\nc_13955f9b(0xa98923076b6d5caa); /* line */ \n                c_13955f9b(0x69342c766a1d620e); /* statement */ \nuint256 balance = IERC20(input).balanceOf(address(pair));\nc_13955f9b(0x13061fa562a7d234); /* line */ \n                amountInput = balance - reserveInput;\nc_13955f9b(0x170952506b87762f); /* line */ \n                amountOutput = PancakeLibrary.getAmountOut(amountInput, reserveInput, reserveOutput);\n            }\nc_13955f9b(0x746689646cab7424); /* line */ \n            c_13955f9b(0xa3f846df910b9a4e); /* statement */ \n(uint256 amount0Out, uint256 amount1Out) = ((input == token0 || c_false13955f9b(0x2c340889b409e75d)) && c_true13955f9b(0x399ab55d1d58147a))\n                ? (uint256(0), amountOutput)\n                : (amountOutput, uint256(0));\nc_13955f9b(0x90f93dd75a4bd0dd); /* line */ \n            c_13955f9b(0x67a363028016adab); /* statement */ \naddress to = ((i < path.length - 2 || c_false13955f9b(0x8faa0b5a29471f40)) && c_true13955f9b(0xb1684d0204fdbf15)) ? PancakeLibrary.pairFor(factory, output, path[i + 2]) : _to;\nc_13955f9b(0x7b59795ab702e0a0); /* line */ \n            c_13955f9b(0xe6c0a67424bda569); /* statement */ \npair.swap(amount0Out, amount1Out, to, new bytes(0));\nc_13955f9b(0x8dde5936aded62eb); /* line */ \n            unchecked {\nc_13955f9b(0x17f2fa182c331308); /* line */ \n                i += 1;\n            }\n        }\n    }\n\n    /**\n     * @notice Swap token A for token B\n     * @param amountIn The amount of tokens to swap.\n     * @param amountOutMin Minimum amount of tokens to receive.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @param to Recipient of the output tokens.\n     * @param swapFor TypesOfTokens, either supporing fee or non supporting fee\n     * @return amounts Array of amounts after performing swap for respective pairs in path\n     */\n    function _swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        TypesOfTokens swapFor\n    ) internal returns (uint256[] memory amounts) {c_13955f9b(0x9e0cfa554f426649); /* function */ \n\nc_13955f9b(0x6a68e29602f62d75); /* line */ \n        c_13955f9b(0x513fc09d3fc5c0c9); /* statement */ \naddress pairAddress = PancakeLibrary.pairFor(factory, path[0], path[1]);\nc_13955f9b(0x82e0eecb79f76c7c); /* line */ \n        c_13955f9b(0x9b42e1808d0738b2); /* statement */ \nif (swapFor == TypesOfTokens.NON_SUPPORTING_FEE) {c_13955f9b(0x5ec72b2b775de32c); /* branch */ \n\nc_13955f9b(0x8ef342517b7f8a59); /* line */ \n            amounts = PancakeLibrary.getAmountsOut(factory, amountIn, path);\nc_13955f9b(0xc628df076cb26478); /* line */ \n            c_13955f9b(0x31c68306e3865502); /* statement */ \nif (amounts[amounts.length - 1] < amountOutMin) {c_13955f9b(0x490c3088a8867bc4); /* branch */ \n\nc_13955f9b(0x41a5ef364bd6a76c); /* line */ \n                revert OutputAmountBelowMinimum(amounts[amounts.length - 1], amountOutMin);\n            }else { c_13955f9b(0x2a93257c628cec03); /* branch */ \n}\nc_13955f9b(0x81605f9be2df56fe); /* line */ \n            c_13955f9b(0x20954a44dfc90b8b); /* statement */ \nTransferHelper.safeTransferFrom(path[0], msg.sender, pairAddress, amounts[0]);\nc_13955f9b(0xf1e73f627227df8d); /* line */ \n            c_13955f9b(0x0c1a4b1af386dcac); /* statement */ \n_swap(amounts, path, to);\nc_13955f9b(0x8ba1f4e62646ddf5); /* line */ \n            c_13955f9b(0x9e7f66c810354bda); /* statement */ \nemit SwapTokensForTokens(msg.sender, path, amounts);\n        } else {c_13955f9b(0xebbbeaed0a0a2e4d); /* branch */ \n\nc_13955f9b(0xb720bdfa6b68e252); /* line */ \n            c_13955f9b(0x91924d97a22be3e6); /* statement */ \nTransferHelper.safeTransferFrom(path[0], msg.sender, pairAddress, amountIn);\nc_13955f9b(0xc7d4cc795b13f030); /* line */ \n            c_13955f9b(0x74b7c51ebdd9339e); /* statement */ \n_swapSupportingFeeOnTransferTokens(path, to);\nc_13955f9b(0x5d1ced39c2989fdf); /* line */ \n            c_13955f9b(0xd4ce048601e55b4a); /* statement */ \nemit SwapTokensForTokensAtSupportingFee(msg.sender, path);\n        }\n    }\n\n    /**\n     * @notice Swap exact BNB for token\n     * @param amountOutMin Minimum amount of tokens to receive.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @param to Recipient of the output tokens.\n     * @param swapFor TypesOfTokens, either supporing fee or non supporting fee\n     * @return amounts Array of amounts after performing swap for respective pairs in path\n     */\n    function _swapExactBNBForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        TypesOfTokens swapFor\n    ) internal returns (uint256[] memory amounts) {c_13955f9b(0x5b4135948b03b456); /* function */ \n\nc_13955f9b(0x02a5525bf608d292); /* line */ \n        c_13955f9b(0x1e420f5a0b5f37e0); /* statement */ \naddress wBNBAddress = WBNB;\nc_13955f9b(0xb8f43cc04956fbce); /* line */ \n        c_13955f9b(0x9af73106c3c21a70); /* statement */ \nif (path[0] != wBNBAddress) {c_13955f9b(0xdff78b3ac5f9ec78); /* branch */ \n\nc_13955f9b(0x2006c09d889f96bb); /* line */ \n            revert WrongAddress(wBNBAddress, path[0]);\n        }else { c_13955f9b(0x504bca3a8c7d6ccf); /* branch */ \n}\nc_13955f9b(0xe438216894ca6be3); /* line */ \n        c_13955f9b(0x231521a8bbcbad35); /* statement */ \nIWBNB(wBNBAddress).deposit{ value: msg.value }();\nc_13955f9b(0x67bb8cbc48ac63d8); /* line */ \n        c_13955f9b(0x0e1e3642648f8b4c); /* statement */ \nTransferHelper.safeTransfer(wBNBAddress, PancakeLibrary.pairFor(factory, path[0], path[1]), msg.value);\nc_13955f9b(0x59c16e062739cb78); /* line */ \n        c_13955f9b(0xe584c036ff77bc30); /* statement */ \nif (swapFor == TypesOfTokens.NON_SUPPORTING_FEE) {c_13955f9b(0xd8825e45b991c4d1); /* branch */ \n\nc_13955f9b(0x3a69f35873ae4c29); /* line */ \n            amounts = PancakeLibrary.getAmountsOut(factory, msg.value, path);\nc_13955f9b(0x5e8e932b895ad59c); /* line */ \n            c_13955f9b(0x2146b809d2e476b4); /* statement */ \nif (amounts[amounts.length - 1] < amountOutMin) {c_13955f9b(0xcbb583c9f7b89191); /* branch */ \n\nc_13955f9b(0x2b6cbde9044d4938); /* line */ \n                revert OutputAmountBelowMinimum(amounts[amounts.length - 1], amountOutMin);\n            }else { c_13955f9b(0x4bdaa9489c91e826); /* branch */ \n}\nc_13955f9b(0xbe684dfbacc9166b); /* line */ \n            c_13955f9b(0x2af2c5b71315f8ef); /* statement */ \n_swap(amounts, path, to);\nc_13955f9b(0xe51681942c2140c2); /* line */ \n            c_13955f9b(0x5e3808e6ed07ca5b); /* statement */ \nemit SwapBnbForTokens(msg.sender, path, amounts);\n        } else {c_13955f9b(0x5133b4f61f8e227c); /* branch */ \n\nc_13955f9b(0x1b1e021cebb0efbd); /* line */ \n            c_13955f9b(0x5a2ae775be97bb50); /* statement */ \n_swapSupportingFeeOnTransferTokens(path, to);\nc_13955f9b(0x00f2d7d85497eaea); /* line */ \n            c_13955f9b(0x3397e630522db610); /* statement */ \nemit SwapBnbForTokensAtSupportingFee(msg.sender, path);\n        }\n    }\n\n    /**\n     * @notice Swap token A for BNB\n     * @param amountIn The amount of tokens to swap.\n     * @param amountOutMin Minimum amount of BNB to receive.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @param to Recipient of the output tokens.\n     * @param swapFor TypesOfTokens, either supporing fee or non supporting fee\n     * @return amounts Array of amounts after performing swap for respective pairs in path\n     */\n    function _swapExactTokensForBNB(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        TypesOfTokens swapFor\n    ) internal returns (uint256[] memory amounts) {c_13955f9b(0x91e8dd33efbcacdb); /* function */ \n\nc_13955f9b(0x0651735f38d44173); /* line */ \n        c_13955f9b(0x4fd42087037e948f); /* statement */ \nif (path[path.length - 1] != WBNB) {c_13955f9b(0xa1fd6429d0f8a304); /* branch */ \n\nc_13955f9b(0xbef67198c7f43e50); /* line */ \n            revert WrongAddress(WBNB, path[path.length - 1]);\n        }else { c_13955f9b(0xe0a17957e8c3588b); /* branch */ \n}\nc_13955f9b(0xd074dc8d1891cb61); /* line */ \n        c_13955f9b(0x9a0df093acf54bd3); /* statement */ \nuint256 WBNBAmount;\nc_13955f9b(0xe71e14d7a0f581db); /* line */ \n        c_13955f9b(0x654e72690441d9b1); /* statement */ \nif (swapFor == TypesOfTokens.NON_SUPPORTING_FEE) {c_13955f9b(0xdc02e2f578d0e50a); /* branch */ \n\nc_13955f9b(0x13359a45da083577); /* line */ \n            amounts = PancakeLibrary.getAmountsOut(factory, amountIn, path);\nc_13955f9b(0x89078dc65e0b80e3); /* line */ \n            c_13955f9b(0x1be84d49b75c249c); /* statement */ \nif (amounts[amounts.length - 1] < amountOutMin) {c_13955f9b(0xa5e8b33ef40d28c7); /* branch */ \n\nc_13955f9b(0x7a301f9193621293); /* line */ \n                revert OutputAmountBelowMinimum(amounts[amounts.length - 1], amountOutMin);\n            }else { c_13955f9b(0x99f425622b8d80c1); /* branch */ \n}\nc_13955f9b(0x9abb484ebde50826); /* line */ \n            c_13955f9b(0x04e4ba62378a378e); /* statement */ \nTransferHelper.safeTransferFrom(\n                path[0],\n                msg.sender,\n                PancakeLibrary.pairFor(factory, path[0], path[1]),\n                amounts[0]\n            );\nc_13955f9b(0x5a1213651143243c); /* line */ \n            c_13955f9b(0xd618f96bb0d1f9cd); /* statement */ \n_swap(amounts, path, address(this));\nc_13955f9b(0x2694e9ccd3fca4c7); /* line */ \n            WBNBAmount = amounts[amounts.length - 1];\n        } else {c_13955f9b(0x00eeec2639d291ca); /* branch */ \n\nc_13955f9b(0x133178f5c22b2da3); /* line */ \n            c_13955f9b(0xd2301758a7661803); /* statement */ \nuint256 balanceBefore = IWBNB(WBNB).balanceOf(address(this));\nc_13955f9b(0xf701d2932a7b64d6); /* line */ \n            c_13955f9b(0x90b70c5bb859f239); /* statement */ \nTransferHelper.safeTransferFrom(\n                path[0],\n                msg.sender,\n                PancakeLibrary.pairFor(factory, path[0], path[1]),\n                amountIn\n            );\nc_13955f9b(0x088552f60b10df08); /* line */ \n            c_13955f9b(0x521036068773a378); /* statement */ \n_swapSupportingFeeOnTransferTokens(path, address(this));\nc_13955f9b(0x8da8605412088121); /* line */ \n            c_13955f9b(0x90f16fb9d47b7a2b); /* statement */ \nuint256 balanceAfter = IWBNB(WBNB).balanceOf(address(this));\nc_13955f9b(0x7f7186ff8ccea946); /* line */ \n            WBNBAmount = balanceAfter - balanceBefore;\n        }\nc_13955f9b(0xced0d793e92a7b19); /* line */ \n        c_13955f9b(0x82da1014c9ddec44); /* statement */ \nIWBNB(WBNB).withdraw(WBNBAmount);\nc_13955f9b(0x1e6aaf6093f32f77); /* line */ \n        c_13955f9b(0xf4495284e76dd3cf); /* statement */ \nif (to != address(this)) {c_13955f9b(0x140ce904b2c74cb4); /* branch */ \n\nc_13955f9b(0xf5981eb6f944a879); /* line */ \n            c_13955f9b(0x14afeee1001ac74d); /* statement */ \nTransferHelper.safeTransferBNB(to, WBNBAmount);\n        }else { c_13955f9b(0x8e744124175657eb); /* branch */ \n}\nc_13955f9b(0xd8c4831475d7347b); /* line */ \n        c_13955f9b(0x6f41a522fbc2679c); /* statement */ \nif (swapFor == TypesOfTokens.NON_SUPPORTING_FEE) {c_13955f9b(0x1cec16deec980915); /* branch */ \n\nc_13955f9b(0x046f6294a0c4fc5f); /* line */ \n            c_13955f9b(0xfd9319c1b7228f45); /* statement */ \nemit SwapTokensForBnb(msg.sender, path, amounts);\n        } else {c_13955f9b(0x014fc604022c21ed); /* branch */ \n\nc_13955f9b(0xc54ee0ae256a7d25); /* line */ \n            c_13955f9b(0xc8160c20b8aea96d); /* statement */ \nemit SwapTokensForBnbAtSupportingFee(msg.sender, path);\n        }\n    }\n\n    /**\n     * @notice Swap token A for exact amount of token B\n     * @param amountOut The amount of the tokens needs to be as output token.\n     * @param amountInMax The maximum amount of input tokens that can be taken for the transaction not to revert.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @param to Recipient of the output tokens.\n     * @return amounts Array of amounts after performing swap for respective pairs in path\n     **/\n    function _swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to\n    ) internal returns (uint256[] memory amounts) {c_13955f9b(0x241496bf0b455113); /* function */ \n\nc_13955f9b(0xc31b1e4b07e8e2d1); /* line */ \n        amounts = PancakeLibrary.getAmountsIn(factory, amountOut, path);\nc_13955f9b(0x343a25233ddb92ef); /* line */ \n        c_13955f9b(0x64f1741e38967fb9); /* statement */ \nif (amounts[0] > amountInMax) {c_13955f9b(0x526a32b54d3194a6); /* branch */ \n\nc_13955f9b(0xcd5be0c22907ffe8); /* line */ \n            revert InputAmountAboveMaximum(amounts[0], amountInMax);\n        }else { c_13955f9b(0xa073a5b002b1f32e); /* branch */ \n}\nc_13955f9b(0x84406dc89845b596); /* line */ \n        c_13955f9b(0x3028210410c1376d); /* statement */ \nTransferHelper.safeTransferFrom(\n            path[0],\n            msg.sender,\n            PancakeLibrary.pairFor(factory, path[0], path[1]),\n            amounts[0]\n        );\nc_13955f9b(0xb5206449b07332ce); /* line */ \n        c_13955f9b(0xab665a005d2c23f4); /* statement */ \n_swap(amounts, path, to);\nc_13955f9b(0xb3fc46138ac39f2b); /* line */ \n        c_13955f9b(0x81e91363b3260e39); /* statement */ \nemit SwapTokensForTokens(msg.sender, path, amounts);\n    }\n\n    /**\n     * @notice Swap BNB for exact amount of token B\n     * @param amountOut The amount of the tokens needs to be as output token.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @param to Recipient of the output tokens.\n     * @return amounts Array of amounts after performing swap for respective pairs in path\n     **/\n    function _swapBNBForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to\n    ) internal returns (uint256[] memory amounts) {c_13955f9b(0xd9cca73f3f55b92d); /* function */ \n\nc_13955f9b(0x773e8dac507fc638); /* line */ \n        c_13955f9b(0x2e0661d7088c5b5a); /* statement */ \nif (path[0] != WBNB) {c_13955f9b(0xd183e7cb92cddb4a); /* branch */ \n\nc_13955f9b(0xd797a88a9eea9a08); /* line */ \n            revert WrongAddress(WBNB, path[0]);\n        }else { c_13955f9b(0x60f8eb16cec64e2b); /* branch */ \n}\nc_13955f9b(0xfdf637ace8f67f86); /* line */ \n        amounts = PancakeLibrary.getAmountsIn(factory, amountOut, path);\nc_13955f9b(0xd9c07b05b80be73e); /* line */ \n        c_13955f9b(0x1c66a1fe7cfd42a6); /* statement */ \nif (amounts[0] > msg.value) {c_13955f9b(0x771c8bbc6a9fed9c); /* branch */ \n\nc_13955f9b(0x8b1fe41fbb6f5221); /* line */ \n            revert ExcessiveInputAmount(amounts[0], msg.value);\n        }else { c_13955f9b(0xae0ed669c9ef23c3); /* branch */ \n}\nc_13955f9b(0xe14323f055d956e4); /* line */ \n        c_13955f9b(0x87757335142741ae); /* statement */ \nIWBNB(WBNB).deposit{ value: amounts[0] }();\nc_13955f9b(0x636579b76e12b1a8); /* line */ \n        c_13955f9b(0x5ebe57aa92641365); /* statement */ \nTransferHelper.safeTransfer(WBNB, PancakeLibrary.pairFor(factory, path[0], path[1]), amounts[0]);\nc_13955f9b(0xa2130d6330b534dc); /* line */ \n        c_13955f9b(0xd74a2389707b2f7f); /* statement */ \n_swap(amounts, path, to);\n        // refund dust BNB, if any\nc_13955f9b(0x56db35262197e47c); /* line */ \n        c_13955f9b(0xde15208f1f9f5259); /* statement */ \nif (msg.value > amounts[0]) {c_13955f9b(0xd4f1b20da8f52b6f); /* statement */ \nc_13955f9b(0xfab6bfc66a14a353); /* branch */ \nTransferHelper.safeTransferBNB(msg.sender, msg.value - amounts[0]);}else { c_13955f9b(0x697d106360f9475e); /* branch */ \n}\nc_13955f9b(0xdc93d75d3edcabc5); /* line */ \n        c_13955f9b(0xb1f08f9bd733ff24); /* statement */ \nemit SwapBnbForTokens(msg.sender, path, amounts);\n    }\n\n    /**\n     * @notice Swap token A for exact BNB\n     * @param amountOut The amount of the tokens needs to be as output token.\n     * @param amountInMax The maximum amount of input tokens that can be taken for the transaction not to revert.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @param to Recipient of the output tokens.\n     * @return amounts Array of amounts after performing swap for respective pairs in path\n     **/\n    function _swapTokensForExactBNB(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to\n    ) internal returns (uint256[] memory amounts) {c_13955f9b(0x60b5b47d025aa381); /* function */ \n\nc_13955f9b(0xed1d26a531fb569b); /* line */ \n        c_13955f9b(0xdbfd150a66bf735c); /* statement */ \nif (path[path.length - 1] != WBNB) {c_13955f9b(0x4aac1ff763541139); /* branch */ \n\nc_13955f9b(0x433b28fbb0b5a681); /* line */ \n            revert WrongAddress(WBNB, path[path.length - 1]);\n        }else { c_13955f9b(0x676d581672030147); /* branch */ \n}\nc_13955f9b(0x01ea98539ea63300); /* line */ \n        amounts = PancakeLibrary.getAmountsIn(factory, amountOut, path);\nc_13955f9b(0x24e3ebe082fc0284); /* line */ \n        c_13955f9b(0x53b4ba9d1acabd99); /* statement */ \nif (amounts[0] > amountInMax) {c_13955f9b(0xe37806a9f826cf6f); /* branch */ \n\nc_13955f9b(0x13d019def02c21ae); /* line */ \n            revert InputAmountAboveMaximum(amounts[amounts.length - 1], amountInMax);\n        }else { c_13955f9b(0xcad6df955fb9207d); /* branch */ \n}\nc_13955f9b(0xb6f19c5b422d5514); /* line */ \n        c_13955f9b(0x2498d62387dc95d5); /* statement */ \nTransferHelper.safeTransferFrom(\n            path[0],\n            msg.sender,\n            PancakeLibrary.pairFor(factory, path[0], path[1]),\n            amounts[0]\n        );\nc_13955f9b(0x4ad5d002f3c6cd29); /* line */ \n        c_13955f9b(0x9515436303e05233); /* statement */ \n_swap(amounts, path, address(this));\nc_13955f9b(0x605904c79dcae0f4); /* line */ \n        c_13955f9b(0x1f4a9da6b75d1f80); /* statement */ \nIWBNB(WBNB).withdraw(amounts[amounts.length - 1]);\nc_13955f9b(0xf072e50b0e51953b); /* line */ \n        c_13955f9b(0x6d49fc73f4a1d42d); /* statement */ \nif (to != address(this)) {c_13955f9b(0xd6e08b918735e24c); /* branch */ \n\nc_13955f9b(0xdadbc76e2aed5ef1); /* line */ \n            c_13955f9b(0xfc62d4ecbc083c17); /* statement */ \nTransferHelper.safeTransferBNB(to, amounts[amounts.length - 1]);\n        }else { c_13955f9b(0x32324f89ddc85458); /* branch */ \n}\nc_13955f9b(0x4d955bb34c3f5ec9); /* line */ \n        c_13955f9b(0x64c0095d2d0ec279); /* statement */ \nemit SwapTokensForBnb(msg.sender, path, amounts);\n    }\n\n    // **** LIBRARY FUNCTIONS ****\n\n    /**\n     * @notice Given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n     * @param amountA The amount of token A\n     * @param reserveA The amount of reserves for token A before swap\n     * @param reserveB The amount of reserves for token B before swap\n     * @return amountB An equivalent amount of the token B\n     **/\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure virtual override returns (uint256 amountB) {c_13955f9b(0x25be2ccfa0deeb46); /* function */ \n\nc_13955f9b(0x361c2e73c122bea0); /* line */ \n        c_13955f9b(0xb2ca714cb5f4d3b9); /* statement */ \nreturn PancakeLibrary.quote(amountA, reserveA, reserveB);\n    }\n\n    /**\n     * @notice Given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n     * @param amountIn The amount of token A need to swap\n     * @param reserveIn The amount of reserves for token A before swap\n     * @param reserveOut The amount of reserves for token B after swap\n     * @return amountOut The maximum output amount of the token B\n     **/\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure virtual override returns (uint256 amountOut) {c_13955f9b(0xce10ea75bc92fa5e); /* function */ \n\nc_13955f9b(0x05c1725de517dfe1); /* line */ \n        c_13955f9b(0xb001fa79768f454b); /* statement */ \nreturn PancakeLibrary.getAmountOut(amountIn, reserveIn, reserveOut);\n    }\n\n    /**\n     * @notice Given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n     * @param amountOut The amount of token B after swap\n     * @param reserveIn The amount of reserves for token A before swap\n     * @param reserveOut The amount of reserves for token B after swap\n     * @return amountIn Required input amount of the token A\n     **/\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure virtual override returns (uint256 amountIn) {c_13955f9b(0x8e785380ed2b80e9); /* function */ \n\nc_13955f9b(0xb73ad1bdff2f5967); /* line */ \n        c_13955f9b(0x87d917f181bd650d); /* statement */ \nreturn PancakeLibrary.getAmountIn(amountOut, reserveIn, reserveOut);\n    }\n\n    /**\n     * @notice performs chained getAmountOut calculations on any number of pairs.\n     * @param amountIn The amount of tokens to swap.\n     * @param path Array with addresses of the underlying assets to be swapped.\n     */\n    function getAmountsOut(\n        uint256 amountIn,\n        address[] memory path\n    ) external view virtual override returns (uint256[] memory amounts) {c_13955f9b(0x0bcdfda19858b1eb); /* function */ \n\nc_13955f9b(0x9bd120512fc5e710); /* line */ \n        c_13955f9b(0x71b56a871adbcb45); /* statement */ \nreturn PancakeLibrary.getAmountsOut(factory, amountIn, path);\n    }\n\n    /**\n     * @notice performs chained getAmountIn calculations on any number of pairs.\n     * @param amountOut amountOut The amount of the tokens needs to be as output token.\n     * @param path Array with addresses of the underlying assets to be swapped.\n     */\n    function getAmountsIn(\n        uint256 amountOut,\n        address[] memory path\n    ) external view virtual override returns (uint256[] memory amounts) {c_13955f9b(0x0b12763cb27b5680); /* function */ \n\nc_13955f9b(0x9578d99567e5cf6b); /* line */ \n        c_13955f9b(0x4e819c0335a5449b); /* statement */ \nreturn PancakeLibrary.getAmountsIn(factory, amountOut, path);\n    }\n}\n"
    },
    "contracts/Swap/SwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.25;\nfunction c_700a5f11(bytes8 c__700a5f11) pure {}\nfunction c_true700a5f11(bytes8 c__700a5f11) pure returns (bool){ return true; }\nfunction c_false700a5f11(bytes8 c__700a5f11) pure returns (bool){ return false; }\n\n\nimport \"@openzeppelin/contracts/access/Ownable2Step.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"./interfaces/IPancakeSwapV2Router.sol\";\nimport \"./interfaces/IVtoken.sol\";\nimport \"./RouterHelper.sol\";\nimport \"./interfaces/IVBNB.sol\";\nimport \"./interfaces/IVtoken.sol\";\nimport \"./interfaces/InterfaceComptroller.sol\";\n\n/**\n * @title Venus's Pancake Swap Integration Contract\n * @notice This contracts allows users to swap a token for another one and supply/repay with the latter.\n * @dev For all functions that do not swap native BNB, user must approve this contract with the amount, prior the calling the swap function.\n * @author 0xlucian\n */\n\ncontract SwapRouter is Ownable2Step, RouterHelper, IPancakeSwapV2Router {\nfunction c_c5a54d37(bytes8 c__c5a54d37) internal pure {}\nfunction c_truec5a54d37(bytes8 c__c5a54d37) internal pure returns (bool){ return true; }\nfunction c_falsec5a54d37(bytes8 c__c5a54d37) internal pure returns (bool){ return false; }\nmodifier c_modd3f81622{ c_c5a54d37(0x86931a25197ff52b); /* modifier-post */ \n _; }\nmodifier c_mod8804fbc0{ c_c5a54d37(0x2a6999a42199bd31); /* modifier-pre */ \n _; }\nmodifier c_mod69bad212{ c_c5a54d37(0xddb9bad0e351df69); /* modifier-post */ \n _; }\nmodifier c_mod3baebceb{ c_c5a54d37(0x4a5607d551efb8b4); /* modifier-pre */ \n _; }\nmodifier c_modda8ea255{ c_c5a54d37(0x9c9e70a350bd3f5a); /* modifier-post */ \n _; }\nmodifier c_modd5fcba90{ c_c5a54d37(0x9ca125505bbd65ff); /* modifier-pre */ \n _; }\nmodifier c_mod088777cf{ c_c5a54d37(0xe6268a6909297fb3); /* modifier-post */ \n _; }\nmodifier c_modb861a40f{ c_c5a54d37(0x57ef61c26b988e54); /* modifier-pre */ \n _; }\nmodifier c_modfc625f2d{ c_c5a54d37(0x01f0f86ddf7ee4c5); /* modifier-post */ \n _; }\nmodifier c_moda2748d08{ c_c5a54d37(0x9be4cc50129df2cd); /* modifier-pre */ \n _; }\nmodifier c_modc2f2a9a7{ c_c5a54d37(0x06b2d34f50ab2a4c); /* modifier-post */ \n _; }\nmodifier c_modb9de9f76{ c_c5a54d37(0x62328829542b13ce); /* modifier-pre */ \n _; }\nmodifier c_mod821d0438{ c_c5a54d37(0xf2e500535a0be38c); /* modifier-post */ \n _; }\nmodifier c_moda9c9eab5{ c_c5a54d37(0x1f1ceee5921c7236); /* modifier-pre */ \n _; }\nmodifier c_mod4412363f{ c_c5a54d37(0x908c5d7d1da2c7c5); /* modifier-post */ \n _; }\nmodifier c_modc8f7744b{ c_c5a54d37(0x975bce9680673767); /* modifier-pre */ \n _; }\nmodifier c_mode10171bc{ c_c5a54d37(0x1784e92a72ff1000); /* modifier-post */ \n _; }\nmodifier c_modfa973ce3{ c_c5a54d37(0x9a923752a8580063); /* modifier-pre */ \n _; }\nmodifier c_mode14820aa{ c_c5a54d37(0xcb4e1c0a6a96741f); /* modifier-post */ \n _; }\nmodifier c_mod03987159{ c_c5a54d37(0xba240dfeecbd48c9); /* modifier-pre */ \n _; }\nmodifier c_mod976d1aad{ c_c5a54d37(0xd54afb92e61cb522); /* modifier-post */ \n _; }\nmodifier c_mod3f78b5ef{ c_c5a54d37(0xfc2d33036486fcb7); /* modifier-pre */ \n _; }\nmodifier c_mod17085fef{ c_c5a54d37(0x841645c2250126c2); /* modifier-post */ \n _; }\nmodifier c_moda8ebcbee{ c_c5a54d37(0x8a02cf666fd07b4c); /* modifier-pre */ \n _; }\nmodifier c_moda53e0b48{ c_c5a54d37(0xb9e5e1c07a61f1fc); /* modifier-post */ \n _; }\nmodifier c_mod2afa89bc{ c_c5a54d37(0xd5be6f0aa96a628b); /* modifier-pre */ \n _; }\nmodifier c_mod88c28b75{ c_c5a54d37(0xdc9c6446f18c6609); /* modifier-post */ \n _; }\nmodifier c_mod4631aa39{ c_c5a54d37(0x6060f5a2ba78c849); /* modifier-pre */ \n _; }\nmodifier c_mode9b4ce39{ c_c5a54d37(0x754ab4a56a879d7b); /* modifier-post */ \n _; }\nmodifier c_mod466f88c0{ c_c5a54d37(0x6fdbcccdc1538a71); /* modifier-pre */ \n _; }\nmodifier c_mod2a104e5f{ c_c5a54d37(0x888414a1e92891bf); /* modifier-post */ \n _; }\nmodifier c_mod9a6b2507{ c_c5a54d37(0x2232bfc2b473f04a); /* modifier-pre */ \n _; }\nmodifier c_moddba5d06a{ c_c5a54d37(0xcf8879fd6e14597f); /* modifier-post */ \n _; }\nmodifier c_mod35df9633{ c_c5a54d37(0x554272cf2adcb1e1); /* modifier-pre */ \n _; }\nmodifier c_modd271f11e{ c_c5a54d37(0x532301ca39c2b405); /* modifier-post */ \n _; }\nmodifier c_modec579bb3{ c_c5a54d37(0x0cc386a907b26b70); /* modifier-pre */ \n _; }\nmodifier c_mod2f2d1188{ c_c5a54d37(0x0d276a55ddc1e16a); /* modifier-post */ \n _; }\nmodifier c_mod246ac99a{ c_c5a54d37(0x65c7333764014d25); /* modifier-pre */ \n _; }\nmodifier c_modb969951a{ c_c5a54d37(0x1c8c7fbab71677a9); /* modifier-post */ \n _; }\nmodifier c_mod1f660b02{ c_c5a54d37(0xc4bb51d45a66cc1c); /* modifier-pre */ \n _; }\nmodifier c_mod156f0ca5{ c_c5a54d37(0x5161f7d635cade06); /* modifier-post */ \n _; }\nmodifier c_modea565178{ c_c5a54d37(0x1404547fd9bf0886); /* modifier-pre */ \n _; }\nmodifier c_modc2bf5bbc{ c_c5a54d37(0x4d040267f36ef65d); /* modifier-post */ \n _; }\nmodifier c_mod64c9f2e2{ c_c5a54d37(0xdb8f353bb2329851); /* modifier-pre */ \n _; }\nmodifier c_mod9beb7edd{ c_c5a54d37(0x4a8bca35e6a6b26a); /* modifier-post */ \n _; }\nmodifier c_mod63b167de{ c_c5a54d37(0x63037c1250f59bf3); /* modifier-pre */ \n _; }\nmodifier c_modc2cd93b7{ c_c5a54d37(0xccb20a54bd3e03cc); /* modifier-post */ \n _; }\nmodifier c_mod0c6b5293{ c_c5a54d37(0x71fcbf738ba31b8f); /* modifier-pre */ \n _; }\nmodifier c_modbd96b736{ c_c5a54d37(0xb6c75497fe33f0a1); /* modifier-post */ \n _; }\nmodifier c_mod3923c647{ c_c5a54d37(0x6f99cd92c7f192de); /* modifier-pre */ \n _; }\nmodifier c_modb055ec50{ c_c5a54d37(0x5107349a4d49499b); /* modifier-post */ \n _; }\nmodifier c_mod13bb3042{ c_c5a54d37(0xce40084269d7a46c); /* modifier-pre */ \n _; }\nmodifier c_modc072daa9{ c_c5a54d37(0xea917e82695e3cce); /* modifier-post */ \n _; }\nmodifier c_mod2a04052b{ c_c5a54d37(0xf34ea6323f383e83); /* modifier-pre */ \n _; }\nmodifier c_modbf9dcaba{ c_c5a54d37(0x4b05e1035a82306f); /* modifier-post */ \n _; }\nmodifier c_mod34d17f75{ c_c5a54d37(0xbd7c83ea91127ad1); /* modifier-pre */ \n _; }\nmodifier c_mod249018c3{ c_c5a54d37(0x0d412f171acea7b6); /* modifier-post */ \n _; }\nmodifier c_modbd6d2b63{ c_c5a54d37(0xc633cfe85d35d32a); /* modifier-pre */ \n _; }\nmodifier c_modc15b2a3c{ c_c5a54d37(0xa61ffda9ead16a14); /* modifier-post */ \n _; }\nmodifier c_mode68108b3{ c_c5a54d37(0x5a0c2db567f7f492); /* modifier-pre */ \n _; }\nmodifier c_mod77461350{ c_c5a54d37(0x82a9ab2b13223f4f); /* modifier-post */ \n _; }\nmodifier c_mod1e2e836a{ c_c5a54d37(0x0a03887869f1aa58); /* modifier-pre */ \n _; }\nmodifier c_mod1af50a10{ c_c5a54d37(0x4ed06aea9dafedb8); /* modifier-post */ \n _; }\nmodifier c_mod0ed37ad3{ c_c5a54d37(0xcb38000e079c3442); /* modifier-pre */ \n _; }\nmodifier c_mod7ef2595e{ c_c5a54d37(0xf69d3a4eb949412f); /* modifier-post */ \n _; }\nmodifier c_mode7e4a925{ c_c5a54d37(0xe440a4b613a7d528); /* modifier-pre */ \n _; }\nmodifier c_mod064db32e{ c_c5a54d37(0xf3b263b44c1e788d); /* modifier-post */ \n _; }\nmodifier c_mod3d2cbac5{ c_c5a54d37(0xe3308aa1f30a3a94); /* modifier-pre */ \n _; }\nmodifier c_mod64fa8828{ c_c5a54d37(0xa163c025528209c0); /* modifier-post */ \n _; }\nmodifier c_mod2b446bfe{ c_c5a54d37(0xb9e95cc091c51e85); /* modifier-pre */ \n _; }\nmodifier c_mod66e56d96{ c_c5a54d37(0x321ee799d2625c21); /* modifier-post */ \n _; }\nmodifier c_moda5dbb458{ c_c5a54d37(0x3c4d75bf364346f5); /* modifier-pre */ \n _; }\nmodifier c_mod42323427{ c_c5a54d37(0x1089c75930d2ed84); /* modifier-post */ \n _; }\nmodifier c_mod7512d0e1{ c_c5a54d37(0x3ce8adfab7fa0561); /* modifier-pre */ \n _; }\nmodifier c_modada779ab{ c_c5a54d37(0x91578c910f3665da); /* modifier-post */ \n _; }\nmodifier c_mod391079db{ c_c5a54d37(0xebcd1c5df6a93b57); /* modifier-pre */ \n _; }\nmodifier c_mod228aab44{ c_c5a54d37(0x15dc0bf7371e9fd5); /* modifier-post */ \n _; }\nmodifier c_mod3ad844d5{ c_c5a54d37(0x3c695b99d00e9605); /* modifier-pre */ \n _; }\nmodifier c_mode330644d{ c_c5a54d37(0xa56c77b2c9dd2623); /* modifier-post */ \n _; }\nmodifier c_mod01c4d1ed{ c_c5a54d37(0xa60b7c20356a8d96); /* modifier-pre */ \n _; }\nmodifier c_mod2c2c8cf2{ c_c5a54d37(0xfe0bcceb4afbeb28); /* modifier-post */ \n _; }\nmodifier c_modf71c9d93{ c_c5a54d37(0xc602edc6846ad579); /* modifier-pre */ \n _; }\nmodifier c_modd00bb78b{ c_c5a54d37(0xa4667f8c1d51937b); /* modifier-post */ \n _; }\nmodifier c_modd1716686{ c_c5a54d37(0x9aae6fea454ce02f); /* modifier-pre */ \n _; }\nmodifier c_mod1fe3f2e3{ c_c5a54d37(0x45b035706a518544); /* modifier-post */ \n _; }\nmodifier c_mod0386fb6a{ c_c5a54d37(0x778b1b021c25400a); /* modifier-pre */ \n _; }\nmodifier c_modfedcd5d2{ c_c5a54d37(0xa78f3091478c9d1b); /* modifier-post */ \n _; }\nmodifier c_mod4d4e7fc2{ c_c5a54d37(0x4f2b55290707a574); /* modifier-pre */ \n _; }\nmodifier c_mod9af2de6c{ c_c5a54d37(0x589005804ccbc586); /* modifier-post */ \n _; }\nmodifier c_modd32ebf58{ c_c5a54d37(0xdbed356fed9a5c7d); /* modifier-pre */ \n _; }\nmodifier c_mode37e7460{ c_c5a54d37(0x35860281dbdf5603); /* modifier-post */ \n _; }\nmodifier c_mod2199c84f{ c_c5a54d37(0xb95d930ecad2b649); /* modifier-pre */ \n _; }\nmodifier c_mod73e88ae7{ c_c5a54d37(0x1cb45d153c60e273); /* modifier-post */ \n _; }\nmodifier c_modb1ee01a7{ c_c5a54d37(0xb6f8f469d1a25fad); /* modifier-pre */ \n _; }\nmodifier c_mod93291e1d{ c_c5a54d37(0x7a53b9a480873b55); /* modifier-post */ \n _; }\nmodifier c_modc20bcfaf{ c_c5a54d37(0x260e3d11845af7e4); /* modifier-pre */ \n _; }\nmodifier c_mod6c9410dc{ c_c5a54d37(0x82ef8a642fd4fb1d); /* modifier-post */ \n _; }\nmodifier c_mod0d2487d4{ c_c5a54d37(0x76fd5602c8909fd2); /* modifier-pre */ \n _; }\nmodifier c_mod0ee41aec{ c_c5a54d37(0x7bcc73480ebc9848); /* modifier-post */ \n _; }\nmodifier c_mod99a59674{ c_c5a54d37(0xf7c934f5cb0ff0e2); /* modifier-pre */ \n _; }\nmodifier c_modae4eaf19{ c_c5a54d37(0x905f3df100c8cd5f); /* modifier-post */ \n _; }\nmodifier c_mod935eda30{ c_c5a54d37(0x6332127bdc279a7a); /* modifier-pre */ \n _; }\nmodifier c_mod92ce2b9c{ c_c5a54d37(0xb081d42210c53e27); /* modifier-post */ \n _; }\nmodifier c_mod97e41ecc{ c_c5a54d37(0x1e36ecbc6d87b17a); /* modifier-pre */ \n _; }\nmodifier c_modde541c65{ c_c5a54d37(0xd7001158b225907d); /* modifier-post */ \n _; }\nmodifier c_modc3564949{ c_c5a54d37(0x6e12fce09dea4f8f); /* modifier-pre */ \n _; }\nmodifier c_modbe06ad87{ c_c5a54d37(0x98d8811e2e3d4151); /* modifier-post */ \n _; }\nmodifier c_mod0f74005c{ c_c5a54d37(0x281f8867cb49559e); /* modifier-pre */ \n _; }\nmodifier c_mod284702a9{ c_c5a54d37(0xf0228699051052f1); /* modifier-post */ \n _; }\nmodifier c_mod71f47537{ c_c5a54d37(0xa3af79c8e6915623); /* modifier-pre */ \n _; }\nmodifier c_modd6c85a70{ c_c5a54d37(0xee0e2ed94961f066); /* modifier-post */ \n _; }\nmodifier c_modf5335a8d{ c_c5a54d37(0x64225349e4caabfb); /* modifier-pre */ \n _; }\nmodifier c_mod3d493a54{ c_c5a54d37(0xa3b247e26fbdeee8); /* modifier-post */ \n _; }\nmodifier c_modd24aa9bd{ c_c5a54d37(0x9aefd2ac694e47f2); /* modifier-pre */ \n _; }\nmodifier c_moda6ad0fa0{ c_c5a54d37(0xc85223f0e5720608); /* modifier-post */ \n _; }\nmodifier c_modec90a31c{ c_c5a54d37(0x0630b805ad72d854); /* modifier-pre */ \n _; }\nmodifier c_mod54d672b7{ c_c5a54d37(0x1855c5afc91c2b5d); /* modifier-post */ \n _; }\nmodifier c_mod83d7b687{ c_c5a54d37(0xd6b72efe879996ad); /* modifier-pre */ \n _; }\nmodifier c_mod6f3cf2f4{ c_c5a54d37(0xe9ad9f577cd48103); /* modifier-post */ \n _; }\nmodifier c_mod94be73fa{ c_c5a54d37(0xcbcd7d99762b3ea6); /* modifier-pre */ \n _; }\nmodifier c_mod13333171{ c_c5a54d37(0xeb01b1cc3233dc79); /* modifier-post */ \n _; }\nmodifier c_mod28931a7a{ c_c5a54d37(0x1ca661509e787123); /* modifier-pre */ \n _; }\nmodifier c_modad15fb0c{ c_c5a54d37(0xca1f93b7610e57c4); /* modifier-post */ \n _; }\nmodifier c_mod132693f9{ c_c5a54d37(0xdf78f4aa105179be); /* modifier-pre */ \n _; }\nmodifier c_moda4a3f0df{ c_c5a54d37(0xe594e174831e3a0a); /* modifier-post */ \n _; }\nmodifier c_mode24973f2{ c_c5a54d37(0xf3d7f4a9fe978efd); /* modifier-pre */ \n _; }\nmodifier c_moddd0fbf96{ c_c5a54d37(0x14e70b382e3e466b); /* modifier-post */ \n _; }\nmodifier c_mod8beb10d7{ c_c5a54d37(0x09c764cfb3d5d3ff); /* modifier-pre */ \n _; }\nmodifier c_modf90d0b03{ c_c5a54d37(0x0c8dbcded3df6e4b); /* modifier-post */ \n _; }\nmodifier c_mod98bc0e3f{ c_c5a54d37(0x5fb1e5e4d2e7886d); /* modifier-pre */ \n _; }\nmodifier c_moda7fdbdd1{ c_c5a54d37(0xfe1572271c371fb0); /* modifier-post */ \n _; }\nmodifier c_mod631957e0{ c_c5a54d37(0xa09e183e97e119ab); /* modifier-pre */ \n _; }\nmodifier c_mod0bc277b6{ c_c5a54d37(0x20db224d71d44224); /* modifier-post */ \n _; }\nmodifier c_moda3cb91a8{ c_c5a54d37(0xa3b8119ebf1acc7d); /* modifier-pre */ \n _; }\nmodifier c_modcb75fc9b{ c_c5a54d37(0xcaae0fda4391c63e); /* modifier-post */ \n _; }\nmodifier c_mod19e93e65{ c_c5a54d37(0x90e42e4b2f40bee8); /* modifier-pre */ \n _; }\nmodifier c_mod93e4e971{ c_c5a54d37(0xf331435e8c290c47); /* modifier-post */ \n _; }\nmodifier c_mod106f9192{ c_c5a54d37(0xff7c51cc696a54da); /* modifier-pre */ \n _; }\nmodifier c_moddd8ef8d9{ c_c5a54d37(0x72a0820a8021418b); /* modifier-post */ \n _; }\nmodifier c_moda201648c{ c_c5a54d37(0x390835843d35cc47); /* modifier-pre */ \n _; }\nmodifier c_mod3f83332b{ c_c5a54d37(0x7054db59f5afc9ba); /* modifier-post */ \n _; }\nmodifier c_mod48f732fc{ c_c5a54d37(0xb3266d22b572d8c9); /* modifier-pre */ \n _; }\nmodifier c_mod935f70c6{ c_c5a54d37(0x74b95b9e583cdc1c); /* modifier-post */ \n _; }\nmodifier c_mod4a7dae71{ c_c5a54d37(0xc35b3e8292e0b28b); /* modifier-pre */ \n _; }\nmodifier c_mod1b7d61c6{ c_c5a54d37(0xbdd16ccdcd1147b0); /* modifier-post */ \n _; }\nmodifier c_mode95e9886{ c_c5a54d37(0x46df73e39b307884); /* modifier-pre */ \n _; }\nmodifier c_mod9d485693{ c_c5a54d37(0xbc7ef4d8a8fb0032); /* modifier-post */ \n _; }\nmodifier c_mod47ae84d8{ c_c5a54d37(0x9dbcc1ab98538352); /* modifier-pre */ \n _; }\nmodifier c_modc90aeb19{ c_c5a54d37(0xb537ea4f546a80de); /* modifier-post */ \n _; }\nmodifier c_mod23386321{ c_c5a54d37(0xc6ee4bdad8db25cf); /* modifier-pre */ \n _; }\nmodifier c_mod7a0ca71a{ c_c5a54d37(0x64c7cebd7582dd76); /* modifier-post */ \n _; }\nmodifier c_modb0a454f8{ c_c5a54d37(0x643f93a39eed45ae); /* modifier-pre */ \n _; }\nmodifier c_mode5ddde07{ c_c5a54d37(0x7242aa6aa5e316ea); /* modifier-post */ \n _; }\nmodifier c_modd7987670{ c_c5a54d37(0x725af01a5af24fca); /* modifier-pre */ \n _; }\nmodifier c_mod2977c1bb{ c_c5a54d37(0xe46d41e3f4d49dd6); /* modifier-post */ \n _; }\nmodifier c_mod889a86c2{ c_c5a54d37(0xf218e803cd9991ec); /* modifier-pre */ \n _; }\nmodifier c_mod6e22426d{ c_c5a54d37(0x67164ba7e8508346); /* modifier-post */ \n _; }\nmodifier c_mod1ca5c174{ c_c5a54d37(0xaf74081c0b9945e8); /* modifier-pre */ \n _; }\nmodifier c_modbba06026{ c_c5a54d37(0x33700c6456a619e4); /* modifier-post */ \n _; }\nmodifier c_mod2f957666{ c_c5a54d37(0x5f21102779179b2c); /* modifier-pre */ \n _; }\nmodifier c_mod212cca99{ c_c5a54d37(0x824aed57e53c28b1); /* modifier-post */ \n _; }\nmodifier c_mod958f9287{ c_c5a54d37(0x7670de7155960aa7); /* modifier-pre */ \n _; }\nmodifier c_mode30bcc8c{ c_c5a54d37(0x8eab7a2889eee627); /* modifier-post */ \n _; }\nmodifier c_modccdb8e84{ c_c5a54d37(0xd5b64aeb4aea76dd); /* modifier-pre */ \n _; }\nmodifier c_modfad6e73f{ c_c5a54d37(0x0649364a96b9fae0); /* modifier-post */ \n _; }\nmodifier c_modb1da86d9{ c_c5a54d37(0xf48732243f60a607); /* modifier-pre */ \n _; }\nmodifier c_modc05dbe98{ c_c5a54d37(0xaefcfe7bd9ad973a); /* modifier-post */ \n _; }\nmodifier c_mode94469d7{ c_c5a54d37(0xb2875ac3db17fd1c); /* modifier-pre */ \n _; }\nmodifier c_mod1c3f0761{ c_c5a54d37(0xfb03f8a90523d8b5); /* modifier-post */ \n _; }\nmodifier c_mod08e681de{ c_c5a54d37(0x0e4ad2a80553a1b5); /* modifier-pre */ \n _; }\nmodifier c_moda3f3382c{ c_c5a54d37(0xf9c9dc84c8f6f927); /* modifier-post */ \n _; }\nmodifier c_mod476eb85f{ c_c5a54d37(0xb50dc8c8025b45cd); /* modifier-pre */ \n _; }\nmodifier c_mod0cc64a81{ c_c5a54d37(0x75bac25ef9d0404e); /* modifier-post */ \n _; }\nmodifier c_modc81c1bd7{ c_c5a54d37(0xd20fcfb789a7a5ee); /* modifier-pre */ \n _; }\nmodifier c_modb27dc1ed{ c_c5a54d37(0x704e859482d0da4e); /* modifier-post */ \n _; }\nmodifier c_mod5f577187{ c_c5a54d37(0x0fd9017caa9a3b40); /* modifier-pre */ \n _; }\nmodifier c_mod36456c0c{ c_c5a54d37(0x5039fc6773f95ec4); /* modifier-post */ \n _; }\nmodifier c_mod7bbbf42c{ c_c5a54d37(0x3716af6ff662310e); /* modifier-pre */ \n _; }\nmodifier c_modf5db3436{ c_c5a54d37(0x40e3e2bcd06b1ffc); /* modifier-post */ \n _; }\nmodifier c_mod73b838dd{ c_c5a54d37(0x24a37ca76a980525); /* modifier-pre */ \n _; }\nmodifier c_mod5a55d28f{ c_c5a54d37(0x06515f598aa0f32e); /* modifier-post */ \n _; }\nmodifier c_mod22f5d762{ c_c5a54d37(0x8f6087e3bcf48b14); /* modifier-pre */ \n _; }\nmodifier c_modc918110d{ c_c5a54d37(0xd980c9a3095a3902); /* modifier-post */ \n _; }\nmodifier c_modd1e9fa4e{ c_c5a54d37(0x393f4dedf115749c); /* modifier-pre */ \n _; }\nmodifier c_modae1abf3f{ c_c5a54d37(0x1320a8c27b87ab22); /* modifier-post */ \n _; }\nmodifier c_mode6c7b7cd{ c_c5a54d37(0x56dcc0f3dcd9f5f3); /* modifier-pre */ \n _; }\n\n    using SafeERC20 for IERC20;\n\n    address public immutable comptrollerAddress;\n\n    uint256 private constant _NOT_ENTERED = 1;\n\n    uint256 private constant _ENTERED = 2;\n\n    address public vBNBAddress;\n\n    /**\n     * @dev Guard variable for re-entrancy checks\n     */\n    uint256 internal _status;\n\n    // ***************\n    // ** MODIFIERS **\n    // ***************\n    modifier ensure(uint256 deadline) {c_c5a54d37(0xeff907e1d2d6ffdb); /* function */ \n\nc_c5a54d37(0xdfdf5e3ab2ce9fae); /* line */ \n        c_c5a54d37(0x69a6e1be65c70b21); /* statement */ \nif (deadline < block.timestamp) {c_c5a54d37(0x0ae980317b86f833); /* branch */ \n\nc_c5a54d37(0xfd7a7e1a3fcbb0c9); /* line */ \n            revert SwapDeadlineExpire(deadline, block.timestamp);\n        }else { c_c5a54d37(0x675c6651b30ec598); /* branch */ \n}\nc_c5a54d37(0x231fe49b34afc7e9); /* line */ \n        _;\n    }\n\n    modifier ensurePath(address[] calldata path) {c_c5a54d37(0x8791c249f10e70b5); /* function */ \n\nc_c5a54d37(0x6e9b3c1996fc9d63); /* line */ \n        c_c5a54d37(0x37b783df4cd1327e); /* statement */ \nif (path.length < 2) {c_c5a54d37(0x1f6699d477f9e773); /* branch */ \n\nc_c5a54d37(0x95de538b8fb186bc); /* line */ \n            revert InvalidPath();\n        }else { c_c5a54d37(0x9cc7b04a7ddf9eee); /* branch */ \n}\nc_c5a54d37(0x57c0c279a482cd70); /* line */ \n        _;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     */\n    modifier nonReentrant() {c_c5a54d37(0x1031849c79d4817d); /* function */ \n\nc_c5a54d37(0x1577ae5f21c2a3b6); /* line */ \n        c_c5a54d37(0xbd30c08b6420a046); /* statement */ \nif (_status == _ENTERED) {c_c5a54d37(0xa21b85ba9dadea06); /* branch */ \n\nc_c5a54d37(0x6acf28bb13e5211e); /* line */ \n            revert ReentrantCheck();\n        }else { c_c5a54d37(0xfb4750cc91295f7f); /* branch */ \n}\nc_c5a54d37(0x77fc3a4b663f2b1b); /* line */ \n        _status = _ENTERED;\nc_c5a54d37(0x28ef52a5f2da8b4e); /* line */ \n        _;\nc_c5a54d37(0x65037dac88ea9b86); /* line */ \n        _status = _NOT_ENTERED;\n    }\n\n    /// @notice event emitted on sweep token success\n    event SweepToken(address indexed token, address indexed to, uint256 sweepAmount);\n\n    /// @notice event emitted on vBNBAddress update\n    event VBNBAddressUpdated(address indexed oldAddress, address indexed newAddress);\n\n    // *********************\n    // **** CONSTRUCTOR ****\n    // *********************\n\n    /// @notice Constructor for the implementation contract. Sets immutable variables.\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(\n        address WBNB_,\n        address factory_,\n        address _comptrollerAddress,\n        address _vBNBAddress\n    ) RouterHelper(WBNB_, factory_) {c_c5a54d37(0xa25cccbba0bfe33f); /* function */ \n\nc_c5a54d37(0x0b141a20dd7dc7c8); /* line */ \n        c_c5a54d37(0xfcec12271d8c36b8); /* statement */ \nif ((_comptrollerAddress == address(0) && c_truec5a54d37(0x8a8736e5a6fedd94)) || (_vBNBAddress == address(0) && c_truec5a54d37(0xd6258a07dd652752))) {c_c5a54d37(0xf5fc25b0f13fa765); /* branch */ \n\nc_c5a54d37(0x30d9694fe3382123); /* line */ \n            revert ZeroAddress();\n        }else { c_c5a54d37(0xd001298d3c366805); /* branch */ \n}\nc_c5a54d37(0xcf8122d8ab661e8d); /* line */ \n        comptrollerAddress = _comptrollerAddress;\nc_c5a54d37(0xecee7ec457ecd866); /* line */ \n        _status = _NOT_ENTERED;\nc_c5a54d37(0x0bd05e43ab498d93); /* line */ \n        vBNBAddress = _vBNBAddress;\n    }\n\n    receive() external payable {\nc_c5a54d37(0x4e259c8d4b42dc73); /* line */ \n        assert(msg.sender == WBNB); // only accept BNB via fallback from the WBNB contract\n    }\n\n    // ****************************\n    // **** EXTERNAL FUNCTIONS ****\n    // ****************************\n\n    /**\n     * @notice Setter for the vBNB address.\n     * @param _vBNBAddress Address of the BNB vToken to update.\n     */\n    function setVBNBAddress(address _vBNBAddress) external  c_mode6c7b7cd onlyOwner c_modae1abf3f  {c_c5a54d37(0xad13b747116bd612); /* function */ \n\nc_c5a54d37(0xa48c5e5fd762ef67); /* line */ \n        c_c5a54d37(0xde0d3cd50c0056ae); /* statement */ \nif (_vBNBAddress == address(0)) {c_c5a54d37(0x83ae321e3b6f0e8a); /* branch */ \n\nc_c5a54d37(0x1a886627be2be41f); /* line */ \n            revert ZeroAddress();\n        }else { c_c5a54d37(0x5a21bfdca2d5df9f); /* branch */ \n}\n\nc_c5a54d37(0x7c4c3bbe56caa98d); /* line */ \n        c_c5a54d37(0x94ba31e49f77c51a); /* statement */ \n_isVTokenListed(_vBNBAddress);\n\nc_c5a54d37(0x92a64077d70e1e54); /* line */ \n        c_c5a54d37(0x564e1dd7a0258d2c); /* statement */ \naddress oldAddress = vBNBAddress;\nc_c5a54d37(0xf40b9660a66925e1); /* line */ \n        vBNBAddress = _vBNBAddress;\n\nc_c5a54d37(0x5dff5256be6b5d0d); /* line */ \n        c_c5a54d37(0x0cf6f55d319e8842); /* statement */ \nemit VBNBAddressUpdated(oldAddress, vBNBAddress);\n    }\n\n    /**\n     * @notice Swap token A for token B and supply to a Venus market\n     * @param vTokenAddress The address of the vToken contract for supplying assets.\n     * @param amountIn The amount of tokens to swap.\n     * @param amountOutMin Minimum amount of tokens to receive.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @param deadline Unix timestamp after which the transaction will revert.\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\n     */\n    function swapExactTokensForTokensAndSupply(\n        address vTokenAddress,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        uint256 deadline\n    ) external override  c_modd1e9fa4e nonReentrant c_modc918110d   c_mod22f5d762 ensure(deadline) c_mod5a55d28f   c_mod73b838dd ensurePath(path) c_modf5db3436  {c_c5a54d37(0x1288237c1e0d6781); /* function */ \n\nc_c5a54d37(0xc5797d754fe2fc35); /* line */ \n        c_c5a54d37(0x25b968c16448b748); /* statement */ \n_ensureVTokenChecks(vTokenAddress, path[path.length - 1]);\nc_c5a54d37(0x541606959fee2105); /* line */ \n        c_c5a54d37(0xff457a0eb0d54a6a); /* statement */ \naddress lastAsset = path[path.length - 1];\nc_c5a54d37(0xd2fb07afcf307550); /* line */ \n        c_c5a54d37(0x3b90326e1dae51b2); /* statement */ \nuint256 balanceBefore = IERC20(lastAsset).balanceOf(address(this));\nc_c5a54d37(0x06f6cb0f3fc4062a); /* line */ \n        c_c5a54d37(0xaaadf4f36c898c95); /* statement */ \n_swapExactTokensForTokens(amountIn, amountOutMin, path, address(this), TypesOfTokens.NON_SUPPORTING_FEE);\nc_c5a54d37(0x948ca37c64255bc2); /* line */ \n        c_c5a54d37(0xab7c215e7584ff4c); /* statement */ \nuint256 swapAmount = _getSwapAmount(lastAsset, balanceBefore);\nc_c5a54d37(0x82d39e9b388d26cc); /* line */ \n        c_c5a54d37(0x4283b837e5637bd9); /* statement */ \n_supply(lastAsset, vTokenAddress, swapAmount);\n    }\n\n    /**\n     * @notice Swap deflationary (a small amount of fee is deducted at the time of transfer of token) token A for token B and supply to a Venus market.\n     * @param vTokenAddress The address of the vToken contract for supplying assets.\n     * @param amountIn The amount of tokens to swap.\n     * @param amountOutMin Minimum amount of tokens to receive.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @param deadline Unix timestamp after which the transaction will revert.\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\n     */\n    function swapExactTokensForTokensAndSupplyAtSupportingFee(\n        address vTokenAddress,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        uint256 deadline\n    ) external override  c_mod7bbbf42c nonReentrant c_mod36456c0c   c_mod5f577187 ensure(deadline) c_modb27dc1ed   c_modc81c1bd7 ensurePath(path) c_mod0cc64a81  {c_c5a54d37(0x4f168f99b8e0b186); /* function */ \n\nc_c5a54d37(0xf4b14edfb0f6d79a); /* line */ \n        c_c5a54d37(0x8ec5974966a84dee); /* statement */ \n_ensureVTokenChecks(vTokenAddress, path[path.length - 1]);\nc_c5a54d37(0xd6867e8bdd39d3d8); /* line */ \n        c_c5a54d37(0xd7a6fcf9cbb1c3b2); /* statement */ \naddress lastAsset = path[path.length - 1];\nc_c5a54d37(0xa2aec581762c82b6); /* line */ \n        c_c5a54d37(0xb0822e990eafbd4e); /* statement */ \nuint256 balanceBefore = IERC20(lastAsset).balanceOf(address(this));\nc_c5a54d37(0x1343cd597b8e5bb7); /* line */ \n        c_c5a54d37(0xd39fe77622140ecd); /* statement */ \n_swapExactTokensForTokens(amountIn, amountOutMin, path, address(this), TypesOfTokens.SUPPORTING_FEE);\nc_c5a54d37(0xad591c77a8aa4399); /* line */ \n        c_c5a54d37(0x95cd5c4349f7034a); /* statement */ \nuint256 swapAmount = _checkForAmountOut(lastAsset, balanceBefore, amountOutMin, address(this));\nc_c5a54d37(0xd95f9fb2f0800ffb); /* line */ \n        c_c5a54d37(0x07fdc6bbc9596b56); /* statement */ \n_supply(lastAsset, vTokenAddress, swapAmount);\n    }\n\n    /**\n     * @notice Swap BNB for another token and supply to a Venus market\n     * @dev The amount to be swapped is obtained from the msg.value, since we are swapping BNB\n     * @param vTokenAddress The address of the vToken contract for supplying assets.\n     * @param amountOutMin Minimum amount of tokens to receive.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @param deadline Unix timestamp after which the transaction will revert.\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\n     */\n    function swapExactBNBForTokensAndSupply(\n        address vTokenAddress,\n        uint256 amountOutMin,\n        address[] calldata path,\n        uint256 deadline\n    ) external payable override  c_mod476eb85f nonReentrant c_moda3f3382c   c_mod08e681de ensure(deadline) c_mod1c3f0761   c_mode94469d7 ensurePath(path) c_modc05dbe98  {c_c5a54d37(0x69068b0f793c3b01); /* function */ \n\nc_c5a54d37(0x468c8532718de00a); /* line */ \n        c_c5a54d37(0xb58cb60fe7e129bc); /* statement */ \n_ensureVTokenChecks(vTokenAddress, path[path.length - 1]);\nc_c5a54d37(0x29d2cc72f2f95beb); /* line */ \n        c_c5a54d37(0x74611b7878d28d33); /* statement */ \naddress lastAsset = path[path.length - 1];\nc_c5a54d37(0xac8320f003533d7a); /* line */ \n        c_c5a54d37(0x35efec26d76b8a0e); /* statement */ \nuint256 balanceBefore = IERC20(lastAsset).balanceOf(address(this));\nc_c5a54d37(0x1d6cb4a2a9222827); /* line */ \n        c_c5a54d37(0xd9d1dd4c7b2da30d); /* statement */ \n_swapExactBNBForTokens(amountOutMin, path, address(this), TypesOfTokens.NON_SUPPORTING_FEE);\nc_c5a54d37(0x1d1fdbc5db9677be); /* line */ \n        c_c5a54d37(0x2c93496ca2edc0b3); /* statement */ \nuint256 swapAmount = _getSwapAmount(lastAsset, balanceBefore);\nc_c5a54d37(0x0d6a4d4789389824); /* line */ \n        c_c5a54d37(0x20d3b5fecb2f3fbb); /* statement */ \n_supply(lastAsset, vTokenAddress, swapAmount);\n    }\n\n    /**\n     * @notice Swap BNB for another deflationary token (a small amount of fee is deducted at the time of transfer of token) and supply to a Venus market\n     * @dev The amount to be swapped is obtained from the msg.value, since we are swapping BNB\n     * @param vTokenAddress The address of the vToken contract for supplying assets.\n     * @param amountOutMin Minimum amount of tokens to receive.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @param deadline Unix timestamp after which the transaction will revert.\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\n     */\n    function swapExactBNBForTokensAndSupplyAtSupportingFee(\n        address vTokenAddress,\n        uint256 amountOutMin,\n        address[] calldata path,\n        uint256 deadline\n    ) external payable override  c_modb1da86d9 nonReentrant c_modfad6e73f   c_modccdb8e84 ensure(deadline) c_mode30bcc8c   c_mod958f9287 ensurePath(path) c_mod212cca99  {c_c5a54d37(0x11f9b7d897f1d754); /* function */ \n\nc_c5a54d37(0xc4fa32b6eaf32477); /* line */ \n        c_c5a54d37(0x926dc9fa476881b3); /* statement */ \n_ensureVTokenChecks(vTokenAddress, path[path.length - 1]);\nc_c5a54d37(0xef5cf1019a2b5e83); /* line */ \n        c_c5a54d37(0x2a700572abbd8fe9); /* statement */ \naddress lastAsset = path[path.length - 1];\nc_c5a54d37(0x8434c2343d60e2ad); /* line */ \n        c_c5a54d37(0xa9dff3d7dc294f93); /* statement */ \nuint256 balanceBefore = IERC20(lastAsset).balanceOf(address(this));\nc_c5a54d37(0xdd7e8b61d37ed8b2); /* line */ \n        c_c5a54d37(0xaa89067347ea85e2); /* statement */ \n_swapExactBNBForTokens(amountOutMin, path, address(this), TypesOfTokens.SUPPORTING_FEE);\nc_c5a54d37(0x68fe83c8aa25d19e); /* line */ \n        c_c5a54d37(0xc4372e8fe5edc092); /* statement */ \nuint256 swapAmount = _checkForAmountOut(lastAsset, balanceBefore, amountOutMin, address(this));\nc_c5a54d37(0x0cd66b9d2cb709b9); /* line */ \n        c_c5a54d37(0xfc84ba0b7741b4a7); /* statement */ \n_supply(lastAsset, vTokenAddress, swapAmount);\n    }\n\n    /**\n     * @notice Swap tokens for Exact tokens and supply to a Venus market\n     * @param vTokenAddress The address of the vToken contract for supplying assets.\n     * @param amountOut The amount of the tokens needs to be as output token.\n     * @param amountInMax The maximum amount of input tokens that can be taken for the transaction not to revert.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @param deadline Unix timestamp after which the transaction will revert.\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\n     */\n    function swapTokensForExactTokensAndSupply(\n        address vTokenAddress,\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        uint256 deadline\n    ) external override  c_mod2f957666 nonReentrant c_modbba06026   c_mod1ca5c174 ensure(deadline) c_mod6e22426d   c_mod889a86c2 ensurePath(path) c_mod2977c1bb  {c_c5a54d37(0x23151dd72bcd1111); /* function */ \n\nc_c5a54d37(0x94b439e52baba48f); /* line */ \n        c_c5a54d37(0xd02a424172cbb961); /* statement */ \n_ensureVTokenChecks(vTokenAddress, path[path.length - 1]);\nc_c5a54d37(0x62108989b039aeed); /* line */ \n        c_c5a54d37(0x4a17823f540d8582); /* statement */ \naddress lastAsset = path[path.length - 1];\nc_c5a54d37(0x17119d24c810b5c1); /* line */ \n        c_c5a54d37(0x5cd360b5fdc8eda5); /* statement */ \nuint256 balanceBefore = IERC20(lastAsset).balanceOf(address(this));\nc_c5a54d37(0xc8265f2ff50bf61b); /* line */ \n        c_c5a54d37(0x27dd0d6d6b07aa57); /* statement */ \n_swapTokensForExactTokens(amountOut, amountInMax, path, address(this));\nc_c5a54d37(0xb0ad3c303462e838); /* line */ \n        c_c5a54d37(0x907bd483c4521252); /* statement */ \nuint256 swapAmount = _getSwapAmount(lastAsset, balanceBefore);\nc_c5a54d37(0x6de41cdb3bde9147); /* line */ \n        c_c5a54d37(0x55503bad6fe59941); /* statement */ \n_supply(lastAsset, vTokenAddress, swapAmount);\n    }\n\n    /**\n     * @notice Swap BNB for Exact tokens and supply to a Venus market\n     * @param vTokenAddress The address of the vToken contract for supplying assets.\n     * @param amountOut The amount of the tokens needs to be as output token.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @param deadline Unix timestamp after which the transaction will revert.\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\n     */\n    function swapBNBForExactTokensAndSupply(\n        address vTokenAddress,\n        uint256 amountOut,\n        address[] calldata path,\n        uint256 deadline\n    ) external payable override  c_modd7987670 nonReentrant c_mode5ddde07   c_modb0a454f8 ensure(deadline) c_mod7a0ca71a   c_mod23386321 ensurePath(path) c_modc90aeb19  {c_c5a54d37(0x1be718347e8dead5); /* function */ \n\nc_c5a54d37(0xfadba0f8832dbb61); /* line */ \n        c_c5a54d37(0x01b39e299e1ffd3d); /* statement */ \n_ensureVTokenChecks(vTokenAddress, path[path.length - 1]);\nc_c5a54d37(0x74aa082232316adf); /* line */ \n        c_c5a54d37(0xaf5425a07cdc597f); /* statement */ \naddress lastAsset = path[path.length - 1];\nc_c5a54d37(0xa37bd9c1b611c0c8); /* line */ \n        c_c5a54d37(0xf43a4ec169005980); /* statement */ \nuint256 balanceBefore = IERC20(lastAsset).balanceOf(address(this));\nc_c5a54d37(0xd126441afefa7b01); /* line */ \n        c_c5a54d37(0x6fa85d5ebe96c1bb); /* statement */ \n_swapBNBForExactTokens(amountOut, path, address(this));\nc_c5a54d37(0x0f8b8bf025cc8981); /* line */ \n        c_c5a54d37(0x4f1401eaf67edcd9); /* statement */ \nuint256 swapAmount = _getSwapAmount(lastAsset, balanceBefore);\nc_c5a54d37(0x1f0228d9837a771a); /* line */ \n        c_c5a54d37(0x70cac346f4a91fae); /* statement */ \n_supply(lastAsset, vTokenAddress, swapAmount);\n    }\n\n    /**\n     * @notice Swap Exact tokens for BNB and supply to a Venus market\n     * @param amountIn The amount of tokens to swap.\n     * @param amountOutMin Minimum amount of tokens to receive.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @param deadline Unix timestamp after which the transaction will revert.\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\n     */\n    function swapExactTokensForBNBAndSupply(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        uint256 deadline\n    ) external override  c_mod47ae84d8 nonReentrant c_mod9d485693   c_mode95e9886 ensure(deadline) c_mod1b7d61c6   c_mod4a7dae71 ensurePath(path) c_mod935f70c6  {c_c5a54d37(0x1c807d83ed1916a7); /* function */ \n\nc_c5a54d37(0xa7265a1040a07b80); /* line */ \n        c_c5a54d37(0x752f33e739bb402f); /* statement */ \nuint256 balanceBefore = address(this).balance;\nc_c5a54d37(0x60307b06502af468); /* line */ \n        c_c5a54d37(0xd84ba7810b5550d3); /* statement */ \n_swapExactTokensForBNB(amountIn, amountOutMin, path, address(this), TypesOfTokens.NON_SUPPORTING_FEE);\nc_c5a54d37(0xbbe86b8ec6f72181); /* line */ \n        c_c5a54d37(0x7aa104190b41cdf0); /* statement */ \nuint256 balanceAfter = address(this).balance;\nc_c5a54d37(0x8400ea58a7f9262a); /* line */ \n        c_c5a54d37(0x02e2d8f679c7af38); /* statement */ \nuint256 swapAmount = balanceAfter - balanceBefore;\nc_c5a54d37(0x509ccaa2e997b1b4); /* line */ \n        c_c5a54d37(0xd4c275634fdfa6c9); /* statement */ \n_mintVBNBandTransfer(swapAmount);\n    }\n\n    /**\n     * @notice Swap Exact deflationary tokens (a small amount of fee is deducted at the time of transfer of tokens) for BNB and supply to a Venus market\n     * @param amountIn The amount of tokens to swap.\n     * @param amountOutMin Minimum amount of tokens to receive.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @param deadline Unix timestamp after which the transaction will revert.\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\n     */\n    function swapExactTokensForBNBAndSupplyAtSupportingFee(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        uint256 deadline\n    ) external override  c_mod48f732fc nonReentrant c_mod3f83332b   c_moda201648c ensure(deadline) c_moddd8ef8d9   c_mod106f9192 ensurePath(path) c_mod93e4e971  {c_c5a54d37(0x74761536054c4c78); /* function */ \n\nc_c5a54d37(0xba7b7fec7cfcde25); /* line */ \n        c_c5a54d37(0xd43a58b8e3e08984); /* statement */ \nuint256 balanceBefore = address(this).balance;\nc_c5a54d37(0xe980f67164e25565); /* line */ \n        c_c5a54d37(0x3c9b8ae2a0152e5b); /* statement */ \n_swapExactTokensForBNB(amountIn, amountOutMin, path, address(this), TypesOfTokens.SUPPORTING_FEE);\nc_c5a54d37(0x63bd411c5017e899); /* line */ \n        c_c5a54d37(0x2fb1a94b7e232551); /* statement */ \nuint256 balanceAfter = address(this).balance;\nc_c5a54d37(0xec639ae01856b9c3); /* line */ \n        c_c5a54d37(0xfc6445360029c566); /* statement */ \nuint256 swapAmount = balanceAfter - balanceBefore;\nc_c5a54d37(0x01f51b51f7b99246); /* line */ \n        c_c5a54d37(0xec7135ccee12049f); /* statement */ \nif (swapAmount < amountOutMin) {c_c5a54d37(0xeaf24a16238861be); /* branch */ \n\nc_c5a54d37(0x86ad226f32062d22); /* line */ \n            revert SwapAmountLessThanAmountOutMin(swapAmount, amountOutMin);\n        }else { c_c5a54d37(0x929207d94aaadf44); /* branch */ \n}\nc_c5a54d37(0x11cd515b1c6ed877); /* line */ \n        c_c5a54d37(0xecaedafb67451095); /* statement */ \n_mintVBNBandTransfer(swapAmount);\n    }\n\n    /**\n     * @notice Swap tokens for Exact BNB and supply to a Venus market\n     * @param amountOut The amount of the tokens needs to be as output token.\n     * @param amountInMax The maximum amount of input tokens that can be taken for the transaction not to revert.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @param deadline Unix timestamp after which the transaction will revert.\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\n     */\n    function swapTokensForExactBNBAndSupply(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        uint256 deadline\n    ) external override  c_mod19e93e65 nonReentrant c_modcb75fc9b   c_moda3cb91a8 ensure(deadline) c_mod0bc277b6   c_mod631957e0 ensurePath(path) c_moda7fdbdd1  {c_c5a54d37(0xb545ba5488f6790e); /* function */ \n\nc_c5a54d37(0x5fc4d9ad720c7afa); /* line */ \n        c_c5a54d37(0x448c67e13265c70b); /* statement */ \nuint256 balanceBefore = address(this).balance;\nc_c5a54d37(0x8332fee2a30025c8); /* line */ \n        c_c5a54d37(0x6daeb48406e18f3d); /* statement */ \n_swapTokensForExactBNB(amountOut, amountInMax, path, address(this));\nc_c5a54d37(0x1777aa66e1afa113); /* line */ \n        c_c5a54d37(0xccad5964de3d762b); /* statement */ \nuint256 balanceAfter = address(this).balance;\nc_c5a54d37(0xd7d1317cd7658989); /* line */ \n        c_c5a54d37(0x5984769f94937676); /* statement */ \nuint256 swapAmount = balanceAfter - balanceBefore;\nc_c5a54d37(0x60b1ae8b80569ff9); /* line */ \n        c_c5a54d37(0x49ebc0dd9cb8fc95); /* statement */ \n_mintVBNBandTransfer(swapAmount);\n    }\n\n    /**\n     * @notice Swap token A for token B and repay a borrow from a Venus market\n     * @param vTokenAddress The address of the vToken contract to repay.\n     * @param amountIn The amount of tokens to swap.\n     * @param amountOutMin Minimum amount of tokens to receive.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @param deadline Unix timestamp after which the transaction will revert.\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive (and repay)\n     */\n    function swapExactTokensForTokensAndRepay(\n        address vTokenAddress,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        uint256 deadline\n    ) external override  c_mod98bc0e3f nonReentrant c_modf90d0b03   c_mod8beb10d7 ensure(deadline) c_moddd0fbf96   c_mode24973f2 ensurePath(path) c_moda4a3f0df  {c_c5a54d37(0xfee7d139a4c91955); /* function */ \n\nc_c5a54d37(0x1bb9ad55cc0bd9c7); /* line */ \n        c_c5a54d37(0x068db141d248ac8f); /* statement */ \n_ensureVTokenChecks(vTokenAddress, path[path.length - 1]);\nc_c5a54d37(0x6d6a414d87408907); /* line */ \n        c_c5a54d37(0xdaf4989bc3668bd0); /* statement */ \naddress lastAsset = path[path.length - 1];\nc_c5a54d37(0x5ad46c5fad69df83); /* line */ \n        c_c5a54d37(0xed124d52fa75f772); /* statement */ \nuint256 balanceBefore = IERC20(lastAsset).balanceOf(address(this));\nc_c5a54d37(0xf12c71bc35b9d7e6); /* line */ \n        c_c5a54d37(0xc153713c34064979); /* statement */ \n_swapExactTokensForTokens(amountIn, amountOutMin, path, address(this), TypesOfTokens.NON_SUPPORTING_FEE);\nc_c5a54d37(0xa8d4674aaa8aee39); /* line */ \n        c_c5a54d37(0x9089553bb187f279); /* statement */ \nuint256 swapAmount = _getSwapAmount(lastAsset, balanceBefore);\nc_c5a54d37(0xbd42b848df494d61); /* line */ \n        c_c5a54d37(0x79ba23919e685c48); /* statement */ \n_repay(lastAsset, vTokenAddress, swapAmount);\n    }\n\n    /**\n     * @notice Swap deflationary token (a small amount of fee is deducted at the time of transfer of token) token A for token B and repay a borrow from a Venus market\n     * @param vTokenAddress The address of the vToken contract to repay.\n     * @param amountIn The amount of tokens to swap.\n     * @param amountOutMin Minimum amount of tokens to receive.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @param deadline Unix timestamp after which the transaction will revert.\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive (and repay)\n     */\n    function swapExactTokensForTokensAndRepayAtSupportingFee(\n        address vTokenAddress,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        uint256 deadline\n    ) external override  c_mod132693f9 nonReentrant c_modad15fb0c   c_mod28931a7a ensure(deadline) c_mod13333171   c_mod94be73fa ensurePath(path) c_mod6f3cf2f4  {c_c5a54d37(0x082998723cec6efc); /* function */ \n\nc_c5a54d37(0x92640604f08d3e69); /* line */ \n        c_c5a54d37(0x7c59b378a8b40a00); /* statement */ \n_ensureVTokenChecks(vTokenAddress, path[path.length - 1]);\nc_c5a54d37(0xdc8904e1aed420ae); /* line */ \n        c_c5a54d37(0x52c5314fd2289f16); /* statement */ \naddress lastAsset = path[path.length - 1];\nc_c5a54d37(0x23a0d83c6967e2f2); /* line */ \n        c_c5a54d37(0xe4f3f238cfecfb6b); /* statement */ \nuint256 balanceBefore = IERC20(lastAsset).balanceOf(address(this));\nc_c5a54d37(0x00cffc8201cc6625); /* line */ \n        c_c5a54d37(0xbc773f88dcd90cf6); /* statement */ \n_swapExactTokensForTokens(amountIn, amountOutMin, path, address(this), TypesOfTokens.SUPPORTING_FEE);\nc_c5a54d37(0x2e1e459f8519e021); /* line */ \n        c_c5a54d37(0xa710ed8e033a9611); /* statement */ \nuint256 swapAmount = _checkForAmountOut(lastAsset, balanceBefore, amountOutMin, address(this));\nc_c5a54d37(0x3b71b61d17c8ea8e); /* line */ \n        c_c5a54d37(0x2638ff806e27efed); /* statement */ \n_repay(lastAsset, vTokenAddress, swapAmount);\n    }\n\n    /**\n     * @notice Swap BNB for another token and repay a borrow from a Venus market\n     * @dev The amount to be swapped is obtained from the msg.value, since we are swapping BNB\n     * @param vTokenAddress The address of the vToken contract to repay.\n     * @param amountOutMin Minimum amount of tokens to receive.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @param deadline Unix timestamp after which the transaction will revert.\n     * @dev Addresses of underlying assets should be ordered so the swap path tokens are listed first and last asset is the token we receive\n     */\n    function swapExactBNBForTokensAndRepay(\n        address vTokenAddress,\n        uint256 amountOutMin,\n        address[] calldata path,\n        uint256 deadline\n    ) external payable override  c_mod83d7b687 nonReentrant c_mod54d672b7   c_modec90a31c ensure(deadline) c_moda6ad0fa0   c_modd24aa9bd ensurePath(path) c_mod3d493a54  {c_c5a54d37(0x666409eac2b01c5a); /* function */ \n\nc_c5a54d37(0x52964e82f8b01191); /* line */ \n        c_c5a54d37(0xb814f63765e9b712); /* statement */ \n_ensureVTokenChecks(vTokenAddress, path[path.length - 1]);\nc_c5a54d37(0x199cd4feb77396ca); /* line */ \n        c_c5a54d37(0xbaf06ca2c519e770); /* statement */ \naddress lastAsset = path[path.length - 1];\nc_c5a54d37(0x34e7a9fb42b094ae); /* line */ \n        c_c5a54d37(0x5a2f741811010157); /* statement */ \nuint256 balanceBefore = IERC20(lastAsset).balanceOf(address(this));\nc_c5a54d37(0x240cdd85685f67a4); /* line */ \n        c_c5a54d37(0x2dc193b468f66b35); /* statement */ \n_swapExactBNBForTokens(amountOutMin, path, address(this), TypesOfTokens.NON_SUPPORTING_FEE);\nc_c5a54d37(0xbb7041cdc3b8b965); /* line */ \n        c_c5a54d37(0xf1536b17a14eef49); /* statement */ \nuint256 swapAmount = _getSwapAmount(lastAsset, balanceBefore);\nc_c5a54d37(0x8590c44773423c1c); /* line */ \n        c_c5a54d37(0x7cd1c1c237449166); /* statement */ \n_repay(lastAsset, vTokenAddress, swapAmount);\n    }\n\n    /**\n     * @notice Swap BNB for another deflationary token (a small amount of fee is deducted at the time of transfer of token) and repay a borrow from a Venus market\n     * @dev The amount to be swapped is obtained from the msg.value, since we are swapping BNB\n     * @param vTokenAddress The address of the vToken contract to repay.\n     * @param amountOutMin Minimum amount of tokens to receive.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @param deadline Unix timestamp after which the transaction will revert.\n     * @dev Addresses of underlying assets should be ordered so the swap path tokens are listed first and last asset is the token we receive\n     */\n    function swapExactBNBForTokensAndRepayAtSupportingFee(\n        address vTokenAddress,\n        uint256 amountOutMin,\n        address[] calldata path,\n        uint256 deadline\n    ) external payable override  c_modf5335a8d nonReentrant c_modd6c85a70   c_mod71f47537 ensure(deadline) c_mod284702a9   c_mod0f74005c ensurePath(path) c_modbe06ad87  {c_c5a54d37(0x5527712246d869e5); /* function */ \n\nc_c5a54d37(0x94e44b1ea7e8c58f); /* line */ \n        c_c5a54d37(0x34b6cf1bb1c0167c); /* statement */ \n_ensureVTokenChecks(vTokenAddress, path[path.length - 1]);\nc_c5a54d37(0xcbd5d1e21746664a); /* line */ \n        c_c5a54d37(0x2927f124cc6e0d05); /* statement */ \naddress lastAsset = path[path.length - 1];\nc_c5a54d37(0x28fade91853585f0); /* line */ \n        c_c5a54d37(0x05b7aff70bbf7032); /* statement */ \nuint256 balanceBefore = IERC20(lastAsset).balanceOf(address(this));\nc_c5a54d37(0x407ca3e169e3de0a); /* line */ \n        c_c5a54d37(0xbb4dd672d36b3d72); /* statement */ \n_swapExactBNBForTokens(amountOutMin, path, address(this), TypesOfTokens.SUPPORTING_FEE);\nc_c5a54d37(0x17f7e58f26bb94b9); /* line */ \n        c_c5a54d37(0x6e723983f250faf2); /* statement */ \nuint256 swapAmount = _checkForAmountOut(lastAsset, balanceBefore, amountOutMin, address(this));\nc_c5a54d37(0x20c53fbc05f4d3fe); /* line */ \n        c_c5a54d37(0x1a73478143dbf829); /* statement */ \n_repay(lastAsset, vTokenAddress, swapAmount);\n    }\n\n    /**\n     * @notice Swap tokens for Exact tokens and repay to a Venus market\n     * @param vTokenAddress The address of the vToken contract for supplying assets.\n     * @param amountOut The amount of the tokens needs to be as output token.\n     * @param amountInMax The maximum amount of input tokens that can be taken for the transaction not to revert.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @param deadline Unix timestamp after which the transaction will revert.\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\n     */\n    function swapTokensForExactTokensAndRepay(\n        address vTokenAddress,\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        uint256 deadline\n    ) external override  c_modc3564949 nonReentrant c_modde541c65   c_mod97e41ecc ensure(deadline) c_mod92ce2b9c   c_mod935eda30 ensurePath(path) c_modae4eaf19  {c_c5a54d37(0x9cbb27dd8ed5a929); /* function */ \n\nc_c5a54d37(0x86cc8b586497f2b4); /* line */ \n        c_c5a54d37(0xea48adc4a3448074); /* statement */ \n_ensureVTokenChecks(vTokenAddress, path[path.length - 1]);\nc_c5a54d37(0xb8e398fd9145882f); /* line */ \n        c_c5a54d37(0x1ab76ee1226086cc); /* statement */ \naddress lastAsset = path[path.length - 1];\nc_c5a54d37(0xb7f4015fc775a0de); /* line */ \n        c_c5a54d37(0xa256b42e1a0bf8b2); /* statement */ \nuint256 balanceBefore = IERC20(lastAsset).balanceOf(address(this));\nc_c5a54d37(0xd5c740930193caab); /* line */ \n        c_c5a54d37(0x026904507ef189d2); /* statement */ \n_swapTokensForExactTokens(amountOut, amountInMax, path, address(this));\nc_c5a54d37(0x16023793cb178976); /* line */ \n        c_c5a54d37(0x28f5c4c53b0dbfd2); /* statement */ \nuint256 swapAmount = _getSwapAmount(lastAsset, balanceBefore);\nc_c5a54d37(0x3b9232cab2a5bd03); /* line */ \n        c_c5a54d37(0x44d8964ce3ab657a); /* statement */ \n_repay(lastAsset, vTokenAddress, swapAmount);\n    }\n\n    /**\n     * @notice Swap tokens for full tokens debt and repay to a Venus market\n     * @param vTokenAddress The address of the vToken contract for supplying assets.\n     * @param amountInMax The maximum amount of input tokens that can be taken for the transaction not to revert.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @param deadline Unix timestamp after which the transaction will revert.\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\n     */\n    function swapTokensForFullTokenDebtAndRepay(\n        address vTokenAddress,\n        uint256 amountInMax,\n        address[] calldata path,\n        uint256 deadline\n    ) external override  c_mod99a59674 nonReentrant c_mod0ee41aec   c_mod0d2487d4 ensure(deadline) c_mod6c9410dc   c_modc20bcfaf ensurePath(path) c_mod93291e1d  {c_c5a54d37(0xaeee98d76f002277); /* function */ \n\nc_c5a54d37(0x21a5ba456d9126a2); /* line */ \n        c_c5a54d37(0x799e2a0386b12be4); /* statement */ \n_ensureVTokenChecks(vTokenAddress, path[path.length - 1]);\nc_c5a54d37(0x6ac362794105d574); /* line */ \n        c_c5a54d37(0xc2d5e6743e82374b); /* statement */ \naddress lastAsset = path[path.length - 1];\nc_c5a54d37(0xcca945a4ff81855e); /* line */ \n        c_c5a54d37(0x623b2966af2a81c5); /* statement */ \nuint256 balanceBefore = IERC20(lastAsset).balanceOf(address(this));\nc_c5a54d37(0x123dc35af697aef9); /* line */ \n        c_c5a54d37(0x75c4b48a26c41728); /* statement */ \nuint256 amountOut = IVToken(vTokenAddress).borrowBalanceCurrent(msg.sender);\nc_c5a54d37(0x19aba550157b4e57); /* line */ \n        c_c5a54d37(0x7d448b8b0b65bf06); /* statement */ \n_swapTokensForExactTokens(amountOut, amountInMax, path, address(this));\nc_c5a54d37(0x14a0a42e10fad4cc); /* line */ \n        c_c5a54d37(0x9ba166fc28dae7d0); /* statement */ \nuint256 swapAmount = _getSwapAmount(lastAsset, balanceBefore);\nc_c5a54d37(0x3543712f0bf9c569); /* line */ \n        c_c5a54d37(0xf8bd118ea2bc306c); /* statement */ \n_repay(lastAsset, vTokenAddress, swapAmount);\n    }\n\n    /**\n     * @notice Swap BNB for Exact tokens and repay to a Venus market\n     * @param vTokenAddress The address of the vToken contract for supplying assets.\n     * @param amountOut The amount of the tokens needs to be as output token.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @param deadline Unix timestamp after which the transaction will revert.\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\n     */\n    function swapBNBForExactTokensAndRepay(\n        address vTokenAddress,\n        uint256 amountOut,\n        address[] calldata path,\n        uint256 deadline\n    ) external payable override  c_modb1ee01a7 nonReentrant c_mod73e88ae7   c_mod2199c84f ensure(deadline) c_mode37e7460   c_modd32ebf58 ensurePath(path) c_mod9af2de6c  {c_c5a54d37(0x34f54bf24bcb5ddc); /* function */ \n\nc_c5a54d37(0xa10bda64a5598cde); /* line */ \n        c_c5a54d37(0xb50df4d26e9f6317); /* statement */ \n_ensureVTokenChecks(vTokenAddress, path[path.length - 1]);\nc_c5a54d37(0x896834c35838530f); /* line */ \n        c_c5a54d37(0x59e8d19e3c5dbd81); /* statement */ \naddress lastAsset = path[path.length - 1];\nc_c5a54d37(0x05012df733fc6cf6); /* line */ \n        c_c5a54d37(0x21c51fc9925b7685); /* statement */ \nuint256 balanceBefore = IERC20(lastAsset).balanceOf(address(this));\nc_c5a54d37(0x141a9332af900771); /* line */ \n        c_c5a54d37(0x8e185ce0afa05de1); /* statement */ \n_swapBNBForExactTokens(amountOut, path, address(this));\nc_c5a54d37(0x2736cf7d76153a12); /* line */ \n        c_c5a54d37(0x5214677f7db63a61); /* statement */ \nuint256 swapAmount = _getSwapAmount(lastAsset, balanceBefore);\nc_c5a54d37(0x00f57500d106d084); /* line */ \n        c_c5a54d37(0x6a8792f024e79d83); /* statement */ \n_repay(lastAsset, vTokenAddress, swapAmount);\n    }\n\n    /**\n     * @notice Swap BNB for Exact tokens and repay to a Venus market\n     * @param vTokenAddress The address of the vToken contract for supplying assets.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @param deadline Unix timestamp after which the transaction will revert.\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\n     */\n    function swapBNBForFullTokenDebtAndRepay(\n        address vTokenAddress,\n        address[] calldata path,\n        uint256 deadline\n    ) external payable override  c_mod4d4e7fc2 nonReentrant c_modfedcd5d2   c_mod0386fb6a ensure(deadline) c_mod1fe3f2e3   c_modd1716686 ensurePath(path) c_modd00bb78b  {c_c5a54d37(0x71127809c3a57dc3); /* function */ \n\nc_c5a54d37(0x58713858e2d56910); /* line */ \n        c_c5a54d37(0x6b0c45839777f361); /* statement */ \n_ensureVTokenChecks(vTokenAddress, path[path.length - 1]);\nc_c5a54d37(0x249b766dec1d1b59); /* line */ \n        c_c5a54d37(0xb42e369953b71a83); /* statement */ \naddress lastAsset = path[path.length - 1];\nc_c5a54d37(0x1e4c6832c8122670); /* line */ \n        c_c5a54d37(0x35cb78fc33604283); /* statement */ \nuint256 balanceBefore = IERC20(lastAsset).balanceOf(address(this));\nc_c5a54d37(0x633c758efc087b65); /* line */ \n        c_c5a54d37(0x9505227ecad51054); /* statement */ \nuint256 amountOut = IVToken(vTokenAddress).borrowBalanceCurrent(msg.sender);\nc_c5a54d37(0x59f6476928755bc1); /* line */ \n        c_c5a54d37(0x89a518033591bf54); /* statement */ \n_swapBNBForExactTokens(amountOut, path, address(this));\nc_c5a54d37(0x173f7ae84448ff19); /* line */ \n        c_c5a54d37(0xa80f1b1da07a2d7f); /* statement */ \nuint256 swapAmount = _getSwapAmount(lastAsset, balanceBefore);\nc_c5a54d37(0x710a4da6f39d19a5); /* line */ \n        c_c5a54d37(0x2346cce246a2c181); /* statement */ \n_repay(lastAsset, vTokenAddress, swapAmount);\n    }\n\n    /**\n     * @notice Swap Exact tokens for BNB and repay to a Venus market\n     * @param amountIn The amount of tokens to swap.\n     * @param amountOutMin Minimum amount of tokens to receive.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @param deadline Unix timestamp after which the transaction will revert.\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\n     */\n    function swapExactTokensForBNBAndRepay(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        uint256 deadline\n    ) external override  c_modf71c9d93 nonReentrant c_mod2c2c8cf2   c_mod01c4d1ed ensure(deadline) c_mode330644d   c_mod3ad844d5 ensurePath(path) c_mod228aab44  {c_c5a54d37(0x9ae85773b1be4679); /* function */ \n\nc_c5a54d37(0x0dae9ebc9554c014); /* line */ \n        c_c5a54d37(0x3831c4edd3f7e82b); /* statement */ \nuint256 balanceBefore = address(this).balance;\nc_c5a54d37(0x8a459bf81f09a1b2); /* line */ \n        c_c5a54d37(0x1a89307f03bdad82); /* statement */ \n_swapExactTokensForBNB(amountIn, amountOutMin, path, address(this), TypesOfTokens.NON_SUPPORTING_FEE);\nc_c5a54d37(0xcc4f242ad3ec3123); /* line */ \n        c_c5a54d37(0x461afe67008dbb52); /* statement */ \nuint256 balanceAfter = address(this).balance;\nc_c5a54d37(0x4b9cb3a74851ea50); /* line */ \n        c_c5a54d37(0xe687a47d4229b316); /* statement */ \nuint256 swapAmount = balanceAfter - balanceBefore;\nc_c5a54d37(0x9cfc13616f11d710); /* line */ \n        c_c5a54d37(0xae431576280a4b02); /* statement */ \nIVBNB(vBNBAddress).repayBorrowBehalf{ value: swapAmount }(msg.sender);\n    }\n\n    /**\n     * @notice Swap Exact deflationary tokens (a small amount of fee is deducted at the time of transfer of tokens) for BNB and repay to a Venus market\n     * @param amountIn The amount of tokens to swap.\n     * @param amountOutMin Minimum amount of tokens to receive.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @param deadline Unix timestamp after which the transaction will revert.\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\n     */\n    function swapExactTokensForBNBAndRepayAtSupportingFee(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        uint256 deadline\n    ) external override  c_mod391079db nonReentrant c_modada779ab   c_mod7512d0e1 ensure(deadline) c_mod42323427   c_moda5dbb458 ensurePath(path) c_mod66e56d96  {c_c5a54d37(0x0a498b3740a1cc72); /* function */ \n\nc_c5a54d37(0xa1b2dae5b7d9b37e); /* line */ \n        c_c5a54d37(0xeb355c28dd250366); /* statement */ \nuint256 balanceBefore = address(this).balance;\nc_c5a54d37(0xbc4ea7814fce270c); /* line */ \n        c_c5a54d37(0x310f8fb8f9ec267b); /* statement */ \n_swapExactTokensForBNB(amountIn, amountOutMin, path, address(this), TypesOfTokens.SUPPORTING_FEE);\nc_c5a54d37(0x9603e14989bf8d15); /* line */ \n        c_c5a54d37(0xb2cef6c891273eee); /* statement */ \nuint256 balanceAfter = address(this).balance;\nc_c5a54d37(0xb62c041859025697); /* line */ \n        c_c5a54d37(0x7d869a439c2dd552); /* statement */ \nuint256 swapAmount = balanceAfter - balanceBefore;\nc_c5a54d37(0xec36cf4a8d9b9f5f); /* line */ \n        c_c5a54d37(0x1f3646092232b1c5); /* statement */ \nif (swapAmount < amountOutMin) {c_c5a54d37(0x97985f62383cf332); /* branch */ \n\nc_c5a54d37(0x7181d3a026bd832d); /* line */ \n            revert SwapAmountLessThanAmountOutMin(swapAmount, amountOutMin);\n        }else { c_c5a54d37(0xa9f1e2a7bb7610fa); /* branch */ \n}\nc_c5a54d37(0xe0d12d63cdee88b5); /* line */ \n        c_c5a54d37(0xc84c155e8e785b3d); /* statement */ \nIVBNB(vBNBAddress).repayBorrowBehalf{ value: swapAmount }(msg.sender);\n    }\n\n    /**\n     * @notice Swap tokens for Exact BNB and repay to a Venus market\n     * @param amountOut The amount of the tokens needs to be as output token.\n     * @param amountInMax The maximum amount of input tokens that can be taken for the transaction not to revert.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @param deadline Unix timestamp after which the transaction will revert.\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\n     */\n    function swapTokensForExactBNBAndRepay(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        uint256 deadline\n    ) external override  c_mod2b446bfe nonReentrant c_mod64fa8828   c_mod3d2cbac5 ensure(deadline) c_mod064db32e   c_mode7e4a925 ensurePath(path) c_mod7ef2595e  {c_c5a54d37(0xe3fd9215cffd98d0); /* function */ \n\nc_c5a54d37(0x09e0ac32e2e49d2c); /* line */ \n        c_c5a54d37(0xf3c6de3518bb7b1e); /* statement */ \nuint256 balanceBefore = address(this).balance;\nc_c5a54d37(0x8a17853595258b90); /* line */ \n        c_c5a54d37(0x6240b992cb227c64); /* statement */ \n_swapTokensForExactBNB(amountOut, amountInMax, path, address(this));\nc_c5a54d37(0x94d3ba9027a0c9a6); /* line */ \n        c_c5a54d37(0x1ff884da77a3a50d); /* statement */ \nuint256 balanceAfter = address(this).balance;\nc_c5a54d37(0x335fa00ed80ed2e5); /* line */ \n        c_c5a54d37(0x3280bc0573878b3b); /* statement */ \nuint256 swapAmount = balanceAfter - balanceBefore;\nc_c5a54d37(0xc1f87e2f269be36e); /* line */ \n        c_c5a54d37(0xd48c40027d711834); /* statement */ \nIVBNB(vBNBAddress).repayBorrowBehalf{ value: swapAmount }(msg.sender);\n    }\n\n    /**\n     * @notice Swap tokens for Exact BNB and repay to a Venus market\n     * @param amountInMax The maximum amount of input tokens that can be taken for the transaction not to revert.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @param deadline Unix timestamp after which the transaction will revert.\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\n     */\n    function swapTokensForFullBNBDebtAndRepay(\n        uint256 amountInMax,\n        address[] calldata path,\n        uint256 deadline\n    ) external override  c_mod0ed37ad3 nonReentrant c_mod1af50a10   c_mod1e2e836a ensure(deadline) c_mod77461350   c_mode68108b3 ensurePath(path) c_modc15b2a3c  {c_c5a54d37(0x688a09b599b62d24); /* function */ \n\nc_c5a54d37(0xf40ac080ab62446d); /* line */ \n        c_c5a54d37(0xf31a4cb5ae8e7098); /* statement */ \nuint256 balanceBefore = address(this).balance;\nc_c5a54d37(0xdbc902c6cd15d8fc); /* line */ \n        c_c5a54d37(0xf2cd47bc5f9948c6); /* statement */ \nuint256 amountOut = IVToken(vBNBAddress).borrowBalanceCurrent(msg.sender);\nc_c5a54d37(0x330a61986362a8f3); /* line */ \n        c_c5a54d37(0x59052064a0b6757c); /* statement */ \n_swapTokensForExactBNB(amountOut, amountInMax, path, address(this));\nc_c5a54d37(0xaa748dea1d40a742); /* line */ \n        c_c5a54d37(0x44c11f2542773635); /* statement */ \nuint256 balanceAfter = address(this).balance;\nc_c5a54d37(0x4dd80d595c9dbcd8); /* line */ \n        c_c5a54d37(0x33ef88a408ad92f4); /* statement */ \nuint256 swapAmount = balanceAfter - balanceBefore;\nc_c5a54d37(0x5bcb151303ce14c3); /* line */ \n        c_c5a54d37(0xde73866a8159046e); /* statement */ \nIVBNB(vBNBAddress).repayBorrowBehalf{ value: swapAmount }(msg.sender);\n    }\n\n    /**\n     * @notice Swaps an exact amount of input tokens for as many output tokens as possible,\n     *         along the route determined by the path. The first element of path is the input token,\n     *         the last is the output token, and any intermediate elements represent intermediate\n     *         pairs to trade through (if, for example, a direct pair does not exist).\n     * @dev msg.sender should have already given the router an allowance of at least amountIn on the input token.\n     * @param amountIn The address of the vToken contract to repay.\n     * @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @param to Recipient of the output tokens.\n     * @param deadline Unix timestamp after which the transaction will revert.\n     */\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external virtual override  c_modbd6d2b63 nonReentrant c_mod249018c3   c_mod34d17f75 ensure(deadline) c_modbf9dcaba   c_mod2a04052b ensurePath(path) c_modc072daa9  returns (uint256[] memory amounts) {c_c5a54d37(0x1ed376a314d3ca4c); /* function */ \n\nc_c5a54d37(0x147f05f30021c34f); /* line */ \n        amounts = _swapExactTokensForTokens(amountIn, amountOutMin, path, to, TypesOfTokens.NON_SUPPORTING_FEE);\n    }\n\n    /**\n     * @notice Swaps an exact amount of input tokens for as many output tokens as possible,\n     *         along the route determined by the path. The first element of path is the input token,\n     *         the last is the output token, and any intermediate elements represent intermediate\n     *         pairs to trade through (if, for example, a direct pair does not exist).\n     *         This method to swap deflationary tokens which would require supporting fee.\n     * @dev msg.sender should have already given the router an allowance of at least amountIn on the input token.\n     * @param amountIn The address of the vToken contract to repay.\n     * @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @param to Recipient of the output tokens.\n     * @param deadline Unix timestamp after which the transaction will revert.\n     */\n    function swapExactTokensForTokensAtSupportingFee(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external virtual override  c_mod13bb3042 nonReentrant c_modb055ec50   c_mod3923c647 ensure(deadline) c_modbd96b736   c_mod0c6b5293 ensurePath(path) c_modc2cd93b7  returns (uint256 swapAmount) {c_c5a54d37(0x70f9c36e68dadfaa); /* function */ \n\nc_c5a54d37(0xfd93552a6871da1d); /* line */ \n        c_c5a54d37(0xc2d3d1c8c340c61c); /* statement */ \naddress lastAsset = path[path.length - 1];\nc_c5a54d37(0x073c0ee15094b7ac); /* line */ \n        c_c5a54d37(0x5d421d4d4e4bfcb6); /* statement */ \nuint256 balanceBefore = IERC20(lastAsset).balanceOf(to);\nc_c5a54d37(0xb7f46a46635c900c); /* line */ \n        c_c5a54d37(0x451e1c1c90162fe7); /* statement */ \n_swapExactTokensForTokens(amountIn, amountOutMin, path, to, TypesOfTokens.SUPPORTING_FEE);\nc_c5a54d37(0x5cf533628452f873); /* line */ \n        swapAmount = _checkForAmountOut(lastAsset, balanceBefore, amountOutMin, to);\n    }\n\n    /**\n     * @notice Swaps an exact amount of BNB for as many output tokens as possible,\n     *         along the route determined by the path. The first element of path must be WBNB,\n     *         the last is the output token, and any intermediate elements represent\n     *         intermediate pairs to trade through (if, for example, a direct pair does not exist).\n     * @dev amountIn is passed through the msg.value of the transaction\n     * @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @param to Recipient of the output tokens.\n     * @param deadline Unix timestamp after which the transaction will revert.\n     */\n    function swapExactBNBForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        virtual\n        override\n         c_mod63b167de nonReentrant c_mod9beb7edd \n         c_mod64c9f2e2 ensure(deadline) c_modc2bf5bbc \n         c_modea565178 ensurePath(path) c_mod156f0ca5 \n        returns (uint256[] memory amounts)\n    {c_c5a54d37(0x3987689107b3b7a0); /* function */ \n\nc_c5a54d37(0x8054b50194093fd3); /* line */ \n        amounts = _swapExactBNBForTokens(amountOutMin, path, to, TypesOfTokens.NON_SUPPORTING_FEE);\n    }\n\n    /**\n     * @notice Swaps an exact amount of ETH for as many output tokens as possible,\n     *         along the route determined by the path. The first element of path must be WBNB,\n     *         the last is the output token, and any intermediate elements represent\n     *         intermediate pairs to trade through (if, for example, a direct pair does not exist).\n     *         This method to swap deflationary tokens which would require supporting fee.\n     * @dev amountIn is passed through the msg.value of the transaction\n     * @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @param to Recipient of the output tokens.\n     * @param deadline Unix timestamp after which the transaction will revert.\n     */\n    function swapExactBNBForTokensAtSupportingFee(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable virtual override  c_mod1f660b02 nonReentrant c_modb969951a   c_mod246ac99a ensure(deadline) c_mod2f2d1188   c_modec579bb3 ensurePath(path) c_modd271f11e  returns (uint256 swapAmount) {c_c5a54d37(0xdcde86d8ab160e74); /* function */ \n\nc_c5a54d37(0x09e13dc31635c460); /* line */ \n        c_c5a54d37(0xaacf4c6581cbed23); /* statement */ \naddress lastAsset = path[path.length - 1];\nc_c5a54d37(0x83d2cb4143dc63d6); /* line */ \n        c_c5a54d37(0x1e1b1586ea7a090e); /* statement */ \nuint256 balanceBefore = IERC20(lastAsset).balanceOf(to);\nc_c5a54d37(0x610a28b3e03e2a8a); /* line */ \n        c_c5a54d37(0x000206c048fd4b19); /* statement */ \n_swapExactBNBForTokens(amountOutMin, path, to, TypesOfTokens.SUPPORTING_FEE);\nc_c5a54d37(0x11c6133096646653); /* line */ \n        swapAmount = _checkForAmountOut(lastAsset, balanceBefore, amountOutMin, to);\n    }\n\n    /**\n     * @notice Swaps an exact amount of input tokens for as many output ETH as possible,\n     *         along the route determined by the path. The first element of path is the input token,\n     *         the last is the output ETH, and any intermediate elements represent intermediate\n     *         pairs to trade through (if, for example, a direct pair does not exist).\n     * @dev msg.sender should have already given the router an allowance of at least amountIn on the input token.\n     * @param amountIn The address of the vToken contract to repay.\n     * @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @param to Recipient of the output tokens.\n     * @param deadline Unix timestamp after which the transaction will revert.\n     */\n    function swapExactTokensForBNB(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external override  c_mod35df9633 nonReentrant c_moddba5d06a   c_mod9a6b2507 ensure(deadline) c_mod2a104e5f   c_mod466f88c0 ensurePath(path) c_mode9b4ce39  returns (uint256[] memory amounts) {c_c5a54d37(0x1f328410efcd7273); /* function */ \n\nc_c5a54d37(0x1dd9250e1a659524); /* line */ \n        amounts = _swapExactTokensForBNB(amountIn, amountOutMin, path, to, TypesOfTokens.NON_SUPPORTING_FEE);\n    }\n\n    /**\n     * @notice Swaps an exact amount of input tokens for as many output ETH as possible,\n     *         along the route determined by the path. The first element of path is the input token,\n     *         the last is the output ETH, and any intermediate elements represent intermediate\n     *         pairs to trade through (if, for example, a direct pair does not exist).\n     *         This method to swap deflationary tokens which would require supporting fee.\n     * @dev msg.sender should have already given the router an allowance of at least amountIn on the input token.\n     * @param amountIn The address of the vToken contract to repay.\n     * @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @param to Recipient of the output tokens.\n     * @param deadline Unix timestamp after which the transaction will revert.\n     */\n    function swapExactTokensForBNBAtSupportingFee(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external override  c_mod4631aa39 nonReentrant c_mod88c28b75   c_mod2afa89bc ensure(deadline) c_moda53e0b48   c_moda8ebcbee ensurePath(path) c_mod17085fef  returns (uint256 swapAmount) {c_c5a54d37(0xd86941c5f6291ebf); /* function */ \n\nc_c5a54d37(0xa2307d9f27b570d8); /* line */ \n        c_c5a54d37(0xfcbea1aea46b5d22); /* statement */ \nuint256 balanceBefore = to.balance;\nc_c5a54d37(0xd336d1d25a489b90); /* line */ \n        c_c5a54d37(0x1af45ae862876933); /* statement */ \n_swapExactTokensForBNB(amountIn, amountOutMin, path, to, TypesOfTokens.SUPPORTING_FEE);\nc_c5a54d37(0xd62a7304937477d2); /* line */ \n        c_c5a54d37(0x6290b57da161f3da); /* statement */ \nuint256 balanceAfter = to.balance;\nc_c5a54d37(0x769819875a3553fd); /* line */ \n        swapAmount = balanceAfter - balanceBefore;\nc_c5a54d37(0x2671029d36b197e2); /* line */ \n        c_c5a54d37(0x04786a958b0c32e5); /* statement */ \nif (swapAmount < amountOutMin) {c_c5a54d37(0x20a5b1dc26dfe721); /* branch */ \n\nc_c5a54d37(0xda25e9cc498815ea); /* line */ \n            revert SwapAmountLessThanAmountOutMin(swapAmount, amountOutMin);\n        }else { c_c5a54d37(0x2fdcc287955dcd1e); /* branch */ \n}\n    }\n\n    /**\n     * @notice Swaps an as many amount of input tokens for as exact amount of tokens as output,\n     *         along the route determined by the path. The first element of path is the input token,\n     *         the last is the output token, and any intermediate elements represent intermediate\n     *         pairs to trade through (if, for example, a direct pair does not exist).\n     * @dev msg.sender should have already given the router an allowance of at least amountIn on the input token.\n     * @param amountOut The amount of the tokens needs to be as output token.\n     * @param amountInMax The maximum amount of input tokens that can be taken for the transaction not to revert.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @param to Recipient of the output tokens.\n     * @param deadline Unix timestamp after which the transaction will revert.\n     **/\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external virtual override  c_mod3f78b5ef nonReentrant c_mod976d1aad   c_mod03987159 ensure(deadline) c_mode14820aa   c_modfa973ce3 ensurePath(path) c_mode10171bc  returns (uint256[] memory amounts) {c_c5a54d37(0xe03bb35016317c86); /* function */ \n\nc_c5a54d37(0x02ceea0f0222f3d5); /* line */ \n        amounts = _swapTokensForExactTokens(amountOut, amountInMax, path, to);\n    }\n\n    /**\n     * @notice Swaps an as ETH as input tokens for as exact amount of tokens as output,\n     *         along the route determined by the path. The first element of path is the input WBNB,\n     *         the last is the output as token, and any intermediate elements represent intermediate\n     *         pairs to trade through (if, for example, a direct pair does not exist).\n     * @dev msg.sender should have already given the router an allowance of at least amountIn on the input token.\n     * @param amountOut The amount of the tokens needs to be as output token.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @param to Recipient of the output tokens.\n     * @param deadline Unix timestamp after which the transaction will revert.\n     **/\n    function swapBNBForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        virtual\n        override\n         c_modc8f7744b nonReentrant c_mod4412363f \n         c_moda9c9eab5 ensure(deadline) c_mod821d0438 \n         c_modb9de9f76 ensurePath(path) c_modc2f2a9a7 \n        returns (uint256[] memory amounts)\n    {c_c5a54d37(0x6dfe621bdfbfbcf6); /* function */ \n\nc_c5a54d37(0xbd9f7e301ccf8199); /* line */ \n        amounts = _swapBNBForExactTokens(amountOut, path, to);\n    }\n\n    /**\n     * @notice Swaps an as many amount of input tokens for as exact amount of ETH as output,\n     *         along the route determined by the path. The first element of path is the input token,\n     *         the last is the output as ETH, and any intermediate elements represent intermediate\n     *         pairs to trade through (if, for example, a direct pair does not exist).\n     * @dev msg.sender should have already given the router an allowance of at least amountIn on the input token.\n     * @param amountOut The amount of the tokens needs to be as output token.\n     * @param amountInMax The maximum amount of input tokens that can be taken for the transaction not to revert.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @param to Recipient of the output tokens.\n     * @param deadline Unix timestamp after which the transaction will revert.\n     **/\n    function swapTokensForExactBNB(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external virtual override  c_moda2748d08 nonReentrant c_modfc625f2d   c_modb861a40f ensure(deadline) c_mod088777cf   c_modd5fcba90 ensurePath(path) c_modda8ea255  returns (uint256[] memory amounts) {c_c5a54d37(0x499a3791f68971c4); /* function */ \n\nc_c5a54d37(0x073e8246590eefd4); /* line */ \n        amounts = _swapTokensForExactBNB(amountOut, amountInMax, path, to);\n    }\n\n    /**\n     * @notice A public function to sweep accidental BEP-20 transfers to this contract. Tokens are sent to the address `to`, provided in input\n     * @param token The address of the ERC-20 token to sweep\n     * @param to Recipient of the output tokens.\n     * @param sweepAmount The ampunt of the tokens to sweep\n     * @custom:access Only Governance\n     */\n    function sweepToken(IERC20 token, address to, uint256 sweepAmount) external  c_mod3baebceb onlyOwner c_mod69bad212   c_mod8804fbc0 nonReentrant c_modd3f81622  {c_c5a54d37(0x101cee1df34854c5); /* function */ \n\nc_c5a54d37(0xe1045b0c4cd3a8ad); /* line */ \n        c_c5a54d37(0x4fe6432766f82772); /* statement */ \nif (to == address(0)) {c_c5a54d37(0xbc3ea4514d487714); /* branch */ \n\nc_c5a54d37(0xed4d6201c104a08d); /* line */ \n            revert ZeroAddress();\n        }else { c_c5a54d37(0xc8dea92cece3309a); /* branch */ \n}\nc_c5a54d37(0x0a456e90c46b4bc8); /* line */ \n        c_c5a54d37(0x3794a1e0d7896491); /* statement */ \nuint256 balance = token.balanceOf(address(this));\nc_c5a54d37(0x856d356e8c136d7e); /* line */ \n        c_c5a54d37(0x220894936ae4fb53); /* statement */ \nif (sweepAmount > balance) {c_c5a54d37(0xc40ca1bee2c4fda1); /* branch */ \n\nc_c5a54d37(0xeb30583d3cace7ad); /* line */ \n            revert InsufficientBalance(sweepAmount, balance);\n        }else { c_c5a54d37(0xd5c15507aa61e381); /* branch */ \n}\nc_c5a54d37(0x5b22f6cc7a941d9b); /* line */ \n        c_c5a54d37(0xf7ee2298170aa8c9); /* statement */ \ntoken.safeTransfer(to, sweepAmount);\n\nc_c5a54d37(0x8df8d58cd480f01d); /* line */ \n        c_c5a54d37(0x0ee66f1b1d8d0e17); /* statement */ \nemit SweepToken(address(token), to, sweepAmount);\n    }\n\n    /**\n     * @notice Supply token to a Venus market\n     * @param path The addresses of the underlying token\n     * @param vTokenAddress The address of the vToken contract for supplying assets.\n     * @param swapAmount The amount of tokens supply to Venus Market.\n     */\n    function _supply(address path, address vTokenAddress, uint256 swapAmount) internal {c_c5a54d37(0x9d9e9d5f695d378f); /* function */ \n\nc_c5a54d37(0xaff5ab89ffa37fd5); /* line */ \n        c_c5a54d37(0x8e716a05ef861ead); /* statement */ \nTransferHelper.safeApprove(path, vTokenAddress, 0);\nc_c5a54d37(0x032d00f1100807c5); /* line */ \n        c_c5a54d37(0x9f4b753c0ba68d72); /* statement */ \nTransferHelper.safeApprove(path, vTokenAddress, swapAmount);\nc_c5a54d37(0xf4035bc173397830); /* line */ \n        c_c5a54d37(0xd446625e7547df84); /* statement */ \nuint256 response = IVToken(vTokenAddress).mintBehalf(msg.sender, swapAmount);\nc_c5a54d37(0x5addbfee1fe11cf5); /* line */ \n        c_c5a54d37(0x3860a469546188b3); /* statement */ \nif (response != 0) {c_c5a54d37(0xee4d3dec3f11fe77); /* branch */ \n\nc_c5a54d37(0x64f40645a872f3a3); /* line */ \n            revert SupplyError(msg.sender, vTokenAddress, response);\n        }else { c_c5a54d37(0xebcaff94bec7908b); /* branch */ \n}\n    }\n\n    /**\n     * @notice Repay a borrow from Venus market\n     * @param path The addresses of the underlying token\n     * @param vTokenAddress The address of the vToken contract for supplying assets.\n     * @param swapAmount The amount of tokens repay to Venus Market.\n     */\n    function _repay(address path, address vTokenAddress, uint256 swapAmount) internal {c_c5a54d37(0xcf71e5530c32b4f3); /* function */ \n\nc_c5a54d37(0x7f4e0e02b8c919bb); /* line */ \n        c_c5a54d37(0xab33afae09e9d2fb); /* statement */ \nTransferHelper.safeApprove(path, vTokenAddress, 0);\nc_c5a54d37(0x17cb7497b49eef78); /* line */ \n        c_c5a54d37(0xa300e32a3d097b8b); /* statement */ \nTransferHelper.safeApprove(path, vTokenAddress, swapAmount);\nc_c5a54d37(0x29fcdf9c07782aef); /* line */ \n        c_c5a54d37(0xd9ad8d0e6ff82376); /* statement */ \nuint256 response = IVToken(vTokenAddress).repayBorrowBehalf(msg.sender, swapAmount);\nc_c5a54d37(0x83cd03f3f4c417b8); /* line */ \n        c_c5a54d37(0x4f64ab00c65abb05); /* statement */ \nif (response != 0) {c_c5a54d37(0xe95135c2d564656f); /* branch */ \n\nc_c5a54d37(0xeff32a95feefbdc8); /* line */ \n            revert RepayError(msg.sender, vTokenAddress, response);\n        }else { c_c5a54d37(0xbf4e1085c67197e0); /* branch */ \n}\n    }\n\n    /**\n     * @notice Check if the balance of to minus the balanceBefore is greater or equal to the amountOutMin.\n     * @param asset The address of the underlying token\n     * @param balanceBefore Balance before the swap.\n     * @param amountOutMin Min amount out threshold.\n     * @param to Recipient of the output tokens.\n     */\n    function _checkForAmountOut(\n        address asset,\n        uint256 balanceBefore,\n        uint256 amountOutMin,\n        address to\n    ) internal view returns (uint256 swapAmount) {c_c5a54d37(0xd109a72f25edd89a); /* function */ \n\nc_c5a54d37(0x89bfacb0c5d43712); /* line */ \n        c_c5a54d37(0xefd3124cea81b515); /* statement */ \nuint256 balanceAfter = IERC20(asset).balanceOf(to);\nc_c5a54d37(0xa4fec453515d891c); /* line */ \n        swapAmount = balanceAfter - balanceBefore;\nc_c5a54d37(0xd56980f963c6fd67); /* line */ \n        c_c5a54d37(0x83c744ca1093035c); /* statement */ \nif (swapAmount < amountOutMin) {c_c5a54d37(0xbe66252b1c84150d); /* branch */ \n\nc_c5a54d37(0x1d00f385d19a22cf); /* line */ \n            revert SwapAmountLessThanAmountOutMin(swapAmount, amountOutMin);\n        }else { c_c5a54d37(0x546565f4a800562d); /* branch */ \n}\n    }\n\n    /**\n     * @notice Returns the difference between the balance of this and the balanceBefore\n     * @param asset The address of the underlying token\n     * @param balanceBefore Balance before the swap.\n     */\n    function _getSwapAmount(address asset, uint256 balanceBefore) internal view returns (uint256 swapAmount) {c_c5a54d37(0x45c95663718c7e6b); /* function */ \n\nc_c5a54d37(0x4561146796541f15); /* line */ \n        c_c5a54d37(0xd015baa58bf9fda9); /* statement */ \nuint256 balanceAfter = IERC20(asset).balanceOf(address(this));\nc_c5a54d37(0x566c1d794ea20983); /* line */ \n        swapAmount = balanceAfter - balanceBefore;\n    }\n\n    /**\n     * @notice Check isVTokenListed and last address in the path should be vToken underlying.\n     * @param vTokenAddress Address of the vToken.\n     * @param underlying Address of the underlying asset.\n     */\n    function _ensureVTokenChecks(address vTokenAddress, address underlying) internal {c_c5a54d37(0x38d31b6f1d461ce0); /* function */ \n\nc_c5a54d37(0x87fe02789e892eea); /* line */ \n        c_c5a54d37(0xfe1d8e758a69d41c); /* statement */ \n_isVTokenListed(vTokenAddress);\nc_c5a54d37(0x54fa8cb6fed9d9fe); /* line */ \n        c_c5a54d37(0xb00e98e050b47de6); /* statement */ \nif (IVToken(vTokenAddress).underlying() != underlying) {c_c5a54d37(0xa10862c4261d1e93); /* branch */ \n\nc_c5a54d37(0xec5f0a6dbd17c45f); /* line */ \n            revert VTokenUnderlyingInvalid(underlying);\n        }else { c_c5a54d37(0x9842b34e00924c6b); /* branch */ \n}\n    }\n\n    /**\n     * @notice Check is vToken listed in the pool.\n     * @param vToken Address of the vToken.\n     */\n    function _isVTokenListed(address vToken) internal view {c_c5a54d37(0x811d90ff2facd3c9); /* function */ \n\nc_c5a54d37(0x79d0234b4e414324); /* line */ \n        c_c5a54d37(0xf4cc844eb633ac39); /* statement */ \nbool isListed = InterfaceComptroller(comptrollerAddress).markets(vToken);\nc_c5a54d37(0x7bcc828adba61acf); /* line */ \n        c_c5a54d37(0x9b0705eff1c7e703); /* statement */ \nif (!isListed) {c_c5a54d37(0xe49983b3f3b91c0b); /* branch */ \n\nc_c5a54d37(0x1c89c5507557fd10); /* line */ \n            revert VTokenNotListed(vToken);\n        }else { c_c5a54d37(0x934eefde5cf32a67); /* branch */ \n}\n    }\n\n    /**\n     * @notice Mint vBNB tokens to the market then transfer them to user\n     * @param swapAmount Swapped BNB amount\n     */\n    function _mintVBNBandTransfer(uint256 swapAmount) internal {c_c5a54d37(0xeeeaf1255c992070); /* function */ \n\nc_c5a54d37(0x4bc376a6c3b49795); /* line */ \n        c_c5a54d37(0x1d102fbd94ed1971); /* statement */ \nuint256 vBNBBalanceBefore = IVBNB(vBNBAddress).balanceOf(address(this));\nc_c5a54d37(0xf4aa4c4b62d5b398); /* line */ \n        c_c5a54d37(0x9e960678e8b5bc36); /* statement */ \nIVBNB(vBNBAddress).mint{ value: swapAmount }();\nc_c5a54d37(0xf61fa3aad4111293); /* line */ \n        c_c5a54d37(0x317407a8f236864f); /* statement */ \nuint256 vBNBBalanceAfter = IVBNB(vBNBAddress).balanceOf(address(this));\nc_c5a54d37(0xf25b84a15be272cd); /* line */ \n        c_c5a54d37(0x95589e14b14d0469); /* statement */ \nIERC20(vBNBAddress).safeTransfer(msg.sender, (vBNBBalanceAfter - vBNBBalanceBefore));\n    }\n}\n"
    },
    "contracts/test/AccessControlManagerMock.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity 0.8.25;\n\ncontract AccessControlManagerMock {\n    address public owner;\n\n    constructor(address _owner) {\n        owner = _owner;\n    }\n\n    function isAllowedToCall(address account, string calldata functionSig) public view returns (bool) {\n        if (account == owner) {\n            return true;\n        }\n\n        functionSig;\n\n        return false;\n    }\n}\n"
    },
    "contracts/test/LiquidatorHarness.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity 0.8.25;\n\nimport \"../Liquidator/Liquidator.sol\";\nimport \"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\";\n\ncontract LiquidatorHarness is Liquidator {\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(address comptroller_, address payable vBnb_, address wBnb_) Liquidator(comptroller_, vBnb_, wBnb_) {}\n\n    function initialize(\n        uint256 liquidationIncentiveMantissa_,\n        address accessControlManager_,\n        address protocolShareReserve_\n    ) external override initializer {\n        __Liquidator_init(liquidationIncentiveMantissa_, accessControlManager_, protocolShareReserve_);\n    }\n\n    event DistributeLiquidationIncentive(uint256 seizeTokensForTreasury, uint256 seizeTokensForLiquidator);\n\n    /// @dev Splits the received vTokens between the liquidator and treasury.\n    function distributeLiquidationIncentive(\n        IVToken vTokenCollateral,\n        uint256 siezedAmount\n    ) public returns (uint256 ours, uint256 theirs) {\n        (ours, theirs) = super._distributeLiquidationIncentive(vTokenCollateral, siezedAmount);\n        emit DistributeLiquidationIncentive(ours, theirs);\n        return (ours, theirs);\n    }\n\n    /// @dev Computes the amounts that would go to treasury and to the liquidator.\n    function splitLiquidationIncentive(uint256 seizedAmount) public view returns (uint256 ours, uint256 theirs) {\n        return super._splitLiquidationIncentive(seizedAmount);\n    }\n}\n"
    },
    "contracts/test/MockProtocolShareReserve.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity 0.8.25;\n\nimport { SafeERC20Upgradeable, IERC20Upgradeable } from \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport { AccessControlledV8 } from \"@venusprotocol/governance-contracts/contracts/Governance/AccessControlledV8.sol\";\nimport { ReentrancyGuardUpgradeable } from \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n\ninterface IIncomeDestination {\n    function updateAssetsState(address comptroller, address asset) external;\n}\n\ninterface IVToken {\n    function underlying() external view returns (address);\n}\n\ninterface IPrime is IIncomeDestination {\n    function accrueInterest(address vToken) external;\n\n    function vTokenForAsset(address asset) external view returns (address);\n\n    function getAllMarkets() external view returns (address[] memory);\n}\n\ninterface IPoolRegistry {\n    /// @notice Get VToken in the Pool for an Asset\n    function getVTokenForAsset(address comptroller, address asset) external view returns (address);\n\n    /// @notice Get the addresss of the Pools supported that include a market for the provided asset\n    function getPoolsSupportedByAsset(address asset) external view returns (address[] memory);\n}\n\ninterface IMockProtocolShareReserve {\n    /// @notice it represents the type of vToken income\n    enum IncomeType {\n        SPREAD,\n        LIQUIDATION\n    }\n\n    function updateAssetsState(address comptroller, address asset, IncomeType incomeType) external;\n}\n\ninterface IComptroller {\n    function isComptroller() external view returns (bool);\n\n    function markets(address) external view returns (bool);\n\n    function getAllMarkets() external view returns (address[] memory);\n}\n\nerror InvalidAddress();\nerror UnsupportedAsset();\nerror InvalidTotalPercentage();\nerror InvalidMaxLoopsLimit();\n\n/**\n * @title MaxLoopsLimitHelper\n * @author Venus\n * @notice Abstract contract used to avoid collection with too many items that would generate gas errors and DoS.\n */\nabstract contract MaxLoopsLimitHelper {\n    // Limit for the loops to avoid the DOS\n    uint256 public maxLoopsLimit;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n\n    /// @notice Emitted when max loops limit is set\n    event MaxLoopsLimitUpdated(uint256 oldMaxLoopsLimit, uint256 newmaxLoopsLimit);\n\n    /// @notice Thrown an error on maxLoopsLimit exceeds for any loop\n    error MaxLoopsLimitExceeded(uint256 loopsLimit, uint256 requiredLoops);\n\n    /**\n     * @notice Set the limit for the loops can iterate to avoid the DOS\n     * @param limit Limit for the max loops can execute at a time\n     */\n    function _setMaxLoopsLimit(uint256 limit) internal {\n        require(limit > maxLoopsLimit, \"Comptroller: Invalid maxLoopsLimit\");\n\n        uint256 oldMaxLoopsLimit = maxLoopsLimit;\n        maxLoopsLimit = limit;\n\n        emit MaxLoopsLimitUpdated(oldMaxLoopsLimit, limit);\n    }\n\n    /**\n     * @notice Compare the maxLoopsLimit with number of the times loop iterate\n     * @param len Length of the loops iterate\n     * @custom:error MaxLoopsLimitExceeded error is thrown when loops length exceeds maxLoopsLimit\n     */\n    function _ensureMaxLoops(uint256 len) internal view {\n        if (len > maxLoopsLimit) {\n            revert MaxLoopsLimitExceeded(maxLoopsLimit, len);\n        }\n    }\n}\n\ncontract MockProtocolShareReserve is\n    AccessControlledV8,\n    ReentrancyGuardUpgradeable,\n    MaxLoopsLimitHelper,\n    IMockProtocolShareReserve\n{\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    /// @notice protocol income is categorized into two schemas.\n    /// The first schema is the default one\n    /// The second schema is for spread income from prime markets in core protocol\n    enum Schema {\n        DEFAULT,\n        SPREAD_PRIME_CORE\n    }\n\n    struct DistributionConfig {\n        Schema schema;\n        /// @dev percenatge is represented without any scale\n        uint256 percentage;\n        address destination;\n    }\n\n    /// @notice address of core pool comptroller contract\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address public immutable CORE_POOL_COMPTROLLER;\n\n    /// @notice address of WBNB contract\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address public immutable WBNB;\n\n    /// @notice address of vBNB contract\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address public immutable vBNB;\n\n    /// @notice address of Prime contract\n    address public prime;\n\n    /// @notice address of pool registry contract\n    address public poolRegistry;\n\n    uint256 private constant MAX_PERCENT = 100;\n\n    /// @notice comptroller => asset => schema => balance\n    mapping(address => mapping(address => mapping(Schema => uint256))) public assetsReserves;\n\n    /// @notice asset => balance\n    mapping(address => uint256) public totalAssetReserve;\n\n    /// @notice configuration for different income distribution targets\n    DistributionConfig[] public distributionTargets;\n\n    /// @notice Emitted when pool registry address is updated\n    event PoolRegistryUpdated(address indexed oldPoolRegistry, address indexed newPoolRegistry);\n\n    /// @notice Emitted when prime address is updated\n    event PrimeUpdated(address indexed oldPrime, address indexed newPrime);\n\n    /// @notice Event emitted after the updation of the assets reserves.\n    event AssetsReservesUpdated(\n        address indexed comptroller,\n        address indexed asset,\n        uint256 amount,\n        IncomeType incomeType,\n        Schema schema\n    );\n\n    /// @notice Event emitted when an asset is released to a target\n    event AssetReleased(\n        address indexed destination,\n        address indexed asset,\n        Schema schema,\n        uint256 percent,\n        uint256 amount\n    );\n\n    /// @notice Event emitted when asset reserves state is updated\n    event ReservesUpdated(\n        address indexed comptroller,\n        address indexed asset,\n        Schema schema,\n        uint256 oldBalance,\n        uint256 newBalance\n    );\n\n    /// @notice Event emitted when distribution configuration is updated\n    event DistributionConfigUpdated(\n        address indexed destination,\n        uint256 oldPercentage,\n        uint256 newPercentage,\n        Schema schema\n    );\n\n    /// @notice Event emitted when distribution configuration is added\n    event DistributionConfigAdded(address indexed destination, uint256 percentage, Schema schema);\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(address _corePoolComptroller, address _wbnb, address _vbnb) {\n        if (_corePoolComptroller == address(0)) revert InvalidAddress();\n        if (_wbnb == address(0)) revert InvalidAddress();\n        if (_vbnb == address(0)) revert InvalidAddress();\n\n        CORE_POOL_COMPTROLLER = _corePoolComptroller;\n        WBNB = _wbnb;\n        vBNB = _vbnb;\n\n        // Note that the contract is upgradeable. Use initialize() or reinitializers\n        // to set the state variables.\n        _disableInitializers();\n    }\n\n    /**\n     * @dev Initializes the deployer to owner.\n     * @param _accessControlManager The address of ACM contract\n     * @param _loopsLimit Limit for the loops in the contract to avoid DOS\n     */\n    function initialize(address _accessControlManager, uint256 _loopsLimit) external initializer {\n        __AccessControlled_init(_accessControlManager);\n        __ReentrancyGuard_init();\n        _setMaxLoopsLimit(_loopsLimit);\n    }\n\n    /**\n     * @dev Pool registry setter.\n     * @param _poolRegistry Address of the pool registry\n     * @custom:error ZeroAddressNotAllowed is thrown when pool registry address is zero\n     */\n    function setPoolRegistry(address _poolRegistry) external onlyOwner {\n        if (_poolRegistry == address(0)) revert InvalidAddress();\n        emit PoolRegistryUpdated(poolRegistry, _poolRegistry);\n        poolRegistry = _poolRegistry;\n    }\n\n    /**\n     * @dev Prime contract address setter.\n     * @param _prime Address of the prime contract\n     */\n    function setPrime(address _prime) external onlyOwner {\n        if (_prime == address(0)) revert InvalidAddress();\n        emit PrimeUpdated(prime, _prime);\n        prime = _prime;\n    }\n\n    /**\n     * @dev Add or update destination targets based on destination address\n     * @param configs configurations of the destinations.\n     */\n    function addOrUpdateDistributionConfigs(DistributionConfig[] memory configs) external nonReentrant {\n        _checkAccessAllowed(\"addOrUpdateDistributionConfigs(DistributionConfig[])\");\n\n        //we need to accrue and release funds to prime before updating the distribution configuration\n        //because prime relies on getUnreleasedFunds and its return value may change after config update\n        _accrueAndReleaseFundsToPrime();\n        for (uint256 i = 0; i < configs.length; ) {\n            DistributionConfig memory _config = configs[i];\n            require(_config.destination != address(0), \"ProtocolShareReserve: Destination address invalid\");\n\n            bool updated = false;\n            for (uint256 j = 0; j < distributionTargets.length; ) {\n                DistributionConfig storage config = distributionTargets[j];\n\n                if (_config.schema == config.schema && config.destination == _config.destination) {\n                    emit DistributionConfigUpdated(\n                        _config.destination,\n                        config.percentage,\n                        _config.percentage,\n                        _config.schema\n                    );\n                    config.percentage = _config.percentage;\n                    updated = true;\n                    break;\n                }\n\n                unchecked {\n                    ++j;\n                }\n            }\n\n            if (!updated) {\n                distributionTargets.push(_config);\n                emit DistributionConfigAdded(_config.destination, _config.percentage, _config.schema);\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        _ensurePercentages();\n        _ensureMaxLoops(distributionTargets.length);\n    }\n\n    /**\n     * @dev Release funds\n     * @param comptroller the comptroller address of the pool\n     * @param assets assets to be released to distribution targets\n     */\n    function releaseFunds(address comptroller, address[] memory assets) external nonReentrant {\n        _accruePrimeInterest();\n\n        for (uint256 i = 0; i < assets.length; ) {\n            _releaseFund(comptroller, assets[i]);\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @dev Used to find out the amount of funds that's going to be released when release funds is called.\n     * @param comptroller the comptroller address of the pool\n     * @param schema the schema of the distribution target\n     * @param destination the destination address of the distribution target\n     * @param asset the asset address which will be released\n     */\n    function getUnreleasedFunds(\n        address comptroller,\n        Schema schema,\n        address destination,\n        address asset\n    ) external view returns (uint256) {\n        for (uint256 i = 0; i < distributionTargets.length; ) {\n            DistributionConfig storage _config = distributionTargets[i];\n            if (_config.schema == schema && _config.destination == destination) {\n                uint256 total = assetsReserves[comptroller][asset][schema];\n                return (total * _config.percentage) / MAX_PERCENT;\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @dev Returns the total number of distribution targets\n     */\n    function totalDistributions() external view returns (uint256) {\n        return distributionTargets.length;\n    }\n\n    /**\n     * @dev Update the reserve of the asset for the specific pool after transferring to the protocol share reserve.\n     * @param comptroller Comptroller address (pool)\n     * @param asset Asset address.\n     * @param incomeType type of income\n     */\n    function updateAssetsState(\n        address comptroller,\n        address asset,\n        IncomeType incomeType\n    ) public override(IMockProtocolShareReserve) nonReentrant {\n        if (!IComptroller(comptroller).isComptroller()) revert InvalidAddress();\n        if (asset == address(0)) revert InvalidAddress();\n        if (\n            comptroller != CORE_POOL_COMPTROLLER &&\n            IPoolRegistry(poolRegistry).getVTokenForAsset(comptroller, asset) == address(0)\n        ) revert InvalidAddress();\n\n        Schema schema = getSchema(comptroller, asset, incomeType);\n        uint256 currentBalance = IERC20Upgradeable(asset).balanceOf(address(this));\n        uint256 assetReserve = totalAssetReserve[asset];\n\n        if (currentBalance > assetReserve) {\n            uint256 balanceDifference;\n            unchecked {\n                balanceDifference = currentBalance - assetReserve;\n            }\n\n            assetsReserves[comptroller][asset][schema] += balanceDifference;\n            totalAssetReserve[asset] += balanceDifference;\n            emit AssetsReservesUpdated(comptroller, asset, balanceDifference, incomeType, schema);\n        }\n    }\n\n    /**\n     * @dev Fetches the list of prime markets and then accrues interest and\n     * releases the funds to prime for each market\n     */\n    function _accrueAndReleaseFundsToPrime() internal {\n        address[] memory markets = IPrime(prime).getAllMarkets();\n        for (uint256 i = 0; i < markets.length; ) {\n            address market = markets[i];\n            IPrime(prime).accrueInterest(market);\n            _releaseFund(CORE_POOL_COMPTROLLER, _getUnderlying(market));\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @dev Fetches the list of prime markets and then accrues interest\n     * to prime for each market\n     */\n    function _accruePrimeInterest() internal {\n        // address[] memory markets = IPrime(prime).getAllMarkets();\n        address[] memory markets = IPrime(prime).getAllMarkets();\n\n        for (uint256 i = 0; i < markets.length; ) {\n            address market = markets[i];\n            IPrime(prime).accrueInterest(market);\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @dev asset from a particular pool to be release to distribution targets\n     * @param comptroller  Comptroller address(pool)\n     * @param asset Asset address.\n     */\n    function _releaseFund(address comptroller, address asset) internal {\n        uint256 totalSchemas = uint256(type(Schema).max) + 1;\n        uint256[] memory schemaBalances = new uint256[](totalSchemas);\n        uint256 totalBalance;\n        for (uint256 schemaValue; schemaValue < totalSchemas; ) {\n            schemaBalances[schemaValue] = assetsReserves[comptroller][asset][Schema(schemaValue)];\n            totalBalance += schemaBalances[schemaValue];\n\n            unchecked {\n                ++schemaValue;\n            }\n        }\n\n        if (totalBalance == 0) {\n            return;\n        }\n\n        uint256[] memory totalTransferAmounts = new uint256[](totalSchemas);\n        for (uint256 i = 0; i < distributionTargets.length; ) {\n            DistributionConfig memory _config = distributionTargets[i];\n\n            uint256 transferAmount = (schemaBalances[uint256(_config.schema)] * _config.percentage) / MAX_PERCENT;\n            totalTransferAmounts[uint256(_config.schema)] += transferAmount;\n\n            IERC20Upgradeable(asset).safeTransfer(_config.destination, transferAmount);\n            IIncomeDestination(_config.destination).updateAssetsState(comptroller, asset);\n\n            emit AssetReleased(_config.destination, asset, _config.schema, _config.percentage, transferAmount);\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        uint256[] memory newSchemaBalances = new uint256[](totalSchemas);\n        for (uint256 schemaValue = 0; schemaValue < totalSchemas; ) {\n            newSchemaBalances[schemaValue] = schemaBalances[schemaValue] - totalTransferAmounts[schemaValue];\n            assetsReserves[comptroller][asset][Schema(schemaValue)] = newSchemaBalances[schemaValue];\n            totalAssetReserve[asset] = totalAssetReserve[asset] - totalTransferAmounts[schemaValue];\n\n            emit ReservesUpdated(\n                comptroller,\n                asset,\n                Schema(schemaValue),\n                schemaBalances[schemaValue],\n                newSchemaBalances[schemaValue]\n            );\n\n            unchecked {\n                ++schemaValue;\n            }\n        }\n    }\n\n    /**\n     * @dev Returns the schema based on comptroller, asset and income type\n     * @param comptroller  Comptroller address(pool)\n     * @param asset Asset address.\n     * @param incomeType type of income\n     * @return schema schema for distribution\n     */\n    function getSchema(\n        address comptroller,\n        address asset,\n        IncomeType incomeType\n    ) internal view returns (Schema schema) {\n        schema = Schema.DEFAULT;\n        address vToken = IPrime(prime).vTokenForAsset(asset);\n        if (vToken != address(0) && comptroller == CORE_POOL_COMPTROLLER && incomeType == IncomeType.SPREAD) {\n            schema = Schema.SPREAD_PRIME_CORE;\n        }\n    }\n\n    function _ensurePercentages() internal view {\n        uint256 totalSchemas = uint256(type(Schema).max) + 1;\n        uint256[] memory totalPercentages = new uint256[](totalSchemas);\n\n        for (uint256 i = 0; i < distributionTargets.length; ) {\n            DistributionConfig memory config = distributionTargets[i];\n            totalPercentages[uint256(config.schema)] += config.percentage;\n\n            unchecked {\n                ++i;\n            }\n        }\n        for (uint256 schemaValue = 0; schemaValue < totalSchemas; ) {\n            if (totalPercentages[schemaValue] != MAX_PERCENT && totalPercentages[schemaValue] != 0)\n                revert InvalidTotalPercentage();\n\n            unchecked {\n                ++schemaValue;\n            }\n        }\n    }\n\n    /**\n     * @dev Returns the underlying asset address for the vToken\n     * @param vToken vToken address\n     * @return asset address of asset\n     */\n    function _getUnderlying(address vToken) internal view returns (address) {\n        if (vToken == vBNB) {\n            return WBNB;\n        } else {\n            return IVToken(vToken).underlying();\n        }\n    }\n}\n"
    },
    "contracts/test/MockToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MockToken is ERC20 {\n    uint8 private immutable _decimals;\n\n    constructor(string memory name_, string memory symbol_, uint8 decimals_) ERC20(name_, symbol_) {\n        _decimals = decimals_;\n    }\n\n    function faucet(uint256 amount) external {\n        _mint(msg.sender, amount);\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return _decimals;\n    }\n}\n"
    },
    "contracts/test/PrimeScenario.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity 0.8.25;\n\nimport \"../Tokens/Prime/Prime.sol\";\n\ncontract PrimeScenario is Prime {\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(\n        address _wbnb,\n        address _vbnb,\n        uint256 _blocksPerYear,\n        uint256 _stakingPeriod,\n        uint256 _minimumStakedXVS,\n        uint256 _maximumXVSCap,\n        bool _timeBased\n    ) Prime(_wbnb, _vbnb, _blocksPerYear, _stakingPeriod, _minimumStakedXVS, _maximumXVSCap, _timeBased) {}\n\n    function calculateScore(uint256 xvs, uint256 capital) external view returns (uint256) {\n        return Scores._calculateScore(xvs, capital, alphaNumerator, alphaDenominator);\n    }\n\n    function setPLP(address plp) external {\n        primeLiquidityProvider = plp;\n    }\n\n    function mintForUser(address user) external {\n        tokens[user] = Token(true, true);\n    }\n\n    function burnForUser(address user) external {\n        tokens[user] = Token(false, false);\n    }\n}\n"
    },
    "contracts/Tokens/Prime/Interfaces/InterfaceComptroller.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.25;\nfunction c_c2c793b3(bytes8 c__c2c793b3) pure {}\nfunction c_truec2c793b3(bytes8 c__c2c793b3) pure returns (bool){ return true; }\nfunction c_falsec2c793b3(bytes8 c__c2c793b3) pure returns (bool){ return false; }\n\n\ninterface InterfaceComptroller {\n    function markets(address) external view returns (bool);\n}\n"
    },
    "contracts/Tokens/Prime/Interfaces/IPoolRegistry.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.25;\nfunction c_ecc30340(bytes8 c__ecc30340) pure {}\nfunction c_trueecc30340(bytes8 c__ecc30340) pure returns (bool){ return true; }\nfunction c_falseecc30340(bytes8 c__ecc30340) pure returns (bool){ return false; }\n\n\n/**\n * @title PoolRegistryInterface\n * @author Venus\n * @notice Interface implemented by `PoolRegistry`.\n */\ninterface PoolRegistryInterface {\n    /**\n     * @notice Struct for a Venus interest rate pool.\n     */\n    struct VenusPool {\n        string name;\n        address creator;\n        address comptroller;\n        uint256 blockPosted;\n        uint256 timestampPosted;\n    }\n\n    /// @notice Get a pool by comptroller address\n    function getPoolByComptroller(address comptroller) external view returns (VenusPool memory);\n}\n"
    },
    "contracts/Tokens/Prime/Interfaces/IPrime.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.25;\nfunction c_f0f9510f(bytes8 c__f0f9510f) pure {}\nfunction c_truef0f9510f(bytes8 c__f0f9510f) pure returns (bool){ return true; }\nfunction c_falsef0f9510f(bytes8 c__f0f9510f) pure returns (bool){ return false; }\n\n\nimport { PrimeStorageV1 } from \"../PrimeStorage.sol\";\n\n/**\n * @title IPrime\n * @author Venus\n * @notice Interface for Prime Token\n */\ninterface IPrime {\n    struct APRInfo {\n        // supply APR of the user in BPS\n        uint256 supplyAPR;\n        // borrow APR of the user in BPS\n        uint256 borrowAPR;\n        // total score of the market\n        uint256 totalScore;\n        // score of the user\n        uint256 userScore;\n        // capped XVS balance of the user\n        uint256 xvsBalanceForScore;\n        // capital of the user\n        uint256 capital;\n        // capped supply of the user\n        uint256 cappedSupply;\n        // capped borrow of the user\n        uint256 cappedBorrow;\n        // capped supply of user in USD\n        uint256 supplyCapUSD;\n        // capped borrow of user in USD\n        uint256 borrowCapUSD;\n    }\n\n    struct Capital {\n        // capital of the user\n        uint256 capital;\n        // capped supply of the user\n        uint256 cappedSupply;\n        // capped borrow of the user\n        uint256 cappedBorrow;\n        // capped supply of user in USD\n        uint256 supplyCapUSD;\n        // capped borrow of user in USD\n        uint256 borrowCapUSD;\n    }\n\n    /**\n     * @notice Returns boosted pending interest accrued for a user for all markets\n     * @param user the account for which to get the accrued interests\n     * @return pendingRewards the number of underlying tokens accrued by the user for all markets\n     */\n    function getPendingRewards(address user) external returns (PrimeStorageV1.PendingReward[] memory pendingRewards);\n\n    /**\n     * @notice Update total score of multiple users and market\n     * @param users accounts for which we need to update score\n     */\n    function updateScores(address[] memory users) external;\n\n    /**\n     * @notice Update value of alpha\n     * @param _alphaNumerator numerator of alpha. If alpha is 0.5 then numerator is 1\n     * @param _alphaDenominator denominator of alpha. If alpha is 0.5 then denominator is 2\n     */\n    function updateAlpha(uint128 _alphaNumerator, uint128 _alphaDenominator) external;\n\n    /**\n     * @notice Update multipliers for a market\n     * @param market address of the market vToken\n     * @param supplyMultiplier new supply multiplier for the market, scaled by 1e18\n     * @param borrowMultiplier new borrow multiplier for the market, scaled by 1e18\n     */\n    function updateMultipliers(address market, uint256 supplyMultiplier, uint256 borrowMultiplier) external;\n\n    /**\n     * @notice Add a market to prime program\n     * @param comptroller address of the comptroller\n     * @param market address of the market vToken\n     * @param supplyMultiplier the multiplier for supply cap. It should be converted to 1e18\n     * @param borrowMultiplier the multiplier for borrow cap. It should be converted to 1e18\n     */\n    function addMarket(\n        address comptroller,\n        address market,\n        uint256 supplyMultiplier,\n        uint256 borrowMultiplier\n    ) external;\n\n    /**\n     * @notice Set limits for total tokens that can be minted\n     * @param _irrevocableLimit total number of irrevocable tokens that can be minted\n     * @param _revocableLimit total number of revocable tokens that can be minted\n     */\n    function setLimit(uint256 _irrevocableLimit, uint256 _revocableLimit) external;\n\n    /**\n     * @notice Directly issue prime tokens to users\n     * @param isIrrevocable are the tokens being issued\n     * @param users list of address to issue tokens to\n     */\n    function issue(bool isIrrevocable, address[] calldata users) external;\n\n    /**\n     * @notice Executed by XVSVault whenever user's XVSVault balance changes\n     * @param user the account address whose balance was updated\n     */\n    function xvsUpdated(address user) external;\n\n    /**\n     * @notice accrues interest and updates score for an user for a specific market\n     * @param user the account address for which to accrue interest and update score\n     * @param market the market for which to accrue interest and update score\n     */\n    function accrueInterestAndUpdateScore(address user, address market) external;\n\n    /**\n     * @notice For claiming prime token when staking period is completed\n     */\n    function claim() external;\n\n    /**\n     * @notice For burning any prime token\n     * @param user the account address for which the prime token will be burned\n     */\n    function burn(address user) external;\n\n    /**\n     * @notice To pause or unpause claiming of interest\n     */\n    function togglePause() external;\n\n    /**\n     * @notice For user to claim boosted yield\n     * @param vToken the market for which claim the accrued interest\n     * @return amount the amount of tokens transferred to the user\n     */\n    function claimInterest(address vToken) external returns (uint256);\n\n    /**\n     * @notice For user to claim boosted yield\n     * @param vToken the market for which claim the accrued interest\n     * @param user the user for which to claim the accrued interest\n     * @return amount the amount of tokens transferred to the user\n     */\n    function claimInterest(address vToken, address user) external returns (uint256);\n\n    /**\n     * @notice Distributes income from market since last distribution\n     * @param vToken the market for which to distribute the income\n     */\n    function accrueInterest(address vToken) external;\n\n    /**\n     * @notice Returns boosted interest accrued for a user\n     * @param vToken the market for which to fetch the accrued interest\n     * @param user the account for which to get the accrued interest\n     * @return interestAccrued the number of underlying tokens accrued by the user since the last accrual\n     */\n    function getInterestAccrued(address vToken, address user) external returns (uint256);\n\n    /**\n     * @notice Retrieves an array of all available markets\n     * @return an array of addresses representing all available markets\n     */\n    function getAllMarkets() external view returns (address[] memory);\n\n    /**\n     * @notice fetch the numbers of seconds remaining for staking period to complete\n     * @param user the account address for which we are checking the remaining time\n     * @return timeRemaining the number of seconds the user needs to wait to claim prime token\n     */\n    function claimTimeRemaining(address user) external view returns (uint256);\n\n    /**\n     * @notice Returns supply and borrow APR for user for a given market\n     * @param market the market for which to fetch the APR\n     * @param user the account for which to get the APR\n     * @return aprInfo APR information for the user for the given market\n     */\n    function calculateAPR(address market, address user) external view returns (APRInfo memory aprInfo);\n\n    /**\n     * @notice Returns supply and borrow APR for estimated supply, borrow and XVS staked\n     * @param market the market for which to fetch the APR\n     * @param user the account for which to get the APR\n     * @param borrow hypothetical borrow amount\n     * @param supply hypothetical supply amount\n     * @param xvsStaked hypothetical staked XVS amount\n     * @return aprInfo APR information for the user for the given market\n     */\n    function estimateAPR(\n        address market,\n        address user,\n        uint256 borrow,\n        uint256 supply,\n        uint256 xvsStaked\n    ) external view returns (APRInfo memory aprInfo);\n\n    /**\n     * @notice the total income that's going to be distributed in a year to prime token holders\n     * @param vToken the market for which to fetch the total income that's going to distributed in a year\n     * @return amount the total income\n     */\n    function incomeDistributionYearly(address vToken) external view returns (uint256 amount);\n\n    /**\n     * @notice Returns if user is a prime holder\n     * @return isPrimeHolder true if user is a prime holder\n     */\n    function isUserPrimeHolder(address user) external view returns (bool);\n\n    /**\n     * @notice Set the limit for the loops can iterate to avoid the DOS\n     * @param loopsLimit Number of loops limit\n     */\n    function setMaxLoopsLimit(uint256 loopsLimit) external;\n\n    /**\n     * @notice Update staked at timestamp for multiple users\n     * @param users accounts for which we need to update staked at timestamp\n     * @param timestamps new staked at timestamp for the users\n     */\n    function setStakedAt(address[] calldata users, uint256[] calldata timestamps) external;\n}\n"
    },
    "contracts/Tokens/Prime/Interfaces/IPrimeLiquidityProvider.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.25;\nfunction c_3002dd21(bytes8 c__3002dd21) pure {}\nfunction c_true3002dd21(bytes8 c__3002dd21) pure returns (bool){ return true; }\nfunction c_false3002dd21(bytes8 c__3002dd21) pure returns (bool){ return false; }\n\n\nimport { IERC20Upgradeable } from \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\n\n/**\n * @title IPrimeLiquidityProvider\n * @author Venus\n * @notice Interface for PrimeLiquidityProvider\n */\ninterface IPrimeLiquidityProvider {\n    /**\n     * @notice Initialize the distribution of the token\n     * @param tokens_ Array of addresses of the tokens to be intialized\n     */\n    function initializeTokens(address[] calldata tokens_) external;\n\n    /**\n     * @notice Pause fund transfer of tokens to Prime contract\n     */\n    function pauseFundsTransfer() external;\n\n    /**\n     * @notice Resume fund transfer of tokens to Prime contract\n     */\n    function resumeFundsTransfer() external;\n\n    /**\n     * @notice Set distribution speed (amount of token distribute per block or second)\n     * @param tokens_ Array of addresses of the tokens\n     * @param distributionSpeeds_ New distribution speeds for tokens\n     */\n    function setTokensDistributionSpeed(address[] calldata tokens_, uint256[] calldata distributionSpeeds_) external;\n\n    /**\n     * @notice Set max distribution speed for token (amount of maximum token distribute per block or second)\n     * @param tokens_ Array of addresses of the tokens\n     * @param maxDistributionSpeeds_ New distribution speeds for tokens\n     */\n    function setMaxTokensDistributionSpeed(\n        address[] calldata tokens_,\n        uint256[] calldata maxDistributionSpeeds_\n    ) external;\n\n    /**\n     * @notice Set the prime token contract address\n     * @param prime_ The new address of the prime token contract\n     */\n    function setPrimeToken(address prime_) external;\n\n    /**\n     * @notice Claim all the token accrued till last block or second\n     * @param token_ The token to release to the Prime contract\n     */\n    function releaseFunds(address token_) external;\n\n    /**\n     * @notice A public function to sweep accidental ERC-20 transfers to this contract. Tokens are sent to user\n     * @param token_ The address of the ERC-20 token to sweep\n     * @param to_ The address of the recipient\n     * @param amount_ The amount of tokens needs to transfer\n     */\n    function sweepToken(IERC20Upgradeable token_, address to_, uint256 amount_) external;\n\n    /**\n     * @notice Accrue token by updating the distribution state\n     * @param token_ Address of the token\n     */\n    function accrueTokens(address token_) external;\n\n    /**\n     * @notice Set the limit for the loops can iterate to avoid the DOS\n     * @param loopsLimit Limit for the max loops can execute at a time\n     */\n    function setMaxLoopsLimit(uint256 loopsLimit) external;\n\n    /**\n     * @notice Get rewards per block or second for token\n     * @param token_ Address of the token\n     * @return speed returns the per block or second reward\n     */\n    function getEffectiveDistributionSpeed(address token_) external view returns (uint256);\n\n    /**\n     * @notice Get the amount of tokens accrued\n     * @param token_ Address of the token\n     * @return Amount of tokens that are accrued\n     */\n    function tokenAmountAccrued(address token_) external view returns (uint256);\n}\n"
    },
    "contracts/Tokens/Prime/Interfaces/IVToken.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.25;\nfunction c_2fa28d42(bytes8 c__2fa28d42) pure {}\nfunction c_true2fa28d42(bytes8 c__2fa28d42) pure returns (bool){ return true; }\nfunction c_false2fa28d42(bytes8 c__2fa28d42) pure returns (bool){ return false; }\n\n\ninterface IVToken {\n    function borrowBalanceStored(address account) external view returns (uint256);\n\n    function exchangeRateStored() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function underlying() external view returns (address);\n\n    function totalBorrows() external view returns (uint256);\n\n    function borrowRatePerBlock() external view returns (uint256);\n\n    function reserveFactorMantissa() external view returns (uint256);\n\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/Tokens/Prime/Interfaces/IXVSVault.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.25;\nfunction c_1eee4a8d(bytes8 c__1eee4a8d) pure {}\nfunction c_true1eee4a8d(bytes8 c__1eee4a8d) pure returns (bool){ return true; }\nfunction c_false1eee4a8d(bytes8 c__1eee4a8d) pure returns (bool){ return false; }\n\n\ninterface IXVSVault {\n    function getUserInfo(\n        address _rewardToken,\n        uint256 _pid,\n        address _user\n    ) external view returns (uint256 amount, uint256 rewardDebt, uint256 pendingWithdrawals);\n\n    function xvsAddress() external view returns (address);\n}\n"
    },
    "contracts/Tokens/Prime/libs/FixedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// solhint-disable var-name-mixedcase\n\npragma solidity 0.8.25;\nfunction c_07237c96(bytes8 c__07237c96) pure {}\nfunction c_true07237c96(bytes8 c__07237c96) pure returns (bool){ return true; }\nfunction c_false07237c96(bytes8 c__07237c96) pure returns (bool){ return false; }\n\n\nimport { SafeCastUpgradeable } from \"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\";\nimport { FixedMath0x } from \"./FixedMath0x.sol\";\n\nusing SafeCastUpgradeable for uint256;\n\nerror InvalidFixedPoint();\n\n/**\n * @title FixedMath\n * @author Venus\n * @notice FixedMath library is used for complex mathematical operations\n */\nlibrary FixedMath {\nfunction c_5b4066ef(bytes8 c__5b4066ef) internal pure {}\nfunction c_true5b4066ef(bytes8 c__5b4066ef) internal pure returns (bool){ return true; }\nfunction c_false5b4066ef(bytes8 c__5b4066ef) internal pure returns (bool){ return false; }\n\n    error InvalidFraction(uint256 n, uint256 d);\n\n    /**\n     * @notice Convert some uint256 fraction `n` numerator / `d` denominator to a fixed-point number `f`.\n     * @param n numerator\n     * @param d denominator\n     * @return fixed-point number\n     */\n    function _toFixed(uint256 n, uint256 d) internal pure returns (int256) {c_5b4066ef(0xf4a6095519169401); /* function */ \n\nc_5b4066ef(0x27e82bae53bf56d5); /* line */ \n        c_5b4066ef(0xd67172d917c41c94); /* statement */ \nif (d.toInt256() < n.toInt256()) {c_5b4066ef(0xd507c86e1a87655e); /* branch */ \nrevert InvalidFraction(n, d);}else { c_5b4066ef(0x943c0558d384e742); /* branch */ \n}\n\nc_5b4066ef(0x993a2bdf59cc5898); /* line */ \n        c_5b4066ef(0x11c122837bf778e6); /* statement */ \nreturn (n.toInt256() * FixedMath0x.FIXED_1) / int256(d.toInt256());\n    }\n\n    /**\n     * @notice Divide some unsigned int `u` by a fixed point number `f`\n     * @param u unsigned dividend\n     * @param f fixed point divisor, in FIXED_1 units\n     * @return unsigned int quotient\n     */\n    function _uintDiv(uint256 u, int256 f) internal pure returns (uint256) {c_5b4066ef(0xcac4cee6bf146c65); /* function */ \n\nc_5b4066ef(0x05f0f2d74c087626); /* line */ \n        c_5b4066ef(0xc853fba58253a1b5); /* statement */ \nif (f < 0) {c_5b4066ef(0xf672a9bd8e5dd950); /* branch */ \nrevert InvalidFixedPoint();}else { c_5b4066ef(0x38449877c24f597b); /* branch */ \n}\n        // multiply `u` by FIXED_1 to cancel out the built-in FIXED_1 in f\nc_5b4066ef(0x6d16c7a0d5e16ed3); /* line */ \n        c_5b4066ef(0xf7aad1c5f821fd04); /* statement */ \nreturn uint256((u.toInt256() * FixedMath0x.FIXED_1) / f);\n    }\n\n    /**\n     * @notice Multiply some unsigned int `u` by a fixed point number `f`\n     * @param u unsigned multiplicand\n     * @param f fixed point multiplier, in FIXED_1 units\n     * @return unsigned int product\n     */\n    function _uintMul(uint256 u, int256 f) internal pure returns (uint256) {c_5b4066ef(0xe57f9a261f934b09); /* function */ \n\nc_5b4066ef(0xcfd82940b2bda162); /* line */ \n        c_5b4066ef(0xac59c75214d67212); /* statement */ \nif (f < 0) {c_5b4066ef(0x63aadec21c2da252); /* branch */ \nrevert InvalidFixedPoint();}else { c_5b4066ef(0xfc60daeb42588463); /* branch */ \n}\n        // divide the product by FIXED_1 to cancel out the built-in FIXED_1 in f\nc_5b4066ef(0x4d1325a60d282f9b); /* line */ \n        c_5b4066ef(0x0d07bc2be9cc8cf1); /* statement */ \nreturn uint256((u.toInt256() * f) / FixedMath0x.FIXED_1);\n    }\n\n    /// @notice see FixedMath0x\n    function _ln(int256 x) internal pure returns (int256) {c_5b4066ef(0x9ba3195dea561365); /* function */ \n\nc_5b4066ef(0xb6d5bf0cce8550de); /* line */ \n        c_5b4066ef(0x9a9bb38d9cd27bf3); /* statement */ \nreturn FixedMath0x._ln(x);\n    }\n\n    /// @notice see FixedMath0x\n    function _exp(int256 x) internal pure returns (int256) {c_5b4066ef(0x145c52264db2c250); /* function */ \n\nc_5b4066ef(0xcde4edeab04d08f4); /* line */ \n        c_5b4066ef(0xf625ef9348e44ba7); /* statement */ \nreturn FixedMath0x._exp(x);\n    }\n}\n"
    },
    "contracts/Tokens/Prime/libs/FixedMath0x.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// solhint-disable max-line-length\n\npragma solidity 0.8.25;\nfunction c_d4e0aa9c(bytes8 c__d4e0aa9c) pure {}\nfunction c_trued4e0aa9c(bytes8 c__d4e0aa9c) pure returns (bool){ return true; }\nfunction c_falsed4e0aa9c(bytes8 c__d4e0aa9c) pure returns (bool){ return false; }\n\n\n// Below is code from 0x's LibFixedMath.sol. Changes:\n// - addition of 0.8-style errors\n// - removal of unused functions\n// - added comments for clarity\n// https://github.com/0xProject/exchange-v3/blob/aae46bef841bfd1cc31028f41793db4fe7197084/contracts/staking/contracts/src/libs/LibFixedMath.sol\n\n/*\n\n  Copyright 2017 Bprotocol Foundation, 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n/// Thrown when the natural log function is given too large of an argument\nerror LnTooLarge(int256 x);\n/// Thrown when the natural log would have returned a number outside of ℝ\nerror LnNonRealResult(int256 x);\n/// Thrown when exp is given too large of an argument\nerror ExpTooLarge(int256 x);\n/// Thrown when an unsigned value is too large to be converted to a signed value\nerror UnsignedValueTooLarge(uint256 x);\n\n/**\n * @title FixedMath0x\n * @notice Signed, fixed-point, 127-bit precision math library\n */\nlibrary FixedMath0x {\nfunction c_5468aa87(bytes8 c__5468aa87) internal pure {}\nfunction c_true5468aa87(bytes8 c__5468aa87) internal pure returns (bool){ return true; }\nfunction c_false5468aa87(bytes8 c__5468aa87) internal pure returns (bool){ return false; }\n\n    // Base for the fixed point numbers (this is our 1)\n    int256 internal constant FIXED_1 = int256(0x0000000000000000000000000000000080000000000000000000000000000000);\n    // Maximum ln argument (1)\n    int256 private constant LN_MAX_VAL = FIXED_1;\n    // Minimum ln argument. Notice this is related to EXP_MIN_VAL (e ^ -63.875)\n    int256 private constant LN_MIN_VAL = int256(0x0000000000000000000000000000000000000000000000000000000733048c5a);\n    // Maximum exp argument (0)\n    int256 private constant EXP_MAX_VAL = 0;\n    // Minimum exp argument. Notice this is related to LN_MIN_VAL (-63.875)\n    int256 private constant EXP_MIN_VAL = -int256(0x0000000000000000000000000000001ff0000000000000000000000000000000);\n\n    /// @dev Get the natural logarithm of a fixed-point number 0 < `x` <= LN_MAX_VAL\n    function _ln(int256 x) internal pure returns (int256 r) {c_5468aa87(0x9b0e8426a3a32c72); /* function */ \n\nc_5468aa87(0x8eb412d753c6f0c7); /* line */ \n        c_5468aa87(0x1027a111d9b2794f); /* statement */ \nif (x > LN_MAX_VAL) {c_5468aa87(0x57fb662881c41aaf); /* branch */ \n\nc_5468aa87(0x847a2ea29aecd141); /* line */ \n            revert LnTooLarge(x);\n        }else { c_5468aa87(0x1c6818d1c0d8e251); /* branch */ \n}\nc_5468aa87(0x7bffe3fec06dd2ee); /* line */ \n        c_5468aa87(0x1fb24aec5ee1cc0e); /* statement */ \nif (x <= 0) {c_5468aa87(0xb7639b627e570a08); /* branch */ \n\nc_5468aa87(0x1807947e445675a3); /* line */ \n            revert LnNonRealResult(x);\n        }else { c_5468aa87(0x53691d46e79c1fcf); /* branch */ \n}\nc_5468aa87(0xb80bb5f2f1de1700); /* line */ \n        c_5468aa87(0xe39478f4a5ca72bc); /* statement */ \nif (x == FIXED_1) {c_5468aa87(0x2466c20a57016f34); /* branch */ \n\nc_5468aa87(0xba5d81ff1c3894ec); /* line */ \n            c_5468aa87(0xcca3a51aeaa72a5c); /* statement */ \nreturn 0;\n        }else { c_5468aa87(0x1ca9f5e4169aec11); /* branch */ \n}\nc_5468aa87(0x44e46cccd40989ef); /* line */ \n        c_5468aa87(0xa600a1d1c149254b); /* statement */ \nif (x <= LN_MIN_VAL) {c_5468aa87(0x499fa65f93a9fe5f); /* branch */ \n\nc_5468aa87(0x15bda35aa4f8ddfe); /* line */ \n            c_5468aa87(0xd01bdbbb7b54bb50); /* statement */ \nreturn EXP_MIN_VAL;\n        }else { c_5468aa87(0x0c1cd541ff57a7a0); /* branch */ \n}\n\nc_5468aa87(0xb33a9a916feb655e); /* line */ \n        c_5468aa87(0x3ce37f668baa2617); /* statement */ \nint256 y;\nc_5468aa87(0x78aa437d0bb34902); /* line */ \n        c_5468aa87(0xd290fb50ad118505); /* statement */ \nint256 z;\nc_5468aa87(0xd0e80d0aae06dccb); /* line */ \n        c_5468aa87(0xff5bd92c14a50057); /* statement */ \nint256 w;\n\n        // Rewrite the input as a quotient of negative natural exponents and a single residual q, such that 1 < q < 2\n        // For example: log(0.3) = log(e^-1 * e^-0.25 * 1.0471028872385522)\n        //              = 1 - 0.25 - log(1 + 0.0471028872385522)\n        // e ^ -32\nc_5468aa87(0x2214eefe460464cd); /* line */ \n        c_5468aa87(0xbd970a796a8bf7ab); /* statement */ \nif (x <= int256(0x00000000000000000000000000000000000000000001c8464f76164760000000)) {c_5468aa87(0x1addad0800fd9d0f); /* branch */ \n\nc_5468aa87(0x68b1a93472752012); /* line */ \n            r -= int256(0x0000000000000000000000000000001000000000000000000000000000000000); // - 32\nc_5468aa87(0x9621091edbd0d4bb); /* line */ \n            x = (x * FIXED_1) / int256(0x00000000000000000000000000000000000000000001c8464f76164760000000); // / e ^ -32\n        }else { c_5468aa87(0x28fa0dcc7b59a66d); /* branch */ \n}\n        // e ^ -16\nc_5468aa87(0xc234a713ccda1754); /* line */ \n        c_5468aa87(0x51c01788498465e4); /* statement */ \nif (x <= int256(0x00000000000000000000000000000000000000f1aaddd7742e90000000000000)) {c_5468aa87(0x527cb46974c4f8ce); /* branch */ \n\nc_5468aa87(0x94a5b454545c6429); /* line */ \n            r -= int256(0x0000000000000000000000000000000800000000000000000000000000000000); // - 16\nc_5468aa87(0x80511693a3829ac6); /* line */ \n            x = (x * FIXED_1) / int256(0x00000000000000000000000000000000000000f1aaddd7742e90000000000000); // / e ^ -16\n        }else { c_5468aa87(0x6ec5da5d90adbf66); /* branch */ \n}\n        // e ^ -8\nc_5468aa87(0x8c7cc14572312e37); /* line */ \n        c_5468aa87(0x290ada4fdc343ba0); /* statement */ \nif (x <= int256(0x00000000000000000000000000000000000afe10820813d78000000000000000)) {c_5468aa87(0x9e44bc0652997f6b); /* branch */ \n\nc_5468aa87(0x42c89d220e94ff4c); /* line */ \n            r -= int256(0x0000000000000000000000000000000400000000000000000000000000000000); // - 8\nc_5468aa87(0x4433dfedd23ab91a); /* line */ \n            x = (x * FIXED_1) / int256(0x00000000000000000000000000000000000afe10820813d78000000000000000); // / e ^ -8\n        }else { c_5468aa87(0xb414196b397031b2); /* branch */ \n}\n        // e ^ -4\nc_5468aa87(0x518285b1f06d9bbe); /* line */ \n        c_5468aa87(0xee2400ed50a1d36c); /* statement */ \nif (x <= int256(0x0000000000000000000000000000000002582ab704279ec00000000000000000)) {c_5468aa87(0xaedb80e86cbc063c); /* branch */ \n\nc_5468aa87(0x1e7be36317380b64); /* line */ \n            r -= int256(0x0000000000000000000000000000000200000000000000000000000000000000); // - 4\nc_5468aa87(0x763c2d4a5c9c5c43); /* line */ \n            x = (x * FIXED_1) / int256(0x0000000000000000000000000000000002582ab704279ec00000000000000000); // / e ^ -4\n        }else { c_5468aa87(0xaf12277bfddcd1ea); /* branch */ \n}\n        // e ^ -2\nc_5468aa87(0x2a9c864b020ca7c3); /* line */ \n        c_5468aa87(0x07bd50baec435a75); /* statement */ \nif (x <= int256(0x000000000000000000000000000000001152aaa3bf81cc000000000000000000)) {c_5468aa87(0x42473489bf64ac1b); /* branch */ \n\nc_5468aa87(0x8685dcff138e87b3); /* line */ \n            r -= int256(0x0000000000000000000000000000000100000000000000000000000000000000); // - 2\nc_5468aa87(0x68ef4f708dc09f76); /* line */ \n            x = (x * FIXED_1) / int256(0x000000000000000000000000000000001152aaa3bf81cc000000000000000000); // / e ^ -2\n        }else { c_5468aa87(0x8d8e3ba21fe66f85); /* branch */ \n}\n        // e ^ -1\nc_5468aa87(0xfe67d5ed88a6cc99); /* line */ \n        c_5468aa87(0xa9e3409eac86cb74); /* statement */ \nif (x <= int256(0x000000000000000000000000000000002f16ac6c59de70000000000000000000)) {c_5468aa87(0xda6bd7b078e17c36); /* branch */ \n\nc_5468aa87(0x528e87290eb48928); /* line */ \n            r -= int256(0x0000000000000000000000000000000080000000000000000000000000000000); // - 1\nc_5468aa87(0xffad11e6bf8d9310); /* line */ \n            x = (x * FIXED_1) / int256(0x000000000000000000000000000000002f16ac6c59de70000000000000000000); // / e ^ -1\n        }else { c_5468aa87(0xc128157ab50916a4); /* branch */ \n}\n        // e ^ -0.5\nc_5468aa87(0x4b435e1caf157b0e); /* line */ \n        c_5468aa87(0xfae0a8630166019a); /* statement */ \nif (x <= int256(0x000000000000000000000000000000004da2cbf1be5828000000000000000000)) {c_5468aa87(0x04fc3a619606c039); /* branch */ \n\nc_5468aa87(0xc0fff97158421b58); /* line */ \n            r -= int256(0x0000000000000000000000000000000040000000000000000000000000000000); // - 0.5\nc_5468aa87(0xbf58b546cfb6cf49); /* line */ \n            x = (x * FIXED_1) / int256(0x000000000000000000000000000000004da2cbf1be5828000000000000000000); // / e ^ -0.5\n        }else { c_5468aa87(0x08a5da96dc0382ce); /* branch */ \n}\n        // e ^ -0.25\nc_5468aa87(0x9f8c5d1166e06fb5); /* line */ \n        c_5468aa87(0x65c5bbc99cf95939); /* statement */ \nif (x <= int256(0x0000000000000000000000000000000063afbe7ab2082c000000000000000000)) {c_5468aa87(0xd4818042d8292237); /* branch */ \n\nc_5468aa87(0xadfbd5d11b57eab2); /* line */ \n            r -= int256(0x0000000000000000000000000000000020000000000000000000000000000000); // - 0.25\nc_5468aa87(0x2ea5e7a33fb64f41); /* line */ \n            x = (x * FIXED_1) / int256(0x0000000000000000000000000000000063afbe7ab2082c000000000000000000); // / e ^ -0.25\n        }else { c_5468aa87(0xe6850854a5889811); /* branch */ \n}\n        // e ^ -0.125\nc_5468aa87(0x33b8573d8b10047a); /* line */ \n        c_5468aa87(0x8bf482e7a4f6096f); /* statement */ \nif (x <= int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d)) {c_5468aa87(0x6c31995fdb8bac91); /* branch */ \n\nc_5468aa87(0xe19d43b4f649ea70); /* line */ \n            r -= int256(0x0000000000000000000000000000000010000000000000000000000000000000); // - 0.125\nc_5468aa87(0x5aeddec11ab4a145); /* line */ \n            x = (x * FIXED_1) / int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d); // / e ^ -0.125\n        }else { c_5468aa87(0x202123a3d5c8ba2c); /* branch */ \n}\n        // `x` is now our residual in the range of 1 <= x <= 2 (or close enough).\n\n        // Add the taylor series for log(1 + z), where z = x - 1\nc_5468aa87(0x7105b3a281d80298); /* line */ \n        z = y = x - FIXED_1;\nc_5468aa87(0x72ef243fe8c9edca); /* line */ \n        w = (y * y) / FIXED_1;\nc_5468aa87(0x32725469c39d3d6c); /* line */ \n        r += (z * (0x100000000000000000000000000000000 - y)) / 0x100000000000000000000000000000000;\nc_5468aa87(0xaa05872dc24629d0); /* line */ \n        z = (z * w) / FIXED_1; // add y^01 / 01 - y^02 / 02\nc_5468aa87(0x50affcd83327beb7); /* line */ \n        r += (z * (0x0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa - y)) / 0x200000000000000000000000000000000;\nc_5468aa87(0x102f3191f9df1323); /* line */ \n        z = (z * w) / FIXED_1; // add y^03 / 03 - y^04 / 04\nc_5468aa87(0x0b63c4cf6d4e5328); /* line */ \n        r += (z * (0x099999999999999999999999999999999 - y)) / 0x300000000000000000000000000000000;\nc_5468aa87(0x79e61dae70c48ba2); /* line */ \n        z = (z * w) / FIXED_1; // add y^05 / 05 - y^06 / 06\nc_5468aa87(0x7bd9e0720ee2853f); /* line */ \n        r += (z * (0x092492492492492492492492492492492 - y)) / 0x400000000000000000000000000000000;\nc_5468aa87(0xd24186bf715786fe); /* line */ \n        z = (z * w) / FIXED_1; // add y^07 / 07 - y^08 / 08\nc_5468aa87(0x966dbe8a52efd7c7); /* line */ \n        r += (z * (0x08e38e38e38e38e38e38e38e38e38e38e - y)) / 0x500000000000000000000000000000000;\nc_5468aa87(0x87af21f825a67e23); /* line */ \n        z = (z * w) / FIXED_1; // add y^09 / 09 - y^10 / 10\nc_5468aa87(0xc8fe6ef05df1517e); /* line */ \n        r += (z * (0x08ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b - y)) / 0x600000000000000000000000000000000;\nc_5468aa87(0xaa8457c528c43286); /* line */ \n        z = (z * w) / FIXED_1; // add y^11 / 11 - y^12 / 12\nc_5468aa87(0x22079fb30586558f); /* line */ \n        r += (z * (0x089d89d89d89d89d89d89d89d89d89d89 - y)) / 0x700000000000000000000000000000000;\nc_5468aa87(0xd2269e5e5293d2db); /* line */ \n        z = (z * w) / FIXED_1; // add y^13 / 13 - y^14 / 14\nc_5468aa87(0x1a62625baa07294e); /* line */ \n        r += (z * (0x088888888888888888888888888888888 - y)) / 0x800000000000000000000000000000000; // add y^15 / 15 - y^16 / 16\n    }\n\n    /// @dev Compute the natural exponent for a fixed-point number EXP_MIN_VAL <= `x` <= 1\n    function _exp(int256 x) internal pure returns (int256 r) {c_5468aa87(0xd4709228d4fea665); /* function */ \n\nc_5468aa87(0x7851173254ed804c); /* line */ \n        c_5468aa87(0x60b831243866c0be); /* statement */ \nif (x < EXP_MIN_VAL) {c_5468aa87(0xd2228df256f72f61); /* branch */ \n\n            // Saturate to zero below EXP_MIN_VAL.\nc_5468aa87(0x09ac0bbc1f0f2ed0); /* line */ \n            c_5468aa87(0x01019421a8fd2458); /* statement */ \nreturn 0;\n        }else { c_5468aa87(0x93d2d268546e84c7); /* branch */ \n}\nc_5468aa87(0x63e442c8a28ccd4a); /* line */ \n        c_5468aa87(0x31878b6d7fd748a9); /* statement */ \nif (x == 0) {c_5468aa87(0x5c8868a69061c519); /* branch */ \n\nc_5468aa87(0xbe3882dad9e72d9f); /* line */ \n            c_5468aa87(0x6c2007dcd15194e5); /* statement */ \nreturn FIXED_1;\n        }else { c_5468aa87(0x327da135ff099228); /* branch */ \n}\nc_5468aa87(0x7564e5f0004a13e5); /* line */ \n        c_5468aa87(0x9530b56b9f4bdbb3); /* statement */ \nif (x > EXP_MAX_VAL) {c_5468aa87(0x561372ab4bea39f4); /* branch */ \n\nc_5468aa87(0x30b4dfc32dcce4cb); /* line */ \n            revert ExpTooLarge(x);\n        }else { c_5468aa87(0xc5cfd63920328a80); /* branch */ \n}\n\n        // Rewrite the input as a product of natural exponents and a\n        // single residual q, where q is a number of small magnitude.\n        // For example: e^-34.419 = e^(-32 - 2 - 0.25 - 0.125 - 0.044)\n        //              = e^-32 * e^-2 * e^-0.25 * e^-0.125 * e^-0.044\n        //              -> q = -0.044\n\n        // Multiply with the taylor series for e^q\nc_5468aa87(0x354a847511a60a45); /* line */ \n        c_5468aa87(0xfca4fa7decda70cd); /* statement */ \nint256 y;\nc_5468aa87(0xf892334a6519a144); /* line */ \n        c_5468aa87(0xbf4de5e6a0e7fa6a); /* statement */ \nint256 z;\n        // q = x % 0.125 (the residual)\nc_5468aa87(0x08e460d44abcc277); /* line */ \n        z = y = x % 0x0000000000000000000000000000000010000000000000000000000000000000;\nc_5468aa87(0x0084bcdc69505a9f); /* line */ \n        z = (z * y) / FIXED_1;\nc_5468aa87(0xbed1692b35c33604); /* line */ \n        r += z * 0x10e1b3be415a0000; // add y^02 * (20! / 02!)\nc_5468aa87(0xbd85bf7b01f8b24a); /* line */ \n        z = (z * y) / FIXED_1;\nc_5468aa87(0xf299884fb4931d9a); /* line */ \n        r += z * 0x05a0913f6b1e0000; // add y^03 * (20! / 03!)\nc_5468aa87(0x03f8b2d91b6e40e5); /* line */ \n        z = (z * y) / FIXED_1;\nc_5468aa87(0x8babd638471b8e54); /* line */ \n        r += z * 0x0168244fdac78000; // add y^04 * (20! / 04!)\nc_5468aa87(0xfae03974af2f05ad); /* line */ \n        z = (z * y) / FIXED_1;\nc_5468aa87(0x203dbce385cec284); /* line */ \n        r += z * 0x004807432bc18000; // add y^05 * (20! / 05!)\nc_5468aa87(0x112285a1c5d81312); /* line */ \n        z = (z * y) / FIXED_1;\nc_5468aa87(0x3e72e3edc4bb7b3d); /* line */ \n        r += z * 0x000c0135dca04000; // add y^06 * (20! / 06!)\nc_5468aa87(0xed9d957f7e4d1e85); /* line */ \n        z = (z * y) / FIXED_1;\nc_5468aa87(0x5d387b6ad5495e73); /* line */ \n        r += z * 0x0001b707b1cdc000; // add y^07 * (20! / 07!)\nc_5468aa87(0x5796ee1327fa48a8); /* line */ \n        z = (z * y) / FIXED_1;\nc_5468aa87(0x6fec04d19cfe4039); /* line */ \n        r += z * 0x000036e0f639b800; // add y^08 * (20! / 08!)\nc_5468aa87(0xb8843e7b0ca51090); /* line */ \n        z = (z * y) / FIXED_1;\nc_5468aa87(0x4e27347070da0373); /* line */ \n        r += z * 0x00000618fee9f800; // add y^09 * (20! / 09!)\nc_5468aa87(0x975061f82f2f0471); /* line */ \n        z = (z * y) / FIXED_1;\nc_5468aa87(0x3b7ce3fc0b72679a); /* line */ \n        r += z * 0x0000009c197dcc00; // add y^10 * (20! / 10!)\nc_5468aa87(0x7686a33cdacc60b3); /* line */ \n        z = (z * y) / FIXED_1;\nc_5468aa87(0x5c0480c883d8818f); /* line */ \n        r += z * 0x0000000e30dce400; // add y^11 * (20! / 11!)\nc_5468aa87(0xcf6a5ddaa4145ab1); /* line */ \n        z = (z * y) / FIXED_1;\nc_5468aa87(0xd2b61e5c846cdde7); /* line */ \n        r += z * 0x000000012ebd1300; // add y^12 * (20! / 12!)\nc_5468aa87(0x4bb6eb2e765e5986); /* line */ \n        z = (z * y) / FIXED_1;\nc_5468aa87(0x1d782bb80b38cb35); /* line */ \n        r += z * 0x0000000017499f00; // add y^13 * (20! / 13!)\nc_5468aa87(0xbcb7924371e46dda); /* line */ \n        z = (z * y) / FIXED_1;\nc_5468aa87(0x8c3ea7b9d1801c2c); /* line */ \n        r += z * 0x0000000001a9d480; // add y^14 * (20! / 14!)\nc_5468aa87(0xfc959a5c2c813f6b); /* line */ \n        z = (z * y) / FIXED_1;\nc_5468aa87(0xafb38549ea771949); /* line */ \n        r += z * 0x00000000001c6380; // add y^15 * (20! / 15!)\nc_5468aa87(0x265e998f3afe651c); /* line */ \n        z = (z * y) / FIXED_1;\nc_5468aa87(0x223e1f0822cdf344); /* line */ \n        r += z * 0x000000000001c638; // add y^16 * (20! / 16!)\nc_5468aa87(0x5a7c2f5a5ace94dc); /* line */ \n        z = (z * y) / FIXED_1;\nc_5468aa87(0xf7ae46c9f35d5924); /* line */ \n        r += z * 0x0000000000001ab8; // add y^17 * (20! / 17!)\nc_5468aa87(0x3aef6ccd68f81f3c); /* line */ \n        z = (z * y) / FIXED_1;\nc_5468aa87(0xa3bf7a3838f0cd88); /* line */ \n        r += z * 0x000000000000017c; // add y^18 * (20! / 18!)\nc_5468aa87(0x0c4fbb8eee459928); /* line */ \n        z = (z * y) / FIXED_1;\nc_5468aa87(0x55f755d225d74fa3); /* line */ \n        r += z * 0x0000000000000014; // add y^19 * (20! / 19!)\nc_5468aa87(0xdc3831cf6e8394ec); /* line */ \n        z = (z * y) / FIXED_1;\nc_5468aa87(0xc1d5294825f0dcd6); /* line */ \n        r += z * 0x0000000000000001; // add y^20 * (20! / 20!)\nc_5468aa87(0x7c908aa7faa198a2); /* line */ \n        r = r / 0x21c3677c82b40000 + y + FIXED_1; // divide by 20! and then add y^1 / 1! + y^0 / 0!\n\n        // Multiply with the non-residual terms.\nc_5468aa87(0x17467285173ec747); /* line */ \n        x = -x;\n        // e ^ -32\nc_5468aa87(0xa32436f05d7d151f); /* line */ \n        c_5468aa87(0x3a31ed49ba164fa0); /* statement */ \nif ((x & int256(0x0000000000000000000000000000001000000000000000000000000000000000)) != 0) {c_5468aa87(0xf816376365a6d812); /* branch */ \n\nc_5468aa87(0xd0d916ae24a4109e); /* line */ \n            r =\n                (r * int256(0x00000000000000000000000000000000000000f1aaddd7742e56d32fb9f99744)) /\n                int256(0x0000000000000000000000000043cbaf42a000812488fc5c220ad7b97bf6e99e); // * e ^ -32\n        }else { c_5468aa87(0xf76ec380e46ecdbb); /* branch */ \n}\n        // e ^ -16\nc_5468aa87(0xa6d1134e69272266); /* line */ \n        c_5468aa87(0x4c587d0a86d0cf7e); /* statement */ \nif ((x & int256(0x0000000000000000000000000000000800000000000000000000000000000000)) != 0) {c_5468aa87(0xd375e8aec2f58e37); /* branch */ \n\nc_5468aa87(0xb33d4f0ae3f7147e); /* line */ \n            r =\n                (r * int256(0x00000000000000000000000000000000000afe10820813d65dfe6a33c07f738f)) /\n                int256(0x000000000000000000000000000005d27a9f51c31b7c2f8038212a0574779991); // * e ^ -16\n        }else { c_5468aa87(0x5b80ec934f03039b); /* branch */ \n}\n        // e ^ -8\nc_5468aa87(0x72e4d7a96692462c); /* line */ \n        c_5468aa87(0xfde6238447df3529); /* statement */ \nif ((x & int256(0x0000000000000000000000000000000400000000000000000000000000000000)) != 0) {c_5468aa87(0x22e58f8fa34f5e9e); /* branch */ \n\nc_5468aa87(0xb7f6d20590f56874); /* line */ \n            r =\n                (r * int256(0x0000000000000000000000000000000002582ab704279e8efd15e0265855c47a)) /\n                int256(0x0000000000000000000000000000001b4c902e273a58678d6d3bfdb93db96d02); // * e ^ -8\n        }else { c_5468aa87(0x4d957283089354c4); /* branch */ \n}\n        // e ^ -4\nc_5468aa87(0xbe7cf687a98fc411); /* line */ \n        c_5468aa87(0x78fea9a8bdb7bbb9); /* statement */ \nif ((x & int256(0x0000000000000000000000000000000200000000000000000000000000000000)) != 0) {c_5468aa87(0x88867de27d573e76); /* branch */ \n\nc_5468aa87(0x329db6b9cb2bde71); /* line */ \n            r =\n                (r * int256(0x000000000000000000000000000000001152aaa3bf81cb9fdb76eae12d029571)) /\n                int256(0x00000000000000000000000000000003b1cc971a9bb5b9867477440d6d157750); // * e ^ -4\n        }else { c_5468aa87(0x6a7bc8cb7c6f1452); /* branch */ \n}\n        // e ^ -2\nc_5468aa87(0xf93ebe8d64087f73); /* line */ \n        c_5468aa87(0x37818242dc6d04fa); /* statement */ \nif ((x & int256(0x0000000000000000000000000000000100000000000000000000000000000000)) != 0) {c_5468aa87(0x3197569f4012d0c9); /* branch */ \n\nc_5468aa87(0x227b5ee958da69da); /* line */ \n            r =\n                (r * int256(0x000000000000000000000000000000002f16ac6c59de6f8d5d6f63c1482a7c86)) /\n                int256(0x000000000000000000000000000000015bf0a8b1457695355fb8ac404e7a79e3); // * e ^ -2\n        }else { c_5468aa87(0x9530b5f5c72d86bd); /* branch */ \n}\n        // e ^ -1\nc_5468aa87(0xcd7f7670bb13b005); /* line */ \n        c_5468aa87(0x58c06c3d0fe787db); /* statement */ \nif ((x & int256(0x0000000000000000000000000000000080000000000000000000000000000000)) != 0) {c_5468aa87(0x39dd9430d37d3e8a); /* branch */ \n\nc_5468aa87(0xf3065e31558cb1a2); /* line */ \n            r =\n                (r * int256(0x000000000000000000000000000000004da2cbf1be5827f9eb3ad1aa9866ebb3)) /\n                int256(0x00000000000000000000000000000000d3094c70f034de4b96ff7d5b6f99fcd8); // * e ^ -1\n        }else { c_5468aa87(0x5b8f0a44b2831182); /* branch */ \n}\n        // e ^ -0.5\nc_5468aa87(0x220e214cbe152b81); /* line */ \n        c_5468aa87(0x3030d6291ec2262b); /* statement */ \nif ((x & int256(0x0000000000000000000000000000000040000000000000000000000000000000)) != 0) {c_5468aa87(0x7ecf5386d81519fd); /* branch */ \n\nc_5468aa87(0xf2deaba86dc3372a); /* line */ \n            r =\n                (r * int256(0x0000000000000000000000000000000063afbe7ab2082ba1a0ae5e4eb1b479dc)) /\n                int256(0x00000000000000000000000000000000a45af1e1f40c333b3de1db4dd55f29a7); // * e ^ -0.5\n        }else { c_5468aa87(0x6c545b250c2856df); /* branch */ \n}\n        // e ^ -0.25\nc_5468aa87(0x6318f532ea20a1b1); /* line */ \n        c_5468aa87(0xb373cd4c03900e7f); /* statement */ \nif ((x & int256(0x0000000000000000000000000000000020000000000000000000000000000000)) != 0) {c_5468aa87(0xdc765a4317dcc8a0); /* branch */ \n\nc_5468aa87(0x439edb84f838b71d); /* line */ \n            r =\n                (r * int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d)) /\n                int256(0x00000000000000000000000000000000910b022db7ae67ce76b441c27035c6a1); // * e ^ -0.25\n        }else { c_5468aa87(0x77938bd3cbb06cb7); /* branch */ \n}\n        // e ^ -0.125\nc_5468aa87(0x74acd12649693fec); /* line */ \n        c_5468aa87(0x9ea96457d04f024b); /* statement */ \nif ((x & int256(0x0000000000000000000000000000000010000000000000000000000000000000)) != 0) {c_5468aa87(0x2754e4f97a28b4ab); /* branch */ \n\nc_5468aa87(0xd47f0f9f014989ae); /* line */ \n            r =\n                (r * int256(0x00000000000000000000000000000000783eafef1c0a8f3978c7f81824d62ebf)) /\n                int256(0x0000000000000000000000000000000088415abbe9a76bead8d00cf112e4d4a8); // * e ^ -0.125\n        }else { c_5468aa87(0xd9ae5e1531fd3c2a); /* branch */ \n}\n    }\n}\n"
    },
    "contracts/Tokens/Prime/libs/Scores.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.25;\nfunction c_29b383e8(bytes8 c__29b383e8) pure {}\nfunction c_true29b383e8(bytes8 c__29b383e8) pure returns (bool){ return true; }\nfunction c_false29b383e8(bytes8 c__29b383e8) pure returns (bool){ return false; }\n\n\nimport { SafeCastUpgradeable } from \"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\";\nimport { FixedMath } from \"./FixedMath.sol\";\n\nusing SafeCastUpgradeable for uint256;\n\n/**\n * @title Scores\n * @author Venus\n * @notice Scores library is used to calculate score of users\n */\nlibrary Scores {\nfunction c_8142f307(bytes8 c__8142f307) internal pure {}\nfunction c_true8142f307(bytes8 c__8142f307) internal pure returns (bool){ return true; }\nfunction c_false8142f307(bytes8 c__8142f307) internal pure returns (bool){ return false; }\n\n    /**\n     * @notice Calculate a membership score given some amount of `xvs` and `capital`, along\n     *  with some 𝝰 = `alphaNumerator` / `alphaDenominator`.\n     * @param xvs amount of xvs (xvs, 1e18 decimal places)\n     * @param capital amount of capital (1e18 decimal places)\n     * @param alphaNumerator alpha param numerator\n     * @param alphaDenominator alpha param denominator\n     * @return membership score with 1e18 decimal places\n     *\n     * @dev 𝝰 must be in the range [0, 1]\n     */\n    function _calculateScore(\n        uint256 xvs,\n        uint256 capital,\n        uint256 alphaNumerator,\n        uint256 alphaDenominator\n    ) internal pure returns (uint256) {c_8142f307(0x27d8c56c56e48c43); /* function */ \n\n        // Score function is:\n        // xvs^𝝰 * capital^(1-𝝰)\n        //    = capital * capital^(-𝝰) * xvs^𝝰\n        //    = capital * (xvs / capital)^𝝰\n        //    = capital * (e ^ (ln(xvs / capital))) ^ 𝝰\n        //    = capital * e ^ (𝝰 * ln(xvs / capital))     (1)\n        // or\n        //    = capital / ( 1 / e ^ (𝝰 * ln(xvs / capital)))\n        //    = capital / (e ^ (𝝰 * ln(xvs / capital)) ^ -1)\n        //    = capital / e ^ (𝝰 * -1 * ln(xvs / capital))\n        //    = capital / e ^ (𝝰 * ln(capital / xvs))     (2)\n        //\n        // To avoid overflows, use (1) when xvs < capital and\n        // use (2) when capital < xvs\n\n        // If any side is 0, exit early\nc_8142f307(0xba69f96861deca82); /* line */ \n        c_8142f307(0x70aadcd2cbab6317); /* statement */ \nif ((xvs == 0 && c_true8142f307(0x68f7e5a141b5dc67)) || (capital == 0 && c_true8142f307(0x5a78511a8e93ead0))) {c_8142f307(0x273c789b7e3b0e3f); /* statement */ \nc_8142f307(0xaa4e18af2daa0513); /* branch */ \nreturn 0;}else { c_8142f307(0x76881080393b9aca); /* branch */ \n}\n\n        // If both sides are equal, we have:\n        // xvs^𝝰 * capital^(1-𝝰)\n        //    = xvs^𝝰 * xvs^(1-𝝰)\n        //    = xvs^(𝝰 + 1 - 𝝰)     = xvs\nc_8142f307(0xd1863dd44cf26e51); /* line */ \n        c_8142f307(0xc7abf9c0cf581727); /* statement */ \nif (xvs == capital) {c_8142f307(0xcb19768fe190fd83); /* statement */ \nc_8142f307(0x6d699120c44536ba); /* branch */ \nreturn xvs;}else { c_8142f307(0xf903206786497ff5); /* branch */ \n}\n\nc_8142f307(0x531ffdb1e53689b0); /* line */ \n        c_8142f307(0x8b1028866b208d8e); /* statement */ \nbool lessxvsThanCapital = xvs < capital;\n\n        // (xvs / capital) or (capital / xvs), always in range (0, 1)\nc_8142f307(0x80dd9c993785e841); /* line */ \n        c_8142f307(0xb02091340a767b04); /* statement */ \nint256 ratio = ((lessxvsThanCapital || c_false8142f307(0xe5399da93dfe61fc)) && c_true8142f307(0xd9d2565b33a985dd)) ? FixedMath._toFixed(xvs, capital) : FixedMath._toFixed(capital, xvs);\n\n        // e ^ ( ln(ratio) * 𝝰 )\nc_8142f307(0xcf8304430def3676); /* line */ \n        c_8142f307(0x8c6a4ebe94b30c41); /* statement */ \nint256 exponentiation = FixedMath._exp(\n            (FixedMath._ln(ratio) * alphaNumerator.toInt256()) / alphaDenominator.toInt256()\n        );\n\nc_8142f307(0xed4952d2b1fc34d9); /* line */ \n        c_8142f307(0x9f05db5241e7da13); /* statement */ \nif (lessxvsThanCapital) {c_8142f307(0x2d40159b9925dffb); /* branch */ \n\n            // capital * e ^ (𝝰 * ln(xvs / capital))\nc_8142f307(0x8e1df669ff3ec3b0); /* line */ \n            c_8142f307(0xdc01636e6df35ec8); /* statement */ \nreturn FixedMath._uintMul(capital, exponentiation);\n        }else { c_8142f307(0xc32a095ef648f774); /* branch */ \n}\n\n        // capital / e ^ (𝝰 * ln(capital / xvs))\nc_8142f307(0xd6238a934fdf5f92); /* line */ \n        c_8142f307(0x00e7b52b4b117ae0); /* statement */ \nreturn FixedMath._uintDiv(capital, exponentiation);\n    }\n}\n"
    },
    "contracts/Tokens/Prime/Prime.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity 0.8.25;\nfunction c_cc4fdc0b(bytes8 c__cc4fdc0b) pure {}\nfunction c_truecc4fdc0b(bytes8 c__cc4fdc0b) pure returns (bool){ return true; }\nfunction c_falsecc4fdc0b(bytes8 c__cc4fdc0b) pure returns (bool){ return false; }\n\n\nimport { SafeERC20Upgradeable, IERC20Upgradeable } from \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport { AccessControlledV8 } from \"@venusprotocol/governance-contracts/contracts/Governance/AccessControlledV8.sol\";\nimport { ResilientOracleInterface } from \"@venusprotocol/oracle/contracts/interfaces/OracleInterface.sol\";\nimport { PausableUpgradeable } from \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport { MaxLoopsLimitHelper } from \"@venusprotocol/solidity-utilities/contracts/MaxLoopsLimitHelper.sol\";\nimport { TimeManagerV8 } from \"@venusprotocol/solidity-utilities/contracts/TimeManagerV8.sol\";\n\nimport { IERC20MetadataUpgradeable } from \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\n\nimport { PrimeStorageV1 } from \"./PrimeStorage.sol\";\nimport { Scores } from \"./libs/Scores.sol\";\n\nimport { IPrimeLiquidityProvider } from \"./Interfaces/IPrimeLiquidityProvider.sol\";\nimport { IPrime } from \"./Interfaces/IPrime.sol\";\nimport { IXVSVault } from \"./Interfaces/IXVSVault.sol\";\nimport { IVToken } from \"./Interfaces/IVToken.sol\";\nimport { InterfaceComptroller } from \"./Interfaces/InterfaceComptroller.sol\";\nimport { PoolRegistryInterface } from \"./Interfaces/IPoolRegistry.sol\";\n\n/**\n * @title Prime\n * @author Venus\n * @notice Prime Token is used to provide extra rewards to the users who have staked a minimum of `MINIMUM_STAKED_XVS` XVS in the XVSVault for `STAKING_PERIOD` days\n * @custom:security-contact https://github.com/VenusProtocol/venus-protocol\n */\ncontract Prime is IPrime, AccessControlledV8, PausableUpgradeable, MaxLoopsLimitHelper, PrimeStorageV1, TimeManagerV8 {\nfunction c_f1c12642(bytes8 c__f1c12642) internal pure {}\nfunction c_truef1c12642(bytes8 c__f1c12642) internal pure returns (bool){ return true; }\nfunction c_falsef1c12642(bytes8 c__f1c12642) internal pure returns (bool){ return false; }\nmodifier c_moda7bc5620{ c_f1c12642(0x1342986a82bce14d); /* modifier-post */ \n _; }\nmodifier c_modcfe1562e{ c_f1c12642(0x4d81f1f4c68621fc); /* modifier-pre */ \n _; }\nmodifier c_mod8a916bb7{ c_f1c12642(0x6d1ca4a58e5d43d9); /* modifier-post */ \n _; }\nmodifier c_mod35013603{ c_f1c12642(0xb49c78093ad0b036); /* modifier-pre */ \n _; }\nmodifier c_modee5ef723{ c_f1c12642(0x74158bb1955c0932); /* modifier-post */ \n _; }\nmodifier c_mod64e16088{ c_f1c12642(0x0ae04faa14b4208c); /* modifier-pre */ \n _; }\nmodifier c_modac99bef8{ c_f1c12642(0x83c437c0f1b0f0e2); /* modifier-post */ \n _; }\nmodifier c_mod60e63b9c{ c_f1c12642(0xa7650b5bd57006bc); /* modifier-pre */ \n _; }\n\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    /// @notice address of wrapped native token contract\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address public immutable WRAPPED_NATIVE_TOKEN;\n\n    /// @notice address of native market contract\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address public immutable NATIVE_MARKET;\n\n    /// @notice minimum amount of XVS user needs to stake to become a prime member\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    uint256 public immutable MINIMUM_STAKED_XVS;\n\n    /// @notice maximum XVS taken in account when calculating user score\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    uint256 public immutable MAXIMUM_XVS_CAP;\n\n    /// @notice number of days user need to stake to claim prime token\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    uint256 public immutable STAKING_PERIOD;\n\n    /// @notice Emitted when prime token is minted\n    event Mint(address indexed user, bool isIrrevocable);\n\n    /// @notice Emitted when prime token is burned\n    event Burn(address indexed user);\n\n    /// @notice Emitted when a market is added to prime program\n    event MarketAdded(\n        address indexed comptroller,\n        address indexed market,\n        uint256 supplyMultiplier,\n        uint256 borrowMultiplier\n    );\n\n    /// @notice Emitted when mint limits are updated\n    event MintLimitsUpdated(\n        uint256 indexed oldIrrevocableLimit,\n        uint256 indexed oldRevocableLimit,\n        uint256 indexed newIrrevocableLimit,\n        uint256 newRevocableLimit\n    );\n\n    /// @notice Emitted when user score is updated\n    event UserScoreUpdated(address indexed user);\n\n    /// @notice Emitted when alpha is updated\n    event AlphaUpdated(\n        uint128 indexed oldNumerator,\n        uint128 indexed oldDenominator,\n        uint128 indexed newNumerator,\n        uint128 newDenominator\n    );\n\n    /// @notice Emitted when multiplier is updated\n    event MultiplierUpdated(\n        address indexed market,\n        uint256 indexed oldSupplyMultiplier,\n        uint256 indexed oldBorrowMultiplier,\n        uint256 newSupplyMultiplier,\n        uint256 newBorrowMultiplier\n    );\n\n    /// @notice Emitted when interest is claimed\n    event InterestClaimed(address indexed user, address indexed market, uint256 amount);\n\n    /// @notice Emitted when revocable token is upgraded to irrevocable token\n    event TokenUpgraded(address indexed user);\n\n    /// @notice Emitted when stakedAt is updated\n    event StakedAtUpdated(address indexed user, uint256 timestamp);\n\n    /// @notice Error thrown when market is not supported\n    error MarketNotSupported();\n\n    /// @notice Error thrown when mint limit is reached\n    error InvalidLimit();\n\n    /// @notice Error thrown when user is not eligible to claim prime token\n    error IneligibleToClaim();\n\n    /// @notice Error thrown when user needs to wait more time to claim prime token\n    error WaitMoreTime();\n\n    /// @notice Error thrown when user has no prime token\n    error UserHasNoPrimeToken();\n\n    /// @notice Error thrown when no score updates are required\n    error NoScoreUpdatesRequired();\n\n    /// @notice Error thrown when market already exists\n    error MarketAlreadyExists();\n\n    /// @notice Error thrown when asset already exists\n    error AssetAlreadyExists();\n\n    /// @notice Error thrown when invalid address is passed\n    error InvalidAddress();\n\n    /// @notice Error thrown when invalid alpha arguments are passed\n    error InvalidAlphaArguments();\n\n    /// @notice Error thrown when invalid vToken is passed\n    error InvalidVToken();\n\n    /// @notice Error thrown when invalid length is passed\n    error InvalidLength();\n\n    /// @notice Error thrown when timestamp is invalid\n    error InvalidTimestamp();\n\n    /// @notice Error thrown when invalid comptroller is passed\n    error InvalidComptroller();\n\n    /**\n     * @notice Prime constructor\n     * @param _wrappedNativeToken Address of wrapped native token\n     * @param _nativeMarket Address of native market\n     * @param _blocksPerYear total blocks per year\n     * @param _stakingPeriod total number of seconds for which user needs to stake to claim prime token\n     * @param _minimumStakedXVS minimum amount of XVS user needs to stake to become a prime member (scaled by 1e18)\n     * @param _maximumXVSCap maximum XVS taken in account when calculating user score (scaled by 1e18)\n     * @param _timeBased A boolean indicating whether the contract is based on time or block.\n     */\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(\n        address _wrappedNativeToken,\n        address _nativeMarket,\n        uint256 _blocksPerYear,\n        uint256 _stakingPeriod,\n        uint256 _minimumStakedXVS,\n        uint256 _maximumXVSCap,\n        bool _timeBased\n    ) TimeManagerV8(_timeBased, _blocksPerYear) {c_f1c12642(0xb0c814171105f4b7); /* function */ \n\nc_f1c12642(0x5af7fc8ffd7dff57); /* line */ \n        WRAPPED_NATIVE_TOKEN = _wrappedNativeToken;\nc_f1c12642(0x8b2d55eb61bb3242); /* line */ \n        NATIVE_MARKET = _nativeMarket;\nc_f1c12642(0x0b7171433685251c); /* line */ \n        STAKING_PERIOD = _stakingPeriod;\nc_f1c12642(0xc8fedb3932b9703b); /* line */ \n        MINIMUM_STAKED_XVS = _minimumStakedXVS;\nc_f1c12642(0x237edbf914087caa); /* line */ \n        MAXIMUM_XVS_CAP = _maximumXVSCap;\n\n        // Note that the contract is upgradeable. Use initialize() or reinitializers\n        // to set the state variables.\nc_f1c12642(0x4362c3261c289174); /* line */ \n        c_f1c12642(0x28fcce9a90564d10); /* statement */ \n_disableInitializers();\n    }\n\n    /**\n     * @notice Prime initializer\n     * @param xvsVault_ Address of XVSVault\n     * @param xvsVaultRewardToken_ Address of XVSVault reward token\n     * @param xvsVaultPoolId_ Pool id of XVSVault\n     * @param alphaNumerator_ numerator of alpha. If alpha is 0.5 then numerator is 1.\n              alphaDenominator_ must be greater than alphaNumerator_, alphaDenominator_ cannot be zero and alphaNumerator_ cannot be zero\n     * @param alphaDenominator_ denominator of alpha. If alpha is 0.5 then denominator is 2.\n              alpha is alphaNumerator_/alphaDenominator_. So, 0 < alpha < 1\n     * @param accessControlManager_ Address of AccessControlManager\n     * @param primeLiquidityProvider_ Address of PrimeLiquidityProvider\n     * @param comptroller_ Address of core pool comptroller\n     * @param oracle_ Address of Oracle\n     * @param loopsLimit_ Maximum number of loops allowed in a single transaction\n     * @custom:error Throw InvalidAddress if any of the address is invalid\n     */\n    function initialize(\n        address xvsVault_,\n        address xvsVaultRewardToken_,\n        uint256 xvsVaultPoolId_,\n        uint128 alphaNumerator_,\n        uint128 alphaDenominator_,\n        address accessControlManager_,\n        address primeLiquidityProvider_,\n        address comptroller_,\n        address oracle_,\n        uint256 loopsLimit_\n    ) external  c_mod60e63b9c initializer c_modac99bef8  {c_f1c12642(0xcf39bf46a96f943a); /* function */ \n\nc_f1c12642(0xdbc7177a953d4000); /* line */ \n        c_f1c12642(0xfbf8cf89e82ff440); /* statement */ \nif (xvsVault_ == address(0)) {c_f1c12642(0x78e97208fff79e6a); /* branch */ \nrevert InvalidAddress();}else { c_f1c12642(0xc142934cdac4eeb4); /* branch */ \n}\nc_f1c12642(0x3c2ccebc8b272ab5); /* line */ \n        c_f1c12642(0x8b65cba4df4b310f); /* statement */ \nif (xvsVaultRewardToken_ == address(0)) {c_f1c12642(0x2771adbdec88eb01); /* branch */ \nrevert InvalidAddress();}else { c_f1c12642(0xea1ee4c8b2c18f71); /* branch */ \n}\nc_f1c12642(0xb46414a0943c7cdd); /* line */ \n        c_f1c12642(0xd5b3187f29ceda7b); /* statement */ \nif (oracle_ == address(0)) {c_f1c12642(0x39cfe86eca9400fe); /* branch */ \nrevert InvalidAddress();}else { c_f1c12642(0x3c65547beec79e2b); /* branch */ \n}\nc_f1c12642(0x2a5aa5a9d077cb5e); /* line */ \n        c_f1c12642(0xc2ca6ee3cd9772c7); /* statement */ \nif (primeLiquidityProvider_ == address(0)) {c_f1c12642(0x848e3b9589880df4); /* branch */ \nrevert InvalidAddress();}else { c_f1c12642(0x4028b60498fae961); /* branch */ \n}\n\nc_f1c12642(0x65f41c669a5203b4); /* line */ \n        c_f1c12642(0xf1cb9dffd0288e62); /* statement */ \n_checkAlphaArguments(alphaNumerator_, alphaDenominator_);\n\nc_f1c12642(0x78143918e115ca95); /* line */ \n        alphaNumerator = alphaNumerator_;\nc_f1c12642(0x09bced56852b77a6); /* line */ \n        alphaDenominator = alphaDenominator_;\nc_f1c12642(0xdd71458d29995e51); /* line */ \n        xvsVaultRewardToken = xvsVaultRewardToken_;\nc_f1c12642(0x52979c3afc49172c); /* line */ \n        xvsVaultPoolId = xvsVaultPoolId_;\nc_f1c12642(0xb6a8a25e61e5a9c7); /* line */ \n        xvsVault = xvsVault_;\nc_f1c12642(0x8d426450e894ea52); /* line */ \n        nextScoreUpdateRoundId = 0;\nc_f1c12642(0xc9b612232d06c2ff); /* line */ \n        primeLiquidityProvider = primeLiquidityProvider_;\nc_f1c12642(0xc2dd0a6857b07d23); /* line */ \n        corePoolComptroller = comptroller_;\nc_f1c12642(0xf1f7bad836d72816); /* line */ \n        oracle = ResilientOracleInterface(oracle_);\n\nc_f1c12642(0x9232ae66b8625a32); /* line */ \n        c_f1c12642(0xee9f020dcfa7c053); /* statement */ \n__AccessControlled_init(accessControlManager_);\nc_f1c12642(0x1c99edd67438a917); /* line */ \n        c_f1c12642(0xa3c152170375cc97); /* statement */ \n__Pausable_init();\nc_f1c12642(0xf7f492e5de16e832); /* line */ \n        c_f1c12642(0x70f3fc690d9ce550); /* statement */ \n_setMaxLoopsLimit(loopsLimit_);\n\nc_f1c12642(0xb51b1635413e7be0); /* line */ \n        c_f1c12642(0x84432890ab1b2a17); /* statement */ \n_pause();\n    }\n\n    /**\n     * @notice Prime initializer V2 for initializing pool registry\n     * @param poolRegistry_ Address of IL pool registry\n     */\n    function initializeV2(address poolRegistry_) external  c_mod64e16088 reinitializer(2) c_modee5ef723  {c_f1c12642(0x5b6acf858aed95fa); /* function */ \n\nc_f1c12642(0x7b8dbf1204aeeeac); /* line */ \n        poolRegistry = poolRegistry_;\n    }\n\n    /**\n     * @notice Returns boosted pending interest accrued for a user for all markets\n     * @param user the account for which to get the accrued interests\n     * @return pendingRewards the number of underlying tokens accrued by the user for all markets\n     */\n    function getPendingRewards(address user) external returns (PendingReward[] memory pendingRewards) {c_f1c12642(0x54a3c0ba6439df78); /* function */ \n\nc_f1c12642(0xca3d5edb24205402); /* line */ \n        c_f1c12642(0x9ba9f32027d10595); /* statement */ \naddress[] storage allMarkets = _allMarkets;\nc_f1c12642(0xdd3252f3b1db3b3b); /* line */ \n        c_f1c12642(0x801dfa6feac7ca58); /* statement */ \nuint256 marketsLength = allMarkets.length;\n\nc_f1c12642(0xed9a789fbc914ace); /* line */ \n        pendingRewards = new PendingReward[](marketsLength);\nc_f1c12642(0xdc4e0026aec16d5f); /* line */ \n        c_f1c12642(0x2c9151f806212dcf); /* statement */ \nfor (uint256 i; i < marketsLength; ) {\nc_f1c12642(0xc5d258726dc05333); /* line */ \n            c_f1c12642(0xaac0d9833f94b117); /* statement */ \naddress market = allMarkets[i];\nc_f1c12642(0xef989457302ba612); /* line */ \n            c_f1c12642(0xe282d22772202fa6); /* statement */ \nuint256 interestAccrued = getInterestAccrued(market, user);\nc_f1c12642(0xd8752b8bcefef93b); /* line */ \n            c_f1c12642(0x5c69b3facda62403); /* statement */ \nuint256 accrued = interests[market][user].accrued;\n\nc_f1c12642(0x7ce27ff45fd8c393); /* line */ \n            pendingRewards[i] = PendingReward({\n                vToken: market,\n                rewardToken: _getUnderlying(market),\n                amount: interestAccrued + accrued\n            });\n\nc_f1c12642(0x962ccd2c5c8bd997); /* line */ \n            unchecked {\nc_f1c12642(0x2729c94ea7a4f36d); /* line */ \n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Update total score of multiple users and market\n     * @param users accounts for which we need to update score\n     * @custom:error Throw NoScoreUpdatesRequired if no score updates are required\n     * @custom:error Throw UserHasNoPrimeToken if user has no prime token\n     * @custom:event Emits UserScoreUpdated event\n     */\n    function updateScores(address[] calldata users) external {c_f1c12642(0x5c4bad8381707283); /* function */ \n\nc_f1c12642(0xb08866248d37b5bd); /* line */ \n        c_f1c12642(0x259d08d48cfc1130); /* statement */ \nif (pendingScoreUpdates == 0) {c_f1c12642(0xf554a03dbda8c254); /* branch */ \nrevert NoScoreUpdatesRequired();}else { c_f1c12642(0x81d661c15a562365); /* branch */ \n}\nc_f1c12642(0xb397279fe7a15794); /* line */ \n        c_f1c12642(0x53861ab6b3510765); /* statement */ \nif (nextScoreUpdateRoundId == 0) {c_f1c12642(0xf9ec4215b0a0ab4b); /* branch */ \nrevert NoScoreUpdatesRequired();}else { c_f1c12642(0xa6957046ede9a5ef); /* branch */ \n}\n\nc_f1c12642(0xc9a8905bb699f6e9); /* line */ \n        c_f1c12642(0x97b4c85f429190d1); /* statement */ \nfor (uint256 i; i < users.length; ) {\nc_f1c12642(0x8d442f470629baff); /* line */ \n            c_f1c12642(0xeab0ef15eaf445c9); /* statement */ \naddress user = users[i];\n\nc_f1c12642(0x9b7e2ce285f0d2c4); /* line */ \n            c_f1c12642(0x9dd52f96a7c46085); /* statement */ \nif (!tokens[user].exists) {c_f1c12642(0x1ad7df5530a1945e); /* branch */ \nrevert UserHasNoPrimeToken();}else { c_f1c12642(0x924c7a483975f105); /* branch */ \n}\nc_f1c12642(0x6d197b5a6939d30a); /* line */ \n            c_f1c12642(0x2dd824f5eb6417e2); /* statement */ \nif (isScoreUpdated[nextScoreUpdateRoundId][user]) {c_f1c12642(0x4f626e7f7392ab81); /* branch */ \n\nc_f1c12642(0x3a1e11b5e863392c); /* line */ \n                unchecked {\nc_f1c12642(0x864a14a59dadc32b); /* line */ \n                    ++i;\n                }\nc_f1c12642(0xd6a68cfe0e5b20ff); /* line */ \n                continue;\n            }else { c_f1c12642(0xb0a9e8d9fa3367b8); /* branch */ \n}\n\nc_f1c12642(0xc4d621e6efdacfa0); /* line */ \n            c_f1c12642(0xa96e93131b37e1ad); /* statement */ \naddress[] storage allMarkets = _allMarkets;\nc_f1c12642(0x827c3ba7de13ee3b); /* line */ \n            c_f1c12642(0xb1b780210bb27964); /* statement */ \nuint256 marketsLength = allMarkets.length;\n\nc_f1c12642(0xdead35a37d5ddf1c); /* line */ \n            c_f1c12642(0x224de631fcbf3ba3); /* statement */ \nfor (uint256 j; j < marketsLength; ) {\nc_f1c12642(0x725d1bb80121b92a); /* line */ \n                c_f1c12642(0x62dfc840819e50f5); /* statement */ \naddress market = allMarkets[j];\nc_f1c12642(0x94198fb09869b525); /* line */ \n                c_f1c12642(0x9180c8c00c3c1246); /* statement */ \n_executeBoost(user, market);\nc_f1c12642(0xd19d66ad1edcf15b); /* line */ \n                c_f1c12642(0x25094251cafa5bb7); /* statement */ \n_updateScore(user, market);\n\nc_f1c12642(0x20ec9a0eb4200652); /* line */ \n                unchecked {\nc_f1c12642(0x300bab57a72d98a4); /* line */ \n                    ++j;\n                }\n            }\n\nc_f1c12642(0xf8f96edd5a54803a); /* line */ \n            --pendingScoreUpdates;\nc_f1c12642(0x72ceaef52c039b8a); /* line */ \n            isScoreUpdated[nextScoreUpdateRoundId][user] = true;\n\nc_f1c12642(0xa5476b4869a34c26); /* line */ \n            unchecked {\nc_f1c12642(0xee0cf9a23ccb0154); /* line */ \n                ++i;\n            }\n\nc_f1c12642(0x585050534ee985a3); /* line */ \n            c_f1c12642(0xa6c965c3d833c12a); /* statement */ \nemit UserScoreUpdated(user);\n        }\n    }\n\n    /**\n     * @notice Update value of alpha\n     * @param _alphaNumerator numerator of alpha. If alpha is 0.5 then numerator is 1\n     * @param _alphaDenominator denominator of alpha. If alpha is 0.5 then denominator is 2\n     * @custom:event Emits AlphaUpdated event\n     * @custom:access Controlled by ACM\n     */\n    function updateAlpha(uint128 _alphaNumerator, uint128 _alphaDenominator) external {c_f1c12642(0xd6b1f2c2ff4712f1); /* function */ \n\nc_f1c12642(0xaba5c676429ad892); /* line */ \n        c_f1c12642(0x72fac279cf2a10fe); /* statement */ \n_checkAccessAllowed(\"updateAlpha(uint128,uint128)\");\nc_f1c12642(0x33c947ea0a0c896e); /* line */ \n        c_f1c12642(0x5051ea49e7b9c823); /* statement */ \n_checkAlphaArguments(_alphaNumerator, _alphaDenominator);\n\nc_f1c12642(0xdaebce14f235fc5e); /* line */ \n        c_f1c12642(0x6503c0b08e9e62f1); /* statement */ \nemit AlphaUpdated(alphaNumerator, alphaDenominator, _alphaNumerator, _alphaDenominator);\n\nc_f1c12642(0x5e11777cc154ced9); /* line */ \n        alphaNumerator = _alphaNumerator;\nc_f1c12642(0x39ea48bd83676685); /* line */ \n        alphaDenominator = _alphaDenominator;\n\nc_f1c12642(0x343e0254ff943c87); /* line */ \n        c_f1c12642(0x841c227097e0d9f0); /* statement */ \nuint256 marketslength = _allMarkets.length;\n\nc_f1c12642(0x1cb02bc898342573); /* line */ \n        c_f1c12642(0x2125947fe47571ec); /* statement */ \nfor (uint256 i; i < marketslength; ) {\nc_f1c12642(0xfdbb9a48402328fe); /* line */ \n            c_f1c12642(0x94d53cbb48a14948); /* statement */ \naccrueInterest(_allMarkets[i]);\n\nc_f1c12642(0xa42b35cfb74bfe23); /* line */ \n            unchecked {\nc_f1c12642(0x1e0cfef85b177f2d); /* line */ \n                ++i;\n            }\n        }\n\nc_f1c12642(0x3a11eddf0ba92efd); /* line */ \n        c_f1c12642(0x9562f45876a42432); /* statement */ \n_startScoreUpdateRound();\n    }\n\n    /**\n     * @notice Update multipliers for a market\n     * @param market address of the market vToken\n     * @param supplyMultiplier new supply multiplier for the market, scaled by 1e18\n     * @param borrowMultiplier new borrow multiplier for the market, scaled by 1e18\n     * @custom:error Throw MarketNotSupported if market is not supported\n     * @custom:event Emits MultiplierUpdated event\n     * @custom:access Controlled by ACM\n     */\n    function updateMultipliers(address market, uint256 supplyMultiplier, uint256 borrowMultiplier) external {c_f1c12642(0x806a2922de902dcc); /* function */ \n\nc_f1c12642(0xc01143a5b839b85b); /* line */ \n        c_f1c12642(0xd0a7fb3d4dfb2f1c); /* statement */ \n_checkAccessAllowed(\"updateMultipliers(address,uint256,uint256)\");\n\nc_f1c12642(0xd9760360d266c911); /* line */ \n        c_f1c12642(0xacd3135f84eb8471); /* statement */ \nMarket storage _market = markets[market];\nc_f1c12642(0xa9ed8ef8eb87022f); /* line */ \n        c_f1c12642(0xb0ca571a85696be0); /* statement */ \nif (!_market.exists) {c_f1c12642(0xd4857d11069b1428); /* branch */ \nrevert MarketNotSupported();}else { c_f1c12642(0xe586ce900c5211b0); /* branch */ \n}\n\nc_f1c12642(0xa36f0ccab431e72d); /* line */ \n        c_f1c12642(0xcc0c9ceb70245a1d); /* statement */ \naccrueInterest(market);\n\nc_f1c12642(0x67c6a6f1519bb9c6); /* line */ \n        c_f1c12642(0x41aeb2ff602aa0d2); /* statement */ \nemit MultiplierUpdated(\n            market,\n            _market.supplyMultiplier,\n            _market.borrowMultiplier,\n            supplyMultiplier,\n            borrowMultiplier\n        );\nc_f1c12642(0xac1dd0a22200fccf); /* line */ \n        _market.supplyMultiplier = supplyMultiplier;\nc_f1c12642(0x0ebc779d85c630ac); /* line */ \n        _market.borrowMultiplier = borrowMultiplier;\n\nc_f1c12642(0xb654a0c125b3f401); /* line */ \n        c_f1c12642(0x62e8df0deab6562c); /* statement */ \n_startScoreUpdateRound();\n    }\n\n    /**\n     * @notice Update staked at timestamp for multiple users\n     * @param users accounts for which we need to update staked at timestamp\n     * @param timestamps new staked at timestamp for the users\n     * @custom:error Throw InvalidLength if users and timestamps length are not equal\n     * @custom:event Emits StakedAtUpdated event for each user\n     * @custom:access Controlled by ACM\n     */\n    function setStakedAt(address[] calldata users, uint256[] calldata timestamps) external {c_f1c12642(0xdf3725e13308cf89); /* function */ \n\nc_f1c12642(0x4f7e8283ebcf5580); /* line */ \n        c_f1c12642(0xca7c7ff07da700b3); /* statement */ \n_checkAccessAllowed(\"setStakedAt(address[],uint256[])\");\nc_f1c12642(0xfb26cc4caf05a590); /* line */ \n        c_f1c12642(0xac4cca3ee1088384); /* statement */ \nif (users.length != timestamps.length) {c_f1c12642(0xf7c8b889a1042212); /* branch */ \nrevert InvalidLength();}else { c_f1c12642(0x9d93de2ffbc7cac0); /* branch */ \n}\n\nc_f1c12642(0xf3b2f974660bfa56); /* line */ \n        c_f1c12642(0xbe7daeaca344396f); /* statement */ \nfor (uint256 i; i < users.length; ) {\nc_f1c12642(0x2e47f138a07f2c36); /* line */ \n            c_f1c12642(0x3e069c661b27777b); /* statement */ \nif (timestamps[i] > block.timestamp) {c_f1c12642(0x69b0a64bf8e7a0dc); /* branch */ \nrevert InvalidTimestamp();}else { c_f1c12642(0x2fce2af02f2755e4); /* branch */ \n}\n\nc_f1c12642(0xe575094080af76e2); /* line */ \n            stakedAt[users[i]] = timestamps[i];\nc_f1c12642(0xdb71b7f70e1bf29a); /* line */ \n            c_f1c12642(0x36c683e07fdd3a3e); /* statement */ \nemit StakedAtUpdated(users[i], timestamps[i]);\n\nc_f1c12642(0x426622c2744fdead); /* line */ \n            unchecked {\nc_f1c12642(0xdefdde0a1336571a); /* line */ \n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Add a market to prime program\n     * @param comptroller address of the comptroller\n     * @param market address of the market vToken\n     * @param supplyMultiplier the multiplier for supply cap. It should be converted to 1e18\n     * @param borrowMultiplier the multiplier for borrow cap. It should be converted to 1e18\n     * @custom:error Throw MarketAlreadyExists if market already exists\n     * @custom:error Throw InvalidVToken if market is not valid\n     * @custom:event Emits MarketAdded event\n     * @custom:access Controlled by ACM\n     */\n    function addMarket(\n        address comptroller,\n        address market,\n        uint256 supplyMultiplier,\n        uint256 borrowMultiplier\n    ) external {c_f1c12642(0x0b4004663df8ceb1); /* function */ \n\nc_f1c12642(0x30e33d133ed55b1d); /* line */ \n        c_f1c12642(0x8d4fa18f3bf5766b); /* statement */ \n_checkAccessAllowed(\"addMarket(address,address,uint256,uint256)\");\n\nc_f1c12642(0xf3dffb64c9221d3a); /* line */ \n        c_f1c12642(0x0b4384ce2a73824e); /* statement */ \nif (comptroller == address(0)) {c_f1c12642(0xc55dcf1bb6e1dd23); /* branch */ \nrevert InvalidComptroller();}else { c_f1c12642(0x64e02470cdf4d660); /* branch */ \n}\n\nc_f1c12642(0x994cd1f5ec6f865c); /* line */ \n        c_f1c12642(0x6d2dab8b4c2827ff); /* statement */ \nif (\n            comptroller != corePoolComptroller &&\n            PoolRegistryInterface(poolRegistry).getPoolByComptroller(comptroller).comptroller != comptroller\n        ) {c_f1c12642(0x170f5c49e3ad0628); /* branch */ \nrevert InvalidComptroller();}else { c_f1c12642(0x7cca3374ef3f043b); /* branch */ \n}\n\nc_f1c12642(0xf041ba0e0baa38bb); /* line */ \n        c_f1c12642(0xa8716aad19126acc); /* statement */ \nMarket storage _market = markets[market];\nc_f1c12642(0xd80924d4d2c6d857); /* line */ \n        c_f1c12642(0x3ce5b6d7e9356ec5); /* statement */ \nif (_market.exists) {c_f1c12642(0xa6d21f7a24c6b99b); /* branch */ \nrevert MarketAlreadyExists();}else { c_f1c12642(0xbc09281c2c40917f); /* branch */ \n}\n\nc_f1c12642(0x2808ec6ff7237384); /* line */ \n        c_f1c12642(0x3ab9beca37cad6b7); /* statement */ \nbool isMarketExist = InterfaceComptroller(comptroller).markets(market);\nc_f1c12642(0x3370ae5037db2fd7); /* line */ \n        c_f1c12642(0x2367a37f20a209f6); /* statement */ \nif (!isMarketExist) {c_f1c12642(0x37127b5e26787cb6); /* branch */ \nrevert InvalidVToken();}else { c_f1c12642(0x605283fc488b2af6); /* branch */ \n}\n\nc_f1c12642(0x088f13a90ece33bb); /* line */ \n        delete _market.rewardIndex;\nc_f1c12642(0x03f73173355e77bb); /* line */ \n        _market.supplyMultiplier = supplyMultiplier;\nc_f1c12642(0xa5f223a2e3a43ca1); /* line */ \n        _market.borrowMultiplier = borrowMultiplier;\nc_f1c12642(0xd08ad235342b0597); /* line */ \n        delete _market.sumOfMembersScore;\nc_f1c12642(0xae378edbfa62bec6); /* line */ \n        _market.exists = true;\n\nc_f1c12642(0x23b9a72865797f74); /* line */ \n        c_f1c12642(0x9ad31486aae4e01d); /* statement */ \naddress underlying = _getUnderlying(market);\n\nc_f1c12642(0xdda8e137cfc1b80d); /* line */ \n        c_f1c12642(0xeff8f82cc6f3585e); /* statement */ \nif (vTokenForAsset[underlying] != address(0)) {c_f1c12642(0x00d66c1d7b8e43c8); /* branch */ \nrevert AssetAlreadyExists();}else { c_f1c12642(0x4269b244ce506371); /* branch */ \n}\nc_f1c12642(0x8dd833ff8ed990a9); /* line */ \n        vTokenForAsset[underlying] = market;\n\nc_f1c12642(0x0305c6fa079e7b9d); /* line */ \n        c_f1c12642(0xfc7e0dfa36386bea); /* statement */ \n_allMarkets.push(market);\nc_f1c12642(0x073c26d30cfa8fb1); /* line */ \n        c_f1c12642(0xe3c02ef1a9e5d0c4); /* statement */ \n_startScoreUpdateRound();\n\nc_f1c12642(0xccae26b0c8b94254); /* line */ \n        c_f1c12642(0x46f589c0e90313c5); /* statement */ \n_ensureMaxLoops(_allMarkets.length);\n\nc_f1c12642(0x13c0599e3ead9d12); /* line */ \n        c_f1c12642(0xe61cc2d0f65a7620); /* statement */ \nemit MarketAdded(comptroller, market, supplyMultiplier, borrowMultiplier);\n    }\n\n    /**\n     * @notice Set limits for total tokens that can be minted\n     * @param _irrevocableLimit total number of irrevocable tokens that can be minted\n     * @param _revocableLimit total number of revocable tokens that can be minted\n     * @custom:error Throw InvalidLimit if any of the limit is less than total tokens minted\n     * @custom:event Emits MintLimitsUpdated event\n     * @custom:access Controlled by ACM\n     */\n    function setLimit(uint256 _irrevocableLimit, uint256 _revocableLimit) external {c_f1c12642(0x91af1a86a4f20e16); /* function */ \n\nc_f1c12642(0xdd659867af3a7100); /* line */ \n        c_f1c12642(0xd55cde4a294753d0); /* statement */ \n_checkAccessAllowed(\"setLimit(uint256,uint256)\");\nc_f1c12642(0x2df955dae3e7017d); /* line */ \n        c_f1c12642(0xee51ac8b998cfe2f); /* statement */ \nif ((_irrevocableLimit < totalIrrevocable && c_truef1c12642(0x4c91c4889fd5ba46)) || (_revocableLimit < totalRevocable && c_truef1c12642(0xcbc1a15f5031b2be))) {c_f1c12642(0xacd499057742db21); /* branch */ \nrevert InvalidLimit();}else { c_f1c12642(0x6a159800f516a127); /* branch */ \n}\n\nc_f1c12642(0x082377e03972d14f); /* line */ \n        c_f1c12642(0x1b2c1f13bfa55fb3); /* statement */ \nemit MintLimitsUpdated(irrevocableLimit, revocableLimit, _irrevocableLimit, _revocableLimit);\n\nc_f1c12642(0xff3092d085ff5f4b); /* line */ \n        revocableLimit = _revocableLimit;\nc_f1c12642(0x678495dc25fd1327); /* line */ \n        irrevocableLimit = _irrevocableLimit;\n    }\n\n    /**\n     * @notice Set the limit for the loops can iterate to avoid the DOS\n     * @param loopsLimit Number of loops limit\n     * @custom:event Emits MaxLoopsLimitUpdated event on success\n     * @custom:access Controlled by ACM\n     */\n    function setMaxLoopsLimit(uint256 loopsLimit) external {c_f1c12642(0x7df36efb1cd64e5b); /* function */ \n\nc_f1c12642(0x6aa7a07dfacf8649); /* line */ \n        c_f1c12642(0x8617d533f1f93048); /* statement */ \n_checkAccessAllowed(\"setMaxLoopsLimit(uint256)\");\nc_f1c12642(0xa873cf9e10abfd32); /* line */ \n        c_f1c12642(0x623495945823a5c8); /* statement */ \n_setMaxLoopsLimit(loopsLimit);\n    }\n\n    /**\n     * @notice Directly issue prime tokens to users\n     * @param isIrrevocable are the tokens being issued\n     * @param users list of address to issue tokens to\n     * @custom:access Controlled by ACM\n     */\n    function issue(bool isIrrevocable, address[] calldata users) external {c_f1c12642(0xdafcf81c787c3244); /* function */ \n\nc_f1c12642(0x448ca4c35c7bd6e3); /* line */ \n        c_f1c12642(0x7e5292eb4c530e26); /* statement */ \n_checkAccessAllowed(\"issue(bool,address[])\");\n\nc_f1c12642(0xa02c8d4ed58faed9); /* line */ \n        c_f1c12642(0x137c129ff1b39e84); /* statement */ \nif (isIrrevocable) {c_f1c12642(0x99d15c06329a1831); /* branch */ \n\nc_f1c12642(0xbdb29f17ad9e785f); /* line */ \n            c_f1c12642(0xee80266bb366b55b); /* statement */ \nfor (uint256 i; i < users.length; ) {\nc_f1c12642(0xa2fdfafad772dc6a); /* line */ \n                c_f1c12642(0xa5ab61ce4e2b2a92); /* statement */ \nToken storage userToken = tokens[users[i]];\nc_f1c12642(0x9b1ae1f5d8de927e); /* line */ \n                c_f1c12642(0x8f2df95512f71eeb); /* statement */ \nif (userToken.exists && !userToken.isIrrevocable) {c_f1c12642(0x9b7c10fad460ebb1); /* branch */ \n\nc_f1c12642(0xd4dbc7814aa1bbbc); /* line */ \n                    c_f1c12642(0x34fba21978c42037); /* statement */ \n_upgrade(users[i]);\n                } else {c_f1c12642(0xb47a18e9aa7ba080); /* branch */ \n\nc_f1c12642(0xf023e6d47cc22e4a); /* line */ \n                    c_f1c12642(0x7c56635db4520d43); /* statement */ \n_mint(true, users[i]);\nc_f1c12642(0xd47c4f7adc4df837); /* line */ \n                    c_f1c12642(0x044b21a28312b109); /* statement */ \n_initializeMarkets(users[i]);\n                }\n\nc_f1c12642(0xaa15b09900e5b171); /* line */ \n                unchecked {\nc_f1c12642(0x889bbafcfd789e22); /* line */ \n                    ++i;\n                }\n            }\n        } else {c_f1c12642(0xdadbb996b23db6d3); /* branch */ \n\nc_f1c12642(0x45ba82ae687ac345); /* line */ \n            c_f1c12642(0xcf53d9025cbe78d0); /* statement */ \nfor (uint256 i; i < users.length; ) {\nc_f1c12642(0xf4cfed75a8591667); /* line */ \n                c_f1c12642(0xb953da9e655d1366); /* statement */ \n_mint(false, users[i]);\nc_f1c12642(0x92095d5391ff2355); /* line */ \n                c_f1c12642(0x8a5a919193321fe7); /* statement */ \n_initializeMarkets(users[i]);\n\nc_f1c12642(0x9d87bfadb2e78f17); /* line */ \n                unchecked {\nc_f1c12642(0xc4707fc6be9e0c4d); /* line */ \n                    ++i;\n                }\n            }\n        }\n    }\n\n    /**\n     * @notice Executed by XVSVault whenever user's XVSVault balance changes\n     * @param user the account address whose balance was updated\n     */\n    function xvsUpdated(address user) external {c_f1c12642(0x691d406a3e051dac); /* function */ \n\nc_f1c12642(0xc6263e858b736524); /* line */ \n        c_f1c12642(0x695f30723be0e8df); /* statement */ \nuint256 totalStaked = _xvsBalanceOfUser(user);\nc_f1c12642(0x428fc05a296a9ab4); /* line */ \n        c_f1c12642(0xa6141f4c2329fc00); /* statement */ \nbool isAccountEligible = _isEligible(totalStaked);\n\nc_f1c12642(0x31e6a0626f16d528); /* line */ \n        c_f1c12642(0x03dcbe96ff0c9047); /* statement */ \nuint256 userStakedAt = stakedAt[user];\nc_f1c12642(0xaa5fe85e3674385d); /* line */ \n        c_f1c12642(0x9da91ebe653ea9a4); /* statement */ \nToken memory token = tokens[user];\n\nc_f1c12642(0x00939233c9dde70c); /* line */ \n        c_f1c12642(0x8bd93873f4361b3b); /* statement */ \nif (token.exists && !isAccountEligible) {c_f1c12642(0x7708690c258feab7); /* branch */ \n\nc_f1c12642(0xecf2c4773412a431); /* line */ \n            delete stakedAt[user];\nc_f1c12642(0x8af46051715b5d91); /* line */ \n            c_f1c12642(0x28b6300eec419373); /* statement */ \nemit StakedAtUpdated(user, 0);\n\nc_f1c12642(0x272123acbc430dfe); /* line */ \n            c_f1c12642(0xa8537d7cba4ac98b); /* statement */ \nif (token.isIrrevocable) {c_f1c12642(0xe0ed130324124297); /* branch */ \n\nc_f1c12642(0x3d40df375b0a7078); /* line */ \n                c_f1c12642(0x1ed14df3184b1533); /* statement */ \n_accrueInterestAndUpdateScore(user);\n            } else {c_f1c12642(0xa68e4165f5f25021); /* branch */ \n\nc_f1c12642(0xf1919f9cd8432583); /* line */ \n                c_f1c12642(0x4fa38f72aae650c7); /* statement */ \n_burn(user);\n            }\n        } else {c_f1c12642(0xfc0f4c9eb3bb0516); /* statement */ \nc_f1c12642(0xbf6675b60d6cc3b3); /* branch */ \nif (!isAccountEligible && !token.exists && userStakedAt != 0) {c_f1c12642(0x98a69dde8c7337aa); /* branch */ \n\nc_f1c12642(0x42a5b29b534b42fb); /* line */ \n            delete stakedAt[user];\nc_f1c12642(0xdb0a5500ab5aadbe); /* line */ \n            c_f1c12642(0x3d03a02924105707); /* statement */ \nemit StakedAtUpdated(user, 0);\n        } else {c_f1c12642(0x03db7670bbf4014d); /* statement */ \nc_f1c12642(0x95016733b395102f); /* branch */ \nif (userStakedAt == 0 && isAccountEligible && !token.exists) {c_f1c12642(0x7298daea6a6dc00d); /* branch */ \n\nc_f1c12642(0x65885e188eaed94f); /* line */ \n            stakedAt[user] = block.timestamp;\nc_f1c12642(0xcce2784e58968973); /* line */ \n            c_f1c12642(0xb5f52db20fbc4df4); /* statement */ \nemit StakedAtUpdated(user, block.timestamp);\n        } else {c_f1c12642(0xd79988c419d2d48e); /* statement */ \nc_f1c12642(0x3ee1cc450f11547b); /* branch */ \nif (token.exists && isAccountEligible) {c_f1c12642(0xc68549b503cdcef7); /* branch */ \n\nc_f1c12642(0x848c5a4c96913c3e); /* line */ \n            c_f1c12642(0xa9bc528dcc9e0cd5); /* statement */ \n_accrueInterestAndUpdateScore(user);\n\nc_f1c12642(0x58e78295f55b46d4); /* line */ \n            c_f1c12642(0xb923b868df60a61d); /* statement */ \nif (stakedAt[user] == 0) {c_f1c12642(0xfb269484d57cfe6b); /* branch */ \n\nc_f1c12642(0x688792d820e54ab8); /* line */ \n                stakedAt[user] = block.timestamp;\nc_f1c12642(0x22d3d788c34b650a); /* line */ \n                c_f1c12642(0x66e99a518945cd2a); /* statement */ \nemit StakedAtUpdated(user, block.timestamp);\n            }else { c_f1c12642(0xc0b23d94b3abd2ea); /* branch */ \n}\n        }else { c_f1c12642(0xfbecd5f31f40a0dc); /* branch */ \n}}}}\n    }\n\n    /**\n     * @notice accrues interes and updates score for an user for a specific market\n     * @param user the account address for which to accrue interest and update score\n     * @param market the market for which to accrue interest and update score\n     */\n    function accrueInterestAndUpdateScore(address user, address market) external {c_f1c12642(0x0a720a91b4b39887); /* function */ \n\nc_f1c12642(0xadb5027693219536); /* line */ \n        c_f1c12642(0x1834598aa2203e68); /* statement */ \n_executeBoost(user, market);\nc_f1c12642(0xc54b2bad56bc6bbb); /* line */ \n        c_f1c12642(0x83b2fb4b8449e54e); /* statement */ \n_updateScore(user, market);\n    }\n\n    /**\n     * @notice For claiming prime token when staking period is completed\n     */\n    function claim() external {c_f1c12642(0x16e0ea2274a9a9d9); /* function */ \n\nc_f1c12642(0xef2c68f1bd7d96cc); /* line */ \n        c_f1c12642(0x2f36fbc5b4322f19); /* statement */ \nuint256 userStakedAt = stakedAt[msg.sender];\nc_f1c12642(0xc38fe21af5c14bbc); /* line */ \n        c_f1c12642(0x1b1ee15ce5fa483c); /* statement */ \nif (userStakedAt == 0) {c_f1c12642(0x56925c0c5188a949); /* branch */ \nrevert IneligibleToClaim();}else { c_f1c12642(0x6265722ee564337c); /* branch */ \n}\nc_f1c12642(0x275e2e2c8967017f); /* line */ \n        c_f1c12642(0x950b4adea4c1c2ba); /* statement */ \nif (block.timestamp - userStakedAt < STAKING_PERIOD) {c_f1c12642(0xe0a10e22a1a5bd2a); /* branch */ \nrevert WaitMoreTime();}else { c_f1c12642(0x5476d8567d08ab1f); /* branch */ \n}\n\nc_f1c12642(0x7e00d2f568e4a9a7); /* line */ \n        c_f1c12642(0x8938183a183f7d85); /* statement */ \n_mint(false, msg.sender);\nc_f1c12642(0x2a96e43668c11b22); /* line */ \n        c_f1c12642(0x24321afc96f84b00); /* statement */ \n_initializeMarkets(msg.sender);\n    }\n\n    /**\n     * @notice For burning any prime token\n     * @param user the account address for which the prime token will be burned\n     * @custom:access Controlled by ACM\n     */\n    function burn(address user) external {c_f1c12642(0x35aca4ce9c0c5572); /* function */ \n\nc_f1c12642(0x91aeadffba14f631); /* line */ \n        c_f1c12642(0x0a7379a4e68f41fe); /* statement */ \n_checkAccessAllowed(\"burn(address)\");\nc_f1c12642(0x288ad85123a9fc56); /* line */ \n        c_f1c12642(0xf810acc39bcd82c8); /* statement */ \n_burn(user);\n    }\n\n    /**\n     * @notice To pause or unpause claiming of interest\n     * @custom:access Controlled by ACM\n     */\n    function togglePause() external {c_f1c12642(0x326bd356bcb026f5); /* function */ \n\nc_f1c12642(0x36e87eb7a6a33c0a); /* line */ \n        c_f1c12642(0xe509da99feb56d03); /* statement */ \n_checkAccessAllowed(\"togglePause()\");\nc_f1c12642(0x865067d5bb0a8c01); /* line */ \n        c_f1c12642(0x95c8a0ca79da094e); /* statement */ \nif (paused()) {c_f1c12642(0x93414a7dd25bbaf7); /* branch */ \n\nc_f1c12642(0x45558e19cf6a1b51); /* line */ \n            c_f1c12642(0xf448b6fa01fed6f8); /* statement */ \n_unpause();\n        } else {c_f1c12642(0x7f8e8c9f596335eb); /* branch */ \n\nc_f1c12642(0x0d02b061500a436a); /* line */ \n            c_f1c12642(0xd68fe1eccd603ec6); /* statement */ \n_pause();\n        }\n    }\n\n    /**\n     * @notice For user to claim boosted yield\n     * @param vToken the market for which claim the accrued interest\n     * @return amount the amount of tokens transferred to the msg.sender\n     */\n    function claimInterest(address vToken) external  c_mod35013603 whenNotPaused c_mod8a916bb7  returns (uint256) {c_f1c12642(0x01bd4a3c1d681fe9); /* function */ \n\nc_f1c12642(0xea2661d671817945); /* line */ \n        c_f1c12642(0xe4682cd52220b345); /* statement */ \nreturn _claimInterest(vToken, msg.sender);\n    }\n\n    /**\n     * @notice For user to claim boosted yield\n     * @param vToken the market for which claim the accrued interest\n     * @param user the user for which to claim the accrued interest\n     * @return amount the amount of tokens transferred to the user\n     */\n    function claimInterest(address vToken, address user) external  c_modcfe1562e whenNotPaused c_moda7bc5620  returns (uint256) {c_f1c12642(0x2c22ea930dac15e2); /* function */ \n\nc_f1c12642(0xe79febc2d00b0019); /* line */ \n        c_f1c12642(0x3002d41e6c3d5084); /* statement */ \nreturn _claimInterest(vToken, user);\n    }\n\n    /**\n     * @notice Retrieves an array of all available markets\n     * @return an array of addresses representing all available markets\n     */\n    function getAllMarkets() external view returns (address[] memory) {c_f1c12642(0x1c81116a03eca096); /* function */ \n\nc_f1c12642(0x1c77d413edd8fe22); /* line */ \n        c_f1c12642(0xf5cdcb92309eda19); /* statement */ \nreturn _allMarkets;\n    }\n\n    /**\n     * @notice Retrieves the core pool comptroller address\n     * @return the core pool comptroller address\n     */\n    function comptroller() external view returns (address) {c_f1c12642(0xd4fb67f61ee03a2b); /* function */ \n\nc_f1c12642(0xafc358dc7ae06064); /* line */ \n        c_f1c12642(0x71110314ee68a7ff); /* statement */ \nreturn corePoolComptroller;\n    }\n\n    /**\n     * @notice fetch the numbers of seconds remaining for staking period to complete\n     * @param user the account address for which we are checking the remaining time\n     * @return timeRemaining the number of seconds the user needs to wait to claim prime token\n     */\n    function claimTimeRemaining(address user) external view returns (uint256) {c_f1c12642(0xce50206a3a030706); /* function */ \n\nc_f1c12642(0xe05dac6b656cb648); /* line */ \n        c_f1c12642(0x07c07d3bc6cc120e); /* statement */ \nuint256 userStakedAt = stakedAt[user];\nc_f1c12642(0x3f9796dfc2c5f1c7); /* line */ \n        c_f1c12642(0x0d7b6738d43fd531); /* statement */ \nif (userStakedAt == 0) {c_f1c12642(0xd5d054f03005c7d2); /* statement */ \nc_f1c12642(0x63e8c49c6325a0ad); /* branch */ \nreturn STAKING_PERIOD;}else { c_f1c12642(0x48043a1a50ea9b93); /* branch */ \n}\n\nc_f1c12642(0x71a289e1dfaa0b11); /* line */ \n        c_f1c12642(0x26c1f84cf6836685); /* statement */ \nuint256 totalTimeStaked;\nc_f1c12642(0x5cef8d2a9d8e4aeb); /* line */ \n        unchecked {\nc_f1c12642(0xdc90cc35c2681251); /* line */ \n            totalTimeStaked = block.timestamp - userStakedAt;\n        }\n\nc_f1c12642(0x0322a8e0ffed8aed); /* line */ \n        c_f1c12642(0x547c61af2b241ca8); /* statement */ \nif (totalTimeStaked < STAKING_PERIOD) {c_f1c12642(0xb4a1eae5e309b66b); /* branch */ \n\nc_f1c12642(0x8e1d76349221a747); /* line */ \n            unchecked {\nc_f1c12642(0xf84228a935beee5c); /* line */ \n                c_f1c12642(0xa947030e599c9c0a); /* statement */ \nreturn STAKING_PERIOD - totalTimeStaked;\n            }\n        }else { c_f1c12642(0xecb5c9dc5d83cf46); /* branch */ \n}\nc_f1c12642(0xc0505c3ef1685005); /* line */ \n        c_f1c12642(0x7dc0b4af85ee9a22); /* statement */ \nreturn 0;\n    }\n\n    /**\n     * @notice Returns if user is a prime holder\n     * @return isPrimeHolder true if user is a prime holder\n     */\n    function isUserPrimeHolder(address user) external view returns (bool) {c_f1c12642(0x887afd223368d9e9); /* function */ \n\nc_f1c12642(0xcb73eea826f459d6); /* line */ \n        c_f1c12642(0x789ea577bb62d247); /* statement */ \nreturn tokens[user].exists;\n    }\n\n    /**\n     * @notice Returns supply and borrow APR for user for a given market\n     * @param market the market for which to fetch the APR\n     * @param user the account for which to get the APR\n     * @return aprInfo APR information for the user for the given market\n     */\n    function calculateAPR(address market, address user) external view returns (APRInfo memory aprInfo) {c_f1c12642(0x4d702ea086bd9ccb); /* function */ \n\nc_f1c12642(0x7747fa0a1eee9539); /* line */ \n        c_f1c12642(0x1cd8277a1a428fa8); /* statement */ \nIVToken vToken = IVToken(market);\nc_f1c12642(0x7050df3f14823950); /* line */ \n        c_f1c12642(0xd6e0b7db4c279231); /* statement */ \nuint256 borrow = vToken.borrowBalanceStored(user);\nc_f1c12642(0xa66728eccb588d01); /* line */ \n        c_f1c12642(0x5e2abbff1c686a07); /* statement */ \nuint256 exchangeRate = vToken.exchangeRateStored();\nc_f1c12642(0x150a0936e38b0389); /* line */ \n        c_f1c12642(0xe79250c156179284); /* statement */ \nuint256 balanceOfAccount = vToken.balanceOf(user);\nc_f1c12642(0x0dc8f9ff4546e598); /* line */ \n        c_f1c12642(0x5bd2acf2d7cae939); /* statement */ \nuint256 supply = (exchangeRate * balanceOfAccount) / EXP_SCALE;\n\nc_f1c12642(0xd310bb43131dfe5d); /* line */ \n        aprInfo.userScore = interests[market][user].score;\nc_f1c12642(0x17a9bbb908b9df8d); /* line */ \n        aprInfo.totalScore = markets[market].sumOfMembersScore;\n\nc_f1c12642(0x211958da4d7cc550); /* line */ \n        aprInfo.xvsBalanceForScore = _xvsBalanceForScore(_xvsBalanceOfUser(user));\nc_f1c12642(0x40d5a47aec2d3473); /* line */ \n        c_f1c12642(0x9f8d423b762f6701); /* statement */ \nCapital memory capital = _capitalForScore(aprInfo.xvsBalanceForScore, borrow, supply, address(vToken));\n\nc_f1c12642(0x31570136d843db8b); /* line */ \n        aprInfo.capital = capital.capital;\nc_f1c12642(0x12759b3e0c2bb3a2); /* line */ \n        aprInfo.cappedSupply = capital.cappedSupply;\nc_f1c12642(0x93262eee88bc0b8f); /* line */ \n        aprInfo.cappedBorrow = capital.cappedBorrow;\nc_f1c12642(0xc4915b6929099935); /* line */ \n        aprInfo.supplyCapUSD = capital.supplyCapUSD;\nc_f1c12642(0x3b2293b012099b35); /* line */ \n        aprInfo.borrowCapUSD = capital.borrowCapUSD;\n\nc_f1c12642(0x9bcc72f09ef84055); /* line */ \n        (aprInfo.supplyAPR, aprInfo.borrowAPR) = _calculateUserAPR(\n            market,\n            supply,\n            borrow,\n            aprInfo.cappedSupply,\n            aprInfo.cappedBorrow,\n            aprInfo.userScore,\n            aprInfo.totalScore\n        );\n    }\n\n    /**\n     * @notice Returns supply and borrow APR for estimated supply, borrow and XVS staked\n     * @param market the market for which to fetch the APR\n     * @param user the account for which to get the APR\n     * @return aprInfo APR information for the user for the given market\n     */\n    function estimateAPR(\n        address market,\n        address user,\n        uint256 borrow,\n        uint256 supply,\n        uint256 xvsStaked\n    ) external view returns (APRInfo memory aprInfo) {c_f1c12642(0x4d9f581bdaa2b68c); /* function */ \n\nc_f1c12642(0xc6673be11f2e899c); /* line */ \n        aprInfo.totalScore = markets[market].sumOfMembersScore - interests[market][user].score;\n\nc_f1c12642(0x0b45f8023bc0e62f); /* line */ \n        aprInfo.xvsBalanceForScore = _xvsBalanceForScore(xvsStaked);\nc_f1c12642(0x601b5e988c77362f); /* line */ \n        c_f1c12642(0xe7df09e9c5cf7727); /* statement */ \nCapital memory capital = _capitalForScore(aprInfo.xvsBalanceForScore, borrow, supply, market);\n\nc_f1c12642(0xe07791bce354e77e); /* line */ \n        aprInfo.capital = capital.capital;\nc_f1c12642(0x4bad9f3269aa9b60); /* line */ \n        aprInfo.cappedSupply = capital.cappedSupply;\nc_f1c12642(0xa750da42b57e0b18); /* line */ \n        aprInfo.cappedBorrow = capital.cappedBorrow;\nc_f1c12642(0x01ac2604b52dd006); /* line */ \n        aprInfo.supplyCapUSD = capital.supplyCapUSD;\nc_f1c12642(0xe56717425be61e4e); /* line */ \n        aprInfo.borrowCapUSD = capital.borrowCapUSD;\n\nc_f1c12642(0xb008405950410317); /* line */ \n        c_f1c12642(0x307a63e8895ddee3); /* statement */ \nuint256 decimals = IERC20MetadataUpgradeable(_getUnderlying(market)).decimals();\nc_f1c12642(0x215b5182d7d105ff); /* line */ \n        aprInfo.capital = aprInfo.capital * (10 ** (18 - decimals));\n\nc_f1c12642(0x065ba15089f1644d); /* line */ \n        aprInfo.userScore = Scores._calculateScore(\n            aprInfo.xvsBalanceForScore,\n            aprInfo.capital,\n            alphaNumerator,\n            alphaDenominator\n        );\n\nc_f1c12642(0xddd83d877eb1a8c8); /* line */ \n        aprInfo.totalScore = aprInfo.totalScore + aprInfo.userScore;\n\nc_f1c12642(0x2b05a0c45b6035dc); /* line */ \n        (aprInfo.supplyAPR, aprInfo.borrowAPR) = _calculateUserAPR(\n            market,\n            supply,\n            borrow,\n            aprInfo.cappedSupply,\n            aprInfo.cappedBorrow,\n            aprInfo.userScore,\n            aprInfo.totalScore\n        );\n    }\n\n    /**\n     * @notice Distributes income from market since last distribution\n     * @param vToken the market for which to distribute the income\n     * @custom:error Throw MarketNotSupported if market is not supported\n     */\n    function accrueInterest(address vToken) public {c_f1c12642(0x9a4cae2ece293014); /* function */ \n\nc_f1c12642(0xca8efb2e05efbfbe); /* line */ \n        c_f1c12642(0x11e02fcc2503fff0); /* statement */ \nMarket storage market = markets[vToken];\n\nc_f1c12642(0x90d129608daff106); /* line */ \n        c_f1c12642(0x110bc5138114427f); /* statement */ \nif (!market.exists) {c_f1c12642(0x246436c64277ed52); /* branch */ \nrevert MarketNotSupported();}else { c_f1c12642(0x02f103e10980e9eb); /* branch */ \n}\n\nc_f1c12642(0x8f30139b6df8a8b3); /* line */ \n        c_f1c12642(0xd0e069665da44077); /* statement */ \naddress underlying = _getUnderlying(vToken);\n\nc_f1c12642(0x97c72dd4bbfe07d2); /* line */ \n        c_f1c12642(0x430833d8535da94f); /* statement */ \nIPrimeLiquidityProvider _primeLiquidityProvider = IPrimeLiquidityProvider(primeLiquidityProvider);\nc_f1c12642(0x941e29913f3f53f8); /* line */ \n        c_f1c12642(0x72d724120e8623e5); /* statement */ \n_primeLiquidityProvider.accrueTokens(underlying);\nc_f1c12642(0x1ebdf63c926e543f); /* line */ \n        c_f1c12642(0xc378891843d1166e); /* statement */ \nuint256 totalAccruedInPLP = _primeLiquidityProvider.tokenAmountAccrued(underlying);\nc_f1c12642(0x09bacdb6806b4346); /* line */ \n        c_f1c12642(0x8fc5448ecb91416b); /* statement */ \nuint256 unreleasedPLPAccruedInterest = totalAccruedInPLP - unreleasedPLPIncome[underlying];\nc_f1c12642(0x8c88dc78cdda22bb); /* line */ \n        c_f1c12642(0x3c87d6ad9e5c3688); /* statement */ \nuint256 distributionIncome = unreleasedPLPAccruedInterest;\n\nc_f1c12642(0x25c54c4075b06942); /* line */ \n        c_f1c12642(0x40f3ff1812f88d01); /* statement */ \nif (distributionIncome == 0) {c_f1c12642(0xbee7ad710e47a791); /* branch */ \n\nc_f1c12642(0x39cce37fc2597948); /* line */ \n            c_f1c12642(0x9b53c4c15473d9a1); /* statement */ \nreturn;\n        }else { c_f1c12642(0x78530d99bfc583d3); /* branch */ \n}\n\nc_f1c12642(0xeed48bde23c9bb20); /* line */ \n        unreleasedPLPIncome[underlying] = totalAccruedInPLP;\n\nc_f1c12642(0xe9c6f24dc5a2e6ff); /* line */ \n        c_f1c12642(0xaaafd7daa5e10f9c); /* statement */ \nuint256 delta;\nc_f1c12642(0xacfae74cef1c88a9); /* line */ \n        c_f1c12642(0x69f0f03534b78cc1); /* statement */ \nif (market.sumOfMembersScore != 0) {c_f1c12642(0x510e8195d28d495c); /* branch */ \n\nc_f1c12642(0xfe5ae67259894846); /* line */ \n            delta = ((distributionIncome * EXP_SCALE) / market.sumOfMembersScore);\n        }else { c_f1c12642(0xdc294252a1986d1e); /* branch */ \n}\n\nc_f1c12642(0x44da47a8eced5671); /* line */ \n        market.rewardIndex += delta;\n    }\n\n    /**\n     * @notice Returns boosted interest accrued for a user\n     * @param vToken the market for which to fetch the accrued interest\n     * @param user the account for which to get the accrued interest\n     * @return interestAccrued the number of underlying tokens accrued by the user since the last accrual\n     */\n    function getInterestAccrued(address vToken, address user) public returns (uint256) {c_f1c12642(0xd6c14031efc8aa20); /* function */ \n\nc_f1c12642(0x2f3d46fefdd255a2); /* line */ \n        c_f1c12642(0x10efd0b0b0c8b4f4); /* statement */ \naccrueInterest(vToken);\n\nc_f1c12642(0x4ff63af634667e5f); /* line */ \n        c_f1c12642(0x5d747822aaa223a0); /* statement */ \nreturn _interestAccrued(vToken, user);\n    }\n\n    /**\n     * @notice accrues interest and updates score of all markets for an user\n     * @param user the account address for which to accrue interest and update score\n     */\n    function _accrueInterestAndUpdateScore(address user) internal {c_f1c12642(0xa85b3069c518e8b7); /* function */ \n\nc_f1c12642(0x3ebd7b49fba6e59d); /* line */ \n        c_f1c12642(0xcf07fb5e4e12b82a); /* statement */ \naddress[] storage allMarkets = _allMarkets;\nc_f1c12642(0x1ecc9b895e8e5c66); /* line */ \n        c_f1c12642(0x9e44485a50e93371); /* statement */ \nuint256 marketsLength = allMarkets.length;\n\nc_f1c12642(0xbe1f8e0703e31f8f); /* line */ \n        c_f1c12642(0xd711b1c624f8c822); /* statement */ \nfor (uint256 i; i < marketsLength; ) {\nc_f1c12642(0xe468226683cc0184); /* line */ \n            c_f1c12642(0xc752068ac0f3308e); /* statement */ \naddress market = allMarkets[i];\nc_f1c12642(0x0275c4008b7e9b98); /* line */ \n            c_f1c12642(0xecc35a380f7dbc9d); /* statement */ \n_executeBoost(user, market);\nc_f1c12642(0x282bb45bb466a1ee); /* line */ \n            c_f1c12642(0x45608c2a7b720c2f); /* statement */ \n_updateScore(user, market);\n\nc_f1c12642(0xf564d0cae605915a); /* line */ \n            unchecked {\nc_f1c12642(0xb44b44c2a75a702a); /* line */ \n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Initializes all the markets for the user when a prime token is minted\n     * @param account the account address for which markets needs to be initialized\n     */\n    function _initializeMarkets(address account) internal {c_f1c12642(0xf4f6975e64187814); /* function */ \n\nc_f1c12642(0x3cf5e8645ccdfa8c); /* line */ \n        c_f1c12642(0x2faaa483fadf604b); /* statement */ \naddress[] storage allMarkets = _allMarkets;\nc_f1c12642(0xd0481b2c433a0602); /* line */ \n        c_f1c12642(0x05f158cb1c4308b4); /* statement */ \nuint256 marketsLength = allMarkets.length;\n\nc_f1c12642(0xcc0900b617110b1e); /* line */ \n        c_f1c12642(0x341a5097795a8311); /* statement */ \nfor (uint256 i; i < marketsLength; ) {\nc_f1c12642(0x9a694633e903adcf); /* line */ \n            c_f1c12642(0xdb68745c85d1524d); /* statement */ \naddress market = allMarkets[i];\nc_f1c12642(0x2ae93a8a058d8a60); /* line */ \n            c_f1c12642(0xb01d612700e5b127); /* statement */ \naccrueInterest(market);\n\nc_f1c12642(0xf91b6ee33a4fa235); /* line */ \n            interests[market][account].rewardIndex = markets[market].rewardIndex;\n\nc_f1c12642(0xd63925b073ad31fc); /* line */ \n            c_f1c12642(0xc7d2e3718a756c3b); /* statement */ \nuint256 score = _calculateScore(market, account);\nc_f1c12642(0xf0877c84c307b310); /* line */ \n            interests[market][account].score = score;\nc_f1c12642(0x4e0a660df170c93e); /* line */ \n            markets[market].sumOfMembersScore = markets[market].sumOfMembersScore + score;\n\nc_f1c12642(0x9ac75f63768be011); /* line */ \n            unchecked {\nc_f1c12642(0xe5587c1d5653f947); /* line */ \n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice calculate the current score of user\n     * @param market the market for which to calculate the score\n     * @param user the account for which to calculate the score\n     * @return score the score of the user\n     */\n    function _calculateScore(address market, address user) internal returns (uint256) {c_f1c12642(0xd4b1c73b8c3feaec); /* function */ \n\nc_f1c12642(0x4427af686f049c9f); /* line */ \n        c_f1c12642(0xc60d174777739252); /* statement */ \nuint256 xvsBalanceForScore = _xvsBalanceForScore(_xvsBalanceOfUser(user));\n\nc_f1c12642(0x01e1e6a859aca0ff); /* line */ \n        c_f1c12642(0x337f64a510dbe8e8); /* statement */ \nIVToken vToken = IVToken(market);\nc_f1c12642(0xd32710656060ffb3); /* line */ \n        c_f1c12642(0x377ccb2a404764ff); /* statement */ \nuint256 borrow = vToken.borrowBalanceStored(user);\nc_f1c12642(0xae8173775d74ae5d); /* line */ \n        c_f1c12642(0x1b0b4c32b0866c00); /* statement */ \nuint256 exchangeRate = vToken.exchangeRateStored();\nc_f1c12642(0x6caca8946433baf5); /* line */ \n        c_f1c12642(0x4e2c59264c8ec277); /* statement */ \nuint256 balanceOfAccount = vToken.balanceOf(user);\nc_f1c12642(0x08b16f8e7bd800f2); /* line */ \n        c_f1c12642(0x7deb3532f630d5ff); /* statement */ \nuint256 supply = (exchangeRate * balanceOfAccount) / EXP_SCALE;\n\nc_f1c12642(0x0d2c7e386c22c2b6); /* line */ \n        c_f1c12642(0x531455ffe90207a6); /* statement */ \naddress xvsToken = IXVSVault(xvsVault).xvsAddress();\nc_f1c12642(0x4a86c6adbe1c891b); /* line */ \n        c_f1c12642(0xdd3a1cf63eded172); /* statement */ \noracle.updateAssetPrice(xvsToken);\nc_f1c12642(0xab82a8f793eba473); /* line */ \n        c_f1c12642(0xe982f93bed416006); /* statement */ \noracle.updatePrice(market);\n\nc_f1c12642(0x37ac6427ec9bcf0b); /* line */ \n        c_f1c12642(0x3a23206b1cadcfcc); /* statement */ \nCapital memory capital = _capitalForScore(xvsBalanceForScore, borrow, supply, market);\n\nc_f1c12642(0x7dd453ee9f73a774); /* line */ \n        c_f1c12642(0xe0710341e39090ca); /* statement */ \nuint256 decimals = IERC20MetadataUpgradeable(_getUnderlying(market)).decimals();\n\nc_f1c12642(0x77aa2333e9dd624b); /* line */ \n        capital.capital = capital.capital * (10 ** (18 - decimals));\n\nc_f1c12642(0xca4eeeaf299a6569); /* line */ \n        c_f1c12642(0x8fdc5ccd89cda152); /* statement */ \nreturn Scores._calculateScore(xvsBalanceForScore, capital.capital, alphaNumerator, alphaDenominator);\n    }\n\n    /**\n     * @notice To transfer the accrued interest to user\n     * @param vToken the market for which to claim\n     * @param user the account for which to get the accrued interest\n     * @return amount the amount of tokens transferred to the user\n     * @custom:event Emits InterestClaimed event\n     */\n    function _claimInterest(address vToken, address user) internal returns (uint256) {c_f1c12642(0x2b70834d08083d14); /* function */ \n\nc_f1c12642(0xab498c39b68ec9f2); /* line */ \n        c_f1c12642(0xfd4910212911cfc9); /* statement */ \nuint256 amount = getInterestAccrued(vToken, user);\nc_f1c12642(0xb294b35b4f949803); /* line */ \n        amount += interests[vToken][user].accrued;\n\nc_f1c12642(0x290fe9da2d3ff441); /* line */ \n        interests[vToken][user].rewardIndex = markets[vToken].rewardIndex;\nc_f1c12642(0xd3e1b5b106eeba34); /* line */ \n        delete interests[vToken][user].accrued;\n\nc_f1c12642(0x1ed101d830b94f5c); /* line */ \n        c_f1c12642(0xf9229bd939d197fd); /* statement */ \naddress underlying = _getUnderlying(vToken);\nc_f1c12642(0x8b2fef98a9c75eac); /* line */ \n        c_f1c12642(0xd43163454725e4a6); /* statement */ \nIERC20Upgradeable asset = IERC20Upgradeable(underlying);\n\nc_f1c12642(0x51c9f16d7f2cadb5); /* line */ \n        c_f1c12642(0x69e407d326ef3a4d); /* statement */ \nif (amount > asset.balanceOf(address(this))) {c_f1c12642(0x5bc8a322a425a10d); /* branch */ \n\nc_f1c12642(0x68cdfd93135828c2); /* line */ \n            delete unreleasedPLPIncome[underlying];\nc_f1c12642(0x9e20e6feff5d0de7); /* line */ \n            c_f1c12642(0x5bb6f38774b2fa02); /* statement */ \nIPrimeLiquidityProvider(primeLiquidityProvider).releaseFunds(address(asset));\n        }else { c_f1c12642(0xeced4d585eaa6145); /* branch */ \n}\n\nc_f1c12642(0x78ad5bd70f898a73); /* line */ \n        c_f1c12642(0x77905b8e5df18ab3); /* statement */ \nasset.safeTransfer(user, amount);\n\nc_f1c12642(0x9edff66692b412f7); /* line */ \n        c_f1c12642(0xcd3c935c2a570d91); /* statement */ \nemit InterestClaimed(user, vToken, amount);\n\nc_f1c12642(0x066fa9aab7777af2); /* line */ \n        c_f1c12642(0x53e9a314c615f331); /* statement */ \nreturn amount;\n    }\n\n    /**\n     * @notice Used to mint a new prime token\n     * @param isIrrevocable is the tokens being issued is irrevocable\n     * @param user token owner\n     * @custom:error Throw IneligibleToClaim if user is not eligible to claim prime token\n     * @custom:event Emits Mint event\n     */\n    function _mint(bool isIrrevocable, address user) internal {c_f1c12642(0x91a2657d67ef600a); /* function */ \n\nc_f1c12642(0x983dac0d37ba2f0c); /* line */ \n        c_f1c12642(0xa0eb742b831aecf9); /* statement */ \nToken storage token = tokens[user];\nc_f1c12642(0xe4aad67665c3ecd6); /* line */ \n        c_f1c12642(0xb869d352c0cb19b1); /* statement */ \nif (token.exists) {c_f1c12642(0xf0496f3ffd37e848); /* branch */ \nrevert IneligibleToClaim();}else { c_f1c12642(0x72b407e243970dba); /* branch */ \n}\n\nc_f1c12642(0x5fe67b21c3cca2b7); /* line */ \n        token.exists = true;\nc_f1c12642(0xf5fad2ed87a45506); /* line */ \n        token.isIrrevocable = isIrrevocable;\n\nc_f1c12642(0x5d6f911dfef26a38); /* line */ \n        c_f1c12642(0x1c0808518f66cfb6); /* statement */ \nif (isIrrevocable) {c_f1c12642(0x02f124391939150c); /* branch */ \n\nc_f1c12642(0x7fcdafa0cc3cfdd9); /* line */ \n            ++totalIrrevocable;\n        } else {c_f1c12642(0x8c6ace5985f3289a); /* branch */ \n\nc_f1c12642(0x0841947264da950b); /* line */ \n            ++totalRevocable;\n        }\n\nc_f1c12642(0xcf23829017c82ad1); /* line */ \n        c_f1c12642(0x82793156ec3ae24c); /* statement */ \nif ((totalIrrevocable > irrevocableLimit && c_truef1c12642(0x7c32ef114fbfb1aa)) || (totalRevocable > revocableLimit && c_truef1c12642(0x81738ed34bacb8fc))) {c_f1c12642(0xc6fbccbe0efc9ea0); /* branch */ \nrevert InvalidLimit();}else { c_f1c12642(0x2d15a38da267fedc); /* branch */ \n}\nc_f1c12642(0x86b22380463acd65); /* line */ \n        c_f1c12642(0x50044b9efe780080); /* statement */ \n_updateRoundAfterTokenMinted(user);\n\nc_f1c12642(0xb6e9799b6091aee1); /* line */ \n        c_f1c12642(0xe41356f31bf53b89); /* statement */ \nemit Mint(user, isIrrevocable);\n    }\n\n    /**\n     * @notice Used to burn a new prime token\n     * @param user owner whose prime token to burn\n     * @custom:error Throw UserHasNoPrimeToken if user has no prime token\n     * @custom:event Emits Burn event\n     */\n    function _burn(address user) internal {c_f1c12642(0xa55d2141ee16a4e1); /* function */ \n\nc_f1c12642(0x944eb334de5cd122); /* line */ \n        c_f1c12642(0x1d21fba6d3f3e41f); /* statement */ \nToken memory token = tokens[user];\nc_f1c12642(0x6b341d18857ebdf8); /* line */ \n        c_f1c12642(0x515b13c756bcd4a2); /* statement */ \nif (!token.exists) {c_f1c12642(0xadd179a63246fb92); /* branch */ \nrevert UserHasNoPrimeToken();}else { c_f1c12642(0x81990b31d1228477); /* branch */ \n}\n\nc_f1c12642(0xf3d0a0e5cd7d02d8); /* line */ \n        c_f1c12642(0x8033fdb9651880fc); /* statement */ \naddress[] storage allMarkets = _allMarkets;\nc_f1c12642(0x3875131c88b83d9e); /* line */ \n        c_f1c12642(0x6f6136bd0af069d3); /* statement */ \nuint256 marketsLength = allMarkets.length;\n\nc_f1c12642(0xc9ad9d352b55f9a9); /* line */ \n        c_f1c12642(0xbd53c43be7ea0f32); /* statement */ \nfor (uint256 i; i < marketsLength; ) {\nc_f1c12642(0xa76edc96adba0c8c); /* line */ \n            c_f1c12642(0x92f7d9bc25c69578); /* statement */ \naddress market = allMarkets[i];\nc_f1c12642(0x3f1e980c8fa299b5); /* line */ \n            c_f1c12642(0xa6d91e5b610ac607); /* statement */ \n_executeBoost(user, market);\nc_f1c12642(0x631c7ac80455caf5); /* line */ \n            markets[market].sumOfMembersScore = markets[market].sumOfMembersScore - interests[market][user].score;\n\nc_f1c12642(0x9f4964682b0a760d); /* line */ \n            delete interests[market][user].score;\nc_f1c12642(0xb7fd588cc3e45c83); /* line */ \n            delete interests[market][user].rewardIndex;\n\nc_f1c12642(0x1d610a7675bcb018); /* line */ \n            unchecked {\nc_f1c12642(0xe9f2f8f17f51ae06); /* line */ \n                ++i;\n            }\n        }\n\nc_f1c12642(0x456871592aa1f61d); /* line */ \n        c_f1c12642(0x10abbd04127c6a01); /* statement */ \nif (token.isIrrevocable) {c_f1c12642(0x4ee93e03581a2b90); /* branch */ \n\nc_f1c12642(0x3777e8422ce96253); /* line */ \n            --totalIrrevocable;\n        } else {c_f1c12642(0x60cc2a7c2dcfd134); /* branch */ \n\nc_f1c12642(0x80f1f7eb05b7eed0); /* line */ \n            --totalRevocable;\n        }\n\nc_f1c12642(0x8f1a8a91cc9fc030); /* line */ \n        delete tokens[user].exists;\nc_f1c12642(0xe3f1e41fe1be3bcf); /* line */ \n        delete tokens[user].isIrrevocable;\n\nc_f1c12642(0xa75bef45d0cb1998); /* line */ \n        c_f1c12642(0xa25b042964a70ac8); /* statement */ \n_updateRoundAfterTokenBurned(user);\n\nc_f1c12642(0x8a61ce7eae085c49); /* line */ \n        c_f1c12642(0xe52e5c4b19fcf8b5); /* statement */ \nemit Burn(user);\n    }\n\n    /**\n     * @notice Used to upgrade an token\n     * @param user owner whose prime token to upgrade\n     * @custom:error Throw InvalidLimit if total irrevocable tokens exceeds the limit\n     * @custom:event Emits TokenUpgraded event\n     */\n    function _upgrade(address user) internal {c_f1c12642(0xbd02c9f5b63a8b43); /* function */ \n\nc_f1c12642(0xa70929bbfd93e2ad); /* line */ \n        c_f1c12642(0xc21caea8c2a0971c); /* statement */ \nToken storage userToken = tokens[user];\n\nc_f1c12642(0x5c988bc43d3b0039); /* line */ \n        userToken.isIrrevocable = true;\nc_f1c12642(0x4708a892f6d9392d); /* line */ \n        ++totalIrrevocable;\nc_f1c12642(0x8c6aedf787623d62); /* line */ \n        --totalRevocable;\n\nc_f1c12642(0xdf9424016af15b12); /* line */ \n        c_f1c12642(0xf507f4ae7d62327b); /* statement */ \nif (totalIrrevocable > irrevocableLimit) {c_f1c12642(0xbad31cf4f276afa6); /* branch */ \nrevert InvalidLimit();}else { c_f1c12642(0x0185819948753507); /* branch */ \n}\n\nc_f1c12642(0xa359d95032835172); /* line */ \n        c_f1c12642(0xcc5e700792ebe389); /* statement */ \nemit TokenUpgraded(user);\n    }\n\n    /**\n     * @notice Accrue rewards for the user. Must be called before updating score\n     * @param user account for which we need to accrue rewards\n     * @param vToken the market for which we need to accrue rewards\n     */\n    function _executeBoost(address user, address vToken) internal {c_f1c12642(0xd400652c14f953ec); /* function */ \n\nc_f1c12642(0xc38d17b6bb34a51b); /* line */ \n        c_f1c12642(0x895a7bb353d6a43b); /* statement */ \nif ((!markets[vToken].exists && c_truef1c12642(0x8541b8afe5ba2c6b)) || (!tokens[user].exists && c_truef1c12642(0xb2afaca2213313da))) {c_f1c12642(0xa467bab39480a988); /* branch */ \n\nc_f1c12642(0x799b664a82e61061); /* line */ \n            c_f1c12642(0x8aeceb6cf473bdc9); /* statement */ \nreturn;\n        }else { c_f1c12642(0x74266ac726a7db9a); /* branch */ \n}\n\nc_f1c12642(0xd0cb5943d4012cf9); /* line */ \n        c_f1c12642(0xedff1ab74989fafb); /* statement */ \naccrueInterest(vToken);\nc_f1c12642(0xe12b116c297c155c); /* line */ \n        interests[vToken][user].accrued += _interestAccrued(vToken, user);\nc_f1c12642(0x4024a33bfec78923); /* line */ \n        interests[vToken][user].rewardIndex = markets[vToken].rewardIndex;\n    }\n\n    /**\n     * @notice Update total score of user and market. Must be called after changing account's borrow or supply balance.\n     * @param user account for which we need to update score\n     * @param market the market for which we need to score\n     */\n    function _updateScore(address user, address market) internal {c_f1c12642(0x1bd2d391e3867757); /* function */ \n\nc_f1c12642(0x27d45195bdc2aa2e); /* line */ \n        c_f1c12642(0x26d565b2c0aafcdc); /* statement */ \nMarket storage _market = markets[market];\nc_f1c12642(0xbc012dcd58e9f648); /* line */ \n        c_f1c12642(0x42bae35a7a310a99); /* statement */ \nif ((!_market.exists && c_truef1c12642(0x9b571d1c2b77b7bd)) || (!tokens[user].exists && c_truef1c12642(0x62b5a7dbc8f97169))) {c_f1c12642(0xbfab1bdbe8d09812); /* branch */ \n\nc_f1c12642(0xadba28bd5beca014); /* line */ \n            c_f1c12642(0xba3739018ac5cb3b); /* statement */ \nreturn;\n        }else { c_f1c12642(0xd5b270781e6e8730); /* branch */ \n}\n\nc_f1c12642(0xc94ba4d900ef630a); /* line */ \n        c_f1c12642(0x7720dfd4a02409f4); /* statement */ \nuint256 score = _calculateScore(market, user);\nc_f1c12642(0xc7cf236f5d7be50d); /* line */ \n        _market.sumOfMembersScore = _market.sumOfMembersScore - interests[market][user].score + score;\n\nc_f1c12642(0xbde937b910d22b61); /* line */ \n        interests[market][user].score = score;\n    }\n\n    /**\n     * @notice Verify new alpha arguments\n     * @param _alphaNumerator numerator of alpha. If alpha is 0.5 then numerator is 1\n     * @param _alphaDenominator denominator of alpha. If alpha is 0.5 then denominator is 2\n     * @custom:error Throw InvalidAlphaArguments if alpha is invalid\n     */\n    function _checkAlphaArguments(uint128 _alphaNumerator, uint128 _alphaDenominator) internal pure {c_f1c12642(0xe6613376151b7c81); /* function */ \n\nc_f1c12642(0xf005c9e18da7b860); /* line */ \n        c_f1c12642(0x71fb323bd015f01b); /* statement */ \nif ((_alphaNumerator >= _alphaDenominator && c_truef1c12642(0x9130f5b467e92dc0)) || (_alphaNumerator == 0 && c_truef1c12642(0xf27642c77e9e179b))) {c_f1c12642(0xd903baeb598b2df3); /* branch */ \n\nc_f1c12642(0x3faf9d4934f8c141); /* line */ \n            revert InvalidAlphaArguments();\n        }else { c_f1c12642(0xda2bc9bcc15174fe); /* branch */ \n}\n    }\n\n    /**\n     * @notice starts round to update scores of a particular or all markets\n     */\n    function _startScoreUpdateRound() internal {c_f1c12642(0xdc0e80a6c12cecd2); /* function */ \n\nc_f1c12642(0x2fd32299f197eb20); /* line */ \n        nextScoreUpdateRoundId++;\nc_f1c12642(0x4ddca2e7aca437d4); /* line */ \n        totalScoreUpdatesRequired = totalIrrevocable + totalRevocable;\nc_f1c12642(0x249f9e3e7ff3172e); /* line */ \n        pendingScoreUpdates = totalScoreUpdatesRequired;\n    }\n\n    /**\n     * @notice update the required score updates when token is burned before round is completed\n     */\n    function _updateRoundAfterTokenBurned(address user) internal {c_f1c12642(0x033e91f1c52937f7); /* function */ \n\nc_f1c12642(0x10ec5c8376e8144b); /* line */ \n        c_f1c12642(0xe622f846ad3b1173); /* statement */ \nif (totalScoreUpdatesRequired != 0) {c_f1c12642(0x19b96aacb4b49f20); /* branch */ \n--totalScoreUpdatesRequired;}else { c_f1c12642(0xd668164ff3f2c546); /* branch */ \n}\n\nc_f1c12642(0x3bd944a8ac470b4a); /* line */ \n        c_f1c12642(0xf0247daad3aae327); /* statement */ \nif (pendingScoreUpdates != 0 && !isScoreUpdated[nextScoreUpdateRoundId][user]) {c_f1c12642(0xad15b6322cec7908); /* branch */ \n\nc_f1c12642(0xbac94841b105ac06); /* line */ \n            --pendingScoreUpdates;\n        }else { c_f1c12642(0x6f4f291038f82f98); /* branch */ \n}\n    }\n\n    /**\n     * @notice update the required score updates when token is minted before round is completed\n     */\n    function _updateRoundAfterTokenMinted(address user) internal {c_f1c12642(0xb065e4622144e54b); /* function */ \n\nc_f1c12642(0x7a7eb307bfcdfd18); /* line */ \n        c_f1c12642(0xa8aceb91655a2c79); /* statement */ \nif (totalScoreUpdatesRequired != 0) {c_f1c12642(0xa738deeb84792b86); /* branch */ \nisScoreUpdated[nextScoreUpdateRoundId][user] = true;}else { c_f1c12642(0x9b753749e701b83d); /* branch */ \n}\n    }\n\n    /**\n     * @notice fetch the current XVS balance of user in the XVSVault\n     * @param user the account address\n     * @return xvsBalance the XVS balance of user\n     */\n    function _xvsBalanceOfUser(address user) internal view returns (uint256) {c_f1c12642(0x968b458b00d83a92); /* function */ \n\nc_f1c12642(0x68652566d750cd2f); /* line */ \n        c_f1c12642(0x765455e26ee672af); /* statement */ \n(uint256 xvs, , uint256 pendingWithdrawals) = IXVSVault(xvsVault).getUserInfo(\n            xvsVaultRewardToken,\n            xvsVaultPoolId,\n            user\n        );\nc_f1c12642(0x846204624f342d40); /* line */ \n        c_f1c12642(0x2dced7b9be23f807); /* statement */ \nreturn (xvs - pendingWithdrawals);\n    }\n\n    /**\n     * @notice calculate the current XVS balance that will be used in calculation of score\n     * @param xvs the actual XVS balance of user\n     * @return xvsBalanceForScore the XVS balance to use in score\n     */\n    function _xvsBalanceForScore(uint256 xvs) internal view returns (uint256) {c_f1c12642(0xfb3a289e24d1ec7d); /* function */ \n\nc_f1c12642(0x7f218458dc5bfe20); /* line */ \n        c_f1c12642(0xa50e9ed80d1ba6aa); /* statement */ \nif (xvs > MAXIMUM_XVS_CAP) {c_f1c12642(0xf5352418c762a97f); /* branch */ \n\nc_f1c12642(0xf5368e7e2b0c061b); /* line */ \n            c_f1c12642(0x42deaa8c213d87e6); /* statement */ \nreturn MAXIMUM_XVS_CAP;\n        }else { c_f1c12642(0xd228f9d57fe54559); /* branch */ \n}\nc_f1c12642(0x503c76218ce07e67); /* line */ \n        c_f1c12642(0xaf2c75d12699783f); /* statement */ \nreturn xvs;\n    }\n\n    /**\n     * @notice calculate the capital for calculation of score\n     * @param xvs the actual XVS balance of user\n     * @param borrow the borrow balance of user\n     * @param supply the supply balance of user\n     * @param market the market vToken address\n     * @return capital the capital to use in calculation of score\n     */\n    function _capitalForScore(\n        uint256 xvs,\n        uint256 borrow,\n        uint256 supply,\n        address market\n    ) internal view returns (Capital memory capital) {c_f1c12642(0x6f0945a20cf04d04); /* function */ \n\nc_f1c12642(0x872d9be97d1e874e); /* line */ \n        c_f1c12642(0xc3344201b3da6c2b); /* statement */ \naddress xvsToken = IXVSVault(xvsVault).xvsAddress();\n\nc_f1c12642(0xa4dadf4a2002008b); /* line */ \n        c_f1c12642(0x40cb932346d166ab); /* statement */ \nuint256 xvsPrice = oracle.getPrice(xvsToken);\nc_f1c12642(0x680c2c6b5a4756a6); /* line */ \n        capital.borrowCapUSD = (xvsPrice * ((xvs * markets[market].borrowMultiplier) / EXP_SCALE)) / EXP_SCALE;\nc_f1c12642(0x0233b0c12fb1e42e); /* line */ \n        capital.supplyCapUSD = (xvsPrice * ((xvs * markets[market].supplyMultiplier) / EXP_SCALE)) / EXP_SCALE;\n\nc_f1c12642(0xea685582dfe9e96c); /* line */ \n        c_f1c12642(0xb57c69598979fbfb); /* statement */ \nuint256 tokenPrice = oracle.getUnderlyingPrice(market);\nc_f1c12642(0x3520edc492d69ba3); /* line */ \n        c_f1c12642(0x7e9c892d950616a1); /* statement */ \nuint256 supplyUSD = (tokenPrice * supply) / EXP_SCALE;\nc_f1c12642(0x7f1703355c8e8c82); /* line */ \n        c_f1c12642(0x762628097ad463e1); /* statement */ \nuint256 borrowUSD = (tokenPrice * borrow) / EXP_SCALE;\n\nc_f1c12642(0xabba388906517e9d); /* line */ \n        c_f1c12642(0x8bcc07deb47f470d); /* statement */ \nif (supplyUSD >= capital.supplyCapUSD) {c_f1c12642(0x9b158c63de05aedd); /* branch */ \n\nc_f1c12642(0x12edbe0f716edba7); /* line */ \n            supply = ((supplyUSD != 0 || c_falsef1c12642(0xa7072ae72cd0ab77)) && c_truef1c12642(0xcea014e50b458b97)) ? (supply * capital.supplyCapUSD) / supplyUSD : 0;\n        }else { c_f1c12642(0xe2e34ec2d8605ebf); /* branch */ \n}\n\nc_f1c12642(0xdf5a22365eb487ca); /* line */ \n        c_f1c12642(0x396f43bb29065697); /* statement */ \nif (borrowUSD >= capital.borrowCapUSD) {c_f1c12642(0xaf132fe3e7b4b7ba); /* branch */ \n\nc_f1c12642(0x98a49c09b69aac48); /* line */ \n            borrow = ((borrowUSD != 0 || c_falsef1c12642(0xf153de5e27799776)) && c_truef1c12642(0x3bcfe9a46d4f1794)) ? (borrow * capital.borrowCapUSD) / borrowUSD : 0;\n        }else { c_f1c12642(0x8cb18516b74b8321); /* branch */ \n}\n\nc_f1c12642(0x0a146cb7124e4526); /* line */ \n        capital.capital = supply + borrow;\nc_f1c12642(0xaa16b9d519e9f689); /* line */ \n        capital.cappedSupply = supply;\nc_f1c12642(0xf85be4351e753bc9); /* line */ \n        capital.cappedBorrow = borrow;\n    }\n\n    /**\n     * @notice Used to get if the XVS balance is eligible for prime token\n     * @param amount amount of XVS\n     * @return isEligible true if the staked XVS amount is enough to consider the associated user eligible for a Prime token, false otherwise\n     */\n    function _isEligible(uint256 amount) internal view returns (bool) {c_f1c12642(0x53eb595967122788); /* function */ \n\nc_f1c12642(0x3da304af26229a9e); /* line */ \n        c_f1c12642(0xc067daf88d3ffd1a); /* statement */ \nif (amount >= MINIMUM_STAKED_XVS) {c_f1c12642(0xaf7fa67c3a6e16a1); /* branch */ \n\nc_f1c12642(0x2605d1ddafaf2ab2); /* line */ \n            c_f1c12642(0x2ab4d3442b885463); /* statement */ \nreturn true;\n        }else { c_f1c12642(0xd8d4318a073089e7); /* branch */ \n}\n\nc_f1c12642(0x848cdc62b8be8eef); /* line */ \n        c_f1c12642(0x0c192d1c29d10443); /* statement */ \nreturn false;\n    }\n\n    /**\n     * @notice Calculate the interests accrued by the user in the market, since the last accrual\n     * @param vToken the market for which to calculate the accrued interest\n     * @param user the user for which to calculate the accrued interest\n     * @return interestAccrued the number of underlying tokens accrued by the user since the last accrual\n     */\n    function _interestAccrued(address vToken, address user) internal view returns (uint256) {c_f1c12642(0xc530c112b00690a2); /* function */ \n\nc_f1c12642(0x6d35f199641ec317); /* line */ \n        c_f1c12642(0x6b8cb0006d86f41d); /* statement */ \nInterest memory interest = interests[vToken][user];\nc_f1c12642(0x4f5d8dd2b4898b93); /* line */ \n        c_f1c12642(0x6c5e93ce488be0a4); /* statement */ \nuint256 index = markets[vToken].rewardIndex - interest.rewardIndex;\n\nc_f1c12642(0x95edd0e0d34c4223); /* line */ \n        c_f1c12642(0xb9151f2b8164f50a); /* statement */ \nuint256 score = interest.score;\n\nc_f1c12642(0x3f48b17fbd43e296); /* line */ \n        c_f1c12642(0x604a8609305695b7); /* statement */ \nreturn (index * score) / EXP_SCALE;\n    }\n\n    /**\n     * @notice Returns the underlying token associated with the VToken, or wrapped native token if the market is native market\n     * @param vToken the market whose underlying token will be returned\n     * @return underlying The address of the underlying token associated with the VToken, or the address of the WRAPPED_NATIVE_TOKEN token if the market is NATIVE_MARKET\n     */\n    function _getUnderlying(address vToken) internal view returns (address) {c_f1c12642(0x2f223f47f5c45fc8); /* function */ \n\nc_f1c12642(0x930e99051b7be20c); /* line */ \n        c_f1c12642(0xb7fc0b579a17a010); /* statement */ \nif (vToken == NATIVE_MARKET) {c_f1c12642(0x1a9a12ad5be5f515); /* branch */ \n\nc_f1c12642(0x5b3e7b95e1a38079); /* line */ \n            c_f1c12642(0x6b6b0d6ab45f980f); /* statement */ \nreturn WRAPPED_NATIVE_TOKEN;\n        }else { c_f1c12642(0x15956f55e21eb377); /* branch */ \n}\nc_f1c12642(0x9a061fd3d0f96169); /* line */ \n        c_f1c12642(0x416e276f3deabf4f); /* statement */ \nreturn IVToken(vToken).underlying();\n    }\n\n    //////////////////////////////////////////////////\n    //////////////// APR Calculation ////////////////\n    ////////////////////////////////////////////////\n\n    /**\n     * @notice the total income that's going to be distributed in a year to prime token holders\n     * @param vToken the market for which to fetch the total income that's going to distributed in a year\n     * @return amount the total income\n     */\n    function incomeDistributionYearly(address vToken) public view returns (uint256 amount) {c_f1c12642(0x18ccc42ba092c643); /* function */ \n\nc_f1c12642(0x1895c4cb2dead376); /* line */ \n        c_f1c12642(0x337692ab076e819f); /* statement */ \nuint256 totalIncomePerBlockOrSecondFromPLP = IPrimeLiquidityProvider(primeLiquidityProvider)\n            .getEffectiveDistributionSpeed(_getUnderlying(vToken));\nc_f1c12642(0xae5f387b0fc0e70c); /* line */ \n        amount = blocksOrSecondsPerYear * totalIncomePerBlockOrSecondFromPLP;\n    }\n\n    /**\n     * @notice used to calculate the supply and borrow APR of the user\n     * @param vToken the market for which to fetch the APR\n     * @param totalSupply the total token supply of the user\n     * @param totalBorrow the total tokens borrowed by the user\n     * @param totalCappedSupply the total token capped supply of the user\n     * @param totalCappedBorrow the total capped tokens borrowed by the user\n     * @param userScore the score of the user\n     * @param totalScore the total market score\n     * @return supplyAPR the supply APR of the user\n     * @return borrowAPR the borrow APR of the user\n     */\n    function _calculateUserAPR(\n        address vToken,\n        uint256 totalSupply,\n        uint256 totalBorrow,\n        uint256 totalCappedSupply,\n        uint256 totalCappedBorrow,\n        uint256 userScore,\n        uint256 totalScore\n    ) internal view returns (uint256 supplyAPR, uint256 borrowAPR) {c_f1c12642(0x720b2b94772af426); /* function */ \n\nc_f1c12642(0x132ab2444cf1c5fb); /* line */ \n        c_f1c12642(0xf5907893293e0f55); /* statement */ \nif (totalScore == 0) {c_f1c12642(0x64019e520abfa69c); /* statement */ \nc_f1c12642(0xfa42bdfe615f7169); /* branch */ \nreturn (0, 0);}else { c_f1c12642(0xfab6ce2abb91dfc1); /* branch */ \n}\n\nc_f1c12642(0x96e3ca5f110789eb); /* line */ \n        c_f1c12642(0x75a3efeb4f9ef889); /* statement */ \nuint256 userYearlyIncome = (userScore * incomeDistributionYearly(vToken)) / totalScore;\n\nc_f1c12642(0xc1a8c7420b3f9624); /* line */ \n        c_f1c12642(0x5c1ca963b65d79f0); /* statement */ \nuint256 totalCappedValue = totalCappedSupply + totalCappedBorrow;\n\nc_f1c12642(0x864d435210c90451); /* line */ \n        c_f1c12642(0xa7d99180232d3482); /* statement */ \nif (totalCappedValue == 0) {c_f1c12642(0x36682182a482f0b4); /* statement */ \nc_f1c12642(0x0bc00d0b51fdd552); /* branch */ \nreturn (0, 0);}else { c_f1c12642(0xc59fec5e830db8e3); /* branch */ \n}\n\nc_f1c12642(0x62f75a7538e69dc9); /* line */ \n        c_f1c12642(0x7da6f65f40db9a72); /* statement */ \nuint256 maximumBps = MAXIMUM_BPS;\nc_f1c12642(0x1396cd35f353f7a3); /* line */ \n        c_f1c12642(0x2d3e672dabaf1941); /* statement */ \nuint256 userSupplyIncomeYearly;\nc_f1c12642(0x71bfe8c1c649b511); /* line */ \n        c_f1c12642(0x1de80e64b6e42327); /* statement */ \nuint256 userBorrowIncomeYearly;\nc_f1c12642(0x7a46e388792fd030); /* line */ \n        userSupplyIncomeYearly = (userYearlyIncome * totalCappedSupply) / totalCappedValue;\nc_f1c12642(0x4f21f14b671824ac); /* line */ \n        userBorrowIncomeYearly = (userYearlyIncome * totalCappedBorrow) / totalCappedValue;\nc_f1c12642(0xf6ade3b290625621); /* line */ \n        supplyAPR = ((totalSupply == 0 || c_falsef1c12642(0xafa23b6e5e11fab9)) && c_truef1c12642(0xc0b3041c9aed8669)) ? 0 : ((userSupplyIncomeYearly * maximumBps) / totalSupply);\nc_f1c12642(0xc4da642ff4b0b8ed); /* line */ \n        borrowAPR = ((totalBorrow == 0 || c_falsef1c12642(0x8cb6808a26a0f20f)) && c_truef1c12642(0x267b6b0141f4cd89)) ? 0 : ((userBorrowIncomeYearly * maximumBps) / totalBorrow);\n    }\n}\n"
    },
    "contracts/Tokens/Prime/PrimeLiquidityProvider.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity 0.8.25;\nfunction c_6dddcab5(bytes8 c__6dddcab5) pure {}\nfunction c_true6dddcab5(bytes8 c__6dddcab5) pure returns (bool){ return true; }\nfunction c_false6dddcab5(bytes8 c__6dddcab5) pure returns (bool){ return false; }\n\n\nimport { PrimeLiquidityProviderStorageV1 } from \"./PrimeLiquidityProviderStorage.sol\";\nimport { SafeERC20Upgradeable, IERC20Upgradeable } from \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport { AccessControlledV8 } from \"@venusprotocol/governance-contracts/contracts/Governance/AccessControlledV8.sol\";\nimport { PausableUpgradeable } from \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport { IPrimeLiquidityProvider } from \"./Interfaces/IPrimeLiquidityProvider.sol\";\nimport { MaxLoopsLimitHelper } from \"@venusprotocol/solidity-utilities/contracts/MaxLoopsLimitHelper.sol\";\nimport { TimeManagerV8 } from \"@venusprotocol/solidity-utilities/contracts/TimeManagerV8.sol\";\n\n/**\n * @title PrimeLiquidityProvider\n * @author Venus\n * @notice PrimeLiquidityProvider is used to fund Prime\n */\ncontract PrimeLiquidityProvider is\n    IPrimeLiquidityProvider,\n    AccessControlledV8,\n    PausableUpgradeable,\n    MaxLoopsLimitHelper,\n    PrimeLiquidityProviderStorageV1,\n    TimeManagerV8\n{\nfunction c_550d2972(bytes8 c__550d2972) internal pure {}\nfunction c_true550d2972(bytes8 c__550d2972) internal pure returns (bool){ return true; }\nfunction c_false550d2972(bytes8 c__550d2972) internal pure returns (bool){ return false; }\nmodifier c_mod54802ebc{ c_550d2972(0xb5b9f505ce9beb78); /* modifier-post */ \n _; }\nmodifier c_mod7cb67fae{ c_550d2972(0xc9978cfeb1f3ea12); /* modifier-pre */ \n _; }\nmodifier c_modc0143c4b{ c_550d2972(0x2c18c71944c6a464); /* modifier-post */ \n _; }\nmodifier c_mod00939a78{ c_550d2972(0xbde2c4f3ec02561e); /* modifier-pre */ \n _; }\nmodifier c_mod03e60e8c{ c_550d2972(0x041ccb06f44958e4); /* modifier-post */ \n _; }\nmodifier c_moda5a118e5{ c_550d2972(0x1ec79487456e20c8); /* modifier-pre */ \n _; }\nmodifier c_mod44e01693{ c_550d2972(0x1c67f216eccc3fce); /* modifier-post */ \n _; }\nmodifier c_mod040980f5{ c_550d2972(0x156731f93bd1a8a6); /* modifier-pre */ \n _; }\nmodifier c_mod0cb7fec0{ c_550d2972(0x5988cb402f304f8f); /* modifier-post */ \n _; }\nmodifier c_modcff238e0{ c_550d2972(0x6e91e09922cc2523); /* modifier-pre */ \n _; }\n\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    /// @notice The default max token distribution speed\n    uint256 public constant DEFAULT_MAX_DISTRIBUTION_SPEED = 1e18;\n\n    /// @notice Emitted when a token distribution is initialized\n    event TokenDistributionInitialized(address indexed token);\n\n    /// @notice Emitted when a new token distribution speed is set\n    event TokenDistributionSpeedUpdated(address indexed token, uint256 oldSpeed, uint256 newSpeed);\n\n    /// @notice Emitted when a new max distribution speed for token is set\n    event MaxTokenDistributionSpeedUpdated(address indexed token, uint256 oldSpeed, uint256 newSpeed);\n\n    /// @notice Emitted when prime token contract address is changed\n    event PrimeTokenUpdated(address indexed oldPrimeToken, address indexed newPrimeToken);\n\n    /// @notice Emitted when distribution state(Index and block or second) is updated\n    event TokensAccrued(address indexed token, uint256 amount);\n\n    /// @notice Emitted when token is transferred to the prime contract\n    event TokenTransferredToPrime(address indexed token, uint256 amount);\n\n    /// @notice Emitted on sweep token success\n    event SweepToken(address indexed token, address indexed to, uint256 sweepAmount);\n\n    /// @notice Thrown when arguments are passed are invalid\n    error InvalidArguments();\n\n    /// @notice Thrown when distribution speed is greater than maxTokenDistributionSpeeds[tokenAddress]\n    error InvalidDistributionSpeed(uint256 speed, uint256 maxSpeed);\n\n    /// @notice Thrown when caller is not the desired caller\n    error InvalidCaller();\n\n    /// @notice Thrown when token is initialized\n    error TokenAlreadyInitialized(address token);\n\n    ///@notice Error thrown when PrimeLiquidityProvider's balance is less than sweep amount\n    error InsufficientBalance(uint256 sweepAmount, uint256 balance);\n\n    /// @notice Error thrown when funds transfer is paused\n    error FundsTransferIsPaused();\n\n    /// @notice Error thrown when accrueTokens is called for an uninitialized token\n    error TokenNotInitialized(address token_);\n\n    /// @notice Error thrown when argument value in setter is same as previous value\n    error AddressesMustDiffer();\n\n    /**\n     * @notice Compares two addresses to ensure they are different\n     * @param oldAddress The original address to compare\n     * @param newAddress The new address to compare\n     */\n    modifier compareAddress(address oldAddress, address newAddress) {c_550d2972(0xd49f1a977571a922); /* function */ \n\nc_550d2972(0x5120bec9cb8ff17d); /* line */ \n        c_550d2972(0x263f10f51c46ef56); /* statement */ \nif (newAddress == oldAddress) {c_550d2972(0xa296bbaf676a3cce); /* branch */ \n\nc_550d2972(0xb898b94e0d7aceed); /* line */ \n            revert AddressesMustDiffer();\n        }else { c_550d2972(0x428701f388f30876); /* branch */ \n}\nc_550d2972(0x7f77274b0082c166); /* line */ \n        _;\n    }\n\n    /**\n     * @notice Prime Liquidity Provider constructor\n     * @param _timeBased A boolean indicating whether the contract is based on time or block.\n     * @param _blocksPerYear total blocks per year\n     */\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(bool _timeBased, uint256 _blocksPerYear) TimeManagerV8(_timeBased, _blocksPerYear) {c_550d2972(0xc9a438f4d31c5319); /* function */ \n\nc_550d2972(0x229c32132e3cc6df); /* line */ \n        c_550d2972(0x263f89a688f997d8); /* statement */ \n_disableInitializers();\n    }\n\n    /**\n     * @notice PrimeLiquidityProvider initializer\n     * @dev Initializes the deployer to owner\n     * @param accessControlManager_ AccessControlManager contract address\n     * @param tokens_ Array of addresses of the tokens\n     * @param distributionSpeeds_ New distribution speeds for tokens\n     * @param loopsLimit_ Maximum number of loops allowed in a single transaction\n     * @custom:error Throw InvalidArguments on different length of tokens and speeds array\n     */\n    function initialize(\n        address accessControlManager_,\n        address[] calldata tokens_,\n        uint256[] calldata distributionSpeeds_,\n        uint256[] calldata maxDistributionSpeeds_,\n        uint256 loopsLimit_\n    ) external  c_modcff238e0 initializer c_mod0cb7fec0  {c_550d2972(0x4ce1b81c9179d8fd); /* function */ \n\nc_550d2972(0x51d0a8d8fead4ae2); /* line */ \n        c_550d2972(0x18339500d5bfa18e); /* statement */ \n_ensureZeroAddress(accessControlManager_);\n\nc_550d2972(0x240d969ab858df63); /* line */ \n        c_550d2972(0xb2a09980fb15c0f3); /* statement */ \n__AccessControlled_init(accessControlManager_);\nc_550d2972(0x849746583e234984); /* line */ \n        c_550d2972(0xd148f4a8efbc294c); /* statement */ \n__Pausable_init();\nc_550d2972(0x559db47abe8afdd4); /* line */ \n        c_550d2972(0x7c12d874d66bf156); /* statement */ \n_setMaxLoopsLimit(loopsLimit_);\n\nc_550d2972(0x2d4cd1b230a2c7e8); /* line */ \n        c_550d2972(0x6c37114631f38b75); /* statement */ \nuint256 numTokens = tokens_.length;\nc_550d2972(0xf8389941f10ad6ab); /* line */ \n        c_550d2972(0x971b06e09f1192a6); /* statement */ \n_ensureMaxLoops(numTokens);\n\nc_550d2972(0xc0d128a34709546d); /* line */ \n        c_550d2972(0x198765d69d40eb11); /* statement */ \nif (((numTokens != distributionSpeeds_.length) && c_true550d2972(0x792a7bb4c43810ab)) || ((numTokens != maxDistributionSpeeds_.length) && c_true550d2972(0x455403cd8b6c4c82))) {c_550d2972(0x6b85df031df52473); /* branch */ \n\nc_550d2972(0xb8d0dee504d4673f); /* line */ \n            revert InvalidArguments();\n        }else { c_550d2972(0x8a8c341de4054df7); /* branch */ \n}\n\nc_550d2972(0x6083314afb079519); /* line */ \n        c_550d2972(0xdaeea7a4ed0a11f5); /* statement */ \nfor (uint256 i; i < numTokens; ) {\nc_550d2972(0x90923a2065f569d1); /* line */ \n            c_550d2972(0x84eb890985faca04); /* statement */ \n_initializeToken(tokens_[i]);\nc_550d2972(0x26a8ddd8fa2094a4); /* line */ \n            c_550d2972(0x72e811cb2258a659); /* statement */ \n_setMaxTokenDistributionSpeed(tokens_[i], maxDistributionSpeeds_[i]);\nc_550d2972(0x032fbb15f4ea3b76); /* line */ \n            c_550d2972(0xa0f76082eb215e6b); /* statement */ \n_setTokenDistributionSpeed(tokens_[i], distributionSpeeds_[i]);\n\nc_550d2972(0x15061838a13c819d); /* line */ \n            unchecked {\nc_550d2972(0xd9e170b8cc2005b3); /* line */ \n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Initialize the distribution of the token\n     * @param tokens_ Array of addresses of the tokens to be intialized\n     * @custom:access Only Governance\n     */\n    function initializeTokens(address[] calldata tokens_) external  c_mod040980f5 onlyOwner c_mod44e01693  {c_550d2972(0x89960d1079552a82); /* function */ \n\nc_550d2972(0x50037c4b201a0d50); /* line */ \n        c_550d2972(0xaf62f977fce7c40d); /* statement */ \nuint256 tokensLength = tokens_.length;\nc_550d2972(0x58ecb68577175d86); /* line */ \n        c_550d2972(0xe05b93c3bfe5efd9); /* statement */ \n_ensureMaxLoops(tokensLength);\n\nc_550d2972(0x868963a0cc0f45cc); /* line */ \n        c_550d2972(0xa46fab3c37fa334d); /* statement */ \nfor (uint256 i; i < tokensLength; ) {\nc_550d2972(0x314c1650b328847a); /* line */ \n            c_550d2972(0x55fa8794c4a67115); /* statement */ \n_initializeToken(tokens_[i]);\n\nc_550d2972(0x17556032d01e9f2d); /* line */ \n            unchecked {\nc_550d2972(0x75fcc1a50cd522ba); /* line */ \n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Pause fund transfer of tokens to Prime contract\n     * @custom:access Controlled by ACM\n     */\n    function pauseFundsTransfer() external {c_550d2972(0xac5afdc8b6c1a64b); /* function */ \n\nc_550d2972(0xd6fa2753fb6a889b); /* line */ \n        c_550d2972(0xd896d554788bfd3d); /* statement */ \n_checkAccessAllowed(\"pauseFundsTransfer()\");\nc_550d2972(0x3d08c24a424f58e4); /* line */ \n        c_550d2972(0x3306edd9e3f696f6); /* statement */ \n_pause();\n    }\n\n    /**\n     * @notice Resume fund transfer of tokens to Prime contract\n     * @custom:access Controlled by ACM\n     */\n    function resumeFundsTransfer() external {c_550d2972(0xa2c43d12fbcc35f1); /* function */ \n\nc_550d2972(0x5100dd5c7099b2f5); /* line */ \n        c_550d2972(0x0ba8d6d1009b557d); /* statement */ \n_checkAccessAllowed(\"resumeFundsTransfer()\");\nc_550d2972(0x62a6bf34157051e0); /* line */ \n        c_550d2972(0x2fe8a3aebaa51c74); /* statement */ \n_unpause();\n    }\n\n    /**\n     * @notice Set distribution speed (amount of token distribute per block or second)\n     * @param tokens_ Array of addresses of the tokens\n     * @param distributionSpeeds_ New distribution speeds for tokens\n     * @custom:access Controlled by ACM\n     * @custom:error Throw InvalidArguments on different length of tokens and speeds array\n     */\n    function setTokensDistributionSpeed(address[] calldata tokens_, uint256[] calldata distributionSpeeds_) external {c_550d2972(0x3e9f0cd254af8814); /* function */ \n\nc_550d2972(0x56d27af236438efa); /* line */ \n        c_550d2972(0xe9c7a2df84b9d7af); /* statement */ \n_checkAccessAllowed(\"setTokensDistributionSpeed(address[],uint256[])\");\nc_550d2972(0x2349c51a87b34d73); /* line */ \n        c_550d2972(0x698cb2a80bb9bb42); /* statement */ \nuint256 numTokens = tokens_.length;\nc_550d2972(0x3f930e25ffe4f502); /* line */ \n        c_550d2972(0x4538610df6ea5ece); /* statement */ \n_ensureMaxLoops(numTokens);\n\nc_550d2972(0x0b84c6a92c02810d); /* line */ \n        c_550d2972(0x6788464479bdd844); /* statement */ \nif (numTokens != distributionSpeeds_.length) {c_550d2972(0x545f039b6046dac1); /* branch */ \n\nc_550d2972(0x505642a9531b7c2c); /* line */ \n            revert InvalidArguments();\n        }else { c_550d2972(0x2f746f0f6219d6c9); /* branch */ \n}\n\nc_550d2972(0x8287f8214373ef73); /* line */ \n        c_550d2972(0xef3d46221a5e1c66); /* statement */ \nfor (uint256 i; i < numTokens; ) {\nc_550d2972(0xfe016c20c38f443b); /* line */ \n            c_550d2972(0x6527d898b2c13307); /* statement */ \n_ensureTokenInitialized(tokens_[i]);\nc_550d2972(0xb330c2c15df52430); /* line */ \n            c_550d2972(0xe1cd0fcdee657292); /* statement */ \n_setTokenDistributionSpeed(tokens_[i], distributionSpeeds_[i]);\n\nc_550d2972(0xbd85ccb092bec974); /* line */ \n            unchecked {\nc_550d2972(0x6667c529789d6882); /* line */ \n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Set max distribution speed for token (amount of maximum token distribute per block or second)\n     * @param tokens_ Array of addresses of the tokens\n     * @param maxDistributionSpeeds_ New distribution speeds for tokens\n     * @custom:access Controlled by ACM\n     * @custom:error Throw InvalidArguments on different length of tokens and speeds array\n     */\n    function setMaxTokensDistributionSpeed(\n        address[] calldata tokens_,\n        uint256[] calldata maxDistributionSpeeds_\n    ) external {c_550d2972(0x2382db7c4d2bd744); /* function */ \n\nc_550d2972(0x8373374fc90b2b28); /* line */ \n        c_550d2972(0xba9d5355116bfc74); /* statement */ \n_checkAccessAllowed(\"setMaxTokensDistributionSpeed(address[],uint256[])\");\nc_550d2972(0x5cfe3b90646cb91c); /* line */ \n        c_550d2972(0x8b08f38e73ea8d08); /* statement */ \nuint256 numTokens = tokens_.length;\nc_550d2972(0x8c03164eb98c2b53); /* line */ \n        c_550d2972(0x9702c8bb6f9a758e); /* statement */ \n_ensureMaxLoops(numTokens);\n\nc_550d2972(0xd6f80b93faf158eb); /* line */ \n        c_550d2972(0x95382bc49b1479ed); /* statement */ \nif (numTokens != maxDistributionSpeeds_.length) {c_550d2972(0x36f25b091533e8b8); /* branch */ \n\nc_550d2972(0x1d4ac357dc48390b); /* line */ \n            revert InvalidArguments();\n        }else { c_550d2972(0xf07ecbaeba16d9a0); /* branch */ \n}\n\nc_550d2972(0xf5e390fa1dd64516); /* line */ \n        c_550d2972(0x5143d41c774ccf03); /* statement */ \nfor (uint256 i; i < numTokens; ) {\nc_550d2972(0x08b9bef3833592cf); /* line */ \n            c_550d2972(0x18f1ada569d6614d); /* statement */ \n_setMaxTokenDistributionSpeed(tokens_[i], maxDistributionSpeeds_[i]);\n\nc_550d2972(0x205e826df009e3e9); /* line */ \n            unchecked {\nc_550d2972(0x0286c51e5bdc8b53); /* line */ \n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Set the prime token contract address\n     * @param prime_ The new address of the prime token contract\n     * @custom:event Emits PrimeTokenUpdated event\n     * @custom:access Only owner\n     */\n    function setPrimeToken(address prime_) external  c_moda5a118e5 onlyOwner c_mod03e60e8c   c_mod00939a78 compareAddress(prime, prime_) c_modc0143c4b  {c_550d2972(0x9b2daddde4f425a6); /* function */ \n\nc_550d2972(0x4b7a6bff4665d774); /* line */ \n        c_550d2972(0x9f5c5f84fd3d9bd5); /* statement */ \n_ensureZeroAddress(prime_);\n\nc_550d2972(0x4ff89c8aab4675ad); /* line */ \n        c_550d2972(0x3bd77ae76b13e085); /* statement */ \nemit PrimeTokenUpdated(prime, prime_);\nc_550d2972(0xfd4272ac2fd4dc04); /* line */ \n        prime = prime_;\n    }\n\n    /**\n     * @notice Set the limit for the loops can iterate to avoid the DOS\n     * @param loopsLimit Limit for the max loops can execute at a time\n     * @custom:event Emits MaxLoopsLimitUpdated event on success\n     * @custom:access Controlled by ACM\n     */\n    function setMaxLoopsLimit(uint256 loopsLimit) external {c_550d2972(0x69ed2a2b06497941); /* function */ \n\nc_550d2972(0xe4e8de4c80c664a3); /* line */ \n        c_550d2972(0xe0d39a04e5ef1cdf); /* statement */ \n_checkAccessAllowed(\"setMaxLoopsLimit(uint256)\");\nc_550d2972(0x9ecaa4e0ae1b76a3); /* line */ \n        c_550d2972(0xf04b439f662a523c); /* statement */ \n_setMaxLoopsLimit(loopsLimit);\n    }\n\n    /**\n     * @notice Claim all the token accrued till last block or second\n     * @param token_ The token to release to the Prime contract\n     * @custom:event Emits TokenTransferredToPrime event\n     * @custom:error Throw InvalidArguments on Zero address(token)\n     * @custom:error Throw FundsTransferIsPaused is paused\n     * @custom:error Throw InvalidCaller if the sender is not the Prime contract\n     */\n    function releaseFunds(address token_) external {c_550d2972(0x49f9b046f00af2e2); /* function */ \n\nc_550d2972(0x50f8456f4d803cb0); /* line */ \n        c_550d2972(0xf2b16f63c17ab56a); /* statement */ \naddress _prime = prime;\nc_550d2972(0xb0d1f7cd0684a490); /* line */ \n        c_550d2972(0x48c753913639c9df); /* statement */ \nif (msg.sender != _prime) {c_550d2972(0xb7ffef5c087465c9); /* branch */ \nrevert InvalidCaller();}else { c_550d2972(0xeb84b620fd9529bc); /* branch */ \n}\nc_550d2972(0x6802cd2bf4c6c98f); /* line */ \n        c_550d2972(0x1d7a6c40021f2fc7); /* statement */ \nif (paused()) {c_550d2972(0x1d9e38825b83790c); /* branch */ \n\nc_550d2972(0x6e4ae7511ad2be2e); /* line */ \n            revert FundsTransferIsPaused();\n        }else { c_550d2972(0x7616becbc476715f); /* branch */ \n}\n\nc_550d2972(0x7fd7a9d9966448e5); /* line */ \n        c_550d2972(0x3e8d3ba0b553e57a); /* statement */ \naccrueTokens(token_);\nc_550d2972(0x75e0e7315b906393); /* line */ \n        c_550d2972(0xe5039b5639252bf4); /* statement */ \nuint256 accruedAmount = _tokenAmountAccrued[token_];\nc_550d2972(0x4121f6294fdaf698); /* line */ \n        delete _tokenAmountAccrued[token_];\n\nc_550d2972(0xb98725b56484e958); /* line */ \n        c_550d2972(0x52947edefff82237); /* statement */ \nemit TokenTransferredToPrime(token_, accruedAmount);\n\nc_550d2972(0xf5ace76cba6c5511); /* line */ \n        c_550d2972(0x21c281aca3bdff5e); /* statement */ \nIERC20Upgradeable(token_).safeTransfer(_prime, accruedAmount);\n    }\n\n    /**\n     * @notice A public function to sweep accidental ERC-20 transfers to this contract. Tokens are sent to user\n     * @param token_ The address of the ERC-20 token to sweep\n     * @param to_ The address of the recipient\n     * @param amount_ The amount of tokens needs to transfer\n     * @custom:event Emits SweepToken event\n     * @custom:error Throw InsufficientBalance if amount_ is greater than the available balance of the token in the contract\n     * @custom:access Only Governance\n     */\n    function sweepToken(IERC20Upgradeable token_, address to_, uint256 amount_) external  c_mod7cb67fae onlyOwner c_mod54802ebc  {c_550d2972(0x8f2aac99fe08a58a); /* function */ \n\nc_550d2972(0x3230f8e0d221e4da); /* line */ \n        c_550d2972(0x72520a7818594328); /* statement */ \nuint256 balance = token_.balanceOf(address(this));\nc_550d2972(0xd40ac2cf319a6a2c); /* line */ \n        c_550d2972(0xa59ef41f58c7981a); /* statement */ \nif (amount_ > balance) {c_550d2972(0x21c59259273f0445); /* branch */ \n\nc_550d2972(0xeeffd99ed9ab6c5b); /* line */ \n            revert InsufficientBalance(amount_, balance);\n        }else { c_550d2972(0xc575d3549e2f072f); /* branch */ \n}\n\nc_550d2972(0xf98f59e78bcd79bc); /* line */ \n        c_550d2972(0x99c2ea4cb8229187); /* statement */ \nemit SweepToken(address(token_), to_, amount_);\n\nc_550d2972(0x62ceca128fa98d00); /* line */ \n        c_550d2972(0x20e6c044fdcf4020); /* statement */ \ntoken_.safeTransfer(to_, amount_);\n    }\n\n    /**\n     * @notice Get rewards per block or second for token\n     * @param token_ Address of the token\n     * @return speed returns the per block or second reward\n     */\n    function getEffectiveDistributionSpeed(address token_) external view returns (uint256) {c_550d2972(0xaa6c8993d25e51e8); /* function */ \n\nc_550d2972(0x49549cbda77b70ee); /* line */ \n        c_550d2972(0x2dbf8650561891ef); /* statement */ \nuint256 distributionSpeed = tokenDistributionSpeeds[token_];\nc_550d2972(0x5ef4f037a99b4ecb); /* line */ \n        c_550d2972(0xd4095dbe026fe581); /* statement */ \nuint256 balance = IERC20Upgradeable(token_).balanceOf(address(this));\nc_550d2972(0xcec07c3e1870bf7e); /* line */ \n        c_550d2972(0x5c612b1586e80288); /* statement */ \nuint256 accrued = _tokenAmountAccrued[token_];\n\nc_550d2972(0xbd292c20309e3f27); /* line */ \n        c_550d2972(0x9141deff2f253b6c); /* statement */ \nif (balance > accrued) {c_550d2972(0x15ea64458a5b7c76); /* branch */ \n\nc_550d2972(0x4b7d7a4313e14c62); /* line */ \n            c_550d2972(0x05c43a55828a04c3); /* statement */ \nreturn distributionSpeed;\n        }else { c_550d2972(0xd81ccff61df37a50); /* branch */ \n}\n\nc_550d2972(0xbbf6a1532883cc5a); /* line */ \n        c_550d2972(0x82584264a92a8014); /* statement */ \nreturn 0;\n    }\n\n    /**\n     * @notice Accrue token by updating the distribution state\n     * @param token_ Address of the token\n     * @custom:event Emits TokensAccrued event\n     */\n    function accrueTokens(address token_) public {c_550d2972(0xe7bf39941705f306); /* function */ \n\nc_550d2972(0x882a2a1e6123fad4); /* line */ \n        c_550d2972(0xfbbfeea37cc05f05); /* statement */ \n_ensureZeroAddress(token_);\n\nc_550d2972(0x5baae07a6e652689); /* line */ \n        c_550d2972(0xfb4f72eeda3e833f); /* statement */ \n_ensureTokenInitialized(token_);\n\nc_550d2972(0x0f439a49cc2755ed); /* line */ \n        c_550d2972(0x1222a6b788fdc5e7); /* statement */ \nuint256 blockNumberOrSecond = getBlockNumberOrTimestamp();\nc_550d2972(0x65ad0f9380200074); /* line */ \n        c_550d2972(0x0eb3a8a084dbac52); /* statement */ \nuint256 deltaBlocksOrSeconds;\nc_550d2972(0x34fd2393080d32b1); /* line */ \n        unchecked {\nc_550d2972(0xc195c126295a6da6); /* line */ \n            deltaBlocksOrSeconds = blockNumberOrSecond - lastAccruedBlockOrSecond[token_];\n        }\n\nc_550d2972(0xf71957db178bb842); /* line */ \n        c_550d2972(0xf87b215a6e3dd06d); /* statement */ \nif (deltaBlocksOrSeconds != 0) {c_550d2972(0xea0ac936cf386e4e); /* branch */ \n\nc_550d2972(0x6fc662b2c3e7fd55); /* line */ \n            c_550d2972(0x2274a5f3e9eab0ac); /* statement */ \nuint256 distributionSpeed = tokenDistributionSpeeds[token_];\nc_550d2972(0x3a4703ae06aa5d01); /* line */ \n            c_550d2972(0xc10611c4fa552a43); /* statement */ \nuint256 balance = IERC20Upgradeable(token_).balanceOf(address(this));\n\nc_550d2972(0x533f1886e1c9d926); /* line */ \n            c_550d2972(0xfb5090e978624a42); /* statement */ \nuint256 balanceDiff = balance - _tokenAmountAccrued[token_];\nc_550d2972(0x561d076548b9d07c); /* line */ \n            c_550d2972(0xc7998a3cace01314); /* statement */ \nif (distributionSpeed != 0 && balanceDiff != 0) {c_550d2972(0xee98e4e94203991e); /* branch */ \n\nc_550d2972(0xe890808305e17804); /* line */ \n                c_550d2972(0x23d179ea2270085b); /* statement */ \nuint256 accruedSinceUpdate = deltaBlocksOrSeconds * distributionSpeed;\nc_550d2972(0xcf107bad88e964b2); /* line */ \n                c_550d2972(0x593e4fb1302c7068); /* statement */ \nuint256 tokenAccrued = (balanceDiff <= accruedSinceUpdate ? balanceDiff : accruedSinceUpdate);\n\nc_550d2972(0xd3b2dedf9cd4bac9); /* line */ \n                _tokenAmountAccrued[token_] += tokenAccrued;\nc_550d2972(0x848b4426294ae2ef); /* line */ \n                c_550d2972(0xc1d9f0ac3611f056); /* statement */ \nemit TokensAccrued(token_, tokenAccrued);\n            }else { c_550d2972(0xaf30596f0ca8faee); /* branch */ \n}\n\nc_550d2972(0xb50dc5906d76cf06); /* line */ \n            lastAccruedBlockOrSecond[token_] = blockNumberOrSecond;\n        }else { c_550d2972(0x29b976d0b5a43996); /* branch */ \n}\n    }\n\n    /**\n     * @notice Get the last accrued block or second for token\n     * @param token_ Address of the token\n     * @return blockNumberOrSecond returns the last accrued block or second\n     */\n    function lastAccruedBlock(address token_) external view returns (uint256) {c_550d2972(0x2da1bcba566739d9); /* function */ \n\nc_550d2972(0xf47523e71cb3ecac); /* line */ \n        c_550d2972(0xb95f02c93fccdb0a); /* statement */ \nreturn lastAccruedBlockOrSecond[token_];\n    }\n\n    /**\n     * @notice Get the tokens accrued\n     * @param token_ Address of the token\n     * @return returns the amount of accrued tokens for the token provided\n     */\n    function tokenAmountAccrued(address token_) external view returns (uint256) {c_550d2972(0xc699aa4679e38e07); /* function */ \n\nc_550d2972(0x25b7aa8243dd7942); /* line */ \n        c_550d2972(0x70f25bbb762632fc); /* statement */ \nreturn _tokenAmountAccrued[token_];\n    }\n\n    /**\n     * @notice Initialize the distribution of the token\n     * @param token_ Address of the token to be intialized\n     * @custom:event Emits TokenDistributionInitialized event\n     * @custom:error Throw TokenAlreadyInitialized if token is already initialized\n     */\n    function _initializeToken(address token_) internal {c_550d2972(0x0e2f9ecd23743128); /* function */ \n\nc_550d2972(0x44b9ff429d49fc41); /* line */ \n        c_550d2972(0xb84b6c8dbf3c50e3); /* statement */ \n_ensureZeroAddress(token_);\nc_550d2972(0x03711633a6cbea60); /* line */ \n        c_550d2972(0xc1ac015d4d56ecbb); /* statement */ \nuint256 blockNumberOrSecond = getBlockNumberOrTimestamp();\nc_550d2972(0xeec8d726a255741a); /* line */ \n        c_550d2972(0x2f2e4cc117f990f5); /* statement */ \nuint256 initializedBlockOrSecond = lastAccruedBlockOrSecond[token_];\n\nc_550d2972(0xec201ae4f37d4aef); /* line */ \n        c_550d2972(0xf5fe6f4a1045f6b2); /* statement */ \nif (initializedBlockOrSecond != 0) {c_550d2972(0x67aee77efdf1a0b5); /* branch */ \n\nc_550d2972(0x10108ed578b22abe); /* line */ \n            revert TokenAlreadyInitialized(token_);\n        }else { c_550d2972(0xa7a738c19d1af937); /* branch */ \n}\n\n        /*\n         * Update token state block number or second\n         */\nc_550d2972(0x514af80c8b46a1f5); /* line */ \n        lastAccruedBlockOrSecond[token_] = blockNumberOrSecond;\n\nc_550d2972(0x3558ed0e521445f2); /* line */ \n        c_550d2972(0xd5b063f6ffe45735); /* statement */ \nemit TokenDistributionInitialized(token_);\n    }\n\n    /**\n     * @notice Set distribution speed (amount of token distribute per block or second)\n     * @param token_ Address of the token\n     * @param distributionSpeed_ New distribution speed for token\n     * @custom:event Emits TokenDistributionSpeedUpdated event\n     * @custom:error Throw InvalidDistributionSpeed if speed is greater than max speed\n     */\n    function _setTokenDistributionSpeed(address token_, uint256 distributionSpeed_) internal {c_550d2972(0xedc2f58cb83e7061); /* function */ \n\nc_550d2972(0xa26277e1f59b9258); /* line */ \n        c_550d2972(0x22d950096500b6c9); /* statement */ \nuint256 maxDistributionSpeed = maxTokenDistributionSpeeds[token_];\nc_550d2972(0x3caf27d41a9a2dc9); /* line */ \n        c_550d2972(0x0437853b903341ca); /* statement */ \nif (maxDistributionSpeed == 0) {c_550d2972(0x15b894ad6fe98558); /* branch */ \n\nc_550d2972(0x09bc579e3f24fa44); /* line */ \n            maxTokenDistributionSpeeds[token_] = maxDistributionSpeed = DEFAULT_MAX_DISTRIBUTION_SPEED;\n        }else { c_550d2972(0xeb0bf6e303e86745); /* branch */ \n}\n\nc_550d2972(0x62c2f10fc792fecb); /* line */ \n        c_550d2972(0x7c03c9854f5e3e1a); /* statement */ \nif (distributionSpeed_ > maxDistributionSpeed) {c_550d2972(0x22e204692c7a17d0); /* branch */ \n\nc_550d2972(0xdb77bc67325ef2dc); /* line */ \n            revert InvalidDistributionSpeed(distributionSpeed_, maxDistributionSpeed);\n        }else { c_550d2972(0x46a482b62e35ff21); /* branch */ \n}\n\nc_550d2972(0x38743964fa34d332); /* line */ \n        c_550d2972(0x75e2df95f8be11ee); /* statement */ \nuint256 oldDistributionSpeed = tokenDistributionSpeeds[token_];\nc_550d2972(0x53fa5b8e943dee7e); /* line */ \n        c_550d2972(0xe8f053a07764f4ac); /* statement */ \nif (oldDistributionSpeed != distributionSpeed_) {c_550d2972(0xd712cba7a5c250b7); /* branch */ \n\n            // Distribution speed updated so let's update distribution state to ensure that\n            //  1. Token accrued properly for the old speed, and\n            //  2. Token accrued at the new speed starts after this block or second.\nc_550d2972(0x74963ad20c655a58); /* line */ \n            c_550d2972(0x2f6f9f9451b1bc20); /* statement */ \naccrueTokens(token_);\n\n            // Update speed\nc_550d2972(0xdb556f6afecbbf4b); /* line */ \n            tokenDistributionSpeeds[token_] = distributionSpeed_;\n\nc_550d2972(0x82bf1439eb894b0a); /* line */ \n            c_550d2972(0x6cee68bf6bf42894); /* statement */ \nemit TokenDistributionSpeedUpdated(token_, oldDistributionSpeed, distributionSpeed_);\n        }else { c_550d2972(0xe9a9a01c6c7496ac); /* branch */ \n}\n    }\n\n    /**\n     * @notice Set max distribution speed (amount of maximum token distribute per block or second)\n     * @param token_ Address of the token\n     * @param maxDistributionSpeed_ New max distribution speed for token\n     * @custom:event Emits MaxTokenDistributionSpeedUpdated event\n     */\n    function _setMaxTokenDistributionSpeed(address token_, uint256 maxDistributionSpeed_) internal {c_550d2972(0xb1cd17c9c23e6c1c); /* function */ \n\nc_550d2972(0xeb75efbe6639ae2a); /* line */ \n        c_550d2972(0xa71f685d47394301); /* statement */ \nemit MaxTokenDistributionSpeedUpdated(token_, tokenDistributionSpeeds[token_], maxDistributionSpeed_);\nc_550d2972(0xb85a88c0121f9e6e); /* line */ \n        maxTokenDistributionSpeeds[token_] = maxDistributionSpeed_;\n    }\n\n    /**\n     * @notice Revert on non initialized token\n     * @param token_ Token Address to be verified for\n     */\n    function _ensureTokenInitialized(address token_) internal view {c_550d2972(0x32bec469136aeaf5); /* function */ \n\nc_550d2972(0x282f594d0a80e8b0); /* line */ \n        c_550d2972(0x2e8e9f8c3dc5a210); /* statement */ \nuint256 lastBlockOrSecondAccrued = lastAccruedBlockOrSecond[token_];\n\nc_550d2972(0xd2adc942cc3dfff6); /* line */ \n        c_550d2972(0x2f40f03517cd1c85); /* statement */ \nif (lastBlockOrSecondAccrued == 0) {c_550d2972(0x7940ccf078d34ffb); /* branch */ \n\nc_550d2972(0xcce1840336a39519); /* line */ \n            revert TokenNotInitialized(token_);\n        }else { c_550d2972(0xa4f4fea0d0c725d6); /* branch */ \n}\n    }\n\n    /**\n     * @notice Revert on zero address\n     * @param address_ Address to be verified\n     */\n    function _ensureZeroAddress(address address_) internal pure {c_550d2972(0xadc2e54ec7ef89e5); /* function */ \n\nc_550d2972(0xe994f0789a3bf953); /* line */ \n        c_550d2972(0xbb7ab0f922291815); /* statement */ \nif (address_ == address(0)) {c_550d2972(0x3e667b0ff74d65a4); /* branch */ \n\nc_550d2972(0x86d07b3442f56324); /* line */ \n            revert InvalidArguments();\n        }else { c_550d2972(0xcb98f5b7f782e361); /* branch */ \n}\n    }\n}\n"
    },
    "contracts/Tokens/Prime/PrimeLiquidityProviderStorage.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity 0.8.25;\nfunction c_75c66b5f(bytes8 c__75c66b5f) pure {}\nfunction c_true75c66b5f(bytes8 c__75c66b5f) pure returns (bool){ return true; }\nfunction c_false75c66b5f(bytes8 c__75c66b5f) pure returns (bool){ return false; }\n\n\n/**\n * @title PrimeLiquidityProviderStorageV1\n * @author Venus\n * @notice Storage for Prime Liquidity Provider\n */\ncontract PrimeLiquidityProviderStorageV1 {\nfunction c_d4d3da3f(bytes8 c__d4d3da3f) internal pure {}\nfunction c_trued4d3da3f(bytes8 c__d4d3da3f) internal pure returns (bool){ return true; }\nfunction c_falsed4d3da3f(bytes8 c__d4d3da3f) internal pure returns (bool){ return false; }\n\n    /// @notice Address of the Prime contract\n    address public prime;\n\n    /// @notice The rate at which token is distributed (per block or second)\n    mapping(address => uint256) public tokenDistributionSpeeds;\n\n    /// @notice The max token distribution speed for token\n    mapping(address => uint256) public maxTokenDistributionSpeeds;\n\n    /// @notice The block or second till which rewards are distributed for an asset\n    mapping(address => uint256) public lastAccruedBlockOrSecond;\n\n    /// @notice The token accrued but not yet transferred to prime contract\n    mapping(address => uint256) internal _tokenAmountAccrued;\n\n    /// @dev This empty reserved space is put in place to allow future versions to add new\n    /// variables without shifting down storage in the inheritance chain.\n    uint256[45] private __gap;\n}\n"
    },
    "contracts/Tokens/Prime/PrimeStorage.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity 0.8.25;\nfunction c_8f1c8ff7(bytes8 c__8f1c8ff7) pure {}\nfunction c_true8f1c8ff7(bytes8 c__8f1c8ff7) pure returns (bool){ return true; }\nfunction c_false8f1c8ff7(bytes8 c__8f1c8ff7) pure returns (bool){ return false; }\n\n\nimport { ResilientOracleInterface } from \"@venusprotocol/oracle/contracts/interfaces/OracleInterface.sol\";\n\n/**\n * @title PrimeStorageV1\n * @author Venus\n * @notice Storage for Prime Token\n */\ncontract PrimeStorageV1 {\nfunction c_de545ed5(bytes8 c__de545ed5) internal pure {}\nfunction c_truede545ed5(bytes8 c__de545ed5) internal pure returns (bool){ return true; }\nfunction c_falsede545ed5(bytes8 c__de545ed5) internal pure returns (bool){ return false; }\n\n    struct Token {\n        bool exists;\n        bool isIrrevocable;\n    }\n\n    struct Market {\n        uint256 supplyMultiplier;\n        uint256 borrowMultiplier;\n        uint256 rewardIndex;\n        uint256 sumOfMembersScore;\n        bool exists;\n    }\n\n    struct Interest {\n        uint256 accrued;\n        uint256 score;\n        uint256 rewardIndex;\n    }\n\n    struct PendingReward {\n        address vToken;\n        address rewardToken;\n        uint256 amount;\n    }\n\n    /// @notice Base unit for computations, usually used in scaling (multiplications, divisions)\n    uint256 internal constant EXP_SCALE = 1e18;\n\n    /// @notice maximum BPS = 100%\n    uint256 internal constant MAXIMUM_BPS = 1e4;\n\n    /// @notice Mapping to get prime token's metadata\n    mapping(address => Token) public tokens;\n\n    /// @notice  Tracks total irrevocable tokens minted\n    uint256 public totalIrrevocable;\n\n    /// @notice  Tracks total revocable tokens minted\n    uint256 public totalRevocable;\n\n    /// @notice  Indicates maximum revocable tokens that can be minted\n    uint256 public revocableLimit;\n\n    /// @notice  Indicates maximum irrevocable tokens that can be minted\n    uint256 public irrevocableLimit;\n\n    /// @notice Tracks when prime token eligible users started staking for claiming prime token\n    mapping(address => uint256) public stakedAt;\n\n    /// @notice vToken to market configuration\n    mapping(address => Market) public markets;\n\n    /// @notice vToken to user to user index\n    mapping(address => mapping(address => Interest)) public interests;\n\n    /// @notice A list of boosted markets\n    address[] internal _allMarkets;\n\n    /// @notice numerator of alpha. Ex: if alpha is 0.5 then this will be 1\n    uint128 public alphaNumerator;\n\n    /// @notice denominator of alpha. Ex: if alpha is 0.5 then this will be 2\n    uint128 public alphaDenominator;\n\n    /// @notice address of XVS vault\n    address public xvsVault;\n\n    /// @notice address of XVS vault reward token\n    address public xvsVaultRewardToken;\n\n    /// @notice address of XVS vault pool id\n    uint256 public xvsVaultPoolId;\n\n    /// @notice mapping to check if a account's score was updated in the round\n    mapping(uint256 => mapping(address => bool)) public isScoreUpdated;\n\n    /// @notice unique id for next round\n    uint256 public nextScoreUpdateRoundId;\n\n    /// @notice total number of accounts whose score needs to be updated\n    uint256 public totalScoreUpdatesRequired;\n\n    /// @notice total number of accounts whose score is yet to be updated\n    uint256 public pendingScoreUpdates;\n\n    /// @notice mapping used to find if an asset is part of prime markets\n    mapping(address => address) public vTokenForAsset;\n\n    /// @notice Address of core pool comptroller contract\n    address internal corePoolComptroller;\n\n    /// @notice unreleased income from PLP that's already distributed to prime holders\n    /// @dev mapping of asset address => amount\n    mapping(address => uint256) public unreleasedPLPIncome;\n\n    /// @notice The address of PLP contract\n    address public primeLiquidityProvider;\n\n    /// @notice The address of ResilientOracle contract\n    ResilientOracleInterface public oracle;\n\n    /// @notice The address of PoolRegistry contract\n    address public poolRegistry;\n\n    /// @dev This empty reserved space is put in place to allow future versions to add new\n    /// variables without shifting down storage in the inheritance chain.\n    uint256[26] private __gap;\n}\n"
    },
    "hardhat-deploy/solc_0.8/openzeppelin/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor (address initialOwner) {\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "hardhat-deploy/solc_0.8/openzeppelin/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0-rc.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "hardhat-deploy/solc_0.8/openzeppelin/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "hardhat-deploy/solc_0.8/openzeppelin/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "hardhat-deploy/solc_0.8/openzeppelin/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0-rc.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view virtual returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(Address.isContract(IBeacon(newBeacon).implementation()), \"ERC1967: beacon implementation is not a contract\");\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "hardhat-deploy/solc_0.8/openzeppelin/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0-rc.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "hardhat-deploy/solc_0.8/openzeppelin/proxy/transparent/ProxyAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/transparent/ProxyAdmin.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./TransparentUpgradeableProxy.sol\";\nimport \"../../access/Ownable.sol\";\n\n/**\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\n */\ncontract ProxyAdmin is Ownable {\n\n    constructor (address initialOwner) Ownable(initialOwner) {}\n\n    /**\n     * @dev Returns the current implementation of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"implementation()\")) == 0x5c60da1b\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"5c60da1b\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Returns the current admin of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"admin()\")) == 0xf851a440\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"f851a440\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Changes the admin of `proxy` to `newAdmin`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the current admin of `proxy`.\n     */\n    function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\n        proxy.changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\n        proxy.upgradeTo(implementation);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgradeAndCall(\n        TransparentUpgradeableProxy proxy,\n        address implementation,\n        bytes memory data\n    ) public payable virtual onlyOwner {\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\n    }\n}\n"
    },
    "hardhat-deploy/solc_0.8/openzeppelin/proxy/transparent/TransparentUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/transparent/TransparentUpgradeableProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967Proxy.sol\";\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    /**\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n     */\n    constructor(\n        address _logic,\n        address admin_,\n        bytes memory _data\n    ) payable ERC1967Proxy(_logic, _data) {\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1));\n        _changeAdmin(admin_);\n    }\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function admin() external ifAdmin returns (address admin_) {\n        admin_ = _getAdmin();\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function implementation() external ifAdmin returns (address implementation_) {\n        implementation_ = _implementation();\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\n     */\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\n        _changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\n     */\n    function upgradeTo(address newImplementation) external ifAdmin {\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\n     */\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\n        _upgradeToAndCall(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\n     */\n    function _beforeFallback() internal virtual override {\n        require(msg.sender != _getAdmin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n        super._beforeFallback();\n    }\n}\n"
    },
    "hardhat-deploy/solc_0.8/openzeppelin/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0-rc.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "hardhat-deploy/solc_0.8/openzeppelin/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "hardhat-deploy/solc_0.8/openzeppelin/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "hardhat-deploy/solc_0.8/proxy/OptimizedTransparentUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/transparent/TransparentUpgradeableProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../openzeppelin/proxy/ERC1967/ERC1967Proxy.sol\";\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n */\ncontract OptimizedTransparentUpgradeableProxy is ERC1967Proxy {\n    address internal immutable _ADMIN;\n\n    /**\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n     */\n    constructor(\n        address _logic,\n        address admin_,\n        bytes memory _data\n    ) payable ERC1967Proxy(_logic, _data) {\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1));\n        _ADMIN = admin_;\n\n        // still store it to work with EIP-1967\n        bytes32 slot = _ADMIN_SLOT;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            sstore(slot, admin_)\n        }\n        emit AdminChanged(address(0), admin_);\n    }\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function admin() external ifAdmin returns (address admin_) {\n        admin_ = _getAdmin();\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function implementation() external ifAdmin returns (address implementation_) {\n        implementation_ = _implementation();\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\n     */\n    function upgradeTo(address newImplementation) external ifAdmin {\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\n     */\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\n        _upgradeToAndCall(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\n     */\n    function _beforeFallback() internal virtual override {\n        require(msg.sender != _getAdmin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n        super._beforeFallback();\n    }\n\n    function _getAdmin() internal view virtual override returns (address) {\n        return _ADMIN;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": false
    }
  }
}
