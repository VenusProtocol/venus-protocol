{
  "address": "0x2367bff367Bc4a83A65EEEe3b9E4D834Ff4f637e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "contract IVBNB",
          "name": "vBNB",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "errCode",
          "type": "uint256"
        }
      ],
      "name": "AccrueInterestFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NativeTokenTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NativeTransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "errCode",
          "type": "uint256"
        }
      ],
      "name": "RedeemFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "errCode",
          "type": "uint256"
        }
      ],
      "name": "RepaymentFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddressNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "VBNB",
      "outputs": [
        {
          "internalType": "contract IVBNB",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVAIController",
          "name": "vaiController",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "borrowers",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "batchRepayVAI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVToken",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "borrowers",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "redeemAndBatchRepay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVToken",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "redeemAndTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVToken",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "redeemUnderlyingAndRepayBorrowBehalf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVToken",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "redeemUnderlyingAndTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "sweepTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x7f483b33526173adb71946343db50c317f056b7c74acade30fa452f0606d84a1",
  "receipt": {
    "to": null,
    "from": "0x92054EdBb53eCC4f2A1787e92f479CE10392A658",
    "contractAddress": "0x2367bff367Bc4a83A65EEEe3b9E4D834Ff4f637e",
    "transactionIndex": 111,
    "gasUsed": "1526159",
    "logsBloom": "0x00000000000000000000000000000000000001000000000100800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000800000000020000000000000000000800000002000000000000000000000000400000000000000000000000000000000000000000080000400000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000800000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x1e5f96307a2d78addc7d8d2d30d7db4b7c5dd971d691593e19e39e64912cdfcd",
    "transactionHash": "0x7f483b33526173adb71946343db50c317f056b7c74acade30fa452f0606d84a1",
    "logs": [
      {
        "transactionIndex": 111,
        "blockNumber": 38768268,
        "transactionHash": "0x7f483b33526173adb71946343db50c317f056b7c74acade30fa452f0606d84a1",
        "address": "0x2367bff367Bc4a83A65EEEe3b9E4D834Ff4f637e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000092054edbb53ecc4f2a1787e92f479ce10392a658"
        ],
        "data": "0x",
        "logIndex": 268,
        "blockHash": "0x1e5f96307a2d78addc7d8d2d30d7db4b7c5dd971d691593e19e39e64912cdfcd"
      },
      {
        "transactionIndex": 111,
        "blockNumber": 38768268,
        "transactionHash": "0x7f483b33526173adb71946343db50c317f056b7c74acade30fa452f0606d84a1",
        "address": "0x2367bff367Bc4a83A65EEEe3b9E4D834Ff4f637e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x00000000000000000000000092054edbb53ecc4f2a1787e92f479ce10392a658",
          "0x000000000000000000000000939bd8d64c0a9583a7dcea9933f7b21697ab6396"
        ],
        "data": "0x",
        "logIndex": 269,
        "blockHash": "0x1e5f96307a2d78addc7d8d2d30d7db4b7c5dd971d691593e19e39e64912cdfcd"
      }
    ],
    "blockNumber": 38768268,
    "cumulativeGasUsed": "11606786",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x939bD8d64c0A9583A7Dcea9933f7b21697ab6396", "0xA07c5b74C9B40447a954e1466938b865b6BBea36"],
  "numDeployments": 2,
  "solcInputHash": "37de96c94a0a842fe26c69811cfccd72",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"contract IVBNB\",\"name\":\"vBNB\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errCode\",\"type\":\"uint256\"}],\"name\":\"AccrueInterestFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NativeTokenTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NativeTransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errCode\",\"type\":\"uint256\"}],\"name\":\"RedeemFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errCode\",\"type\":\"uint256\"}],\"name\":\"RepaymentFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VBNB\",\"outputs\":[{\"internalType\":\"contract IVBNB\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVAIController\",\"name\":\"vaiController\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"borrowers\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"batchRepayVAI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVToken\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"borrowers\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"redeemAndBatchRepay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVToken\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"redeemAndTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVToken\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"redeemUnderlyingAndRepayBorrowBehalf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVToken\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"redeemUnderlyingAndTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"sweepTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"NativeTransferFailed()\":[{\"notice\":\"Thrown when a native transfer fails\"}],\"ZeroAddressNotAllowed()\":[{\"notice\":\"Thrown if the supplied address is a zero address where it is not allowed\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Governance/TokenRedeemer.sol\":\"TokenRedeemer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable2Step.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0xde231558366826d7cb61725af8147965a61c53b77a352cc8c9af38fc5a92ac3c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@venusprotocol/oracle/contracts/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.25;\\n\\ninterface OracleInterface {\\n    function getPrice(address asset) external view returns (uint256);\\n}\\n\\ninterface ResilientOracleInterface is OracleInterface {\\n    function updatePrice(address vToken) external;\\n\\n    function updateAssetPrice(address asset) external;\\n\\n    function getUnderlyingPrice(address vToken) external view returns (uint256);\\n}\\n\\ninterface TwapInterface is OracleInterface {\\n    function updateTwap(address asset) external returns (uint256);\\n}\\n\\ninterface BoundValidatorInterface {\\n    function validatePriceWithAnchorPrice(\\n        address asset,\\n        uint256 reporterPrice,\\n        uint256 anchorPrice\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2432799b0d824fc701beb4c30146e912b9aeecf77b5c1635dde6c5fbe6bfc3a7\",\"license\":\"BSD-3-Clause\"},\"@venusprotocol/solidity-utilities/contracts/validators.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\n/// @notice Thrown if the supplied address is a zero address where it is not allowed\\nerror ZeroAddressNotAllowed();\\n\\n/// @notice Thrown if the supplied value is 0 where it is not allowed\\nerror ZeroValueNotAllowed();\\n\\n/// @notice Checks if the provided address is nonzero, reverts otherwise\\n/// @param address_ Address to check\\n/// @custom:error ZeroAddressNotAllowed is thrown if the provided address is a zero address\\nfunction ensureNonzeroAddress(address address_) pure {\\n    if (address_ == address(0)) {\\n        revert ZeroAddressNotAllowed();\\n    }\\n}\\n\\n/// @notice Checks if the provided value is nonzero, reverts otherwise\\n/// @param value_ Value to check\\n/// @custom:error ZeroValueNotAllowed is thrown if the provided value is 0\\nfunction ensureNonzeroValue(uint256 value_) pure {\\n    if (value_ == 0) {\\n        revert ZeroValueNotAllowed();\\n    }\\n}\\n\",\"keccak256\":\"0xdb88e14d50dd21889ca3329d755673d022c47e8da005b6a545c7f69c2c4b7b86\",\"license\":\"BSD-3-Clause\"},\"contracts/Governance/TokenRedeemer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport { Ownable2Step } from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport { ensureNonzeroAddress } from \\\"@venusprotocol/solidity-utilities/contracts/validators.sol\\\";\\n\\nimport { IVAIController, IVToken, IVBep20, IVBNB } from \\\"../InterfacesV8.sol\\\";\\nimport { Currency, CurrencyLibrary } from \\\"../lib/Currency.sol\\\";\\n\\ncontract TokenRedeemer is ReentrancyGuard, Ownable2Step {\\n    using CurrencyLibrary for Currency;\\n\\n    struct AccountBorrows {\\n        address borrower;\\n        uint256 amount;\\n    }\\n\\n    struct Borrows {\\n        uint256 totalBorrows;\\n        AccountBorrows[] accountBorrows;\\n    }\\n\\n    IVBNB public immutable VBNB;\\n\\n    error AccrueInterestFailed(uint256 errCode);\\n    error RedeemFailed(uint256 errCode);\\n    error RepaymentFailed(uint256 errCode);\\n    error NativeTokenTransferFailed();\\n\\n    constructor(address owner_, IVBNB vBNB) {\\n        ensureNonzeroAddress(owner_);\\n        VBNB = vBNB;\\n        _transferOwnership(owner_);\\n    }\\n\\n    receive() external payable {}\\n\\n    function redeemAndTransfer(IVToken vToken, address destination) external nonReentrant onlyOwner {\\n        Currency underlying = _underlying(vToken);\\n        uint256 err = vToken.redeem(vToken.balanceOf(address(this)));\\n        if (err != 0) {\\n            revert RedeemFailed(err);\\n        }\\n        underlying.transferAll(destination);\\n    }\\n\\n    function redeemUnderlyingAndTransfer(\\n        IVToken vToken,\\n        address destination,\\n        uint256 amount,\\n        address receiver\\n    ) external nonReentrant onlyOwner {\\n        Currency underlying = _underlying(vToken);\\n        underlying.transferAll(receiver); // Just in case there were some underlying tokens on the contract\\n        uint256 err = vToken.redeemUnderlying(amount);\\n        if (err != 0) {\\n            revert RedeemFailed(err);\\n        }\\n        underlying.transferAll(destination);\\n        Currency.wrap(address(vToken)).transferAll(receiver);\\n    }\\n\\n    function redeemUnderlyingAndRepayBorrowBehalf(\\n        IVToken vToken,\\n        address borrower,\\n        uint256 amount,\\n        address receiver\\n    ) external nonReentrant onlyOwner {\\n        Currency underlying = _underlying(vToken);\\n\\n        uint256 err = vToken.redeemUnderlying(amount);\\n        if (err != 0) {\\n            revert RedeemFailed(err);\\n        }\\n\\n        underlying.approve(address(vToken), amount);\\n\\n        _repay(vToken, borrower, amount);\\n\\n        underlying.approve(address(vToken), 0);\\n\\n        underlying.transferAll(receiver);\\n        Currency.wrap(address(vToken)).transferAll(receiver);\\n    }\\n\\n    function redeemAndBatchRepay(\\n        IVToken vToken,\\n        address[] calldata borrowers,\\n        address receiver\\n    ) external nonReentrant onlyOwner {\\n        _accrueInterest(vToken);\\n\\n        (uint256 totalBorrowedAmount, AccountBorrows[] memory borrows) = _getBorrows(vToken, borrowers);\\n        _redeemUpTo(vToken, totalBorrowedAmount);\\n\\n        Currency underlying = _underlying(vToken);\\n        uint256 balance = underlying.balanceOfSelf();\\n        underlying.approve(address(vToken), totalBorrowedAmount);\\n        uint256 borrowsCount = borrows.length;\\n        // The code below assumes no fees on transfer\\n        if (balance >= totalBorrowedAmount) {\\n            // If we're doing a full repayment, we can optimize it by skipping the balance checks\\n            for (uint256 i = 0; i < borrowsCount; ++i) {\\n                AccountBorrows memory accountBorrows = borrows[i];\\n                _repay(vToken, accountBorrows.borrower, accountBorrows.amount);\\n            }\\n        } else {\\n            // Otherwise, we have to check and update the balance on every iteration\\n            for (uint256 i = 0; i < borrowsCount && balance != 0; ++i) {\\n                AccountBorrows memory accountBorrows = borrows[i];\\n                _repay(vToken, accountBorrows.borrower, _min(accountBorrows.amount, balance));\\n                balance = underlying.balanceOfSelf();\\n            }\\n        }\\n        underlying.approve(address(vToken), 0);\\n\\n        underlying.transferAll(receiver);\\n        Currency.wrap(address(vToken)).transferAll(receiver);\\n    }\\n\\n    function batchRepayVAI(\\n        IVAIController vaiController,\\n        address[] calldata borrowers,\\n        address receiver\\n    ) external nonReentrant onlyOwner {\\n        vaiController.accrueVAIInterest();\\n        Currency vai = Currency.wrap(vaiController.getVAIAddress());\\n        uint256 balance = vai.balanceOfSelf();\\n        vai.approve(address(vaiController), type(uint256).max);\\n        uint256 borrowersCount = borrowers.length;\\n        for (uint256 i = 0; i < borrowersCount && balance != 0; ++i) {\\n            address borrower = borrowers[i];\\n            uint256 debt = vaiController.getVAIRepayAmount(borrower);\\n            _repayVAI(vaiController, borrower, _min(debt, balance));\\n            balance = vai.balanceOfSelf();\\n        }\\n        vai.approve(address(vaiController), 0);\\n        vai.transferAll(receiver);\\n    }\\n\\n    function sweepTokens(address token, address destination) external onlyOwner {\\n        Currency.wrap(token).transferAll(destination);\\n    }\\n\\n    function _accrueInterest(IVToken vToken) internal {\\n        uint256 err = vToken.accrueInterest();\\n        if (err != 0) {\\n            revert AccrueInterestFailed(err);\\n        }\\n    }\\n\\n    function _redeemUpTo(IVToken vToken, uint256 amount) internal {\\n        uint256 unredeemedUnderlying = vToken.balanceOfUnderlying(address(this));\\n        if (unredeemedUnderlying > 0) {\\n            uint256 err = vToken.redeemUnderlying(_min(amount, unredeemedUnderlying));\\n            if (err != 0) {\\n                revert RedeemFailed(err);\\n            }\\n        }\\n    }\\n\\n    function _repay(IVToken vToken, address borrower, uint256 amount) internal {\\n        if (amount == 0) {\\n            return;\\n        }\\n        if (_isVBNB(vToken)) {\\n            IVBNB(address(vToken)).repayBorrowBehalf{ value: amount }(borrower);\\n        } else {\\n            uint256 err = IVBep20(address(vToken)).repayBorrowBehalf(borrower, amount);\\n            if (err != 0) {\\n                revert RepaymentFailed(err);\\n            }\\n        }\\n    }\\n\\n    function _repayVAI(IVAIController vaiController, address borrower, uint256 amount) internal {\\n        if (amount == 0) {\\n            return;\\n        }\\n        (uint256 err, ) = vaiController.repayVAIBehalf(borrower, amount);\\n        if (err != 0) {\\n            revert RepaymentFailed(err);\\n        }\\n    }\\n\\n    function _getBorrows(\\n        IVToken vToken,\\n        address[] calldata borrowers\\n    ) internal view returns (uint256, AccountBorrows[] memory) {\\n        uint256 borrowersCount = borrowers.length;\\n        AccountBorrows[] memory borrows = new AccountBorrows[](borrowersCount);\\n        uint256 totalBorrowedAmount = 0;\\n        for (uint256 i = 0; i < borrowers.length; ++i) {\\n            address borrower = borrowers[i];\\n            uint256 amount = vToken.borrowBalanceStored(borrower);\\n            totalBorrowedAmount += amount;\\n            borrows[i] = AccountBorrows({ borrower: borrower, amount: amount });\\n        }\\n        return (totalBorrowedAmount, borrows);\\n    }\\n\\n    function _underlying(IVToken vToken) internal view returns (Currency) {\\n        if (_isVBNB(vToken)) {\\n            return CurrencyLibrary.NATIVE;\\n        }\\n        return Currency.wrap(IVBep20(address(vToken)).underlying());\\n    }\\n\\n    function _isVBNB(IVToken vToken) internal view returns (bool) {\\n        return address(vToken) == address(VBNB);\\n    }\\n\\n    function _min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0xdd0f6ca5ddcae06164be8f41a2631afe222172fca5b850fbeba3bc789493d8d3\",\"license\":\"BSD-3-Clause\"},\"contracts/InterfacesV8.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.25;\\n\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport { ResilientOracleInterface } from \\\"@venusprotocol/oracle/contracts/interfaces/OracleInterface.sol\\\";\\n\\ninterface IVToken is IERC20Upgradeable {\\n    function accrueInterest() external returns (uint256);\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n    function borrowBalanceCurrent(address borrower) external returns (uint256);\\n\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n    function comptroller() external view returns (IComptroller);\\n\\n    function borrowBalanceStored(address account) external view returns (uint256);\\n}\\n\\ninterface IVBep20 is IVToken {\\n    function borrowBehalf(address borrower, uint256 borrowAmount) external returns (uint256);\\n\\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\\n\\n    function liquidateBorrow(\\n        address borrower,\\n        uint256 repayAmount,\\n        IVToken vTokenCollateral\\n    ) external returns (uint256);\\n\\n    function underlying() external view returns (address);\\n}\\n\\ninterface IVBNB is IVToken {\\n    function repayBorrowBehalf(address borrower) external payable;\\n\\n    function liquidateBorrow(address borrower, IVToken vTokenCollateral) external payable;\\n}\\n\\ninterface IVAIController {\\n    function accrueVAIInterest() external;\\n\\n    function liquidateVAI(\\n        address borrower,\\n        uint256 repayAmount,\\n        IVToken vTokenCollateral\\n    ) external returns (uint256, uint256);\\n\\n    function repayVAIBehalf(address borrower, uint256 amount) external returns (uint256, uint256);\\n\\n    function getVAIAddress() external view returns (address);\\n\\n    function getVAIRepayAmount(address borrower) external view returns (uint256);\\n}\\n\\ninterface IComptroller {\\n    enum Action {\\n        MINT,\\n        REDEEM,\\n        BORROW,\\n        REPAY,\\n        SEIZE,\\n        LIQUIDATE,\\n        TRANSFER,\\n        ENTER_MARKET,\\n        EXIT_MARKET\\n    }\\n\\n    function _setActionsPaused(address[] calldata markets_, Action[] calldata actions_, bool paused_) external;\\n\\n    function liquidationIncentiveMantissa() external view returns (uint256);\\n\\n    function vaiController() external view returns (IVAIController);\\n\\n    function liquidatorContract() external view returns (address);\\n\\n    function oracle() external view returns (ResilientOracleInterface);\\n\\n    function actionPaused(address market, Action action) external view returns (bool);\\n\\n    function markets(address) external view returns (bool, uint256, bool);\\n\\n    function isForcedLiquidationEnabled(address) external view returns (bool);\\n}\\n\\ninterface ILiquidator {\\n    function restrictLiquidation(address borrower) external;\\n\\n    function unrestrictLiquidation(address borrower) external;\\n\\n    function addToAllowlist(address borrower, address liquidator) external;\\n\\n    function removeFromAllowlist(address borrower, address liquidator) external;\\n\\n    function liquidateBorrow(\\n        address vToken,\\n        address borrower,\\n        uint256 repayAmount,\\n        IVToken vTokenCollateral\\n    ) external payable;\\n\\n    function setTreasuryPercent(uint256 newTreasuryPercentMantissa) external;\\n\\n    function treasuryPercentMantissa() external view returns (uint256);\\n}\\n\\ninterface IProtocolShareReserve {\\n    enum IncomeType {\\n        SPREAD,\\n        LIQUIDATION\\n    }\\n\\n    function updateAssetsState(address comptroller, address asset, IncomeType kind) external;\\n}\\n\\ninterface IWBNB is IERC20Upgradeable {\\n    function deposit() external payable;\\n}\\n\",\"keccak256\":\"0x5ad0c257d07cd2a47b95382b85590e467d3931a6cc506db3394bcf7655d0a4a2\",\"license\":\"BSD-3-Clause\"},\"contracts/lib/Currency.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\n// This library is heavily inspired by Uniswap v4 Currency lib\\n// (https://github.com/Uniswap/v4-core/blob/b230769238879e1d4f58ffa57a4696b0c390d188/src/types/Currency.sol)\\n// Contrary to the implementation above, this library does not\\n// use assembly to save gas. It rather relies on OpenZeppelin's\\n// SafeERC20 to simplify the review and audits. This might change\\n// in future if it's more heavily used by Venus contracts.\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ntype Currency is address;\\n\\nlibrary CurrencyLibrary {\\n    using CurrencyLibrary for Currency;\\n\\n    /// @notice Thrown when a native transfer fails\\n    error NativeTransferFailed();\\n\\n    Currency public constant NATIVE = Currency.wrap(0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB);\\n\\n    /**\\n     * @dev If currency is a token, invokes SafeERC20.forceApprove to allow spender\\n     *   to spend the amount of tokens on behalf of the current contract. Otherwise,\\n     *   does nothing.\\n     * @param currency Currency\\n     * @param spender The account approved to spend the tokens\\n     * @param amount The approved amount\\n     */\\n    function approve(Currency currency, address spender, uint256 amount) internal {\\n        if (!currency.isNative()) {\\n            // I'd rather use approveOrRevert instead of forceApprove\\n            // once we migrate to OZ v5: force-approve does approve(0)\\n            // before approving the amount, and it's not always\\n            // desirable. The users will need to pay gas unnecessarily,\\n            // and using just approve() is safe as long as we revert on\\n            // errors (approveOrRevert handles that) and reset the approvals\\n            // after transfers (which is a best practice recommended by\\n            // auditors anyway).\\n            SafeERC20.forceApprove(IERC20(Currency.unwrap(currency)), spender, amount);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers an amount of currency to the receiver. If currency is a token,\\n     *   uses SafeERC20.safeTransfer, otherwise transfers the native currency using\\n     *   the recommended approach (`receiver.call{value: amount}(\\\"\\\")`).\\n     * @param currency Currency\\n     * @param receiver The account that would receive the tokens\\n     * @param amount The amount to transfer\\n     */\\n    function transfer(Currency currency, address receiver, uint256 amount) internal {\\n        if (currency.isNative()) {\\n            (bool success, ) = receiver.call{ value: amount }(\\\"\\\");\\n            if (!success) {\\n                revert NativeTransferFailed();\\n            }\\n        } else {\\n            SafeERC20.safeTransfer(IERC20(Currency.unwrap(currency)), receiver, amount);\\n        }\\n    }\\n\\n    function transferAll(Currency currency, address receiver) internal {\\n        uint256 balance = currency.balanceOfSelf();\\n        if (balance > 0) {\\n            currency.transfer(receiver, balance);\\n        }\\n    }\\n\\n    function balanceOfSelf(Currency currency) internal view returns (uint256) {\\n        if (currency.isNative()) {\\n            return address(this).balance;\\n        }\\n        return IERC20(Currency.unwrap(currency)).balanceOf(address(this));\\n    }\\n\\n    function isNative(Currency currency) internal pure returns (bool) {\\n        return Currency.unwrap(currency) == Currency.unwrap(NATIVE);\\n    }\\n}\\n\",\"keccak256\":\"0x784ce017bed33d5e2ff049c81800dbfd8879ac6adbdc924bd66b71713d549f8b\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100ab5760003560e01c806379ba50971161006457806379ba50971461019e5780638da5cb5b146101b3578063ac9a350d146101d1578063b5381e89146101f1578063e30c397814610211578063f2fde38b1461022f57600080fd5b80631609be1d146100b75780632e38052d146100d95780633421fc52146100f95780635196cab314610149578063670f87c514610169578063715018a61461018957600080fd5b366100b257005b600080fd5b3480156100c357600080fd5b506100d76100d23660046116bf565b61024f565b005b3480156100e557600080fd5b506100d76100f4366004611744565b61026e565b34801561010557600080fd5b5061012d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b34801561015557600080fd5b506100d7610164366004611744565b6103f6565b34801561017557600080fd5b506100d76101843660046117ac565b61060e565b34801561019557600080fd5b506100d7610707565b3480156101aa57600080fd5b506100d761071b565b3480156101bf57600080fd5b506001546001600160a01b031661012d565b3480156101dd57600080fd5b506100d76101ec3660046116bf565b610795565b3480156101fd57600080fd5b506100d761020c3660046117ac565b6108ca565b34801561021d57600080fd5b506002546001600160a01b031661012d565b34801561023b57600080fd5b506100d761024a3660046117f4565b6109c1565b610257610a32565b61026a6001600160a01b03831682610a8c565b5050565b610276610ac1565b61027e610a32565b61028784610b1a565b600080610295868686610ba4565b915091506102a38683610d10565b60006102ae87610e25565b905060006102c4826001600160a01b0316610edd565b90506102da6001600160a01b0383168986610f72565b825184821061032e5760005b8181101561032857600085828151811061030257610302611811565b6020026020010151905061031f8b82600001518360200151610fa1565b506001016102e6565b506103a6565b60005b818110801561033f57508215155b156103a457600085828151811061035857610358611811565b6020026020010151905061037e8b82600001516103798460200151886110de565b610fa1565b610390856001600160a01b0316610edd565b9350508061039d9061183d565b9050610331565b505b6103bb6001600160a01b0384168a6000610f72565b6103ce6001600160a01b03841687610a8c565b6103e16001600160a01b038a1687610a8c565b50505050506103f06001600055565b50505050565b6103fe610ac1565b610406610a32565b836001600160a01b031663b49b10056040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561044157600080fd5b505af1158015610455573d6000803e3d6000fd5b505050506000846001600160a01b031663cbeb2b286040518163ffffffff1660e01b8152600401602060405180830381865afa158015610499573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bd9190611856565b905060006104d3826001600160a01b0316610edd565b90506104eb6001600160a01b03831687600019610f72565b8360005b81811080156104fd57508215155b156105d857600087878381811061051657610516611811565b905060200201602081019061052b91906117f4565b604051633c617c9160e11b81526001600160a01b0380831660048301529192506000918b16906378c2f92290602401602060405180830381865afa158015610577573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059b9190611873565b90506105b18a836105ac84896110de565b6110f6565b6105c3866001600160a01b0316610edd565b94505050806105d19061183d565b90506104ef565b506105ee6001600160a01b038416886000610f72565b6106016001600160a01b03841685610a8c565b5050506103f06001600055565b610616610ac1565b61061e610a32565b600061062985610e25565b905061063e6001600160a01b03821683610a8c565b60405163852a12e360e01b8152600481018490526000906001600160a01b0387169063852a12e3906024016020604051808303816000875af1158015610688573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ac9190611873565b905080156106d55760405163eeddaac560e01b8152600481018290526024015b60405180910390fd5b6106e86001600160a01b03831686610a8c565b6106fb6001600160a01b03871684610a8c565b50506103f06001600055565b61070f610a32565b610719600061119e565b565b60025433906001600160a01b031681146107895760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b60648201526084016106cc565b6107928161119e565b50565b61079d610ac1565b6107a5610a32565b60006107b083610e25565b6040516370a0823160e01b81523060048201529091506000906001600160a01b0385169063db006a759082906370a0823190602401602060405180830381865afa158015610802573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108269190611873565b6040518263ffffffff1660e01b815260040161084491815260200190565b6020604051808303816000875af1158015610863573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108879190611873565b905080156108ab5760405163eeddaac560e01b8152600481018290526024016106cc565b6108be6001600160a01b03831684610a8c565b505061026a6001600055565b6108d2610ac1565b6108da610a32565b60006108e585610e25565b60405163852a12e360e01b8152600481018590529091506000906001600160a01b0387169063852a12e3906024016020604051808303816000875af1158015610932573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109569190611873565b9050801561097a5760405163eeddaac560e01b8152600481018290526024016106cc565b61098e6001600160a01b0383168786610f72565b610999868686610fa1565b6109ae6001600160a01b038316876000610f72565b6106e86001600160a01b03831684610a8c565b6109c9610a32565b600280546001600160a01b0383166001600160a01b031990911681179091556109fa6001546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6001546001600160a01b031633146107195760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106cc565b6000610aa0836001600160a01b0316610edd565b90508015610abc57610abc6001600160a01b03841683836111b7565b505050565b600260005403610b135760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106cc565b6002600055565b6000816001600160a01b031663a6afed956040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610b5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b809190611873565b9050801561026a576040516315fc6cbf60e21b8152600481018290526024016106cc565b6000606082828167ffffffffffffffff811115610bc357610bc361188c565b604051908082528060200260200182016040528015610c0857816020015b6040805180820190915260008082526020820152815260200190600190039081610be15790505b5090506000805b86811015610d03576000888883818110610c2b57610c2b611811565b9050602002016020810190610c4091906117f4565b6040516395dd919360e01b81526001600160a01b0380831660048301529192506000918c16906395dd919390602401602060405180830381865afa158015610c8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb09190611873565b9050610cbc81856118a2565b93506040518060400160405280836001600160a01b0316815260200182815250858481518110610cee57610cee611811565b60209081029190910101525050600101610c0f565b5097909650945050505050565b604051633af9e66960e01b81523060048201526000906001600160a01b03841690633af9e669906024016020604051808303816000875af1158015610d59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7d9190611873565b90508015610abc576000836001600160a01b031663852a12e3610da085856110de565b6040518263ffffffff1660e01b8152600401610dbe91815260200190565b6020604051808303816000875af1158015610ddd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e019190611873565b905080156103f05760405163eeddaac560e01b8152600481018290526024016106cc565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811690831603610e75575073bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb919050565b816001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610eb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed79190611856565b92915050565b600073bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb6001600160a01b03831603610f0a575047919050565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015610f4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed79190611873565b73bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb6001600160a01b03841614610abc57610abc83838361125a565b80600003610fae57505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116908416036110435760405163e597461960e01b81526001600160a01b03838116600483015284169063e59746199083906024016000604051808303818588803b15801561102557600080fd5b505af1158015611039573d6000803e3d6000fd5b5050505050505050565b6040516304c11f0360e31b81526001600160a01b0383811660048301526024820183905260009190851690632608f818906044016020604051808303816000875af1158015611096573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ba9190611873565b905080156103f05760405163259aff3560e01b8152600481018290526024016106cc565b60008183106110ed57816110ef565b825b9392505050565b8060000361110357505050565b604051631f040ff560e01b81526001600160a01b0383811660048301526024820183905260009190851690631f040ff59060440160408051808303816000875af1158015611155573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117991906118b5565b50905080156103f05760405163259aff3560e01b8152600481018290526024016106cc565b600280546001600160a01b03191690556107928161131c565b73bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb6001600160a01b0384160361124f576000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611228576040519150601f19603f3d011682016040523d82523d6000602084013e61122d565b606091505b50509050806103f057604051633d2cec6f60e21b815260040160405180910390fd5b610abc83838361136e565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526112ab848261139e565b6103f0576040516001600160a01b03841660248201526000604482015261131290859063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611445565b6103f08482611445565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b038316602482015260448101829052610abc90849063a9059cbb60e01b906064016112db565b6000806000846001600160a01b0316846040516113bb91906118fd565b6000604051808303816000865af19150503d80600081146113f8576040519150601f19603f3d011682016040523d82523d6000602084013e6113fd565b606091505b50915091508180156114275750805115806114275750808060200190518101906114279190611919565b801561143c57506001600160a01b0385163b15155b95945050505050565b600061149a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661151a9092919063ffffffff16565b90508051600014806114bb5750808060200190518101906114bb9190611919565b610abc5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106cc565b60606115298484600085611531565b949350505050565b6060824710156115925760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106cc565b600080866001600160a01b031685876040516115ae91906118fd565b60006040518083038185875af1925050503d80600081146115eb576040519150601f19603f3d011682016040523d82523d6000602084013e6115f0565b606091505b50915091506116018783838761160c565b979650505050505050565b6060831561167b578251600003611674576001600160a01b0385163b6116745760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106cc565b5081611529565b61152983838151156116905781518083602001fd5b8060405162461bcd60e51b81526004016106cc919061193b565b6001600160a01b038116811461079257600080fd5b600080604083850312156116d257600080fd5b82356116dd816116aa565b915060208301356116ed816116aa565b809150509250929050565b60008083601f84011261170a57600080fd5b50813567ffffffffffffffff81111561172257600080fd5b6020830191508360208260051b850101111561173d57600080fd5b9250929050565b6000806000806060858703121561175a57600080fd5b8435611765816116aa565b9350602085013567ffffffffffffffff81111561178157600080fd5b61178d878288016116f8565b90945092505060408501356117a1816116aa565b939692955090935050565b600080600080608085870312156117c257600080fd5b84356117cd816116aa565b935060208501356117dd816116aa565b92506040850135915060608501356117a1816116aa565b60006020828403121561180657600080fd5b81356110ef816116aa565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161184f5761184f611827565b5060010190565b60006020828403121561186857600080fd5b81516110ef816116aa565b60006020828403121561188557600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b80820180821115610ed757610ed7611827565b600080604083850312156118c857600080fd5b505080516020909101519092909150565b60005b838110156118f45781810151838201526020016118dc565b50506000910152565b6000825161190f8184602087016118d9565b9190910192915050565b60006020828403121561192b57600080fd5b815180151581146110ef57600080fd5b602081526000825180602084015261195a8160408501602087016118d9565b601f01601f1916919091016040019291505056fea2646970667358221220d95334cc393747bca42d43b0466f305692ef2afdf311d5d615ba860c7d18a93f64736f6c63430008190033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "NativeTransferFailed()": [
        {
          "notice": "Thrown when a native transfer fails"
        }
      ],
      "ZeroAddressNotAllowed()": [
        {
          "notice": "Thrown if the supplied address is a zero address where it is not allowed"
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2525,
        "contract": "contracts/Governance/TokenRedeemer.sol:TokenRedeemer",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1433,
        "contract": "contracts/Governance/TokenRedeemer.sol:TokenRedeemer",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1546,
        "contract": "contracts/Governance/TokenRedeemer.sol:TokenRedeemer",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
