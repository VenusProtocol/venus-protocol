{
  "address": "0x7857738486E813b5BCb6cA62B46F6b2ee029609B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dataSource1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dataSource2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "checkpointTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ZeroAddressNotAllowed",
      "type": "error"
    },
    {
      "stateMutability": "nonpayable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "CHECKPOINT_TIMESTAMP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DATA_SOURCE_1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DATA_SOURCE_2",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentDataSource",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x37d3ddd50759f83840e1a6280dd2a01d5ac28962139ebde54c3f7157de7868a2",
  "receipt": {
    "to": null,
    "from": "0x55A9f5374Af30E3045FB491f1da3C2E8a74d168D",
    "contractAddress": "0x7857738486E813b5BCb6cA62B46F6b2ee029609B",
    "transactionIndex": 60,
    "gasUsed": "275951",
    "logsBloom": "0x
    "blockHash": "0xa3496b7712a8ab568372aedfdd7e74cfa3948f6fc4584643ac73c29657345607",
    "transactionHash": "0x37d3ddd50759f83840e1a6280dd2a01d5ac28962139ebde54c3f7157de7868a2",
    "logs": [],
    "blockNumber": 48555818,
    "cumulativeGasUsed": "6083101",
    "status": 1,
    "byzantium": true
  },
  "args": ["0xEa464DfB1B0BB8964c250427bb5B0DD4f315141A", "0x927EA36cE0a926b0Ed9358A0ed899EFCE4574fC0", 1745903100],
  "numDeployments": 1,
  "solcInputHash": "a3bade197c2ebe869d361ba22b5c6994",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dataSource1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dataSource2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"checkpointTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ZeroAddressNotAllowed\",\"type\":\"error\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"CHECKPOINT_TIMESTAMP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DATA_SOURCE_1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DATA_SOURCE_2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentDataSource\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Venus\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"checkpointTimestamp\":\"Checkpoint timestamp\",\"dataSource1\":\"Data source to use before the checkpoint\",\"dataSource2\":\"Data source to use after the checkpoint\"}},\"currentDataSource()\":{\"returns\":{\"_0\":\"Data source contract in use\"}}},\"title\":\"Venus CheckpointView Contract\",\"version\":1},\"userdoc\":{\"errors\":{\"ZeroAddressNotAllowed()\":[{\"notice\":\"Thrown if the supplied address is a zero address where it is not allowed\"}]},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor\"},\"currentDataSource()\":{\"notice\":\"Returns the current data source contract (either the old one or the new one)\"}},\"notice\":\"A contract that calls a view function from two different contracts   based on whether a checkpoint in time has passed. Using this contract, we   can change dependencies at a certain timestamp, which is useful for   scheduled changes in, e.g., interest rate models.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Utils/CheckpointView.sol\":\"CheckpointView\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@venusprotocol/solidity-utilities/contracts/validators.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\n/// @notice Thrown if the supplied address is a zero address where it is not allowed\\nerror ZeroAddressNotAllowed();\\n\\n/// @notice Thrown if the supplied value is 0 where it is not allowed\\nerror ZeroValueNotAllowed();\\n\\n/// @notice Checks if the provided address is nonzero, reverts otherwise\\n/// @param address_ Address to check\\n/// @custom:error ZeroAddressNotAllowed is thrown if the provided address is a zero address\\nfunction ensureNonzeroAddress(address address_) pure {\\n    if (address_ == address(0)) {\\n        revert ZeroAddressNotAllowed();\\n    }\\n}\\n\\n/// @notice Checks if the provided value is nonzero, reverts otherwise\\n/// @param value_ Value to check\\n/// @custom:error ZeroValueNotAllowed is thrown if the provided value is 0\\nfunction ensureNonzeroValue(uint256 value_) pure {\\n    if (value_ == 0) {\\n        revert ZeroValueNotAllowed();\\n    }\\n}\\n\",\"keccak256\":\"0xdb88e14d50dd21889ca3329d755673d022c47e8da005b6a545c7f69c2c4b7b86\",\"license\":\"BSD-3-Clause\"},\"contracts/Utils/CheckpointView.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\nimport { ensureNonzeroAddress } from \\\"@venusprotocol/solidity-utilities/contracts/validators.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title Venus CheckpointView Contract\\n * @notice A contract that calls a view function from two different contracts\\n *   based on whether a checkpoint in time has passed. Using this contract, we\\n *   can change dependencies at a certain timestamp, which is useful for\\n *   scheduled changes in, e.g., interest rate models.\\n * @author Venus\\n */\\ncontract CheckpointView {\\n    using Address for address;\\n\\n    address public immutable DATA_SOURCE_1;\\n    address public immutable DATA_SOURCE_2;\\n    uint256 public immutable CHECKPOINT_TIMESTAMP;\\n\\n    /**\\n     * @notice Constructor\\n     * @param dataSource1 Data source to use before the checkpoint\\n     * @param dataSource2 Data source to use after the checkpoint\\n     * @param checkpointTimestamp Checkpoint timestamp\\n     */\\n    constructor(address dataSource1, address dataSource2, uint256 checkpointTimestamp) {\\n        ensureNonzeroAddress(address(dataSource1));\\n        ensureNonzeroAddress(address(dataSource2));\\n        DATA_SOURCE_1 = dataSource1;\\n        DATA_SOURCE_2 = dataSource2;\\n        CHECKPOINT_TIMESTAMP = checkpointTimestamp;\\n    }\\n\\n    /**\\n     * @notice Fallback function that proxies the view calls to the current data source\\n     * @param input Input data (with a function selector) for the call\\n     * @return The data returned by the called function on the current data source\\n     */\\n    fallback(bytes calldata input) external returns (bytes memory) {\\n        return _getCurrentDataSource().functionStaticCall(input);\\n    }\\n\\n    /**\\n     * @notice Returns the current data source contract (either the old one or the new one)\\n     * @return Data source contract in use\\n     */\\n    function currentDataSource() external view returns (address) {\\n        return _getCurrentDataSource();\\n    }\\n\\n    /**\\n     * @dev Returns the current data source contract (either the old one or the new one)\\n     * @return Data source contract in use\\n     */\\n    function _getCurrentDataSource() internal view returns (address) {\\n        return (block.timestamp < CHECKPOINT_TIMESTAMP) ? DATA_SOURCE_1 : DATA_SOURCE_2;\\n    }\\n}\\n\",\"keccak256\":\"0xee00197e76d3a1923787ae0f86b44998382bf8f493aa51e3dbf8ff0ebc5da849\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b5060405161051838038061051883398101604081905261002f916100a2565b6100388361005c565b6100418261005c565b6001600160a01b03928316608052911660a05260c0526100de565b6001600160a01b038116610083576040516342bcdf7f60e11b815260040160405180910390fd5b50565b80516001600160a01b038116811461009d57600080fd5b919050565b6000806000606084860312156100b757600080fd5b6100c084610086565b92506100ce60208501610086565b9150604084015190509250925092565b60805160a05160c0516103f86101206000396000818160f8015261015b01526000818161012d015261018301526000818160b401526101a701526103f86000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063539ef45a146100af5780636eec7c78146100f3578063b169ca2c14610128578063b1e3f3ca1461014f575b60003660606100a383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506100949250610157915050565b6001600160a01b0316906101cc565b80519350602001915050f35b6100d67f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61011a7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016100ea565b6100d67f000000000000000000000000000000000000000000000000000000000000000081565b6100d66101f8565b60007f000000000000000000000000000000000000000000000000000000000000000042106101a557507f000000000000000000000000000000000000000000000000000000000000000090565b7f00000000000000000000000000000000000000000000000000000000000000005b905090565b60606101f1838360405180606001604052806025815260200161039e60259139610202565b9392505050565b60006101c7610157565b6060600080856001600160a01b03168560405161021f919061034e565b600060405180830381855afa9150503d806000811461025a576040519150601f19603f3d011682016040523d82523d6000602084013e61025f565b606091505b50915091506102708683838761027a565b9695505050505050565b606083156102ee5782516000036102e7576001600160a01b0385163b6102e75760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064015b60405180910390fd5b50816102f8565b6102f88383610300565b949350505050565b8151156103105781518083602001fd5b8060405162461bcd60e51b81526004016102de919061036a565b60005b8381101561034557818101518382015260200161032d565b50506000910152565b6000825161036081846020870161032a565b9190910192915050565b602081526000825180602084015261038981604085016020870161032a565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564a2646970667358221220eca66ee30baa1f137c05183519a166a921ad59eea1d7c5756184f9d6a48edffc64736f6c63430008190033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063539ef45a146100af5780636eec7c78146100f3578063b169ca2c14610128578063b1e3f3ca1461014f575b60003660606100a383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506100949250610157915050565b6001600160a01b0316906101cc565b80519350602001915050f35b6100d67f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61011a7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016100ea565b6100d67f000000000000000000000000000000000000000000000000000000000000000081565b6100d66101f8565b60007f000000000000000000000000000000000000000000000000000000000000000042106101a557507f000000000000000000000000000000000000000000000000000000000000000090565b7f00000000000000000000000000000000000000000000000000000000000000005b905090565b60606101f1838360405180606001604052806025815260200161039e60259139610202565b9392505050565b60006101c7610157565b6060600080856001600160a01b03168560405161021f919061034e565b600060405180830381855afa9150503d806000811461025a576040519150601f19603f3d011682016040523d82523d6000602084013e61025f565b606091505b50915091506102708683838761027a565b9695505050505050565b606083156102ee5782516000036102e7576001600160a01b0385163b6102e75760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064015b60405180910390fd5b50816102f8565b6102f88383610300565b949350505050565b8151156103105781518083602001fd5b8060405162461bcd60e51b81526004016102de919061036a565b60005b8381101561034557818101518382015260200161032d565b50506000910152565b6000825161036081846020870161032a565b9190910192915050565b602081526000825180602084015261038981604085016020870161032a565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564a2646970667358221220eca66ee30baa1f137c05183519a166a921ad59eea1d7c5756184f9d6a48edffc64736f6c63430008190033",
  "devdoc": {
    "author": "Venus",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "checkpointTimestamp": "Checkpoint timestamp",
          "dataSource1": "Data source to use before the checkpoint",
          "dataSource2": "Data source to use after the checkpoint"
        }
      },
      "currentDataSource()": {
        "returns": {
          "_0": "Data source contract in use"
        }
      }
    },
    "title": "Venus CheckpointView Contract",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ZeroAddressNotAllowed()": [
        {
          "notice": "Thrown if the supplied address is a zero address where it is not allowed"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor"
      },
      "currentDataSource()": {
        "notice": "Returns the current data source contract (either the old one or the new one)"
      }
    },
    "notice": "A contract that calls a view function from two different contracts   based on whether a checkpoint in time has passed. Using this contract, we   can change dependencies at a certain timestamp, which is useful for   scheduled changes in, e.g., interest rate models.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
