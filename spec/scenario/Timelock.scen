-- Timelock Tests
Test "Reverts if calling setDelay directly"
    Timelock Deploy Geoff 604800
    AllowFailures
    Timelock SetDelay 604
    Assert Revert "revert Timelock::setDelay: Call must come from Timelock."

Test "Reverts if calling setPendingAdmin directly"
    Timelock Deploy Geoff 604800
    AllowFailures
    Timelock SetPendingAdmin Jared
    Assert Revert "revert Timelock::setPendingAdmin: Call must come from Timelock."

Test "Reverts if calling acceptAdmin while not being pendingAdmin"
    Timelock Deploy Geoff 604800
    AllowFailures
    From Jared (Timelock AcceptAdmin)
    Assert Revert "revert Timelock::acceptAdmin: Call must come from pendingAdmin."

Test "Queuing and execute a transaction for setDelay"
    FreezeTime 90
    -- Admin:Geoff Delay:1 week
    Timelock Deploy Geoff 604800
    Assert Equal (Timelock Delay) 604800
    -- eta = 1 week (604800) + blockTimestamp (100) = 604900
    Assert False (Timelock QueuedTransaction (Timelock TxHash (Timelock Address) 0 604900 "setDelay(uint256)" "1209600"))
    From Geoff (Timelock QueueTransaction (Timelock Address) 0 604900 "setDelay(uint256)" "1209600")
    Assert True (Timelock QueuedTransaction (Timelock TxHash (Timelock Address) 0 604900 "setDelay(uint256)" "1209600"))
    --  Now execute after delay time
    FreezeTime 604900
    From Geoff (Timelock ExecuteTransaction (Timelock Address) 0 604900 "setDelay(uint256)" "1209600")
    Assert False (Timelock QueuedTransaction (Timelock TxHash (Timelock Address) 0 604900 "setDelay(uint256)" "1209600"))
    Assert Equal (Timelock Delay) 1209600

Test "Queuing and execute a transaction for setPendingAdmin"
    FreezeTime 90
    -- Admin:Geoff Delay:1 week
    Timelock Deploy Geoff 604800
    Assert Equal (Timelock Admin) (User Geoff Address)
    Assert Equal (Timelock PendingAdmin) (Address Zero)
    -- eta = 1 week (604800) + blockTimestamp (100) = 604900
    Assert False (Timelock QueuedTransaction (Timelock TxHash (Timelock Address) 0 604900 "setPendingAdmin(address)" (User Jared Address)))
    From Geoff (Timelock QueueTransaction (Timelock Address) 0 604900 "setPendingAdmin(address)" (User Jared Address))
    Assert True (Timelock QueuedTransaction (Timelock TxHash (Timelock Address) 0 604900 "setPendingAdmin(address)" (User Jared Address)))
    --  Now execute after delay time
    FreezeTime 604900
    From Geoff (Timelock ExecuteTransaction (Timelock Address) 0 604900 "setPendingAdmin(address)" (User Jared Address))
    Assert False (Timelock QueuedTransaction (Timelock TxHash (Timelock Address) 0 604900 "setPendingAdmin(address)" (User Jared Address)))
    Assert Equal (Timelock PendingAdmin) (User Jared Address)
    From Jared (Timelock AcceptAdmin)
    Assert Equal (Timelock Admin) (User Jared Address)
    Assert Equal (Timelock PendingAdmin) (Address Zero)

Test "Accept vToken admin from Timelock"
    FreezeTime 90
    -- Admin:Geoff Delay:1 week
    Timelock Deploy Geoff 604800
    Assert Equal (Timelock Admin) (User Geoff Address)
    NewComptroller
    NewVToken ZRX vZRX
    Comptroller SetMarketSupplyCaps (vZRX) (2e30)
    Assert Equal (VToken vZRX Admin) (Address Root)
    Assert Equal (VToken vZRX PendingAdmin) (Address Zero)
    From Root (VToken vZRX SetPendingAdmin (Timelock Address))
    Assert Equal (VToken vZRX PendingAdmin) (Timelock Address)
    -- eta = 1 week (604800) + blockTimestamp (~100) = 604900
    Assert False (Timelock QueuedTransaction (Timelock TxHash (VToken vZRX Address) 0 604900 "_acceptAdmin()" ""))
    From Geoff (Timelock QueueTransaction (VToken vZRX Address) 0 604900 "_acceptAdmin()" "")
    Assert True (Timelock QueuedTransaction (Timelock TxHash (VToken vZRX Address) 0 604900 "_acceptAdmin()" ""))
    --  Now execute after delay time
    FreezeTime 604900
    From Geoff (Timelock ExecuteTransaction (VToken vZRX Address) 0 604900 "_acceptAdmin()" "")
    Assert False (Timelock QueuedTransaction (Timelock TxHash (VToken vZRX Address) 0 604900 "_acceptAdmin()" ""))
    Assert Equal (VToken vZRX Admin) (Timelock Address)
    Assert Equal (VToken vZRX PendingAdmin) (Address Zero)

Test "Accept unitroller admin from Timelock"
    -- Admin:Geoff Delay:1 week
    Timelock Deploy Geoff 604800
    Assert Equal (Timelock Admin) (User Geoff Address)
    NewComptroller
    Assert Equal (Unitroller Admin) (Address Root)
    Assert Equal (Unitroller PendingAdmin) (Address Zero)
    From Root (Unitroller SetPendingAdmin (Timelock Address))
    Assert Equal (Unitroller PendingAdmin) (Timelock Address)
    -- eta = 1 week (604800) + blockTimestamp (100) = 604900
    Assert False (Timelock QueuedTransaction (Timelock TxHash (Unitroller Address) 0 604900 "_acceptAdmin()" ""))
    FreezeTime 90
    From Geoff (Timelock QueueTransaction (Unitroller Address) 0 604900 "_acceptAdmin()" "")
    Assert True (Timelock QueuedTransaction (Timelock TxHash (Unitroller Address) 0 604900 "_acceptAdmin()" ""))
    --  Now execute after delay time
    FreezeTime 604900
    From Geoff (Timelock ExecuteTransaction (Unitroller Address) 0 604900 "_acceptAdmin()" "")
    Assert False (Timelock QueuedTransaction (Timelock TxHash (Unitroller Address) 0 604900 "_acceptAdmin()" ""))
    Assert Equal (Unitroller Admin) (Timelock Address)
    Assert Equal (Unitroller PendingAdmin) (Address Zero)


Test "Reduce reserves for VBep20 from Timelock and send reserves to external address"
    NewComptroller
    ListedVToken ZRX vZRX initialExchangeRate:1e9
    Comptroller SetMarketSupplyCaps (vZRX) (2e30)
    Prep Geoff 50e18 ZRX vZRX
    Mint Geoff 50e18 vZRX
    Assert Equal (Bep20 vZRX TokenBalance Geoff) (Exactly 500e8)
    Assert Equal (VToken vZRX UnderlyingBalance Geoff) (Exactly 50e18)
    Assert Equal (VToken vZRX ExchangeRate) (Exactly 1e9)
    BorrowAndRepayWithInterest ZRX vZRX 10e18 5e18 interestRate:0.000001 blocks:500000 reserveRate:0.2
    -- We've accrued 10% interest for 5 blocks, or 50% of the amount,
    --   thus, we should have accrued 5e18 of interest for the protocol
    --   The reserves should get 20% of this, or 1e18, and the rest
    --   is due pro-rata to all holders. We just have one, so
    --   let's check that account is given correct new balance.
    Timelock Deploy Jared 604800
    Assert Equal (Bep20 ZRX TokenBalance vZRX) (Exactly 55e18)
    Assert Equal (Bep20 ZRX TokenBalance (Timelock Address)) (Exactly 0e18)
    Assert Equal (Bep20 vZRX TokenBalance Geoff) (Exactly 500e8)
    Assert Equal (VToken vZRX Reserves) (Exactly 1e18)
    Assert Equal (VToken vZRX UnderlyingBalance Geoff) (Exactly 54e18)
    -- (55.0e18+0.0e18-1.0e18)/500.0e8
    Assert Equal (VToken vZRX ExchangeRate) (Exactly 1.08e9)
    -- Set Timelock as admin
    From Root (VToken vZRX SetPendingAdmin (Timelock Address))
    -- Queue Transactions
    FreezeTime 90
    From Jared (Timelock QueueTransaction (VToken vZRX Address) 0 604900 "_acceptAdmin()" "")
    From Jared (Timelock QueueTransaction (VToken vZRX Address) 0 604900 "_reduceReserves(uint256)" "1000000000000000000")
    From Jared (Timelock QueueTransaction (Bep20 ZRX Address) 0 604900 "transfer(address,uint256)" "0x0000000000000000000000000000000000000001" "1000000000000000000")
    FreezeTime 604900
    From Jared (Timelock ExecuteTransaction (VToken vZRX Address) 0 604900 "_acceptAdmin()" "")
    -- Now, let's pull out all of our reserves (1e18)
    From Jared (Timelock ExecuteTransaction (VToken vZRX Address) 0 604900 "_reduceReserves(uint256)" "1000000000000000000")
    Assert Equal (Bep20 ZRX TokenBalance vZRX) (Exactly 54e18)
    Assert Equal (Bep20 ZRX TokenBalance (Timelock Address)) (Exactly 1e18)
    Assert Equal (Bep20 vZRX TokenBalance Geoff) (Exactly 500e8)
    Assert Equal (VToken vZRX Reserves) (Exactly 0e18)
    Assert Equal (VToken vZRX UnderlyingBalance Geoff) (Exactly 54e18)
    -- (54.0e18+0.0e18-0.0e18)/500.0e8
    Assert Equal (VToken vZRX ExchangeRate) (Exactly 1.08e9)
    Assert Equal (Bep20 ZRX TokenBalance "0x0000000000000000000000000000000000000001") (Exactly 0e18)
    From Jared (Timelock ExecuteTransaction (Bep20 ZRX Address) 0 604900 "transfer(address,uint256)" "0x0000000000000000000000000000000000000001" "1000000000000000000")
    Assert Equal (Bep20 ZRX TokenBalance (Timelock Address)) (Exactly 0e18)
    Assert Equal (Bep20 ZRX TokenBalance "0x0000000000000000000000000000000000000001") (Exactly 1e18)

Test "Reduce reserves for VBNB from Timelock and send reserves to external address"
    NewComptroller
    ListedBNBToken vBNB initialExchangeRate:1e9
    Comptroller SetMarketSupplyCaps (vBNB) (2e30)
    CallMintBnb Geoff 50e18 vBNB
    Assert Equal (Bep20 vBNB TokenBalance Geoff) (Exactly 500e8)
    Assert Equal (VToken vBNB UnderlyingBalance Geoff) (Exactly 50e18)
    Assert Equal (VToken vBNB ExchangeRate) (Exactly 1e9)
    BorrowAndRepayBnbWithInterest vBNB 10e18 5e18 interestRate:0.000001 blocks:500000 reserveRate:0.2
    -- We've accrued 10% interest for 5 blocks, or 50% of the amount,
    --   thus, we should have accrued 5e18 of interest for the protocol
    --   The reserves should get 20% of this, or 1e18, and the rest
    --   is due pro-rata to all holders. We just have one, so
    --   let's check that account is given correct new balance.
    FreezeTime 90
    Timelock Deploy Jared 604800
    Assert Equal (BNBBalance vBNB) (Exactly 55e18)
    Assert Equal (BNBBalance (Timelock Address)) (Exactly 0e18)
    Assert Equal (Bep20 vBNB TokenBalance Geoff) (Exactly 500e8)
    Assert Equal (VToken vBNB Reserves) (Exactly 1e18)
    Assert Equal (VToken vBNB UnderlyingBalance Geoff) (Exactly 54e18)
    -- (55.0e18+0.0e18-1.0e18)/500.0e8
    Assert Equal (VToken vBNB ExchangeRate) (Exactly 1.08e9)
    -- Set Timelock as admin
    From Root (VToken vBNB SetPendingAdmin (Timelock Address))
    -- Queue Transactions
    From Jared (Timelock QueueTransaction (VToken vBNB Address) 0 604900 "_acceptAdmin()" "")
    From Jared (Timelock QueueTransaction (VToken vBNB Address) 0 604900 "_reduceReserves(uint256)" "1000000000000000000")
    From Jared (Timelock QueueTransaction Jared 1000000000000000000 604900 "" "")
    FreezeTime 604900
    From Jared (Timelock ExecuteTransaction (VToken vBNB Address) 0 604900 "_acceptAdmin()" "")
    -- Now, let's pull out all of our reserves (1e18)
    From Jared (Timelock ExecuteTransaction (VToken vBNB Address) 0 604900 "_reduceReserves(uint256)" "1000000000000000000")
    Assert Equal (BNBBalance (Timelock Address)) 1e18
    Assert Equal (BNBBalance vBNB) (Exactly 54e18)
    Assert Equal (Bep20 vBNB TokenBalance Geoff) (Exactly 500e8)
    Assert Equal (VToken vBNB Reserves) (Exactly 0e18)
    Assert Equal (VToken vBNB UnderlyingBalance Geoff) (Exactly 54e18)
    -- (54.0e18+0.0e18-0.0e18)/500.0e8
    Assert Equal (VToken vBNB ExchangeRate) (Exactly 1.08e9)
    Expect Changes (BNBBalance Jared) 1e18
    Trx GasPrice 0 (From Jared (Timelock ExecuteTransaction Jared 1000000000000000000 604900 "" ""))
    Assert Equal (BNBBalance (Timelock Address)) (Exactly 0e18)

Test "Set Pending Comptroller implementation on Unitroller from Timelock"
    Unitroller Deploy
    PriceOracle Deploy Simple
    ComptrollerImpl Deploy Scenario ScenComptroller
    Unitroller SetPendingImpl ScenComptroller
    Assert Equal (Unitroller PendingImplementation) (ComptrollerImpl ScenComptroller Address)
    PriceOracleProxy Deploy Admin (PriceOracle Address) (Address Zero) (Address Zero) (Address Zero) (Address Zero) (Address Zero) -- if listing vBnb use ListedBNBToken to replace proxy
    ComptrollerImpl ScenComptroller Become
    Comptroller SetPriceOracle (PriceOracleProxy Address)
    Comptroller SetCloseFactor 0.1
    Assert Equal (Unitroller PendingImplementation) (Address Zero)
    Assert Equal (Unitroller Implementation) (Address ScenComptroller)
    FreezeTime 90
    Timelock Deploy Coburn 604800
    ComptrollerImpl Deploy Scenario ScenComptroller
    Unitroller SetPendingImpl ScenComptroller
    Unitroller SetPendingAdmin (Timelock Address)
    Assert Equal (Unitroller PendingAdmin) (Timelock Address)
    Assert Equal (Unitroller PendingImplementation) (ComptrollerImpl ScenComptroller Address)
    From Coburn (Timelock QueueTransaction (Unitroller Address) 0 604900 "_acceptAdmin()" "")
    From Coburn (Timelock QueueTransaction (ComptrollerImpl ScenComptroller Address) 0 604900 "_become(address)" (Unitroller Address))
    FreezeTime 604900
    From Coburn (Timelock ExecuteTransaction (Unitroller Address) 0 604900 "_acceptAdmin()" "")
    Assert Equal (Unitroller Admin) (Timelock Address)
    Assert Equal (Unitroller PendingAdmin) (Address Zero)
    From Coburn (Timelock ExecuteTransaction (ComptrollerImpl ScenComptroller Address) 0 604900 "_become(address)" (Unitroller Address))
    Assert Equal (Unitroller Implementation) (Address ScenComptroller)
    Assert Equal (Unitroller PendingImplementation) (Address Zero)
