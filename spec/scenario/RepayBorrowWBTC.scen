-- Tests for repaying borrows

Macro NewBorrow borrowAmount borrowRate
    NewComptroller price:1.0 -- TODO: This should really be a price for a specific asset
    NewVToken ZRX vZRX
    Comptroller SetMarketSupplyCaps (vZRX) (2e30)
    NewVToken WBTC vWBTC borrowRate 0.1 8 WBTC -- note: cannot use macros with named args right now
    Comptroller SetMarketSupplyCaps (vWBTC) (2e30)
    Give vWBTC 10e8 WBTC -- Faucet some WBTC to borrow
    Support vZRX collateralFactor:0.5
    Support vWBTC collateralFactor:0.5
    Prep Geoff Some ZRX vZRX
    Mint Geoff 100e18 vZRX
    EnterMarkets Geoff vZRX vWBTC
    Borrow Geoff borrowAmount vWBTC

Test "Borrow WBTC, hold a few blocks, and repay part"
    NewBorrow borrowAmount:1e8 borrowRate:0.000005
    Assert Equal (VToken vWBTC BorrowBalance Geoff) 1e8
    Assert Equal (VToken vWBTC TotalBorrowsCurrent) 1e8
    Assert Equal (Bep20 WBTC TokenBalance Geoff) 1e8
    Assert Equal (Bep20 WBTC TokenBalance vWBTC) 9e8
    -- Now let's add some blocks and see what happs
    FastForward 300000 Blocks -- 1e18 * (1 + 300000 * 0.000005)
    Assert Equal (VToken vWBTC BorrowBalance Geoff) 2.5e8
    -- Now let's repay one full token
    From Geoff (Bep20 WBTC Approve vWBTC 1.0e8)
    RepayBorrow Geoff 1e8 vWBTC
    Assert Equal (VToken vWBTC BorrowBalance Geoff) 1.5e8
    -- Let's check the overall numbers
    Assert Equal (Bep20 WBTC TokenBalance Geoff) Zero
    Assert Equal (Bep20 WBTC TokenBalance vWBTC) 10e8
    Assert Equal (VToken vWBTC TotalBorrowsCurrent) 1.5e8
    FastForward 200000 Blocks -- 1.5e8 * (1 + 200000 * 0.000005)
    Assert Equal (VToken vWBTC BorrowBalance Geoff) 3e8
    Assert Equal (VToken vWBTC TotalBorrowsCurrent) 3e8

Test "Borrow, hold a few blocks, and repay full"
    NewBorrow borrowAmount:1e8 borrowRate:0.000005
    Assert Equal (VToken vWBTC BorrowBalance Geoff) 1e8
    Assert Equal (VToken vWBTC TotalBorrowsCurrent) 1e8
    Assert Equal (Bep20 WBTC TokenBalance Geoff) 1e8
    Assert Equal (Bep20 WBTC TokenBalance vWBTC) 9e8
    -- Now let's add some blocks and see what happs
    FastForward 300000 Blocks -- 1e8 * (1 + 300000 * 0.000005)
    Assert Equal (VToken vWBTC BorrowBalance Geoff) 2.5e8
    -- Now let's repay fully
    Give Geoff 1.5e8 WBTC -- Geoff had the 1.0e8 borrowed WBTC
    From Geoff (Bep20 WBTC Approve vWBTC 2.5e8)
    RepayBorrow Geoff 2.5e8 vWBTC
    Assert Equal (VToken vWBTC BorrowBalance Geoff) 0e8
    -- Let's check the overall numbers
    Assert Equal (Bep20 WBTC TokenBalance Geoff) 0e8
    Assert Equal (Bep20 WBTC TokenBalance vWBTC) 11.5e8
    Assert Equal (VToken vWBTC TotalBorrowsCurrent) 0e8
    FastForward 200000 Blocks -- 0e8 * (1 + 200000 * 0.000005)
    Assert Equal (VToken vWBTC BorrowBalance Geoff) 0e8
    Assert Equal (VToken vWBTC TotalBorrowsCurrent) 0e8

Test "Borrow, hold a few blocks, and repay too much"
    NewBorrow borrowAmount:1e8 borrowRate:0.000005
    Assert Equal (VToken vWBTC BorrowBalance Geoff) 1e8
    Assert Equal (VToken vWBTC TotalBorrowsCurrent) 1e8
    -- Now let's add some blocks and see what happs
    FastForward 300000 Blocks -- 1e8 * (1 + 300000 * 0.000005)
    Assert Equal (VToken vWBTC BorrowBalance Geoff) 2.5e8
    -- Now let's repay fully
    AllowFailures
    Prep Geoff 10e8 WBTC vWBTC
    Expect Changes (Bep20 WBTC TokenBalance Geoff) Zero
    Expect Changes (Bep20 WBTC TokenBalance vWBTC) Zero
    RepayBorrow Geoff 10e8 vWBTC
    Assert Revert "revert REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED"
    -- Let's check the overall numbers
    Assert Equal (VToken vWBTC BorrowBalance Geoff) 2.5e8
    Assert Equal (VToken vWBTC TotalBorrowsCurrent) 2.5e8

Test "Borrow, and get a negative total cash situation"
    Invariant Success
    NewBorrow borrowAmount:1e8 borrowRate:0.000005
    Assert Equal (VToken vWBTC BorrowBalance Geoff) 1e8
    Assert Equal (VToken vWBTC TotalBorrowsCurrent) 1e8
    Assert Equal (Bep20 WBTC TokenBalance Geoff) 1e8
    Assert Equal (Bep20 WBTC TokenBalance vWBTC) 9e8
    -- Let's zoom way forward into the future
    FastForward 9800000 Blocks -- 1e8 * (1 + 9800000 * 0.000005)
    Assert Equal (VToken vWBTC BorrowBalance Geoff) 50e8
    Assert Equal (VToken vWBTC TotalBorrowsCurrent) 50e8
    -- Now let's repay one full token
    From Geoff (Bep20 WBTC Approve vWBTC 1.0e8)
    RepayBorrow Geoff 1.0e8 vWBTC
    Assert Equal (VToken vWBTC BorrowBalance Geoff) 49e8
    Assert Equal (VToken vWBTC TotalBorrowsCurrent) 49e8
    Assert Equal (Bep20 WBTC TokenBalance Geoff) 0e8
    Assert Equal (Bep20 WBTC TokenBalance vWBTC) 10e8

Test "Borrow, hold a few blocks, and repay behalf part"
    Invariant Success
    NewBorrow borrowAmount:1e8 borrowRate:0.000005
    Assert Equal (VToken vWBTC BorrowBalance Geoff) 1e8
    Assert Equal (VToken vWBTC TotalBorrowsCurrent) 1e8
    Assert Equal (Bep20 WBTC TokenBalance Geoff) 1e8
    Assert Equal (Bep20 WBTC TokenBalance vWBTC) 9e8
    -- Now let's add some blocks and see what happs
    FastForward 300000 Blocks -- 1e8 * (1 + 300000 * 0.000005)
    Assert Equal (VToken vWBTC BorrowBalance Geoff) 2.5e8
    -- Now let's repay one full token from another user
    Prep Torrey 1.0e8 WBTC vWBTC
    RepayBorrowBehalf Torrey Geoff 1.0e8 vWBTC
    Assert Equal (VToken vWBTC BorrowBalance Torrey) Zero
    Assert Equal (VToken vWBTC BorrowBalance Geoff) 1.5e8
    -- Let's check the overall numbers
    Assert Equal (Bep20 WBTC TokenBalance Torrey) 0e8
    Assert Equal (Bep20 WBTC TokenBalance Geoff) 1e8
    Assert Equal (Bep20 WBTC TokenBalance vWBTC) 10e8
    Assert Equal (VToken vWBTC TotalBorrowsCurrent) 1.5e8
    FastForward 200000 Blocks -- 1.5e8 * (1 + 200000 * 0.000005)
    Assert Equal (VToken vWBTC BorrowBalance Torrey) Zero
    Assert Equal (VToken vWBTC BorrowBalance Geoff) 3e8
    Assert Equal (VToken vWBTC TotalBorrowsCurrent) 3e8

Test "Prohibit repay by comptroller rejection due to mock unlist"
    NewBorrow borrowAmount:1e8 borrowRate:0.000005
    Assert Equal (VToken vWBTC BorrowBalance Geoff) 1e8
    Assert Equal (VToken vWBTC TotalBorrowsCurrent) 1e8
    -- Now let's add some blocks and see what happs
    FastForward 300000 Blocks -- 0.001e8 * (1 + 300000 * 0.000005)
    Assert Equal (VToken vWBTC BorrowBalance Geoff) 2.5e8
    -- Now let's repay fully
    AllowFailures
    Prep Geoff 10e8 WBTC vWBTC
    Expect Changes (Bep20 WBTC TokenBalance Geoff) Zero
    Expect Changes (Bep20 WBTC TokenBalance vWBTC) Zero
    Comptroller UnList vZRX -- Mock unlist ZRX
    RepayBorrow Geoff 2.5e8 vZRX
    Assert Revert "revert market not listed"
    -- Let's check the overall numbers
    Assert Equal (VToken vWBTC BorrowBalance Geoff) 2.5e8
    Assert Equal (VToken vWBTC TotalBorrowsCurrent) 2.5e8

Test "Borrow WBTC, can't repay when paused"
    NewBorrow borrowAmount:1e8 borrowRate:0.000005
    Assert Equal (VToken vWBTC BorrowBalance Geoff) 1e8
    Assert Equal (VToken vWBTC TotalBorrowsCurrent) 1e8
    Assert Equal (Bep20 WBTC TokenBalance Geoff) 1e8
    Assert Equal (Bep20 WBTC TokenBalance vWBTC) 9e8
    -- Now let's add some blocks and see what happs
    FastForward 300000 Blocks -- 1e18 * (1 + 300000 * 0.000005)
    Invariant Remains (VToken vWBTC BorrowBalance Geoff) 2.5e8
    -- Now let's repay one full token
    From Geoff (Bep20 WBTC Approve vWBTC 1.0e8)
    Bep20 WBTC Pause
    AllowFailures
    RepayBorrow Geoff 1e8 vWBTC
    Assert Revert

Test "Repay fails with insufficient allowance"
    NewBorrow borrowAmount:1e8 borrowRate:0.000005
    Assert Equal (VToken vWBTC BorrowBalance Geoff) 1e8
    Assert Equal (VToken vWBTC TotalBorrowsCurrent) 1e8
    -- Now let's add some blocks and see what happs
    FastForward 300000 Blocks -- 1e8 * (1 + 300000 * 0.000005)
    Assert Equal (VToken vWBTC BorrowBalance Geoff) 2.5e8
    -- Now let's repay fully
    AllowFailures
    Prep Geoff 100e8 WBTC vWBTC allowanceAmount:1.5e8
    Expect Changes (Bep20 WBTC TokenBalance Geoff) Zero
    Expect Changes (Bep20 WBTC TokenBalance vWBTC) Zero
    RepayBorrow Geoff 2.5e8 vWBTC
    --wbtc does not revert with reason in transfer from
    Assert Revert "revert"
    -- Let's check the overall numbers
    Assert Equal (VToken vWBTC BorrowBalance Geoff) 2.5e8
    Assert Equal (VToken vWBTC TotalBorrowsCurrent) 2.5e8

Test "Repay fails with insufficient balance"
    NewBorrow borrowAmount:1e8 borrowRate:0.000005
    Assert Equal (VToken vWBTC BorrowBalance Geoff) 1e8
    Assert Equal (VToken vWBTC TotalBorrowsCurrent) 1e8
    -- Now let's add some blocks and see what happs
    FastForward 300000 Blocks -- 1e8 * (1 + 300000 * 0.000005)
    Assert Equal (VToken vWBTC BorrowBalance Geoff) 2.5e8
    -- Now let's repay fully
    AllowFailures
    Prep Geoff 0e8 WBTC vWBTC allowanceAmount:2.5e8
    Expect Changes (Bep20 WBTC TokenBalance Geoff) Zero
    Expect Changes (Bep20 WBTC TokenBalance vWBTC) Zero
    RepayBorrow Geoff 2.5e8 vWBTC
    --wbtc does not revert with reason in transfer from
    Assert Revert "revert"
    -- Let's check the overall numbers
    Assert Equal (VToken vWBTC BorrowBalance Geoff) 2.5e8
    Assert Equal (VToken vWBTC TotalBorrowsCurrent) 2.5e8
