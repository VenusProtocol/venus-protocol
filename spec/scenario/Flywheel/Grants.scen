-- Tests for the grants and math patch

-- NewComptroller, but with markets listed so that we can make them venus markets in constructor
Macro FlywheelComptroller price=1.0 borrowRate=0.000005 venusInitAmount=5000000e18
    Unitroller Deploy
    PriceOracle Deploy Fixed price
    PriceOracleProxy Deploy Admin (PriceOracle Address) (Address Zero) (Address Zero) (Address Zero) (Address Zero) (Address Zero)
    --g1
    ComptrollerImpl Deploy ScenarioG1 ComptrollerScenG1
    Unitroller SetPendingImpl ComptrollerScenG1
    ComptrollerImpl ComptrollerScenG1 BecomeG1
    --list some tokens
    Comptroller SetPriceOracle (PriceOracleProxy Address)
    Comptroller SetMaxAssets 20
    Comptroller SetCloseFactor 0.5
    Comptroller LiquidationIncentive 1.1
    Comptroller SetVenusRate 1e18
    NewVToken ZRX vZRX
    NewVToken BAT vBAT
    Support vZRX collateralFactor:0.5
    Support vBAT collateralFactor:0.5
    Comptroller AddVenusMarkets (vZRX vBAT)
    Bep20 Deploy Standard XVS "XVS Token" 18
    Give (Address Comptroller) venusInitAmount XVS
    Comptroller Send "setXVSAddress(address)" (Address XVS)
    Bep20 Deploy Standard VAI "VAI Token" 18
    Give (Address Comptroller) venusInitAmount VAI
    Comptroller Send "setVAIAddress(address)" (Address VAI)

Macro GrantsComptroller
    FlywheelComptroller
    -- g3
    ComptrollerImpl Deploy ScenarioG3 ComptrollerScen
    Unitroller SetPendingImpl ComptrollerScen
    ComptrollerImpl ComptrollerScen BecomeG3
    -- g4
    ComptrollerImpl Deploy ScenarioG4 ComptrollerScen
    Unitroller SetPendingImpl ComptrollerScen
    ComptrollerImpl ComptrollerScen BecomeG4
    -- g5
    ComptrollerImpl Deploy ScenarioG5 ComptrollerScen
    Unitroller SetPendingImpl ComptrollerScen
    ComptrollerImpl ComptrollerScen BecomeG5
    -- current
    ComptrollerImpl Deploy Scenario ComptrollerScen
    Unitroller SetPendingImpl ComptrollerScen
    ComptrollerImpl ComptrollerScen Become
    ComptrollerLens Deploy
    Comptroller SetComptrollerLens (Address ComptrollerLens)
    Comptroller SetMarketSupplyCaps (vBAT) (1000e18)
    Comptroller SetMarketSupplyCaps (vZRX) (1000e18)

Macro InitSpeeds
    Prep Geoff 100e18 ZRX vZRX
    Mint Geoff 50e18 vZRX--tokenbalance = 50e18 / 2e9 = 2.5e10
    Prep Coburn Some BAT vBAT
    Mint Coburn 6e18 vBAT--tokenbalance = 6e18 / 2e9 = 3e9
    EnterMarkets Coburn vBAT
    Borrow Coburn 1e18 vZRX
    Comptroller SetVenusSpeed vZRX 1
    Comptroller SetVenusSpeed vBAT 1
    Comptroller RefreshVenusSpeeds
    Comptroller Send "setXVSAddress(address)" (Address XVS)

Test "XVS can be granted in combination with liquidity rewards"
    GrantsComptroller
    InitSpeeds
    Assert Equal (Comptroller VenusAccrued Geoff) 0
    Assert Equal (Bep20 XVS TokenBalance Geoff) 0
    FastForward 1000 Blocks
    Comptroller ClaimVenus Geoff
    Comptroller Send "_grantXVS(address,uint256)" (Address Geoff) 1000
    Assert Equal (Comptroller VenusAccrued Geoff) 0
    Assert Equal (Bep20 XVS TokenBalance Geoff) 1000000000000000001000

Test "XVS can be granted"
    -- Can be granted once
    GrantsComptroller
    InitSpeeds
    Assert Equal (Comptroller VenusAccrued Geoff) 0
    Assert Equal (Bep20 XVS TokenBalance Geoff) 0
    Comptroller Send "_grantXVS(address,uint256)" (Address Geoff) 1000
    Assert Equal (Comptroller VenusAccrued Geoff) 0
    Assert Equal (Bep20 XVS TokenBalance Geoff) 1000
    -- Assert Log VenusGranted (recipient (Address Geoff)) (amount "1000")
    -- Can be granted multiple times
    Comptroller Send "_grantXVS(address,uint256)" (Address Geoff) 2000
    Assert Equal (Comptroller VenusAccrued Geoff) 0
    Assert Equal (Bep20 XVS TokenBalance Geoff) 3000
